import React, { useState, useMemo, useEffect } from 'react';
import '.CustomTable.scss';
import { customTableSearch } from '..componentsCommonSearchBoxMySearch';

import CustomPagination from '.CustomPagination';
import { Table, Thead, Tbody, Tr, Th, Td, } from 'react-super-responsive-table';
import 'react-super-responsive-tabledistSuperResponsiveTableStyle.css';
import { Input } from 'reactstrap';

const CustomTable = ({
    data,
    columns,
    onDataSizeChange = () = { },
    itemsPerPage = 15,
    defaultSorted = [],
    showNoDataIndication = true,
    selectRow,
    showSelectionColumn = true,
    keyField,
    ...rest
}) = {
    const [searchText, setSearchText] = useState('');
    const [currentPage, setCurrentPage] = useState(1);
    const [selectedRows, setSelectedRows] = useState([]);
    const [sortField, setSortField] = useState(null);
    const [sortOrder, setSortOrder] = useState('asc');

    const handleSearch = (val) = {
        setSearchText(val);
        setCurrentPage(1);
    };

    customTableSearch({ onSearch handleSearch });

    const filteredData = useMemo(() = {
        return data.filter((row) =
            columns.some((column) = {
                const columnValue = row[column.dataField];
                const isHidden = column.hidden;

                if (columnValue === null  isHidden  columnValue === undefined) {
                    return false;
                }
                return columnValue.toString().toLowerCase().includes(searchText.toLowerCase());
            })
        );
    }, [data, searchText, columns]);

    const sortedData = useMemo(() = {
        if (sortField && sortOrder) {
            return [...filteredData].sort((a, b) = {
                const aValue = a[sortField];
                const bValue = b[sortField];
                return sortOrder === 'asc'  aValue.localeCompare(bValue)  bValue.localeCompare(aValue);
            });
        }
        return filteredData;
    }, [filteredData, sortField, sortOrder]);

    const pageCount = Math.ceil(sortedData.length  itemsPerPage);
    const startIndex = (currentPage - 1)  itemsPerPage;
    const endIndex = currentPage  itemsPerPage;

    const slicedData = sortedData.slice(startIndex, endIndex);

    useEffect(() = {
        if (defaultSorted.length  0) {
            const defaultSort = defaultSorted[0];
            setSortField(defaultSort.dataField);
            setSortOrder(defaultSort.order);
        }
    }, [defaultSorted]);

    const handlePageChange = (page) = {
        setCurrentPage(page);
    };

    const handleSelectAllRows = () = {
        const nonSelected = selectRow && selectRow.nonSelected  selectRow.nonSelected  [];
        const selectableRows = slicedData.filter((row) = !nonSelected.includes(row[keyField]));

        if (selectedRows.length === selectableRows.length) {
            setSelectedRows([]);
        } else {
            setSelectedRows([...selectableRows.map((row) = row[keyField])]);
        }
    };

    const handleSort = (field) = {
        if (sortField === field) {
            setSortOrder(sortOrder === 'asc'  'desc'  'asc');
        } else {
            setSortField(field);
            setSortOrder('asc');
        }
    };

    const handleRowSelect = (row) = {
        const rowId = row[keyField];

        setSelectedRows(() = {

            if (selectedRows.includes(rowId)) {
                return selectedRows.filter((selectedRow) = selectedRow !== rowId);
            } else {
                return [...selectedRows, rowId];
            }
        });
    };



    const isAllSelected = slicedData.every(row = selectedRows.includes(row[keyField])  (selectRow && selectRow.nonSelected.includes(row[keyField])));

    return (
        div className=table-rep-plugin
            div className=table-responsive mb-0 data-pattern=priority-columns
                Table className=table  table-bordered
                    Thead
                        Tr
                            {showSelectionColumn && selectRow && (
                                Th
                                    Input
                                        type=checkbox
                                        checked={isAllSelected}
                                        onChange={handleSelectAllRows}
                                    
                                Th
                            )}
                            {columns.map((column, key) = (
                                Th
                                    key={key}
                                    onClick={() = {
                                        if (column.sort) {
                                            handleSort(column.dataField);
                                        }
                                    }}
                                
                                    {column.text}{' '}
                                    {column.sort && sortField === column.dataField && (sortOrder === 'asc'  '↑'  '↓')}
                                Th
                            ))}
                        Tr
                    Thead
                    Tbody
                        {slicedData.length === 0 && showNoDataIndication && (
                            Tr
                                Td colSpan={showSelectionColumn && selectRow  columns.length + 1  columns.length}
                                    No data available
                                Td
                            Tr
                        )}
                        {slicedData.map((row) = {
                            return (

                                Tr
                                    key={row[keyField]}
                                    data-selected={selectedRows.includes(row[keyField])}
                                    data-record-deleted={row.IsRecordDeleted}
                                 onClick={() = handleRowSelect(row)}
                                
                                    {showSelectionColumn && selectRow && (
                                        Td
                                            Input
                                                type=checkbox
                                                className='check-disabled'
                                                checked={selectedRows.includes(row[keyField])}
                                                disabled={
                                                    (selectRow && selectRow.nonSelected.includes(row[keyField]))
                                                }
                                                onChange={() = handleRowSelect(row)}
                                            
                                        Td
                                    )}
                                    {columns.map((column, colIndex) = (
                                        Td key={colIndex} data-label={column.text}
                                            {column.formatter
                                                 column.formatter(row[column.dataField], row, colIndex, column.formatExtraData)
                                                 row[column.dataField]}
                                        Td
                                    ))}
                                Tr
                            )
                        })}
                    Tbody
                Table
                CustomPagination pageCount={pageCount} currentPage={currentPage} handlePageChange={handlePageChange} 
            div
        div
    );
};

export default CustomTable;

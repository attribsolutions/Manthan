import { on, addClass, removeClass, ready, find } from 'domassist';

var CLASSES = {
  OVERLAY: 'offcanvas-overlay',
  VISIBLE: 'visible',
  OPEN: 'open',
  LOCK_OVERFLOW: 'offcanvas-is-open',
  READY: 'offcanvas-ready'
};
var SELECTORS = {
  CANVAS: '[data-offcanvas]',
  FIXED: '[data-offcanvas-fixed]'
};

var OffCanvas = /*#__PURE__*/function () {
  function OffCanvas(options) {
    this.name = options.name;
    this.el = options.el;
    this.options = options;
    this.visible = false;
    this.boundSetup = this.setup.bind(this);
    this.boundToggle = this.toggle.bind(this);
    this.boundHide = this.hide.bind(this);
    this.fixedEl = find(SELECTORS.FIXED);
    this.transitionTime = parseFloat(window.getComputedStyle(this.el).transitionDuration) * 1000;
    this.setup();
    this.setupEvents();
  }

  var _proto = OffCanvas.prototype;

  _proto.setupEvents = function setupEvents() {
    on(window, 'resize', this.boundSetup);
    on(window, 'orientationchange', this.boundSetup);
  };

  _proto.destroy = function destroy() {
    var _this = this;

    this.overlay.removeEventListener('click', this.boundHide);
    this.options.trigger.forEach(function (trigger) {
      return trigger.removeEventListener('click', _this.boundToggle);
    });
    this.overlay.parentNode.removeChild(this.overlay);
    this.overlay = null;
    this.initialized = false;
  };

  _proto.setup = function setup() {
    if (this.options.match && !window.matchMedia(this.options.match).matches) {
      if (this.initialized) {
        this.destroy();
      }

      return;
    }

    if (this.initialized) {
      return;
    }

    this.initialized = true; // Setting some default id for ARIA to work

    if (!this.el.id) {
      this.el.id = "offcanvas-" + this.name;
    }

    this.updateAria(); // Creating overlay

    this.setupOverlay(); // Setting up the rest

    this.setupTriggers(this.options.trigger); // Making it ready to fix browser issues

    setTimeout(function () {
      addClass(document.body, CLASSES.READY);
    }, this.transitionTime);
  };

  _proto.setupOverlay = function setupOverlay() {
    if (!this.overlay) {
      this.overlay = document.createElement('div');
      addClass(this.overlay, CLASSES.OVERLAY);
      document.body.appendChild(this.overlay);
      this.overlay.addEventListener('click', this.boundHide);
    }
  };

  _proto.setupTriggers = function setupTriggers(els) {
    var _this2 = this;

    els.forEach(function (el) {
      el.addEventListener('click', _this2.boundToggle);
      el.setAttribute('aria-controls', _this2.el.id);
    });
  };

  _proto.updateAria = function updateAria() {
    var _this3 = this;

    this.options.trigger.forEach(function (trigger) {
      trigger.setAttribute('aria-expanded', "" + _this3.visible);
    });
    this.el.setAttribute('aria-hidden', "" + !this.visible);
  };

  _proto.show = function show() {
    if (this.visible) {
      return;
    }

    this.visible = true;
    addClass(this.el, CLASSES.OPEN);
    addClass(this.overlay, CLASSES.VISIBLE);
    addClass(document.body, CLASSES.LOCK_OVERFLOW);

    if (this.fixedEl) {
      this.fixedEl.forEach(function (el) {
        el.style.top = (document.documentElement.scrollTop || document.body.scrollTop) + "px";
      });
    }

    this.updateAria();
  };

  _proto.hide = function hide() {
    var _this4 = this;

    if (!this.visible) {
      return;
    }

    this.visible = false;
    removeClass(this.el, CLASSES.OPEN);
    removeClass(this.overlay, CLASSES.VISIBLE);
    removeClass(document.body, CLASSES.LOCK_OVERFLOW);

    if (this.fixedEl) {
      setTimeout(function () {
        _this4.fixedEl.forEach(function (el) {
          el.style.top = '';
        });
      }, this.transitionTime);
    }

    this.updateAria();
  };

  _proto.toggle = function toggle() {
    if (!this.visible) {
      this.show();
    } else {
      this.hide();
    }
  };

  return OffCanvas;
}();

OffCanvas.autoLoad = true;
ready(function () {
  if (OffCanvas.autoLoad === false) {
    return;
  }

  find(SELECTORS.CANVAS).forEach(function (el) {
    var name = el.getAttribute('data-offcanvas');
    new OffCanvas({
      name: name,
      el: el,
      trigger: find("[data-offcanvas-trigger=\"" + name + "\"]"),
      match: el.getAttribute('data-offcanvas-match')
    });
  });
});

export default OffCanvas;
//# sourceMappingURL=offcanvas.js.map

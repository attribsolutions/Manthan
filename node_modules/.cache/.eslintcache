[{"D:\\GitProjects\\Manthan\\src\\index.js":"1","D:\\GitProjects\\Manthan\\src\\i18n.js":"2","D:\\GitProjects\\Manthan\\src\\App.js":"3","D:\\GitProjects\\Manthan\\src\\store\\index.js":"4","D:\\GitProjects\\Manthan\\src\\routes\\middleware\\Authmiddleware.js":"5","D:\\GitProjects\\Manthan\\src\\routes\\allRoutes.js":"6","D:\\GitProjects\\Manthan\\src\\components\\NonAuthLayout.js":"7","D:\\GitProjects\\Manthan\\src\\components\\VerticalLayout\\index.js":"8","D:\\GitProjects\\Manthan\\src\\components\\HorizontalLayout\\index.js":"9","D:\\GitProjects\\Manthan\\src\\store\\sagas.js":"10","D:\\GitProjects\\Manthan\\src\\store\\reducers.js":"11","D:\\GitProjects\\Manthan\\src\\routes\\route_url.js":"12","D:\\GitProjects\\Manthan\\src\\components\\HorizontalLayout\\Footer.js":"13","D:\\GitProjects\\Manthan\\src\\store\\actions.js":"14","D:\\GitProjects\\Manthan\\src\\components\\HorizontalLayout\\Header.js":"15","D:\\GitProjects\\Manthan\\src\\components\\HorizontalLayout\\Navbar.js":"16","D:\\GitProjects\\Manthan\\src\\pages\\Dashboard\\index.js":"17","D:\\GitProjects\\Manthan\\src\\pages\\Authentication\\Login.js":"18","D:\\GitProjects\\Manthan\\src\\pages\\Authentication\\ForgetPassword.js":"19","D:\\GitProjects\\Manthan\\src\\pages\\Authentication\\Logout.js":"20","D:\\GitProjects\\Manthan\\src\\pages\\Authentication\\ResetPassword.js":"21","D:\\GitProjects\\Manthan\\src\\pages\\Authentication\\SendOTP.js":"22","D:\\GitProjects\\Manthan\\src\\pages\\Utility\\Error500.js":"23","D:\\GitProjects\\Manthan\\src\\pages\\Utility\\Error404.js":"24","D:\\GitProjects\\Manthan\\src\\pages\\Authentication\\EnterOTP.js":"25","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ModulesPages\\Modules.js":"26","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ModulesPages\\ModulesList.js":"27","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\CompanyPages\\CompanyList.js":"28","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\CompanyPages\\CompanyModule.js":"29","D:\\GitProjects\\Manthan\\src\\pages\\Authentication\\SelectDivisionPage.js":"30","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\Page-Pages\\PageList.js":"31","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\UserRegistrationPages\\UserList.js":"32","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\Page-Pages\\PageMaster.js":"33","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\UserRegistrationPages\\UserRegistration.js":"34","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\EmployeePages\\EmployeeList.js":"35","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\RoleMasterPages\\RoleList.js":"36","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\RoleMasterPages\\RoleMaster.js":"37","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemList.js":"38","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PartyPages\\PartyList.js":"39","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PartyPages\\PartyMaster.js":"40","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\SearchBox\\SearchBoxSecond.js":"41","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\SearchBox\\SerachBox3.js":"42","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\RoleAccessPages\\RoleAccessListPage.js":"43","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\RoleAccessPages\\RoleAccessCopyFunctionality.js":"44","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\itemIndex.js":"45","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\EmployeeTypes\\EmployeeTypesMaster.js":"46","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\EmployeeTypes\\EmployeeTypeList.js":"47","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\RoleAccessPages\\RoleAccessAdd.js":"48","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PartyTypes\\PartyType.js":"49","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PartyTypes\\PartyTypeList.js":"50","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\CategoryTypePages\\CategoryTypeMaster.js":"51","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\CategoryTypePages\\CategoryTypeList.js":"52","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\EmployeePages\\EmployeeMaster.js":"53","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\CategoryPages\\CategoryMaster.js":"54","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\VehiclePages\\VehicleList.js":"55","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\SubCategoryPages\\SubCategoryMaster.js":"56","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\SubCategoryPages\\SubCategoryList.js":"57","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\VehiclePages\\VehicleMaster.js":"58","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\DriverPage\\DriverList.js":"59","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\CompanyGroupPages\\CompanyGroupList.js":"60","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\CompanyGroupPages\\CompanyGroupMaster.js":"61","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\CategoryPages\\CategoryList.js":"62","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PriceList\\PriceList.js":"63","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PriceList\\PriceMaster.js":"64","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\MRPMaster\\MRPMaster.js":"65","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\MRPMaster\\MRPList.js":"66","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\MarginMaster\\MarginMaster.js":"67","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\MarginMaster\\MarginList.js":"68","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\TermsAndCondtions\\TermsAndCondtionsMaster.js":"69","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\GroupPage\\GroupMaster.js":"70","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\GroupPage\\GroupList.js":"71","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\TermsAndCondtions\\TermsAndCondtionsList.js":"72","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\GroupTypePage\\GroupTypeList.js":"73","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\GroupTypePage\\GroupTypeMaster.js":"74","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PartySubPartyPages\\partysubPartyList.js":"75","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PartySubPartyPages\\PartySubParty.js":"76","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PartyItemPage\\PartyItems.js":"77","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\GSTPages\\GSTList.js":"78","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\DriverPage\\DriverMaster.js":"79","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\GSTPages\\GSTMaster.js":"80","D:\\GitProjects\\Manthan\\src\\pages\\Purchase\\Order\\OrderList.js":"81","D:\\GitProjects\\Manthan\\src\\pages\\Purchase\\Order\\Order.js":"82","D:\\GitProjects\\Manthan\\src\\components\\VerticalLayout\\Footer.js":"83","D:\\GitProjects\\Manthan\\src\\components\\Common\\Spinner.js":"84","D:\\GitProjects\\Manthan\\src\\components\\Common\\CustomAlert.js":"85","D:\\GitProjects\\Manthan\\src\\store\\CommonAPI\\SupplierRedux\\saga.js":"86","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyItemsRedux\\reducer.js":"87","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GSTRedux\\reducer.js":"88","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartySubPartyRedux\\reducer.js":"89","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GroupRedux\\reducer.js":"90","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GSTRedux\\action.js":"91","D:\\GitProjects\\Manthan\\src\\components\\Common\\Breadcrumb.js":"92","D:\\GitProjects\\Manthan\\src\\components\\Common\\CommonSaveButton.js":"93","D:\\GitProjects\\Manthan\\src\\components\\Common\\Breadcrumb3.js":"94","D:\\GitProjects\\Manthan\\src\\pages\\Purchase\\Order\\OrderPageTemsTable.js":"95","D:\\GitProjects\\Manthan\\src\\pages\\Purchase\\Order\\OrderPageCalulation.js":"96","D:\\GitProjects\\Manthan\\src\\store\\CommonAPI\\SupplierRedux\\actions.js":"97","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyItemsRedux\\action.js":"98","D:\\GitProjects\\Manthan\\src\\components\\Common\\CommonGetRoleAccessFunction.js":"99","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\ItemsRedux\\action.js":"100","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartySubPartyRedux\\action.js":"101","D:\\GitProjects\\Manthan\\src\\components\\Common\\CmponentRelatedCommonFile\\validationFunction.js":"102","D:\\GitProjects\\Manthan\\src\\components\\Common\\CmponentRelatedCommonFile\\commonListPage.js":"103","D:\\GitProjects\\Manthan\\src\\components\\Common\\CmponentRelatedCommonFile\\SearchBox\\MySearch.js":"104","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\DriverRedux\\action.js":"105","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\TermsAndCondtionsRedux\\actions.js":"106","D:\\GitProjects\\Manthan\\src\\store\\Purchase\\OrderPageRedux\\actions.js":"107","D:\\GitProjects\\Manthan\\src\\helpers\\url_helper.js":"108","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyItemsRedux\\actionType.js":"109","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GSTRedux\\actionType.js":"110","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartySubPartyRedux\\actionType.js":"111","D:\\GitProjects\\Manthan\\src\\store\\CommonAPI\\SupplierRedux\\actionType.js":"112","D:\\GitProjects\\Manthan\\src\\helpers\\backend_helper.js":"113","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GroupRedux\\actionType.js":"114","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\CustomAlertRedux\\actions.js":"115","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\ItemsRedux\\actionType.js":"116","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\TermsAndCondtionsRedux\\actionTypes.js":"117","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\DriverRedux\\actionType.js":"118","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\Breadcrumb\\actions.js":"119","D:\\GitProjects\\Manthan\\src\\components\\Common\\CmponentRelatedCommonFile\\listPageCommonButtons.js":"120","D:\\GitProjects\\Manthan\\src\\store\\Purchase\\OrderPageRedux\\actionType.js":"121","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GroupRedux\\action.js":"122","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PartyPages\\Tree.js":"123","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\CommonError\\actions.js":"124","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GroupTypeRedux\\action.js":"125","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\MarginMasterRedux\\action.js":"126","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\MRPMasterRedux\\action.js":"127","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyRedux\\action.js":"128","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PriceList\\action.js":"129","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CategoryRedux\\action.js":"130","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CompanyGroupRedux\\actionType.js":"131","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CompanyGroupRedux\\action.js":"132","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\VehicleRedux\\action.js":"133","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\SubCategoryRedux\\action.js":"134","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\M_EmployeeRedux\\action.js":"135","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CategoryTypeRedux\\actions.js":"136","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyTypeRedux\\action.js":"137","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\EmployeeTypeRedux\\action.js":"138","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\MarginTab\\index.js":"139","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CompanyRedux\\actions.js":"140","D:\\GitProjects\\Manthan\\src\\helpers\\api_helper.js":"141","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\CustomAlertRedux\\actionType.js":"142","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\Breadcrumb\\actionType.js":"143","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Division_Tab\\index.js":"144","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PartyPages\\index.js":"145","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Category_Tab\\index.js":"146","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Group_Tab\\index.js":"147","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\MRP_Tab\\index.js":"148","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\GST_Tab\\index.js":"149","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\CommonError\\actionType.js":"150","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GroupTypeRedux\\actionType.js":"151","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\MarginMasterRedux\\actionType.js":"152","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\MRPMasterRedux\\actionTypes.js":"153","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyRedux\\actionTypes.js":"154","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PriceList\\actionType.js":"155","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CategoryRedux\\actionTypes.js":"156","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\VehicleRedux\\actionType.js":"157","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\SubCategoryRedux\\actionTypes.js":"158","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\M_EmployeeRedux\\actionTypes.js":"159","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CategoryTypeRedux\\actionTypes.js":"160","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyTypeRedux\\actionTypes.js":"161","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\EmployeeTypeRedux\\actionTypes.js":"162","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\MarginTab\\Table.js":"163","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CompanyRedux\\actionType.js":"164","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PartyPages\\Table.js":"165","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Group_Tab\\Table.js":"166","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\MRP_Tab\\Table.js":"167","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\GST_Tab\\Table.js":"168","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Category_Tab\\Table.js":"169","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Division_Tab\\Table.js":"170","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\RoleMasterRedux\\action.js":"171","D:\\GitProjects\\Manthan\\src\\pages\\Authentication\\CarouselPage.js":"172","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\UserRegistrationRedux\\actions.js":"173","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\HPagesRedux\\actions.js":"174","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\ModulesRedux\\actions.js":"175","D:\\GitProjects\\Manthan\\src\\components\\CommonForBoth\\RightSidebar.js":"176","D:\\GitProjects\\Manthan\\src\\components\\CommonForBoth\\Menus\\LightDark.js":"177","D:\\GitProjects\\Manthan\\src\\components\\CommonForBoth\\TopbarDropdown\\ProfileMenu.js":"178","D:\\GitProjects\\Manthan\\src\\components\\CommonForBoth\\TopbarDropdown\\LanguageDropdown.js":"179","D:\\GitProjects\\Manthan\\src\\components\\CommonForBoth\\TopbarDropdown\\NotificationDropdown.js":"180","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\RoleAccessRedux\\actions.js":"181","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GroupTypeRedux\\reducer.js":"182","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\TermsAndCondtionsRedux\\reducer.js":"183","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\Spinner\\actions.js":"184","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\PageFiled\\actions.js":"185","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\MarginMasterRedux\\reducer.js":"186","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\MRPMasterRedux\\reducer.js":"187","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PriceList\\reducer.js":"188","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\DriverRedux\\reducer.js":"189","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CompanyGroupRedux\\reducer.js":"190","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\VehicleRedux\\reducer.js":"191","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\SubCategoryRedux\\reducer.js":"192","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CategoryRedux\\reducer.js":"193","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CategoryTypeRedux\\reducer.js":"194","D:\\GitProjects\\Manthan\\src\\store\\layout\\actions.js":"195","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\RoleMasterRedux\\actionTypes.js":"196","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\HPagesRedux\\actionType.js":"197","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\EmployeeTypeRedux\\reducer.js":"198","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyTypeRedux\\reducer.js":"199","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\RoleAccessRedux\\reducer.js":"200","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyRedux\\reducer.js":"201","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\ItemsRedux\\reducer.js":"202","D:\\GitProjects\\Manthan\\src\\store\\auth\\login\\actions.js":"203","D:\\GitProjects\\Manthan\\src\\store\\auth\\profile\\actions.js":"204","D:\\GitProjects\\Manthan\\src\\store\\auth\\forgetpwd\\actions.js":"205","D:\\GitProjects\\Manthan\\src\\store\\auth\\register\\actions.js":"206","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\M_EmployeeRedux\\reducer.js":"207","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\RoleMasterRedux\\reducer.js":"208","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\UserRegistrationRedux\\reducer.js":"209","D:\\GitProjects\\Manthan\\src\\store\\CommonAPI\\SupplierRedux\\reducer.js":"210","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\HPagesRedux\\reducer.js":"211","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CompanyRedux\\reducer.js":"212","D:\\GitProjects\\Manthan\\src\\store\\Purchase\\OrderPageRedux\\reducer.js":"213","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\ModulesRedux\\reducer.js":"214","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\PageFiled\\reducer.js":"215","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\Breadcrumb\\reducer.js":"216","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\CommonError\\reducer.js":"217","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\CustomAlertRedux\\reducer.js":"218","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\Spinner\\reducer.js":"219","D:\\GitProjects\\Manthan\\src\\store\\auth\\forgetpwd\\reducer.js":"220","D:\\GitProjects\\Manthan\\src\\store\\auth\\profile\\reducer.js":"221","D:\\GitProjects\\Manthan\\src\\store\\auth\\register\\reducer.js":"222","D:\\GitProjects\\Manthan\\src\\store\\auth\\login\\reducer.js":"223","D:\\GitProjects\\Manthan\\src\\store\\layout\\reducer.js":"224","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyItemsRedux\\saga.js":"225","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartySubPartyRedux\\saga.js":"226","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\CustomSearchRedux\\reducer.js":"227","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GroupRedux\\saga.js":"228","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GSTRedux\\saga.js":"229","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GroupTypeRedux\\saga.js":"230","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\TermsAndCondtionsRedux\\saga.js":"231","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\MarginMasterRedux\\saga.js":"232","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\MRPMasterRedux\\saga.js":"233","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CompanyGroupRedux\\saga.js":"234","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PriceList\\saga.js":"235","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\DriverRedux\\saga.js":"236","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\SubCategoryRedux\\saga.js":"237","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\VehicleRedux\\saga.js":"238","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CategoryTypeRedux\\saga.js":"239","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CategoryRedux\\saga.js":"240","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyTypeRedux\\saga.js":"241","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\EmployeeTypeRedux\\saga.js":"242","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\RoleAccessRedux\\saga.js":"243","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyRedux\\saga.js":"244","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\ItemsRedux\\saga.js":"245","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\UserRegistrationRedux\\actionType.js":"246","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\ModulesRedux\\actionType.js":"247","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\RoleMasterRedux\\saga.js":"248","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\M_EmployeeRedux\\saga.js":"249","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\UserRegistrationRedux\\saga.js":"250","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\HPagesRedux\\saga.js":"251","D:\\GitProjects\\Manthan\\src\\store\\Purchase\\OrderPageRedux\\saga.js":"252","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\RoleAccessRedux\\actionType.js":"253","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CompanyRedux\\saga.js":"254","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\Spinner\\actionType.js":"255","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\PageFiled\\actionType.js":"256","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\ModulesRedux\\saga.js":"257","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\CustomSearchRedux\\saga.js":"258","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\CustomAlertRedux\\saga.js":"259","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\Spinner\\saga.js":"260","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\PageFiled\\saga.js":"261","D:\\GitProjects\\Manthan\\src\\store\\layout\\saga.js":"262","D:\\GitProjects\\Manthan\\src\\store\\auth\\login\\saga.js":"263","D:\\GitProjects\\Manthan\\src\\store\\auth\\forgetpwd\\saga.js":"264","D:\\GitProjects\\Manthan\\src\\store\\auth\\profile\\saga.js":"265","D:\\GitProjects\\Manthan\\src\\store\\auth\\register\\saga.js":"266","D:\\GitProjects\\Manthan\\src\\store\\layout\\actionTypes.js":"267","D:\\GitProjects\\Manthan\\src\\common\\languages.js":"268","D:\\GitProjects\\Manthan\\src\\constants\\layout.js":"269","D:\\GitProjects\\Manthan\\src\\store\\auth\\login\\actionTypes.js":"270","D:\\GitProjects\\Manthan\\src\\store\\auth\\profile\\actionTypes.js":"271","D:\\GitProjects\\Manthan\\src\\store\\auth\\forgetpwd\\actionTypes.js":"272","D:\\GitProjects\\Manthan\\src\\store\\auth\\register\\actionTypes.js":"273","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\CustomSearchRedux\\actionType.js":"274","D:\\GitProjects\\Manthan\\src\\components\\VerticalLayout\\Sidebar.js":"275","D:\\GitProjects\\Manthan\\src\\components\\VerticalLayout\\Header.js":"276","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\CustomSearchRedux\\actions.js":"277","D:\\GitProjects\\Manthan\\src\\helpers\\firebase_helper.js":"278","D:\\GitProjects\\Manthan\\src\\components\\VerticalLayout\\SidebarContent.js":"279","D:\\GitProjects\\Manthan\\src\\components\\Common\\CmponentRelatedCommonFile\\SearchBox\\index.js":"280","D:\\GitProjects\\Manthan\\src\\components\\VerticalLayout\\aaaa.js":"281"},{"size":402,"mtime":1668418803093,"results":"282","hashOfConfig":"283"},{"size":1284,"mtime":1668418803093,"results":"284","hashOfConfig":"283"},{"size":2108,"mtime":1668418802866,"results":"285","hashOfConfig":"283"},{"size":468,"mtime":1668418803168,"results":"286","hashOfConfig":"283"},{"size":1513,"mtime":1668418803131,"results":"287","hashOfConfig":"283"},{"size":9279,"mtime":1668418726630,"results":"288","hashOfConfig":"283"},{"size":361,"mtime":1668418803087,"results":"289","hashOfConfig":"283"},{"size":4669,"mtime":1668418803088,"results":"290","hashOfConfig":"283"},{"size":4196,"mtime":1668418803087,"results":"291","hashOfConfig":"283"},{"size":3473,"mtime":1668419397656,"results":"292","hashOfConfig":"283"},{"size":3856,"mtime":1668419397656,"results":"293","hashOfConfig":"283"},{"size":1948,"mtime":1668418803131,"results":"294","hashOfConfig":"283"},{"size":743,"mtime":1668418803085,"results":"295","hashOfConfig":"283"},{"size":903,"mtime":1668419397656,"results":"296","hashOfConfig":"283"},{"size":8961,"mtime":1668418803086,"results":"297","hashOfConfig":"283"},{"size":26174,"mtime":1668418803086,"results":"298","hashOfConfig":"283"},{"size":745,"mtime":1668418803125,"results":"299","hashOfConfig":"283"},{"size":6006,"mtime":1668418803123,"results":"300","hashOfConfig":"283"},{"size":11596,"mtime":1668418803123,"results":"301","hashOfConfig":"283"},{"size":506,"mtime":1668418803124,"results":"302","hashOfConfig":"283"},{"size":5466,"mtime":1668418803124,"results":"303","hashOfConfig":"283"},{"size":3395,"mtime":1668418803124,"results":"304","hashOfConfig":"283"},{"size":1621,"mtime":1668419397650,"results":"305","hashOfConfig":"283"},{"size":1432,"mtime":1668418803126,"results":"306","hashOfConfig":"283"},{"size":3554,"mtime":1668418803123,"results":"307","hashOfConfig":"283"},{"size":16987,"mtime":1668419397636,"results":"308","hashOfConfig":"283"},{"size":2186,"mtime":1668418803113,"results":"309","hashOfConfig":"283"},{"size":2289,"mtime":1668419397628,"results":"310","hashOfConfig":"283"},{"size":18120,"mtime":1668419397628,"results":"311","hashOfConfig":"283"},{"size":4855,"mtime":1668419397649,"results":"312","hashOfConfig":"283"},{"size":1916,"mtime":1668419397637,"results":"313","hashOfConfig":"283"},{"size":2230,"mtime":1668418803122,"results":"314","hashOfConfig":"283"},{"size":64241,"mtime":1668419397638,"results":"315","hashOfConfig":"283"},{"size":25749,"mtime":1668419397646,"results":"316","hashOfConfig":"283"},{"size":2066,"mtime":1668418803102,"results":"317","hashOfConfig":"283"},{"size":1902,"mtime":1668418803119,"results":"318","hashOfConfig":"283"},{"size":17152,"mtime":1668419397644,"results":"319","hashOfConfig":"283"},{"size":1975,"mtime":1668419397633,"results":"320","hashOfConfig":"283"},{"size":2252,"mtime":1668419397639,"results":"321","hashOfConfig":"283"},{"size":47527,"mtime":1668418728668,"results":"322","hashOfConfig":"283"},{"size":11544,"mtime":1668418803120,"results":"323","hashOfConfig":"283"},{"size":3761,"mtime":1668418803120,"results":"324","hashOfConfig":"283"},{"size":12577,"mtime":1668419397643,"results":"325","hashOfConfig":"283"},{"size":8220,"mtime":1668418803118,"results":"326","hashOfConfig":"283"},{"size":74555,"mtime":1668419397634,"results":"327","hashOfConfig":"283"},{"size":15116,"mtime":1668419397631,"results":"328","hashOfConfig":"283"},{"size":2177,"mtime":1668419397630,"results":"329","hashOfConfig":"283"},{"size":52815,"mtime":1668419397643,"results":"330","hashOfConfig":"283"},{"size":14935,"mtime":1668419397641,"results":"331","hashOfConfig":"283"},{"size":2064,"mtime":1668418803116,"results":"332","hashOfConfig":"283"},{"size":11260,"mtime":1668419397627,"results":"333","hashOfConfig":"283"},{"size":2159,"mtime":1668418803099,"results":"334","hashOfConfig":"283"},{"size":29918,"mtime":1668419397629,"results":"335","hashOfConfig":"283"},{"size":14013,"mtime":1668419397626,"results":"336","hashOfConfig":"283"},{"size":2101,"mtime":1668419397648,"results":"337","hashOfConfig":"283"},{"size":14430,"mtime":1668419397645,"results":"338","hashOfConfig":"283"},{"size":2071,"mtime":1668418803122,"results":"339","hashOfConfig":"283"},{"size":28604,"mtime":1668419397648,"results":"340","hashOfConfig":"283"},{"size":2100,"mtime":1668419397629,"results":"341","hashOfConfig":"283"},{"size":2255,"mtime":1668418803100,"results":"342","hashOfConfig":"283"},{"size":13302,"mtime":1668419397628,"results":"343","hashOfConfig":"283"},{"size":2069,"mtime":1668418803098,"results":"344","hashOfConfig":"283"},{"size":2016,"mtime":1668419397642,"results":"345","hashOfConfig":"283"},{"size":28407,"mtime":1668419397642,"results":"346","hashOfConfig":"283"},{"size":25101,"mtime":1668419397635,"results":"347","hashOfConfig":"283"},{"size":8355,"mtime":1668419397635,"results":"348","hashOfConfig":"283"},{"size":25295,"mtime":1668419397636,"results":"349","hashOfConfig":"283"},{"size":8418,"mtime":1668419397635,"results":"350","hashOfConfig":"283"},{"size":11554,"mtime":1668419397645,"results":"351","hashOfConfig":"283"},{"size":15180,"mtime":1668419397632,"results":"352","hashOfConfig":"283"},{"size":1898,"mtime":1668419397632,"results":"353","hashOfConfig":"283"},{"size":2226,"mtime":1668419397645,"results":"354","hashOfConfig":"283"},{"size":2013,"mtime":1668419397633,"results":"355","hashOfConfig":"283"},{"size":13104,"mtime":1668419397633,"results":"356","hashOfConfig":"283"},{"size":2144,"mtime":1668418803116,"results":"357","hashOfConfig":"283"},{"size":16786,"mtime":1668419397641,"results":"358","hashOfConfig":"283"},{"size":11397,"mtime":1668417407092,"results":"359","hashOfConfig":"283"},{"size":9910,"mtime":1668419397631,"results":"360","hashOfConfig":"283"},{"size":19594,"mtime":1668419397629,"results":"361","hashOfConfig":"283"},{"size":22988,"mtime":1668419397632,"results":"362","hashOfConfig":"283"},{"size":2190,"mtime":1668419397649,"results":"363","hashOfConfig":"283"},{"size":28847,"mtime":1668419397650,"results":"364","hashOfConfig":"283"},{"size":1009,"mtime":1668419397625,"results":"365","hashOfConfig":"283"},{"size":1340,"mtime":1668419397624,"results":"366","hashOfConfig":"283"},{"size":5474,"mtime":1668418803082,"results":"367","hashOfConfig":"283"},{"size":1743,"mtime":1668419397654,"results":"368","hashOfConfig":"283"},{"size":801,"mtime":1668419397652,"results":"369","hashOfConfig":"283"},{"size":1428,"mtime":1668418803137,"results":"370","hashOfConfig":"283"},{"size":1155,"mtime":1668418803147,"results":"371","hashOfConfig":"283"},{"size":1180,"mtime":1668418803138,"results":"372","hashOfConfig":"283"},{"size":1613,"mtime":1668418803136,"results":"373","hashOfConfig":"283"},{"size":11143,"mtime":1668419397623,"results":"374","hashOfConfig":"283"},{"size":1053,"mtime":1668419397624,"results":"375","hashOfConfig":"283"},{"size":11418,"mtime":1668419397623,"results":"376","hashOfConfig":"283"},{"size":2379,"mtime":1668419397649,"results":"377","hashOfConfig":"283"},{"size":1839,"mtime":1668419397650,"results":"378","hashOfConfig":"283"},{"size":515,"mtime":1668419397653,"results":"379","hashOfConfig":"283"},{"size":764,"mtime":1668419397652,"results":"380","hashOfConfig":"283"},{"size":531,"mtime":1668418803082,"results":"381","hashOfConfig":"283"},{"size":6712,"mtime":1668418803140,"results":"382","hashOfConfig":"283"},{"size":1504,"mtime":1668418803147,"results":"383","hashOfConfig":"283"},{"size":5609,"mtime":1668418803082,"results":"384","hashOfConfig":"283"},{"size":9554,"mtime":1668419397623,"results":"385","hashOfConfig":"283"},{"size":1391,"mtime":1668419397623,"results":"386","hashOfConfig":"283"},{"size":1687,"mtime":1668419397651,"results":"387","hashOfConfig":"283"},{"size":2379,"mtime":1668419397653,"results":"388","hashOfConfig":"283"},{"size":2035,"mtime":1668419397654,"results":"389","hashOfConfig":"283"},{"size":5874,"mtime":1668419397625,"results":"390","hashOfConfig":"283"},{"size":346,"mtime":1668419397652,"results":"391","hashOfConfig":"283"},{"size":714,"mtime":1668418803136,"results":"392","hashOfConfig":"283"},{"size":700,"mtime":1668418803147,"results":"393","hashOfConfig":"283"},{"size":250,"mtime":1668419397653,"results":"394","hashOfConfig":"283"},{"size":22842,"mtime":1668419397625,"results":"395","hashOfConfig":"283"},{"size":835,"mtime":1668418803137,"results":"396","hashOfConfig":"283"},{"size":223,"mtime":1668418803157,"results":"397","hashOfConfig":"283"},{"size":2987,"mtime":1668418803140,"results":"398","hashOfConfig":"283"},{"size":1164,"mtime":1668418803152,"results":"399","hashOfConfig":"283"},{"size":759,"mtime":1668418803135,"results":"400","hashOfConfig":"283"},{"size":565,"mtime":1668419397655,"results":"401","hashOfConfig":"283"},{"size":7407,"mtime":1668419397624,"results":"402","hashOfConfig":"283"},{"size":1435,"mtime":1668419397654,"results":"403","hashOfConfig":"283"},{"size":1412,"mtime":1668419397651,"results":"404","hashOfConfig":"283"},{"size":8411,"mtime":1668418803115,"results":"405","hashOfConfig":"283"},{"size":252,"mtime":1668419397655,"results":"406","hashOfConfig":"283"},{"size":1578,"mtime":1668418803138,"results":"407","hashOfConfig":"283"},{"size":2355,"mtime":1668418803142,"results":"408","hashOfConfig":"283"},{"size":2215,"mtime":1668418803141,"results":"409","hashOfConfig":"283"},{"size":3626,"mtime":1668418803144,"results":"410","hashOfConfig":"283"},{"size":1774,"mtime":1668418803148,"results":"411","hashOfConfig":"283"},{"size":1630,"mtime":1668418803132,"results":"412","hashOfConfig":"283"},{"size":879,"mtime":1668418803134,"results":"413","hashOfConfig":"283"},{"size":1813,"mtime":1668418803133,"results":"414","hashOfConfig":"283"},{"size":2473,"mtime":1668418803154,"results":"415","hashOfConfig":"283"},{"size":2258,"mtime":1668418803151,"results":"416","hashOfConfig":"283"},{"size":2826,"mtime":1668418803142,"results":"417","hashOfConfig":"283"},{"size":1746,"mtime":1668418803133,"results":"418","hashOfConfig":"283"},{"size":1476,"mtime":1668418803147,"results":"419","hashOfConfig":"283"},{"size":1545,"mtime":1668418803135,"results":"420","hashOfConfig":"283"},{"size":7278,"mtime":1668418803107,"results":"421","hashOfConfig":"283"},{"size":1922,"mtime":1668418803134,"results":"422","hashOfConfig":"283"},{"size":1902,"mtime":1668418803092,"results":"423","hashOfConfig":"283"},{"size":82,"mtime":1668418803156,"results":"424","hashOfConfig":"283"},{"size":182,"mtime":1668418803155,"results":"425","hashOfConfig":"283"},{"size":3781,"mtime":1668418803104,"results":"426","hashOfConfig":"283"},{"size":9501,"mtime":1668419397641,"results":"427","hashOfConfig":"283"},{"size":5507,"mtime":1668418803104,"results":"428","hashOfConfig":"283"},{"size":7188,"mtime":1668418803106,"results":"429","hashOfConfig":"283"},{"size":5461,"mtime":1668418803107,"results":"430","hashOfConfig":"283"},{"size":5070,"mtime":1668418803105,"results":"431","hashOfConfig":"283"},{"size":105,"mtime":1668419397655,"results":"432","hashOfConfig":"283"},{"size":670,"mtime":1668418803138,"results":"433","hashOfConfig":"283"},{"size":1183,"mtime":1668418803143,"results":"434","hashOfConfig":"283"},{"size":1082,"mtime":1668418803141,"results":"435","hashOfConfig":"283"},{"size":1779,"mtime":1668418803145,"results":"436","hashOfConfig":"283"},{"size":819,"mtime":1668418803149,"results":"437","hashOfConfig":"283"},{"size":686,"mtime":1668418803132,"results":"438","hashOfConfig":"283"},{"size":1180,"mtime":1668418803154,"results":"439","hashOfConfig":"283"},{"size":964,"mtime":1668418803151,"results":"440","hashOfConfig":"283"},{"size":1375,"mtime":1668418803142,"results":"441","hashOfConfig":"283"},{"size":1058,"mtime":1668418803133,"results":"442","hashOfConfig":"283"},{"size":650,"mtime":1668418803148,"results":"443","hashOfConfig":"283"},{"size":720,"mtime":1668418803136,"results":"444","hashOfConfig":"283"},{"size":3947,"mtime":1668418803107,"results":"445","hashOfConfig":"283"},{"size":997,"mtime":1668418803134,"results":"446","hashOfConfig":"283"},{"size":2897,"mtime":1668419397641,"results":"447","hashOfConfig":"283"},{"size":1722,"mtime":1668418803106,"results":"448","hashOfConfig":"283"},{"size":3255,"mtime":1668418803106,"results":"449","hashOfConfig":"283"},{"size":3135,"mtime":1668418803105,"results":"450","hashOfConfig":"283"},{"size":1648,"mtime":1668418803104,"results":"451","hashOfConfig":"283"},{"size":1552,"mtime":1668418803104,"results":"452","hashOfConfig":"283"},{"size":1519,"mtime":1668418803150,"results":"453","hashOfConfig":"283"},{"size":4516,"mtime":1668418803123,"results":"454","hashOfConfig":"283"},{"size":2223,"mtime":1668418803153,"results":"455","hashOfConfig":"283"},{"size":3116,"mtime":1668418803139,"results":"456","hashOfConfig":"283"},{"size":1974,"mtime":1668418803143,"results":"457","hashOfConfig":"283"},{"size":15571,"mtime":1668418803084,"results":"458","hashOfConfig":"283"},{"size":1085,"mtime":1668418803083,"results":"459","hashOfConfig":"283"},{"size":3193,"mtime":1668418803085,"results":"460","hashOfConfig":"283"},{"size":2080,"mtime":1668418803084,"results":"461","hashOfConfig":"283"},{"size":6174,"mtime":1668418803085,"results":"462","hashOfConfig":"283"},{"size":2846,"mtime":1668418803150,"results":"463","hashOfConfig":"283"},{"size":1175,"mtime":1668418803138,"results":"464","hashOfConfig":"283"},{"size":1765,"mtime":1668418803152,"results":"465","hashOfConfig":"283"},{"size":235,"mtime":1668418803160,"results":"466","hashOfConfig":"283"},{"size":580,"mtime":1668419397655,"results":"467","hashOfConfig":"283"},{"size":2219,"mtime":1668418803143,"results":"468","hashOfConfig":"283"},{"size":2156,"mtime":1668418803141,"results":"469","hashOfConfig":"283"},{"size":1607,"mtime":1668418803149,"results":"470","hashOfConfig":"283"},{"size":1306,"mtime":1668419397651,"results":"471","hashOfConfig":"283"},{"size":1453,"mtime":1668418803134,"results":"472","hashOfConfig":"283"},{"size":1644,"mtime":1668418803154,"results":"473","hashOfConfig":"283"},{"size":1704,"mtime":1668418803151,"results":"474","hashOfConfig":"283"},{"size":1301,"mtime":1668418803132,"results":"475","hashOfConfig":"283"},{"size":1443,"mtime":1668418803133,"results":"476","hashOfConfig":"283"},{"size":1504,"mtime":1668418803169,"results":"477","hashOfConfig":"283"},{"size":699,"mtime":1668418803151,"results":"478","hashOfConfig":"283"},{"size":1723,"mtime":1668418803139,"results":"479","hashOfConfig":"283"},{"size":1264,"mtime":1668418803136,"results":"480","hashOfConfig":"283"},{"size":1277,"mtime":1668418803148,"results":"481","hashOfConfig":"283"},{"size":2090,"mtime":1668418803150,"results":"482","hashOfConfig":"283"},{"size":3181,"mtime":1668418803146,"results":"483","hashOfConfig":"283"},{"size":4591,"mtime":1668419397652,"results":"484","hashOfConfig":"283"},{"size":2126,"mtime":1668418803164,"results":"485","hashOfConfig":"283"},{"size":522,"mtime":1668418803165,"results":"486","hashOfConfig":"283"},{"size":1738,"mtime":1668418803161,"results":"487","hashOfConfig":"283"},{"size":465,"mtime":1668418803167,"results":"488","hashOfConfig":"283"},{"size":2156,"mtime":1668418803142,"results":"489","hashOfConfig":"283"},{"size":1203,"mtime":1668418803151,"results":"490","hashOfConfig":"283"},{"size":2044,"mtime":1668418803153,"results":"491","hashOfConfig":"283"},{"size":562,"mtime":1668419397654,"results":"492","hashOfConfig":"283"},{"size":2307,"mtime":1668418803140,"results":"493","hashOfConfig":"283"},{"size":1540,"mtime":1668419397651,"results":"494","hashOfConfig":"283"},{"size":1666,"mtime":1668419397654,"results":"495","hashOfConfig":"283"},{"size":1693,"mtime":1668418803144,"results":"496","hashOfConfig":"283"},{"size":590,"mtime":1668418803159,"results":"497","hashOfConfig":"283"},{"size":820,"mtime":1668418803156,"results":"498","hashOfConfig":"283"},{"size":506,"mtime":1668419397655,"results":"499","hashOfConfig":"283"},{"size":359,"mtime":1668418803157,"results":"500","hashOfConfig":"283"},{"size":369,"mtime":1668418803160,"results":"501","hashOfConfig":"283"},{"size":1829,"mtime":1668418803162,"results":"502","hashOfConfig":"283"},{"size":677,"mtime":1668418803165,"results":"503","hashOfConfig":"283"},{"size":906,"mtime":1668418803167,"results":"504","hashOfConfig":"283"},{"size":1844,"mtime":1668418803164,"results":"505","hashOfConfig":"283"},{"size":2344,"mtime":1668418803170,"results":"506","hashOfConfig":"283"},{"size":2284,"mtime":1668419397652,"results":"507","hashOfConfig":"283"},{"size":3325,"mtime":1668418803147,"results":"508","hashOfConfig":"283"},{"size":398,"mtime":1668418803158,"results":"509","hashOfConfig":"283"},{"size":3239,"mtime":1668419397651,"results":"510","hashOfConfig":"283"},{"size":3525,"mtime":1668418803137,"results":"511","hashOfConfig":"283"},{"size":3483,"mtime":1668418803138,"results":"512","hashOfConfig":"283"},{"size":2516,"mtime":1668419397653,"results":"513","hashOfConfig":"283"},{"size":4864,"mtime":1668418803143,"results":"514","hashOfConfig":"283"},{"size":4649,"mtime":1668418803141,"results":"515","hashOfConfig":"283"},{"size":3706,"mtime":1668418803134,"results":"516","hashOfConfig":"283"},{"size":3904,"mtime":1668418803149,"results":"517","hashOfConfig":"283"},{"size":3454,"mtime":1668418803135,"results":"518","hashOfConfig":"283"},{"size":3519,"mtime":1668418803151,"results":"519","hashOfConfig":"283"},{"size":4443,"mtime":1668418803155,"results":"520","hashOfConfig":"283"},{"size":3590,"mtime":1668418803133,"results":"521","hashOfConfig":"283"},{"size":3585,"mtime":1668418803132,"results":"522","hashOfConfig":"283"},{"size":3315,"mtime":1668418803148,"results":"523","hashOfConfig":"283"},{"size":3414,"mtime":1668418803136,"results":"524","hashOfConfig":"283"},{"size":5352,"mtime":1668418803150,"results":"525","hashOfConfig":"283"},{"size":7160,"mtime":1668418803146,"results":"526","hashOfConfig":"283"},{"size":9564,"mtime":1668418803140,"results":"527","hashOfConfig":"283"},{"size":886,"mtime":1668418803153,"results":"528","hashOfConfig":"283"},{"size":929,"mtime":1668418803143,"results":"529","hashOfConfig":"283"},{"size":3066,"mtime":1668419397652,"results":"530","hashOfConfig":"283"},{"size":5217,"mtime":1668418803142,"results":"531","hashOfConfig":"283"},{"size":4755,"mtime":1668418803154,"results":"532","hashOfConfig":"283"},{"size":5456,"mtime":1668418803140,"results":"533","hashOfConfig":"283"},{"size":4538,"mtime":1668419397654,"results":"534","hashOfConfig":"283"},{"size":1550,"mtime":1668418803149,"results":"535","hashOfConfig":"283"},{"size":3422,"mtime":1668418803135,"results":"536","hashOfConfig":"283"},{"size":120,"mtime":1668418803159,"results":"537","hashOfConfig":"283"},{"size":268,"mtime":1668418803159,"results":"538","hashOfConfig":"283"},{"size":3272,"mtime":1668418803144,"results":"539","hashOfConfig":"283"},{"size":392,"mtime":1668418803158,"results":"540","hashOfConfig":"283"},{"size":335,"mtime":1668418803157,"results":"541","hashOfConfig":"283"},{"size":348,"mtime":1668418803160,"results":"542","hashOfConfig":"283"},{"size":1372,"mtime":1668419397655,"results":"543","hashOfConfig":"283"},{"size":5680,"mtime":1668418803170,"results":"544","hashOfConfig":"283"},{"size":4831,"mtime":1668419397656,"results":"545","hashOfConfig":"283"},{"size":2371,"mtime":1668418803163,"results":"546","hashOfConfig":"283"},{"size":1480,"mtime":1668418803166,"results":"547","hashOfConfig":"283"},{"size":1527,"mtime":1668418803167,"results":"548","hashOfConfig":"283"},{"size":726,"mtime":1668418803168,"results":"549","hashOfConfig":"283"},{"size":611,"mtime":1668418803080,"results":"550","hashOfConfig":"283"},{"size":714,"mtime":1668418803091,"results":"551","hashOfConfig":"283"},{"size":891,"mtime":1668418803163,"results":"552","hashOfConfig":"283"},{"size":195,"mtime":1668418803165,"results":"553","hashOfConfig":"283"},{"size":736,"mtime":1668418803160,"results":"554","hashOfConfig":"283"},{"size":175,"mtime":1668418803166,"results":"555","hashOfConfig":"283"},{"size":139,"mtime":1668418803158,"results":"556","hashOfConfig":"283"},{"size":791,"mtime":1668418803088,"results":"557","hashOfConfig":"283"},{"size":11526,"mtime":1668418803087,"results":"558","hashOfConfig":"283"},{"size":165,"mtime":1668418803158,"results":"559","hashOfConfig":"283"},{"size":4967,"mtime":1668418803092,"results":"560","hashOfConfig":"283"},{"size":6810,"mtime":1668419397625,"results":"561","hashOfConfig":"283"},{"size":7265,"mtime":1668418803082,"results":"562","hashOfConfig":"283"},{"size":2593,"mtime":1668418803088,"results":"563","hashOfConfig":"283"},{"filePath":"564","messages":"565","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},"1lw8are",{"filePath":"567","messages":"568","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"569","messages":"570","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"571","usedDeprecatedRules":"566"},{"filePath":"572","messages":"573","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"574","messages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"576","usedDeprecatedRules":"566"},{"filePath":"577","messages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"579","messages":"580","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"581","messages":"582","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"583","messages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"585","usedDeprecatedRules":"566"},{"filePath":"586","messages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"588","messages":"589","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"590","usedDeprecatedRules":"566"},{"filePath":"591","messages":"592","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"593","messages":"594","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"595","messages":"596","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"597","messages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"599","messages":"600","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"601","messages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"603","messages":"604","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"605","usedDeprecatedRules":"566"},{"filePath":"606","messages":"607","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"608","usedDeprecatedRules":"566"},{"filePath":"609","messages":"610","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"611","messages":"612","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"613","messages":"614","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"615","usedDeprecatedRules":"566"},{"filePath":"616","messages":"617","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"618","messages":"619","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"620","messages":"621","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"622","messages":"623","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"624","usedDeprecatedRules":"566"},{"filePath":"625","messages":"626","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"627","usedDeprecatedRules":"566"},{"filePath":"628","messages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630","usedDeprecatedRules":"566"},{"filePath":"631","messages":"632","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"633","usedDeprecatedRules":"566"},{"filePath":"634","messages":"635","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"636","usedDeprecatedRules":"566"},{"filePath":"637","messages":"638","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"639","usedDeprecatedRules":"566"},{"filePath":"640","messages":"641","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"642","usedDeprecatedRules":"566"},{"filePath":"643","messages":"644","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"645","usedDeprecatedRules":"566"},{"filePath":"646","messages":"647","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"648","usedDeprecatedRules":"566"},{"filePath":"649","messages":"650","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"651","usedDeprecatedRules":"566"},{"filePath":"652","messages":"653","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"654","usedDeprecatedRules":"566"},{"filePath":"655","messages":"656","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"657","usedDeprecatedRules":"566"},{"filePath":"658","messages":"659","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"660","usedDeprecatedRules":"566"},{"filePath":"661","messages":"662","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"663","usedDeprecatedRules":"566"},{"filePath":"664","messages":"665","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"666","usedDeprecatedRules":"566"},{"filePath":"667","messages":"668","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"669","usedDeprecatedRules":"566"},{"filePath":"670","messages":"671","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"672","usedDeprecatedRules":"566"},{"filePath":"673","messages":"674","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"675","usedDeprecatedRules":"566"},{"filePath":"676","messages":"677","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"678","usedDeprecatedRules":"566"},{"filePath":"679","messages":"680","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"681","usedDeprecatedRules":"566"},{"filePath":"682","messages":"683","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"684","usedDeprecatedRules":"566"},{"filePath":"685","messages":"686","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"687","usedDeprecatedRules":"566"},{"filePath":"688","messages":"689","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"690","usedDeprecatedRules":"566"},{"filePath":"691","messages":"692","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"693","usedDeprecatedRules":"566"},{"filePath":"694","messages":"695","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"696","usedDeprecatedRules":"566"},{"filePath":"697","messages":"698","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"699","usedDeprecatedRules":"566"},{"filePath":"700","messages":"701","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"702","usedDeprecatedRules":"566"},{"filePath":"703","messages":"704","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"705","usedDeprecatedRules":"566"},{"filePath":"706","messages":"707","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"708","usedDeprecatedRules":"566"},{"filePath":"709","messages":"710","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"711","usedDeprecatedRules":"566"},{"filePath":"712","messages":"713","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"714","usedDeprecatedRules":"566"},{"filePath":"715","messages":"716","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"717","usedDeprecatedRules":"566"},{"filePath":"718","messages":"719","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"720","usedDeprecatedRules":"566"},{"filePath":"721","messages":"722","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"723","usedDeprecatedRules":"566"},{"filePath":"724","messages":"725","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"726","usedDeprecatedRules":"566"},{"filePath":"727","messages":"728","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"729","usedDeprecatedRules":"566"},{"filePath":"730","messages":"731","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"732","usedDeprecatedRules":"566"},{"filePath":"733","messages":"734","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"735","usedDeprecatedRules":"566"},{"filePath":"736","messages":"737","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"738","usedDeprecatedRules":"566"},{"filePath":"739","messages":"740","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"741","usedDeprecatedRules":"566"},{"filePath":"742","messages":"743","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"744","usedDeprecatedRules":"566"},{"filePath":"745","messages":"746","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"747","usedDeprecatedRules":"566"},{"filePath":"748","messages":"749","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"750","usedDeprecatedRules":"566"},{"filePath":"751","messages":"752","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"753","usedDeprecatedRules":"566"},{"filePath":"754","messages":"755","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"756","usedDeprecatedRules":"566"},{"filePath":"757","messages":"758","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"759","usedDeprecatedRules":"566"},{"filePath":"760","messages":"761","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"762","usedDeprecatedRules":"566"},{"filePath":"763","messages":"764","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"765","usedDeprecatedRules":"566"},{"filePath":"766","messages":"767","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"768","usedDeprecatedRules":"566"},{"filePath":"769","messages":"770","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"771","usedDeprecatedRules":"566"},{"filePath":"772","messages":"773","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"774","usedDeprecatedRules":"566"},{"filePath":"775","messages":"776","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"777","usedDeprecatedRules":"566"},{"filePath":"778","messages":"779","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"780","usedDeprecatedRules":"566"},{"filePath":"781","messages":"782","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"783","usedDeprecatedRules":"566"},{"filePath":"784","messages":"785","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"786","usedDeprecatedRules":"566"},{"filePath":"787","messages":"788","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"789","usedDeprecatedRules":"566"},{"filePath":"790","messages":"791","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"792","usedDeprecatedRules":"566"},{"filePath":"793","messages":"794","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"795","messages":"796","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"797","usedDeprecatedRules":"566"},{"filePath":"798","messages":"799","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"800","usedDeprecatedRules":"566"},{"filePath":"801","messages":"802","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"803","messages":"804","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"805","messages":"806","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"807","messages":"808","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"809","messages":"810","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"811","messages":"812","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"813","messages":"814","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"815","usedDeprecatedRules":"566"},{"filePath":"816","messages":"817","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"818","messages":"819","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"820","usedDeprecatedRules":"566"},{"filePath":"821","messages":"822","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"823","messages":"824","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"825","messages":"826","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"827","messages":"828","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"829","messages":"830","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"831","messages":"832","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"833","messages":"834","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"835","messages":"836","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"837","messages":"838","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"839","usedDeprecatedRules":"566"},{"filePath":"840","messages":"841","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"842","usedDeprecatedRules":"566"},{"filePath":"843","messages":"844","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"845","messages":"846","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"847","messages":"848","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"849","messages":"850","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"851","messages":"852","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"853","messages":"854","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"855","messages":"856","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"857","messages":"858","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"859","messages":"860","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"861","usedDeprecatedRules":"566"},{"filePath":"862","messages":"863","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"864","messages":"865","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"866","messages":"867","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"868","messages":"869","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"870","messages":"871","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"872","messages":"873","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"874","messages":"875","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"876","messages":"877","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"878","messages":"879","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"880","messages":"881","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"882","usedDeprecatedRules":"566"},{"filePath":"883","messages":"884","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"885","messages":"886","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"887","messages":"888","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"889","messages":"890","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"891","messages":"892","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"893","messages":"894","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"895","messages":"896","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"897","usedDeprecatedRules":"566"},{"filePath":"898","messages":"899","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"900","messages":"901","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"902","messages":"903","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"904","messages":"905","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"906","usedDeprecatedRules":"566"},{"filePath":"907","messages":"908","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"909","usedDeprecatedRules":"566"},{"filePath":"910","messages":"911","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"912","messages":"913","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"914","messages":"915","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"916","messages":"917","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"918","messages":"919","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"920","messages":"921","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"922","messages":"923","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"924","messages":"925","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"926","messages":"927","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"928","usedDeprecatedRules":"566"},{"filePath":"929","messages":"930","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"931","usedDeprecatedRules":"566"},{"filePath":"932","messages":"933","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"934","usedDeprecatedRules":"566"},{"filePath":"935","messages":"936","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"937","usedDeprecatedRules":"566"},{"filePath":"938","messages":"939","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"940","messages":"941","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"942","messages":"943","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"944","messages":"945","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"946","messages":"947","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"948","messages":"949","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"950","messages":"951","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"952","messages":"953","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"954","messages":"955","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"956","messages":"957","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"958","messages":"959","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"960","messages":"961","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"962","messages":"963","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"964","messages":"965","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"966","messages":"967","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"968","messages":"969","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"970","usedDeprecatedRules":"566"},{"filePath":"971","messages":"972","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"973","messages":"974","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"975","usedDeprecatedRules":"566"},{"filePath":"976","messages":"977","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"978","messages":"979","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"980","usedDeprecatedRules":"566"},{"filePath":"981","messages":"982","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"983","usedDeprecatedRules":"566"},{"filePath":"984","messages":"985","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"986","usedDeprecatedRules":"566"},{"filePath":"987","messages":"988","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"989","usedDeprecatedRules":"566"},{"filePath":"990","messages":"991","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"992","usedDeprecatedRules":"566"},{"filePath":"993","messages":"994","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"995","messages":"996","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"997","messages":"998","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"999","messages":"1000","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1001","messages":"1002","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1003","messages":"1004","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1005","messages":"1006","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1007","messages":"1008","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1009","messages":"1010","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1011","messages":"1012","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1013","usedDeprecatedRules":"566"},{"filePath":"1014","messages":"1015","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1016","messages":"1017","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1018","messages":"1019","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1020","messages":"1021","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1022","messages":"1023","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1024","messages":"1025","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1026","messages":"1027","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1028","messages":"1029","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1030","messages":"1031","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1032","messages":"1033","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1034","messages":"1035","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1036","messages":"1037","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1038","usedDeprecatedRules":"566"},{"filePath":"1039","messages":"1040","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1041","messages":"1042","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1043","messages":"1044","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1045","messages":"1046","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1047","messages":"1048","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1049","messages":"1050","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1051","messages":"1052","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1053","messages":"1054","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1055","usedDeprecatedRules":"566"},{"filePath":"1056","messages":"1057","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1058","messages":"1059","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1060","messages":"1061","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1062","messages":"1063","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1064","usedDeprecatedRules":"566"},{"filePath":"1065","messages":"1066","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1067","messages":"1068","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1069","usedDeprecatedRules":"566"},{"filePath":"1070","messages":"1071","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1072","messages":"1073","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1074","messages":"1075","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1076","messages":"1077","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1078","messages":"1079","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1080","messages":"1081","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1082","usedDeprecatedRules":"566"},{"filePath":"1083","messages":"1084","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1085","messages":"1086","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1087","messages":"1088","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1089","messages":"1090","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1091","messages":"1092","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1093","messages":"1094","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1095","messages":"1096","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1097","usedDeprecatedRules":"566"},{"filePath":"1098","messages":"1099","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1100","messages":"1101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1102","messages":"1103","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1104","usedDeprecatedRules":"566"},{"filePath":"1105","messages":"1106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1107","messages":"1108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1109","usedDeprecatedRules":"566"},{"filePath":"1110","messages":"1111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1112","messages":"1113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1114","messages":"1115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1116","messages":"1117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1118","usedDeprecatedRules":"566"},{"filePath":"1119","messages":"1120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1121","messages":"1122","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1123","usedDeprecatedRules":"566"},{"filePath":"1124","messages":"1125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1126","messages":"1127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1128","messages":"1129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1130","usedDeprecatedRules":"566"},{"filePath":"1131","messages":"1132","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1133","usedDeprecatedRules":"566"},{"filePath":"1134","messages":"1135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1136","usedDeprecatedRules":"566"},{"filePath":"1137","messages":"1138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1139","messages":"1140","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1141","usedDeprecatedRules":"566"},{"filePath":"1142","messages":"1143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1144","messages":"1145","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1146","usedDeprecatedRules":"566"},{"filePath":"1147","messages":"1148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1149","messages":"1150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1151","messages":"1152","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1153","usedDeprecatedRules":"566"},{"filePath":"1154","messages":"1155","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1156","usedDeprecatedRules":"566"},{"filePath":"1157","messages":"1158","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1159","usedDeprecatedRules":"566"},{"filePath":"1160","messages":"1161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1162","messages":"1163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1164","messages":"1165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1166","messages":"1167","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1168","usedDeprecatedRules":"566"},{"filePath":"1169","messages":"1170","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1171","usedDeprecatedRules":"566"},{"filePath":"1172","messages":"1173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1174","messages":"1175","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1176","usedDeprecatedRules":"566"},{"filePath":"1177","messages":"1178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1179","messages":"1180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1181","messages":"1182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1183","messages":"1184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1185","messages":"1186","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1187","usedDeprecatedRules":"566"},{"filePath":"1188","messages":"1189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1190","messages":"1191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1192","messages":"1193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1194","messages":"1195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1196","messages":"1197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1198","messages":"1199","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1200","usedDeprecatedRules":"566"},{"filePath":"1201","messages":"1202","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1203","usedDeprecatedRules":"566"},{"filePath":"1204","messages":"1205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1206","messages":"1207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1208","messages":"1209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1210","messages":"1211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1212","messages":"1213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1214","messages":"1215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1216","messages":"1217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1218","messages":"1219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1220","messages":"1221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1222","messages":"1223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1224","messages":"1225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1226","messages":"1227","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1228","usedDeprecatedRules":"566"},{"filePath":"1229","messages":"1230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1231","messages":"1232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"566"},{"filePath":"1233","messages":"1234","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1235","usedDeprecatedRules":"566"},{"filePath":"1236","messages":"1237","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1238","usedDeprecatedRules":"566"},{"filePath":"1239","messages":"1240","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1241","usedDeprecatedRules":"566"},"D:\\GitProjects\\Manthan\\src\\index.js",[],["1242","1243"],"D:\\GitProjects\\Manthan\\src\\i18n.js",[],"D:\\GitProjects\\Manthan\\src\\App.js",["1244","1245"],"import PropTypes from 'prop-types'\r\nimport React, { useEffect } from \"react\"\r\n\r\nimport { Switch, BrowserRouter as Router, useHistory } from \"react-router-dom\"\r\nimport { connect, useSelector } from \"react-redux\"\r\n\r\n// Import Routes all\r\nimport { userRoutes, authRoutes } from \"./routes/allRoutes\"\r\n\r\n// Import all middleware\r\nimport Authmiddleware from \"./routes/middleware/Authmiddleware\"\r\n\r\n// layouts Format\r\nimport VerticalLayout from \"./components/VerticalLayout/\"\r\nimport HorizontalLayout from \"./components/HorizontalLayout/\"\r\nimport NonAuthLayout from \"./components/NonAuthLayout\"\r\n\r\n// Import scss\r\nimport \"./assets/scss/theme.scss\"\r\nimport \"./assets/scss/preloader.scss\"\r\n\r\nconst App = props => {\r\n  const history = useHistory();\r\n  const userPageAccess = history.location.state\r\n\r\n  function getLayout() {\r\n    let layoutCls = VerticalLayout\r\n    switch (props.layout.layoutType) {\r\n      case \"horizontal\":\r\n        layoutCls = HorizontalLayout\r\n        break\r\n      default:\r\n        layoutCls = VerticalLayout\r\n        break\r\n    }\r\n    return layoutCls\r\n  }\r\n\r\n  const Layout = getLayout()\r\n  return (\r\n    <React.Fragment>\r\n      <Router>\r\n        <Switch>\r\n          {authRoutes.map((route, idx) => (\r\n            <Authmiddleware\r\n              path={route.path}\r\n              layout={NonAuthLayout}\r\n              component={route.component}\r\n              key={idx}\r\n              isAuthProtected={false}\r\n              exact\r\n            />\r\n          ))}\r\n\r\n          {userRoutes.map((route, idx) => (\r\n            <Authmiddleware\r\n              path={route.path}\r\n              layout={Layout}\r\n              component={route.component}\r\n              key={idx}\r\n              isAuthProtected={true}\r\n              userPageAccess={userPageAccess}\r\n              history={history}\r\n              exact\r\n            />\r\n          ))}\r\n        </Switch>\r\n      </Router>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nApp.propTypes = {\r\n  layout: PropTypes.any\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    layout: state.Layout,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(App)","D:\\GitProjects\\Manthan\\src\\store\\index.js",[],"D:\\GitProjects\\Manthan\\src\\routes\\middleware\\Authmiddleware.js",["1246","1247"],"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Route, Redirect } from \"react-router-dom\"\r\n\r\nconst Authmiddleware = ({\r\n  userPageAccess: userPageAccess,\r\n  history: history,\r\n  component: Component,\r\n  layout: Layout,\r\n  isAuthProtected,\r\n  ...rest\r\n}) => (\r\n  <Route\r\n    {...rest}\r\n    render={props => {\r\n      \r\n      if (isAuthProtected && !localStorage.getItem(\"token\")) {\r\n        return (\r\n          <Redirect\r\n            to={{ pathname: \"/login\", state: { from: props.location } }} />\r\n        )\r\n      }\r\n      \r\n     else if ((userPageAccess === undefined)) {\r\n        // console.log(\"userPageAccess props if \", history)\r\n\r\n        // history.push(\"/Dashboard\")\r\n        // return (\r\n        //   <Redirect\r\n        //     to={{ pathname: \"/Dashboard\",  }}  />\r\n        // )\r\n      }\r\n      else {\r\n        if (!(userPageAccess.fromDashboardAccess)) {\r\n          // console.log(\"userPageAccess props else\", history)\r\n\r\n          // history.push(\"/Dashboard\")\r\n          // return (\r\n          //   <Redirect\r\n          //     to={{ pathname: \"/Dashboard\",  }}  />\r\n          // )\r\n        }\r\n      };\r\n\r\n\r\n      return (\r\n        <Layout>\r\n          <Component {...props} />\r\n        </Layout>\r\n      )\r\n    }}\r\n  />\r\n)\r\n\r\nAuthmiddleware.propTypes = {\r\n  isAuthProtected: PropTypes.bool,\r\n  component: PropTypes.any,\r\n  location: PropTypes.object,\r\n  layout: PropTypes.any,\r\n  userPageAccess: PropTypes.any,\r\n  history: PropTypes.object,\r\n}\r\n\r\nexport default Authmiddleware;\r\n","D:\\GitProjects\\Manthan\\src\\routes\\allRoutes.js",[],"D:\\GitProjects\\Manthan\\src\\components\\NonAuthLayout.js",[],"D:\\GitProjects\\Manthan\\src\\components\\VerticalLayout\\index.js",[],"D:\\GitProjects\\Manthan\\src\\components\\HorizontalLayout\\index.js",["1248"],"import React, { useEffect, useState } from 'react';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\n//actions\r\nimport {\r\n  changeLayout,\r\n  changeTopbarTheme,\r\n  changeLayoutWidth,\r\n  changelayoutMode,\r\n  changeLayoutPosition\r\n} from \"../../store/actions\";\r\n\r\n//redux\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\n//components\r\nimport Navbar from \"./Navbar\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\n\r\nconst Layout = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    topbarTheme, layoutWidth, isPreloader, layoutPosition, layoutMode\r\n  } = useSelector(state => ({\r\n    topbarTheme: state.Layout.topbarTheme,\r\n    layoutWidth: state.Layout.layoutWidth,\r\n    isPreloader: state.Layout.isPreloader,\r\n    layoutPosition: state.Layout.layoutPosition,\r\n    layoutMode: state.Layout.layoutMode\r\n  }));\r\n\r\n  /*\r\n  document title\r\n  */\r\n  useEffect(() => {\r\n    const title = props.location.pathname;\r\n    let currentage = title.charAt(1).toUpperCase() + title.slice(2);\r\n\r\n    document.title =\r\n      currentage + \" | Minia - React Admin & Dashboard Template\";\r\n  }, [props.location.pathname]);\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  /*\r\n  layout settings\r\n  */\r\n  useEffect(() => {\r\n    dispatch(changeLayout(\"horizontal\"));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (isPreloader === true) {\r\n      document.getElementById(\"preloader\").style.display = \"block\";\r\n      document.getElementById(\"status\").style.display = \"block\";\r\n\r\n      setTimeout(function () {\r\n        document.getElementById(\"preloader\").style.display = \"none\";\r\n        document.getElementById(\"status\").style.display = \"none\";\r\n      }, 2500);\r\n    } else {\r\n      document.getElementById(\"preloader\").style.display = \"none\";\r\n      document.getElementById(\"status\").style.display = \"none\";\r\n    }\r\n  }, [isPreloader]);\r\n\r\n  useEffect(() => {\r\n    if (topbarTheme) {\r\n      dispatch(changeTopbarTheme(topbarTheme));\r\n    }\r\n  }, [dispatch, topbarTheme]);\r\n\r\n  useEffect(() => {\r\n    if (layoutPosition) {\r\n      dispatch(changeLayoutPosition(layoutPosition));\r\n    }\r\n  }, [dispatch, layoutPosition]);\r\n\r\n  useEffect(() => {\r\n    if (layoutWidth) {\r\n      dispatch(changeLayoutWidth(layoutWidth));\r\n    }\r\n  }, [dispatch, layoutWidth]);\r\n\r\n  useEffect(() => {\r\n    if (layoutMode) {\r\n      dispatch(changelayoutMode(layoutMode, layoutType));\r\n    }\r\n  }, [layoutMode, dispatch]);\r\n\r\n  const [isMenuOpened, setIsMenuOpened] = useState(false);\r\n  const openMenu = () => {\r\n    setIsMenuOpened(!isMenuOpened);\r\n  };\r\n\r\n  /*\r\ncall dark/light mode\r\n*/\r\n  const { changelayoutMode, layoutType } = props;\r\n  const onChangeLayoutMode = (value) => {\r\n    if (changelayoutMode) {\r\n      changelayoutMode(value, layoutType);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div id=\"preloader\">\r\n        <div id=\"status\">\r\n          <div className=\"spinner-chase\">\r\n            <div className=\"chase-dot\" />\r\n            <div className=\"chase-dot\" />\r\n            <div className=\"chase-dot\" />\r\n            <div className=\"chase-dot\" />\r\n            <div className=\"chase-dot\" />\r\n            <div className=\"chase-dot\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div id=\"layout-wrapper\">\r\n        <Header\r\n          theme={topbarTheme}\r\n          isMenuOpened={isMenuOpened}\r\n          openLeftMenuCallBack={openMenu}\r\n          onChangeLayoutMode={onChangeLayoutMode}\r\n        />\r\n        <Navbar menuOpen={isMenuOpened} />\r\n        <div className=\"main-content\">{props.children}</div>\r\n        <Footer />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nLayout.propTypes = {\r\n  changeLayout: PropTypes.func,\r\n  changeLayoutWidth: PropTypes.func,\r\n  changeTopbarTheme: PropTypes.func,\r\n  children: PropTypes.object,\r\n  isPreloader: PropTypes.any,\r\n  layoutWidth: PropTypes.any,\r\n  location: PropTypes.object,\r\n  showRightSidebar: PropTypes.any,\r\n  topbarTheme: PropTypes.any\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return { ...state.Layout };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  changelayoutMode,\r\n})(withRouter(Layout));\r\n","D:\\GitProjects\\Manthan\\src\\store\\sagas.js",[],"D:\\GitProjects\\Manthan\\src\\store\\reducers.js",["1249","1250","1251","1252","1253","1254","1255","1256","1257","1258"],"import { combineReducers } from \"redux\"\r\n\r\n// Front\r\nimport Layout from \"./layout/reducer\"\r\n\r\n// Authentication\r\nimport Login from \"./auth/login/reducer\"\r\nimport Account from \"./auth/register/reducer\"\r\nimport ForgetPassword from \"./auth/forgetpwd/reducer\"\r\nimport Profile from \"./auth/profile/reducer\"\r\n\r\n//Administrator\r\nimport SpinnerReducer from './Utilites/Spinner/reducer'\r\nimport AlertReducer from './Utilites/CustomAlertRedux/reducer'\r\nimport CommonError from './Utilites/CommonError/reducer'\r\n\r\nimport CustomSearchReducer from './Utilites/CustomSearchRedux/reducer'\r\nimport BreadcrumbReducer from './Utilites/Breadcrumb/reducer'\r\nimport CommonPageFieldReducer from './Utilites/PageFiled/reducer'\r\n\r\nimport Modules from './Administrator/ModulesRedux/reducer'\r\nimport Company from './Administrator/CompanyRedux/reducer'\r\n\r\nimport H_Pages from './Administrator/HPagesRedux/reducer'\r\nimport OrderReducer from \"./Purchase/OrderPageRedux/reducer\"\r\nimport SupplierReducer from \"./CommonAPI/SupplierRedux/reducer\"\r\nimport User_Registration_Reducer from \"./Administrator/UserRegistrationRedux/reducer\"\r\nimport M_EmployeesReducer from \"./Administrator/M_EmployeeRedux/reducer\"\r\nimport RoleMaster_Reducer from \"./Administrator/RoleMasterRedux/reducer\"\r\nimport ItemMastersReducer from \"./Administrator/ItemsRedux/reducer\"\r\nimport PartyMasterReducer from \"./Administrator/PartyRedux/reducer\"\r\nimport RoleAccessReducer from \"./Administrator/RoleAccessRedux/reducer\"\r\nimport EmployeeTypeReducer from \"./Administrator/EmployeeTypeRedux/reducer\"\r\nimport PartyTypeReducer from \"./Administrator/PartyTypeRedux/reducer\"\r\nimport categoryTypeReducer from \"./Administrator/CategoryTypeRedux/reducer\"\r\nimport CategoryReducer from \"./Administrator/CategoryRedux/reducer\"\r\nimport SubCategoryReducer from \"./Administrator/SubCategoryRedux/reducer\"\r\nimport VehicleReducer from \"./Administrator/VehicleRedux/reducer\"\r\nimport DriverReducer from \"./Administrator/DriverRedux/reducer\"\r\nimport CompanyGroupReducer from \"./Administrator/CompanyGroupRedux/reducer\"\r\nimport PriceListReducer from \"./Administrator/PriceList/reducer\"\r\nimport MRPMasterReducer from \"./Administrator/MRPMasterRedux/reducer\"\r\nimport MarginMasterReducer from \"./Administrator/MarginMasterRedux/reducer\"\r\nimport TermsAndCondtionsReducer from \"./Administrator/TermsAndCondtionsRedux/reducer\"\r\nimport GroupTypeReducer from \"./Administrator/GroupTypeRedux/reducer\"\r\nimport GroupReducer from \"./Administrator/GroupRedux/reducer\"\r\nimport GSTReducer from \"./Administrator/GSTRedux/reducer\"\r\nimport PartySubPartyReducer from \"./Administrator/PartySubPartyRedux/reducer\"\r\nimport PartyItemsReducer from \"./Administrator/PartyItemsRedux/reducer\"\r\n\r\n\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n\r\n  Layout,\r\n  Login,\r\n  Account,\r\n  ForgetPassword,\r\n  Profile,\r\n  SpinnerReducer,\r\n  AlertReducer,\r\n  CommonError,\r\n  CustomSearchReducer,\r\n  BreadcrumbReducer,\r\n  CommonPageFieldReducer,\r\n  // Administator\r\n  Modules,\r\n  Company,\r\n  // SubModules,\r\n  H_Pages,\r\n  // PageList,\r\n  User_Registration_Reducer,\r\n  // suppiler\r\n  SupplierReducer,\r\n  M_EmployeesReducer,\r\n  // order\r\n  OrderReducer,\r\n  // Master\r\n  RoleMaster_Reducer,\r\n  ItemMastersReducer,\r\n  PartyMasterReducer,\r\n  RoleAccessReducer,\r\n  EmployeeTypeReducer,\r\n  PartyTypeReducer,\r\n  categoryTypeReducer,\r\n  CategoryReducer,\r\n  SubCategoryReducer,\r\n  VehicleReducer,\r\n  DriverReducer,\r\n  CompanyGroupReducer,\r\n  PriceListReducer,\r\n  MRPMasterReducer,\r\n  MarginMasterReducer,\r\n  TermsAndCondtionsReducer,\r\n  GroupTypeReducer,\r\n  GroupReducer,\r\n  GSTReducer,\r\n  PartySubPartyReducer,\r\n  SubCategoryReducer,\r\n  VehicleReducer,\r\n  DriverReducer,\r\n  CompanyGroupReducer,\r\n  PriceListReducer,\r\n  MRPMasterReducer,\r\n  MarginMasterReducer,\r\n  TermsAndCondtionsReducer,\r\n  GroupTypeReducer,\r\n  GSTReducer,\r\n  PartyItemsReducer,\r\n\r\n\r\n})\r\n\r\nexport default rootReducer\r\n","D:\\GitProjects\\Manthan\\src\\routes\\route_url.js",[],"D:\\GitProjects\\Manthan\\src\\components\\HorizontalLayout\\Footer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\actions.js",[],"D:\\GitProjects\\Manthan\\src\\components\\HorizontalLayout\\Header.js",[],"D:\\GitProjects\\Manthan\\src\\components\\HorizontalLayout\\Navbar.js",[],"D:\\GitProjects\\Manthan\\src\\pages\\Dashboard\\index.js",[],"D:\\GitProjects\\Manthan\\src\\pages\\Authentication\\Login.js",["1259"],"import PropTypes from \"prop-types\"\r\nimport MetaTags from \"react-meta-tags\"\r\nimport React, { useEffect } from \"react\"\r\n\r\nimport { Row, Col, Alert, Container } from \"reactstrap\"\r\n\r\n//redux\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\n\r\nimport { withRouter, Link } from \"react-router-dom\"\r\n\r\n// availity-reactstrap-validation\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\"\r\n\r\n\r\n/// tsdfddf Punam demotest\r\n// actions\r\nimport { loginUser, postSuperAdmin } from \"../../store/actions\"\r\n\r\n// import images\r\nimport logo from \"../../assets/images/logo-sm.svg\"\r\n\r\n//Import config\r\nimport CarouselPage from \"./CarouselPage\"\r\nimport axios from \"axios\";\r\n\r\nconst Login = props => {\r\n  const dispatch = useDispatch()\r\n\r\n  const { loginError } = useSelector(state => ({\r\n    loginError: state.Login.loginError,\r\n  }))\r\n\r\n  console.log(\"loginError\", loginError)\r\n  useEffect(() => {\r\n\r\n    localStorage.clear();\r\n    document.getElementById(\"UserName\").focus();\r\n  }, [])\r\n  // handleValidSubmit\r\n  const handleValidSubmit = (event, values) => {\r\n    dispatch(loginUser(values, props.history))\r\n  }\r\n\r\n  function createSuperAdminHandler() {\r\n    //     debugger\r\n    //     alert(\"call super admin API SuccessFully\")\r\n    //     let token = JSON.parse(sessionStorage.getItem('token'));\r\n    // if (token==null)token=''\r\n    //     const baseURL = \"http://192.168.1.114:8001/SuperAdmin\";\r\n    //     axios.get(baseURL, { headers: { \"Authorization\": `Bearer${token}` } }).then((response) => {\r\n    //       // setPost(response.data);\r\n    //       console.log(response)\r\n    //     });\r\n    dispatch(postSuperAdmin())\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MetaTags>\r\n        <title>Login | FoodERP Live</title>\r\n      </MetaTags>\r\n      <div className=\"auth-page\">\r\n        <Container fluid className=\"p-0\">\r\n          <Row className=\"g-0\">\r\n            <Col lg={4} md={5} className=\"col-xxl-3\">\r\n              <div className=\"auth-full-page-content d-flex p-sm-5 p-4\">\r\n                <div className=\"w-100\">\r\n                  <div className=\"d-flex flex-column h-100\">\r\n                    <div className=\"mb-4 mb-md-5 text-center\">\r\n                      <Link to=\"/dashboard\" className=\"d-block auth-logo\">\r\n                        <img src={logo} alt=\"\" height=\"28\" /> <span className=\"logo-txt\">FoodERP</span>\r\n                      </Link>\r\n                    </div>\r\n                    <div className=\"auth-content my-auto\">\r\n                      <div className=\"text-center\">\r\n                        <h5 className=\"mb-0\">Welcome !</h5>\r\n                        <p className=\"text-muted mt-2\">Sign in to Continue FoodERP.</p>\r\n                      </div>\r\n                      {loginError ? (\r\n                        <Alert color=\"danger\" style={{ marginTop: \"13px\" }}>\r\n                          {loginError}\r\n                        </Alert>\r\n                      ) : null}\r\n                      <AvForm\r\n                        className=\"custom-form mt-4 pt-2\"\r\n                        onValidSubmit={(e, v) => {\r\n                          handleValidSubmit(e, v)\r\n                        }}\r\n                      >\r\n\r\n                        <div className=\"mb-3\">\r\n                          <AvField\r\n                            name=\"UserName\"\r\n                            label=\"UseName\"\r\n                            // value=\"Pradnya11122\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Enter User Name\"\r\n                            type=\"text\"\r\n                            required\r\n                          />\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                          <div className=\"d-flex align-items-start\">\r\n                            <div className=\"flex-grow-1\">\r\n                              <label className=\"form-label\">Password</label>\r\n                            </div>\r\n                            {/* <div className=\"flex-shrink-0\">\r\n                              <div className=\"\">\r\n                                <Link to=\"/forgot-password\" className=\"text-muted\">Forgot password?</Link>\r\n                              </div>\r\n                            </div> */}\r\n                          </div>\r\n\r\n                          <div className=\"mb-3\">\r\n                            <AvField\r\n                              name=\"Password\"\r\n                              // value=\"123456\"\r\n                              type=\"password\"\r\n                              className=\"form-control\"\r\n                              required\r\n                              placeholder=\"Enter Password\"\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"row mb-4\">\r\n\r\n                          <Link to=\"/forgot-password\" className=\"fw-semibold\">Forgot password?</Link>\r\n\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                          <button className=\"btn btn-primary w-100 waves-effect waves-light\" type=\"submit\">Login</button>\r\n                        </div>\r\n                      </AvForm>\r\n\r\n                      <div className=\"mt-4 mt-md-5 text-center\">\r\n                        <p className=\"mb-0 text-primary fw-semibold\" onClick={() => { createSuperAdminHandler() }}> Create SuperAdmin </p>\r\n                      </div>\r\n\r\n                    </div>\r\n                    <div className=\"mt-4 mt-md-5 text-center\">\r\n                      <p className=\"mb-0\">© {new Date().getFullYear()} Minia . Crafted with <i className=\"mdi mdi-heart text-danger\"></i> by Themesbrand</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n            <CarouselPage />\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default withRouter(Login)\r\n\r\nLogin.propTypes = {\r\n  history: PropTypes.object,\r\n}\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Authentication\\ForgetPassword.js",["1260","1261","1262","1263"],"import PropTypes from \"prop-types\"\r\nimport MetaTags from \"react-meta-tags\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { Row, Col, Alert, Container, Button } from \"reactstrap\"\r\n\r\n//redux\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\n\r\nimport { withRouter, Link, useHistory } from \"react-router-dom\"\r\n\r\n// availity-reactstrap-validation\r\nimport { AvForm, AvField, AvInput } from \"availity-reactstrap-validation\"\r\n\r\n// action\r\nimport { changePasswordForForgetPassword, changePasswordForForgetPasswordError, changePasswordForForgetPasswordSuccess, userForgetPassword, userForgetPassword_sendOTP, userForgetPassword_sendOTP_Error, userForgetPassword_sendOTP_Success } from \"../../store/actions\"\r\n\r\n// import images\r\nimport logo from \"../../assets/images/logo-sm.svg\"\r\nimport CarouselPage from \"./CarouselPage\"\r\nimport resetImage from \"../../assets/images/resetpassword.png\"\r\n\r\nconst ForgetPasswordPage = props => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const [paswErr, setPaswErr] = useState(false)\r\n  const { sendOTPSuccessMsg_redux, sendOtpMegError_reducx, sendPasswordError_reducx, sendPasswordMsg_reducx } = useSelector(state => ({\r\n    sendOTPSuccessMsg_redux: state.ForgetPassword.sendOTPSuccessMsg,\r\n    sendOtpMegError_reducx: state.ForgetPassword.sendOtpMegError,\r\n    sendPasswordMsg_reducx: state.ForgetPassword.sendPasswordMsg,\r\n    sendPasswordError_reducx: state.ForgetPassword.sendPasswordError,\r\n\r\n\r\n  }))\r\n  const [sendPasswordMsg, setSendPasswordMsg] = useState(null)\r\n  const [sendPasswordError, setSendPasswordError] = useState(null)\r\n\r\n  const [sendOtpMegError, setSendOtpMegError] = useState(null)\r\n  const [sendOTPSuccessMsg, setSendOTPSuccessMsg] = useState(null)\r\n  const [setpawShowUI, setSetpawShowUI] = useState(false)\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (sendPasswordMsg_reducx) {\r\n      setSendPasswordMsg(sendPasswordMsg_reducx)\r\n      setSendPasswordError(null)\r\n\r\n\r\n      dispatch(changePasswordForForgetPasswordSuccess(null))\r\n      // dispatch(changePasswordForForgetPasswordError(null))\r\n\r\n    }\r\n    if (sendPasswordError_reducx) {\r\n      setSendPasswordError(sendPasswordError_reducx)\r\n      dispatch(changePasswordForForgetPasswordError(null))\r\n      setSendPasswordMsg(null)\r\n      setSendOTPSuccessMsg(null)\r\n\r\n    }\r\n  }, [sendPasswordMsg_reducx, sendPasswordError_reducx])\r\n\r\n  useEffect(() => {\r\n    if (sendOTPSuccessMsg_redux) {\r\n      setSendOTPSuccessMsg(sendOTPSuccessMsg_redux)\r\n      setSendOtpMegError(null)\r\n      setSetpawShowUI(true)\r\n      dispatch(userForgetPassword_sendOTP_Success(null))\r\n\r\n    }\r\n    if (sendOtpMegError_reducx) {\r\n      setSendOtpMegError(sendOtpMegError_reducx)\r\n      dispatch(userForgetPassword_sendOTP_Error(null))\r\n\r\n    }\r\n\r\n  }, [sendOTPSuccessMsg_redux, sendOtpMegError_reducx])\r\n\r\n  function handleValidSubmit(event, values) {\r\n    var jsonBody = JSON.stringify({\r\n      Email: values.email,\r\n    })\r\n    dispatch(userForgetPassword_sendOTP(jsonBody))\r\n  }\r\n  function handleValidSubmit1(event, values) {\r\n    var paswd = values.password1\r\n    var pawdcn = values.passwordcon\r\n    debugger\r\n    if (!(paswd === pawdcn)) {\r\n      // setPaswErr(\"form-control is-invalid mb-2\")\r\n      setPaswErr(true)\r\n      return\r\n    }\r\n    else {\r\n      // setPaswErr(\"form-control is-valid mb-2\")\r\n      setPaswErr(false)\r\n      var jsonBody = JSON.stringify({\r\n        UserID: values.userId,\r\n        OTP: values.OTP,\r\n        newpassword: values.passwordcon\r\n      })\r\n      dispatch(changePasswordForForgetPassword(jsonBody))\r\n      // return\r\n    }\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <MetaTags>\r\n        <title>\r\n          Forget Password | FoodERP - React Admin & FoodERP Template\r\n        </title>\r\n      </MetaTags>\r\n      <div className=\"auth-page\">\r\n        <Container fluid className=\"p-0\">\r\n          <Row className=\"g-0\">\r\n            <Col lg={4} md={5} className=\"col-xxl-3\">\r\n              <div className=\"auth-full-page-content d-flex p-sm-5 p-4\">\r\n                <div className=\"w-100\">\r\n                  <div className=\"d-flex flex-column h-100\">\r\n                    <div className=\"mb-4 mb-md-5 text-center\">\r\n                      <Link to=\"/dashboard\" className=\"d-block auth-logo\">\r\n                        <img src={logo} alt=\"\" height=\"28\" /> <span className=\"logo-txt\">FoodERP</span>\r\n                      </Link>\r\n                    </div>\r\n                    {\r\n                      !sendPasswordMsg ?\r\n                        <div className=\"auth-content my-auto text-center\">\r\n                          <img src={resetImage} alt=\"\" height=\"100\" />\r\n                          <div className=\"text-center\">\r\n                            <h5 className=\"mb-0\">  Reset Password</h5>\r\n                          </div>\r\n\r\n                          {sendOtpMegError||sendPasswordError ? (\r\n                            <Alert color=\"danger\" style={{ marginTop: \"13px\" }}>\r\n                              {sendOtpMegError}{sendPasswordError}\r\n                            </Alert>\r\n                          ) : null}\r\n                          {sendOTPSuccessMsg ? (\r\n                            <Alert color=\"success\" style={{ marginTop: \"13px\" }}>\r\n                              {sendOTPSuccessMsg}\r\n                            </Alert>\r\n                          ) : null}\r\n\r\n                          {((setpawShowUI))\r\n                            ?\r\n                            <AvForm className=\"custom-form mt-4\"\r\n                              onValidSubmit={(e, v) => handleValidSubmit1(e, v)}\r\n                            >\r\n                              <div className=\"mb-3\">\r\n                                <label>UserID</label>\r\n                                <AvInput\r\n                                  name=\"userId\"\r\n                                  className=\"form-control mb-2\"\r\n                                  // dissabled={true}\r\n                                  // autoComplete=\"new-email\"\r\n                                  placeholder=\"UserID\"\r\n                                  type=\"text\"\r\n                                  autoComplete=\"off\"\r\n                                  required\r\n                                />\r\n                                <label>Enter OTP</label>\r\n                                <AvInput\r\n                                  name=\"OTP\"\r\n                                  className=\"form-control mb-2\"\r\n                                  // dissabled={true}\r\n                                  placeholder=\"Enter OTP\"\r\n                                  type=\"text\"\r\n                                  required\r\n                                />\r\n                                <label>Password</label>\r\n\r\n                                <AvInput\r\n                                  name=\"password1\"\r\n                                  className={\"form-control  mb-2\"}\r\n                                  // dissabled={true}\r\n                                  invalid={paswErr}\r\n                                  autoComplete=\"new-password\"\r\n                                  placeholder=\"Enter password\"\r\n                                  type=\"password\"\r\n                                  required\r\n                                />\r\n                                {(paswErr === true)\r\n                                  ?\r\n                                  <div className=\"text-danger\"> Please Enter Correct Password</div>\r\n                                  : <></>}\r\n                                <label>confirm password</label>\r\n\r\n                                <AvInput\r\n                                  name=\"passwordcon\"\r\n                                  className={\"form-control  mb-2\"}\r\n                                  // dissabled={true}\r\n                                  autoComplete=\"new-password\"\r\n                                  invalid={paswErr}\r\n                                  placeholder=\"Enter confirm password\"\r\n                                  type=\"password\"\r\n                                  required\r\n                                />\r\n                                {/* {(paswErr === true)\r\n                                  ?\r\n                                  <div className=\"text-danger\"> Please Enter Correct Password</div>\r\n                                  : <></>} */}\r\n                              </div>\r\n\r\n                              <div className=\"mb-3 mt-4\">\r\n                                <button className=\"btn btn-primary w-100 waves-effect waves-light\" type=\"submit\">change Password</button>\r\n                              </div>\r\n                            </AvForm>\r\n                            :\r\n                            <AvForm className=\"custom-form mt-4\"\r\n                              onValidSubmit={(e, v) => handleValidSubmit(e, v)}\r\n                            >\r\n                              <div className=\"mb-3\">\r\n                                <AvField\r\n                                  name=\"email\"\r\n                                  label=\"Email\"\r\n                                  className=\"form-control\"\r\n                                  dissabled={true}\r\n                                  placeholder=\"Enter email or phone no\"\r\n                                  type=\"email\"\r\n                                  required\r\n                                />\r\n                              </div>\r\n                              <div className=\"mb-3 mt-4\">\r\n                                <button className=\"btn btn-primary w-100 waves-effect waves-light\" type=\"submit\">Reset</button>\r\n                              </div>\r\n                            </AvForm>\r\n                          }\r\n\r\n\r\n\r\n                          <div className=\"mt-5 text-center\">\r\n                            <p className=\"text-muted mb-0\">Remember It ?  &nbsp\r\n                              <Link to=\"/Login\" className=\"text-primary fw-semibold\">Login</Link>\r\n                              {/* <a href=\"/login\"\r\n                          className=\"text-primary fw-semibold\"> Sign In </a> */}\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n                        :\r\n                        <div className=\"auth-content my-auto text-center\">\r\n                          <img src={resetImage} alt=\"\" height=\"100\" />\r\n                          <div className=\"text-center\">\r\n                            <h5 className=\"mb-0\">  Reset Password success</h5>\r\n                          </div>\r\n\r\n                          <Alert color=\"success\" style={{ marginTop: \"13px\" }}>\r\n                            {sendPasswordMsg}\r\n                          </Alert>\r\n\r\n                          <div className=\"mt-5 text-center\">\r\n                            <Link to=\"/Login\" className=\"text-primary fw-semibold\"><Button type=\"submit\" className=\"btn btn-success w-md\" >login Here</Button></Link>\r\n\r\n                          </div>\r\n                        </div>\r\n                    }\r\n                    <div className=\"mt-4 mt-md-5 text-center\">\r\n                      <p className=\"mb-0\">© {new Date().getFullYear()} Minia   . Crafted with <i className=\"mdi mdi-heart text-danger\"></i> by Themesbrand</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n            <CarouselPage />\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nForgetPasswordPage.propTypes = {\r\n  history: PropTypes.object,\r\n}\r\n\r\nexport default withRouter(ForgetPasswordPage)\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Authentication\\Logout.js",[],"D:\\GitProjects\\Manthan\\src\\pages\\Authentication\\ResetPassword.js",[],"D:\\GitProjects\\Manthan\\src\\pages\\Authentication\\SendOTP.js",["1264","1265","1266","1267"],"import React from \"react\";\r\nimport { Col, Container, Row, CardHeader, Label } from \"reactstrap\";\r\nimport { AvForm, AvInput, AvGroup, AvFeedback,AvField } from \"availity-reactstrap-validation\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport MetaTags from \"react-meta-tags\"\r\nimport { Link } from \"react-router-dom\"\r\n// import images\r\nimport logo from \"../../assets/images/logo-sm.svg\"\r\nimport resetImage from \"../../assets/images/resetpassword.png\"\r\n//Import config\r\nimport CarouselPage from \"./CarouselPage\"\r\nconst SendOTP = () => {\r\n  const history = useHistory();\r\n  function submit(e) {\r\n    history.push(\"/EnterOTP\");\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <MetaTags>\r\n        <title>Login | FoodERP Live</title>\r\n      </MetaTags>\r\n      <div className=\"auth-page\">\r\n        <Container fluid className=\"p-0\">\r\n          <Row className=\"g-0\">\r\n            <Col lg={4} md={5} className=\"col-xxl-4\">\r\n              <div className=\"auth-full-page-content d-flex p-sm-5 p-4\">\r\n                <div className=\"w-100\">\r\n                  <div className=\"d-flex flex-column h-100\">\r\n                    <div className=\"mb-4 mb-md-5 text-center\">\r\n                      <Link to=\"/dashboard\" className=\"d-block auth-logo\">\r\n                        <img src={logo} alt=\"\" height=\"28\" /> <span className=\"logo-txt\">FoodERP</span>\r\n                      </Link>\r\n                    </div>\r\n                    <div className=\"auth-content my-auto text-center\">\r\n                      <img src={resetImage} alt=\"\" height=\"100\" />\r\n                      <div className=\"text-center\">\r\n                        <h5 className=\"mb-0\">  Reset Password...!</h5>\r\n                      </div>\r\n                      <AvForm\r\n                        className=\"custom-form mt-4 pt-2\"\r\n                        onValidSubmit={(e, v) => {\r\n                          submit(e, v)\r\n                        }}\r\n                      >\r\n                        <AvGroup>\r\n                          <Row  >\r\n                          <div className=\"mb-8\">\r\n                          <AvField\r\n                            name=\"UserName\"\r\n                            label=\"User Name\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Enter UserName/MobileNumber/EmailID\"\r\n                            type=\"text\"\r\n                            required\r\n                          />\r\n                        </div>\r\n                            <div className=\"mb-3  text-center\">\r\n\r\n                            <button className=\"btn btn-primary w-100 waves-effect waves-light\" type=\"submit\">\r\n                              Send OTP\r\n                            </button>\r\n                          </div>\r\n                          </Row>\r\n                         \r\n                        </AvGroup>\r\n                      </AvForm>\r\n                    </div>\r\n                    <div className=\"mt-4 mt-md-5 text-center\">\r\n                      <p className=\"mb-0\">© {new Date().getFullYear()} FoodERP . Crafted with <i className=\"mdi mdi-heart text-danger\"></i> by Attrib Solutions.</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n            <CarouselPage />\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default SendOTP;\r\n\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Utility\\Error500.js",[],"D:\\GitProjects\\Manthan\\src\\pages\\Utility\\Error404.js",[],"D:\\GitProjects\\Manthan\\src\\pages\\Authentication\\EnterOTP.js",[],"D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ModulesPages\\Modules.js",["1268","1269","1270","1271","1272","1273","1274","1275","1276"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    Col,\r\n    Container,\r\n    Row,\r\n    Label,\r\n    CardHeader,\r\n    FormGroup,\r\n    Input,\r\n} from \"reactstrap\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    PostModelsSubmit,\r\n    updateModuleID,\r\n    PostModelsSubmitSuccess,\r\n    editModuleIDSuccess,\r\n    updateModuleIDSuccess,\r\n} from \"../../../store/Administrator/ModulesRedux/actions\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { AlertState, commonPageField } from \"../../../store/actions\";\r\nimport { Breadcrumb_inputName } from \"../../../store/Utilites/Breadcrumb/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { MODULE_lIST } from \"../../../routes/route_url\";\r\nimport { comAddPageFieldFunc, formValid, initialFiledFunc, onChangeText } from \"../../../components/Common/CmponentRelatedCommonFile/validationFunction\";\r\nimport SaveButton from \"../../../components/Common/CommonSaveButton\";\r\n\r\nconst Modules = (props) => {\r\n\r\n    const formRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [EditData, setEditData] = useState([]);\r\n    const [pageMode, setPageMode] = useState(\"save\");\r\n    const [userPageAccessState, setUserPageAccessState] = useState('');\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { postMsg, pageField, userAccess, updateMsg } = useSelector((state) => ({\r\n        postMsg: state.Modules.modulesSubmitSuccesss,\r\n        updateMsg: state.Modules.updateMessage,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField\r\n\r\n    }));\r\n\r\n    useEffect(() => {\r\n        dispatch(commonPageField(14))\r\n    }, []);\r\n\r\n    {/** Dyanamic Page access state and OnChange function */ }\r\n    const initialFiled = {\r\n        id: \"\",\r\n        Name: \"\",\r\n        DisplayIndex: \"\",\r\n        Icon: \"\",\r\n        isActive: false,\r\n    }\r\n\r\n    const [state, setState] = useState(initialFiledFunc(initialFiled))\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(\"editValue\")\r\n    const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserPageAccessState(userAcc)\r\n        };\r\n    }, [userAccess])\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n        debugger\r\n        // if (!(userPageAccessState === '')) { document.getElementById(\"txtName\").focus(); }\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n                debugger\r\n                const { id, Name, DisplayIndex, isActive, Icon } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n                hasValid.Name.valid = true;\r\n                hasValid.DisplayIndex.valid = true;\r\n                hasValid.isActive.valid = true;\r\n                hasValid.Icon.valid = true;\r\n\r\n                values.Name = Name;\r\n                values.DisplayIndex = DisplayIndex;\r\n                values.isActive = isActive;\r\n                values.Icon = Icon;\r\n                values.id = id\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Modules))\r\n\r\n            }\r\n            dispatch(editModuleIDSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n    // This UseEffect clear Form Data and when modules Save Successfully.\r\n    useEffect(() => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200) && !(pageMode === \"dropdownAdd\")) {\r\n            dispatch(PostModelsSubmitSuccess({ Status: false }))\r\n            formRef.current.reset();\r\n            if (pageMode === \"dropdownAdd\") {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                }))\r\n            }\r\n            else {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                    RedirectPath: MODULE_lIST,\r\n\r\n                }))\r\n            }\r\n        } else if ((postMsg.Status === true) && !(pageMode === \"dropdownAdd\")) {\r\n            dispatch(PostModelsSubmitSuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(postMsg.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            history.push({\r\n                pathname: MODULE_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateModuleIDSuccess({ Status: false }));\r\n            dispatch(\r\n                AlertState({\r\n                    Type: 3,\r\n                    Status: true,\r\n                    Message: JSON.stringify(updateMsg.Message),\r\n                })\r\n            );\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    //'Save' And 'Update' Button Handller\r\n    const formSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        if (formValid(state, setState)) {\r\n            const jsonBody = JSON.stringify({\r\n                Name: values.Name,\r\n                DisplayIndex: values.DisplayIndex,\r\n                isActive: values.isActive,\r\n                Icon: values.Icon,\r\n                CreatedBy: 9,\r\n                UpdatedBy: 9\r\n            });\r\n\r\n            if (pageMode === 'edit') {\r\n                dispatch(updateModuleID(jsonBody, values.id));\r\n                console.log(\"update jsonBody\", jsonBody)\r\n            }\r\n            else {\r\n                dispatch(PostModelsSubmit(jsonBody));\r\n                console.log(\"post jsonBody\", jsonBody)\r\n            }\r\n        }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <MetaTags>\r\n                        <title>{userPageAccessState.PageHeading}| FoodERP-React FrontEnd</title>\r\n                    </MetaTags>\r\n                    <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n                    <Container fluid  >\r\n\r\n                        <Card className=\"text-black\" >\r\n                            <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form onSubmit={formSubmitHandler} ref={formRef} noValidate>\r\n\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}  >\r\n                                            <Card >\r\n                                                <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \" >\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Name} </Label>\r\n                                                            <Input\r\n                                                                name=\"Name\"\r\n                                                                id=\"txtName\"\r\n                                                                value={values.Name}\r\n                                                                type=\"text\"\r\n                                                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                placeholder=\"Please Enter Name\"\r\n                                                                autoComplete='off'\r\n                                                                autoFocus={true}\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.Name.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.DisplayIndex} </Label>\r\n                                                            <Input name=\"DisplayIndex\" autoComplete='off'\r\n                                                                placeholder=\"Please Enter DisplayIndex\"\r\n                                                                value={values.DisplayIndex}\r\n                                                                type=\"text\"\r\n                                                                className={isError.DisplayIndex.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.DisplayIndex.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.DisplayIndex}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \" >\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Icon} </Label>\r\n                                                            <Input name=\"Icon\"\r\n                                                                autoComplete='off'\r\n                                                                placeholder=\"Please Enter IconPath\"\r\n                                                                value={values.Icon}\r\n                                                                type=\"text\"\r\n                                                                className={isError.Icon.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.Icon.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Icon}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n\r\n                                                    <FormGroup className=\"mb-2 col col-sm-5\">\r\n                                                        <Row className=\"justify-content-md-left\">\r\n                                                            <Label htmlFor=\"horizontal-firstname-input\" className=\"col-sm-3 col-form-label\" >{fieldLabel.isActive}  </Label>\r\n                                                            <Col md={2} style={{ marginTop: '9px' }} >\r\n                                                                <div className=\"form-check form-switch form-switch-md mb-3\" >\r\n                                                                    <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                        defaultChecked={values.isActive}\r\n                                                                        name=\"isActive\"\r\n                                                                        onChange={(event) => onChangeText({ event, state, setState })}\r\n                                                                    />\r\n                                                                </div>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup>\r\n\r\n                                                    <FormGroup >\r\n                                                        <Row >\r\n                                                            <Col sm={2}>\r\n                                                                <SaveButton pageMode={pageMode} userAcc={userPageAccessState}\r\n                                                                    module={\"Modules\"}\r\n                                                                />\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup >\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\nexport default Modules\r\n// if (!(userPageAccessState === '')) {\r\n\r\n// }\r\n// else {\r\n//     return (\r\n//         <React.Fragment></React.Fragment>\r\n//     )\r\n// }","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ModulesPages\\ModulesList.js",["1277"],"import React, { useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    deleteModuleID,\r\n    deleteModuleIDSuccess,\r\n    editModuleID,\r\n    fetchModelsList,\r\n    PostModelsSubmitSuccess,\r\n    updateModuleIDSuccess\r\n} from \"../../../store/actions\";\r\nimport Modules from \"./Modules\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport CommonListPage from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport { MODULE } from \"../../../routes/route_url\";\r\nconst ModulesList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            tableList: state.Modules.modulesList,\r\n            updateMsg: state.Modules.updateMessage,\r\n            editData: state.Modules.editData,\r\n            deleteMsg: state.Modules.deleteModuleIDSuccess,\r\n            postMsg: state.Modules.modulesSubmitSuccesss,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList\r\n        })\r\n    );\r\n\r\n    const action = {\r\n        getList: fetchModelsList,\r\n        editId: editModuleID,\r\n        deleteId: deleteModuleID,\r\n        updateSucc: updateModuleIDSuccess,\r\n        deleteSucc: deleteModuleIDSuccess,\r\n        postSucc: PostModelsSubmitSuccess\r\n    }\r\n\r\n    //  This UseEffect => Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(15))\r\n        dispatch(fetchModelsList());\r\n    }, []);\r\n\r\n    const { pageField } = reducers\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                (pageField) ?\r\n                    <CommonListPage\r\n                        action={action}\r\n                        reducers={reducers}\r\n                        MasterModal={Modules}\r\n                        masterPath={MODULE}\r\n                        ButtonMsgLable={\"Module\"}\r\n                        deleteName={\"Name\"}\r\n                    />\r\n                    : null\r\n            }\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ModulesList\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\CompanyPages\\CompanyList.js",["1278","1279"],"import React, { useEffect } from \"react\";\r\nimport {\r\n    deleteCompany_ID,\r\n    editCompanyID,\r\n    fetchCompanyList,\r\n    updateCompanyIDSuccess,\r\n    deleteCompanyIDSuccess,\r\n    PostCompanySubmitSuccess,\r\n} from \"../../../store/Administrator/CompanyRedux/actions\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport CompanyModule from \"./CompanyModule\";\r\nimport CommonListPage from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport { COMPANY } from \"../../../routes/route_url\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst CompanyList = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            tableList: state.Company.companyList,\r\n            postMsg: state.Company.postMsg,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            editData: state.Company.editData,\r\n            updateMsg: state.Company.updateMessage,\r\n            deleteMsg: state.Company.deleteCompanyID,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList\r\n        })\r\n    );\r\n\r\n\r\n    const action = {\r\n        getList: fetchCompanyList,\r\n        editId: editCompanyID,\r\n        deleteId: deleteCompany_ID,\r\n        postSucc: PostCompanySubmitSuccess,\r\n        updateSucc: updateCompanyIDSuccess,\r\n        deleteSucc: deleteCompanyIDSuccess\r\n    }\r\n\r\n\r\n    // Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(1))\r\n        dispatch(fetchCompanyList());\r\n    }, []);\r\n\r\n    const { pageField } = reducers;\r\n    debugger\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                (pageField) ?\r\n                    <CommonListPage\r\n                        action={action}\r\n                        reducers={reducers}\r\n                        MasterModal={CompanyModule}\r\n                        masterPath={COMPANY}\r\n                        ButtonMsgLable={\"Company\"}\r\n                        deleteName={\"Name\"}\r\n                    />\r\n                    : null\r\n            }\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default CompanyList;\r\n\r\n\r\n\r\n\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\CompanyPages\\CompanyModule.js",["1280","1281","1282","1283","1284","1285","1286","1287","1288"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Container,\r\n  Row,\r\n  Label,\r\n  CardHeader,\r\n  FormGroup,\r\n  Input,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport {\r\n  editCompanyIDSuccess,\r\n  PostCompanySubmit,\r\n  PostCompanySubmitSuccess,\r\n  updateCompanyID,\r\n  getCompanyGroup,\r\n  updateCompanyIDSuccess\r\n} from \"../../../store/Administrator/CompanyRedux/actions\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { AlertState, commonPageField, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { Breadcrumb_inputName } from \"../../../store/Utilites/Breadcrumb/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  comAddPageFieldFunc,\r\n  formValid,\r\n  initialFiledFunc,\r\n  onChangeSelect,\r\n  onChangeText,\r\n\r\n} from \"../../../components/Common/CmponentRelatedCommonFile/validationFunction\";\r\nimport { COMPANY_lIST } from \"../../../routes/route_url\";\r\nimport SaveButton from \"../../../components/Common/CommonSaveButton\";\r\n\r\nconst CompanyModule = (props) => {\r\n\r\n  const formRef = useRef(null);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory()\r\n\r\n  //*** \"isEditdata get all data from ModuleID for Binding  Form controls\r\n\r\n  const [EditData, setEditData] = useState({});\r\n  const [modalCss, setModalCss] = useState(false);\r\n  const [pageMode, setPageMode] = useState(\"save\");\r\n  const [userPageAccessState, setUserPageAccessState] = useState('');\r\n\r\n  const [CompanyGroupselect, setCompanyGroup] = useState(\"\");\r\n\r\n  //Access redux store Data /  'save_ModuleSuccess' action data\r\n  const { postMsg, updateMsg, userAccess, pageField } = useSelector((state) => ({\r\n    postMsg: state.Company.postMsg,\r\n    updateMsg: state.Company.updateMessage,\r\n    userAccess: state.Login.RoleAccessUpdateData,\r\n    pageField: state.CommonPageFieldReducer.pageField\r\n  }));\r\n\r\n  {/** Dyanamic Page access state and OnChange function */ }\r\n  const initialFiled = {\r\n    id: \"\",\r\n    Name: \"\",\r\n    Address: \"\",\r\n    GSTIN: \"\",\r\n    PhoneNo: \"\",\r\n    CompanyAbbreviation: \"\",\r\n    EmailID: \"\",\r\n    CompanyGroup: \"\"\r\n  }\r\n\r\n  const [state, setState] = useState(initialFiledFunc(initialFiled))\r\n\r\n\r\n  const values = { ...state.values }\r\n  const { isError } = state;\r\n  const { fieldLabel } = state;\r\n\r\n  useEffect(() => {\r\n    dispatch(commonPageFieldSuccess(null));\r\n    dispatch(commonPageField(2))\r\n    dispatch(getCompanyGroup());\r\n  }, [dispatch]);\r\n\r\n  const location = { ...history.location }\r\n  const hasShowloction = location.hasOwnProperty(\"editValue\")\r\n  const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n  // userAccess useEffect\r\n  useEffect(() => {\r\n    let userAcc = null;\r\n    let locationPath = location.pathname;\r\n\r\n    if (hasShowModal) {\r\n      locationPath = props.masterPath;\r\n    };\r\n\r\n    userAcc = userAccess.find((inx) => {\r\n      return (`/${inx.ActualPagePath}` === locationPath)\r\n    })\r\n\r\n    if (userAcc) {\r\n      setUserPageAccessState(userAcc)\r\n    };\r\n  }, [userAccess])\r\n\r\n  useEffect(() => {\r\n\r\n    if ((hasShowloction || hasShowModal)) {\r\n\r\n      let hasEditVal = null\r\n      if (hasShowloction) {\r\n        setPageMode(location.pageMode)\r\n        hasEditVal = location.editValue\r\n      }\r\n      else if (hasShowModal) {\r\n        hasEditVal = props.editValue\r\n        setPageMode(props.pageMode)\r\n        setModalCss(true)\r\n      }\r\n\r\n      if (hasEditVal) {\r\n        const { id, Name, Address, GSTIN, PhoneNo, CompanyAbbreviation, EmailID, CompanyGroup, CompanyGroupName } = hasEditVal\r\n        const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n        hasValid.Name.valid = true;\r\n        hasValid.Address.valid = true;\r\n        hasValid.GSTIN.valid = true;\r\n        hasValid.PhoneNo.valid = true;\r\n        hasValid.CompanyAbbreviation.valid = true;\r\n        hasValid.EmailID.valid = true;\r\n        hasValid.CompanyGroup.valid = true;\r\n\r\n        values.id = id\r\n        values.Name = Name\r\n        values.Address = Address;\r\n        values.GSTIN = GSTIN;\r\n        values.PhoneNo = PhoneNo;\r\n        values.CompanyAbbreviation = CompanyAbbreviation;\r\n        values.EmailID = EmailID;\r\n        values.CompanyGroup = { label: CompanyGroupName, value: CompanyGroup };\r\n        setState({ values, fieldLabel, hasValid, required, isError })\r\n        dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n      }\r\n      dispatch(editCompanyIDSuccess({ Status: false }))\r\n    }\r\n\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    if ((postMsg.Status === true) && (postMsg.StatusCode === 200) && !(pageMode === \"dropdownAdd\")) {\r\n      dispatch(PostCompanySubmitSuccess({ Status: false }))\r\n      setCompanyGroup('')\r\n      formRef.current.reset();\r\n      if (pageMode === \"other\") {\r\n        dispatch(AlertState({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: postMsg.Message,\r\n        }))\r\n      }\r\n      else {\r\n        dispatch(AlertState({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: postMsg.Message,\r\n          RedirectPath: COMPANY_lIST,\r\n        }))\r\n      }\r\n    }\r\n    else if ((postMsg.Status === true) && !(pageMode === \"dropdownAdd\")) {\r\n      dispatch(PostCompanySubmitSuccess({ Status: false }))\r\n      dispatch(AlertState({\r\n        Type: 4,\r\n        Status: true,\r\n        Message: JSON.stringify(postMessage.Message),\r\n        RedirectPath: false,\r\n        AfterResponseAction: false\r\n      }));\r\n    }\r\n  }, [postMsg])\r\n\r\n  useEffect(() => {\r\n    if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n      history.push({\r\n        pathname: COMPANY_lIST,\r\n      })\r\n    } else if (updateMsg.Status === true && !modalCss) {\r\n      dispatch(updateCompanyIDSuccess({ Status: false }));\r\n      dispatch(\r\n        AlertState({\r\n          Type: 3,\r\n          Status: true,\r\n          Message: JSON.stringify(updateMsg.Message),\r\n        })\r\n      );\r\n    }\r\n  }, [updateMsg, modalCss]);\r\n\r\n  const { CompanyGroup } = useSelector((state) => ({\r\n    CompanyGroup: state.Company.CompanyGroup\r\n  }));\r\n\r\n  const CompanyGroupValues = CompanyGroup.map((Data) => ({\r\n    value: Data.id,\r\n    label: Data.Name\r\n  }));\r\n\r\n  useEffect(() => {\r\n\r\n    if (pageField) {\r\n      const fieldArr = pageField.PageFieldMaster\r\n      comAddPageFieldFunc({ state, setState, fieldArr })\r\n    }\r\n  }, [pageField])\r\n\r\n  const formSubmitHandler = (event) => {\r\n    debugger\r\n    event.preventDefault();\r\n    if (formValid(state, setState)) {\r\n      const jsonBody = JSON.stringify({\r\n        Name: values.Name,\r\n        Address: values.Address,\r\n        GSTIN: values.GSTIN,\r\n        PhoneNo: values.PhoneNo,\r\n        CompanyAbbreviation: values.CompanyAbbreviation,\r\n        EmailID: values.EmailID,\r\n        CompanyGroup: values.CompanyGroup.value,\r\n        CreatedBy: 1,\r\n        UpdatedBy: 1,\r\n      });\r\n\r\n      if (pageMode === \"edit\") {\r\n        dispatch(updateCompanyID(jsonBody, values.id,));\r\n        console.log(\"Update jsonBody\", jsonBody)\r\n      }\r\n      else {\r\n        dispatch(PostCompanySubmit(jsonBody));\r\n        console.log(\"post jsonBody\", jsonBody)\r\n\r\n      }\r\n    }\r\n  };\r\n\r\n  // //'Save' And 'Update' Button Handller\r\n  // const handleValidSubmit = (event, values) => {\r\n  //   debugger\r\n  //   const jsonBody = JSON.stringify({\r\n  //     Name: values.Name,\r\n  //     Address: values.Address,\r\n  //     GSTIN: values.GSTIN,\r\n  //     PhoneNo: values.PhoneNo,\r\n  //     CompanyAbbreviation: values.CompanyAbbreviation,\r\n  //     EmailID: values.EmailID,\r\n  //     CompanyGroup: values.CompanyGroupselect,\r\n  //     CreatedBy: 1,\r\n  //     UpdatedBy: 1,\r\n  //   });\r\n\r\n  //   if (pageMode === 'edit') {\r\n  //     dispatch(updateCompanyID(jsonBody, EditData.id));\r\n  //     console.log(\"Update jsonBody\", jsonBody)\r\n  //   }\r\n\r\n  //   else {\r\n  //     dispatch(PostCompanySubmit(jsonBody));\r\n  //     console.log(\"Post jsonBody\", jsonBody)\r\n  //   }\r\n  // };\r\n\r\n  var IsEditMode_Css = ''\r\n  if ((modalCss) || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n  if (!(userPageAccessState === '')) {\r\n    return (\r\n      <React.Fragment>\r\n        <div className={\"page-content\"} style={{ marginTop: IsEditMode_Css }} >\r\n          <MetaTags>\r\n            <title>{userPageAccessState.PageHeading} | FoodERP-React FrontEnd</title>\r\n          </MetaTags>\r\n          <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n          <Container fluid>\r\n            <Row>\r\n              <Col lg={12}>\r\n                <Card className=\"text-black\" >\r\n                  <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                    <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                    <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                  </CardHeader>\r\n\r\n                  <CardBody>\r\n                    <form onSubmit={formSubmitHandler} ref={formRef} noValidate>\r\n                      <Card >\r\n                        <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                          <Row>\r\n\r\n                            <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                              <Label htmlFor=\"validationCustom01\">{fieldLabel.Name} </Label>\r\n                              <Input\r\n                                name=\"Name\"\r\n                                id=\"txtName\"\r\n                                value={values.Name}\r\n                                type=\"text\"\r\n                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                placeholder=\"Please Enter Name\"\r\n                                autoComplete='off'\r\n                                autoFocus={true}\r\n                                onChange={(event) => {\r\n                                  onChangeText({ event, state, setState })\r\n                                  dispatch(Breadcrumb_inputName(event.target.value))\r\n                                }}\r\n                              />\r\n                              {isError.Name.length > 0 && (\r\n                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                              )}\r\n                            </FormGroup>\r\n\r\n                            <Col md=\"1\">  </Col>\r\n                            <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                              <Label htmlFor=\"validationCustom01\">{fieldLabel.Address} </Label>\r\n                              <Input\r\n                                name=\"Address\"\r\n                                value={values.Address}\r\n                                type=\"text\"\r\n                                className={isError.Address.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                placeholder=\"Please Enter Address\"\r\n                                autoComplete='off'\r\n                                onChange={(event) => onChangeText({ event, state, setState })}\r\n                              />\r\n                              {isError.Address.length > 0 && (\r\n                                <span className=\"invalid-feedback\">{isError.Address}</span>\r\n                              )}\r\n                            </FormGroup>\r\n\r\n                          </Row>\r\n\r\n                          <Row className=\"mb-1\">\r\n\r\n                            <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                              <Label htmlFor=\"validationCustom01\">{fieldLabel.PhoneNo} </Label>\r\n                              <Input\r\n                                name=\"PhoneNo\"\r\n                                value={values.PhoneNo}\r\n                                type=\"text\"\r\n                                className={isError.PhoneNo.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                placeholder=\"Please Enter PhoneNo\"\r\n                                autoComplete='off'\r\n                                onChange={(event) => {\r\n                                  onChangeText({ event, state, setState })\r\n                                }}\r\n                              />\r\n                              {isError.PhoneNo.length > 0 && (\r\n                                <span className=\"invalid-feedback\">{isError.PhoneNo}</span>\r\n                              )}\r\n                            </FormGroup>\r\n\r\n                            <Col md=\"1\">  </Col>\r\n                            <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                              <Label htmlFor=\"validationCustom01\">{fieldLabel.EmailID} </Label>\r\n                              <Input\r\n                                name=\"EmailID\"\r\n                                value={values.EmailID}\r\n                                type=\"text\"\r\n                                className={isError.EmailID.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                placeholder=\"Please Enter EmailID\"\r\n                                autoComplete='off'\r\n                                onChange={(event) => {\r\n                                  onChangeText({ event, state, setState })\r\n                                }}\r\n                              />\r\n                              {isError.EmailID.length > 0 && (\r\n                                <span className=\"invalid-feedback\">{isError.EmailID}</span>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Row>\r\n                        </CardBody>\r\n                      </Card>\r\n\r\n                      <Card className=\"mt-n2\">\r\n                        <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n\r\n                          <Row>\r\n                            <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                              <Label htmlFor=\"validationCustom01\">{fieldLabel.GSTIN} </Label>\r\n                              <Input\r\n                                name=\"GSTIN\"\r\n                                value={values.GSTIN}\r\n                                type=\"text\"\r\n                                className={isError.GSTIN.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                placeholder=\"Please Enter GSTIN\"\r\n                                autoComplete='off'\r\n                                onChange={(event) => {\r\n                                  onChangeText({ event, state, setState })\r\n                                }}\r\n                              />\r\n                              {isError.GSTIN.length > 0 && (\r\n                                <span className=\"invalid-feedback\">{isError.GSTIN}</span>\r\n                              )}\r\n                            </FormGroup>\r\n\r\n                            <Col md=\"1\">  </Col>\r\n                            <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                              <Label htmlFor=\"validationCustom01\">{fieldLabel.CompanyAbbreviation} </Label>\r\n                              <Input\r\n                                name=\"CompanyAbbreviation\"\r\n                                value={values.CompanyAbbreviation}\r\n                                type=\"text\"\r\n                                className={isError.CompanyAbbreviation.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                placeholder=\"Please Enter CompanyAbbreviation\"\r\n                                autoComplete='off'\r\n                                onChange={(event) => {\r\n                                  onChangeText({ event, state, setState })\r\n                                }}\r\n                              />\r\n                              {isError.CompanyAbbreviation.length > 0 && (\r\n                                <span className=\"invalid-feedback\">{isError.CompanyAbbreviation}</span>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Row>\r\n\r\n                          <Row className=\" mb-3\">\r\n\r\n                            <Col md=\"4\">\r\n\r\n                              <FormGroup className=\"mb-3 \">\r\n                                <Label htmlFor=\"validationCustom01\"> {fieldLabel.CompanyGroup} </Label>\r\n                                <Select\r\n                                  name=\"CompanyGroup\"\r\n                                  value={values.CompanyGroup}\r\n                                  //   value={{label:\"abc\",value:1}}//default value set\r\n                                  className=\"react-dropdown\"\r\n                                  classNamePrefix=\"dropdown\"\r\n                                  options={CompanyGroupValues}\r\n                                  onChange={(hasSelect, evn) => onChangeSelect({ hasSelect, evn, state, setState, })}\r\n                                />\r\n                                {isError.CompanyGroup.length > 0 && (\r\n                                  <span className=\"text-danger f-8\"><small>{isError.CompanyGroup}</small></span>\r\n                                )}\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n\r\n\r\n                          <FormGroup >\r\n                            <Row >\r\n                              <Col sm={2}>\r\n                                <SaveButton pageMode={pageMode} userAcc={userPageAccessState}\r\n                                  module={\"Company\"}\r\n                                />\r\n\r\n                              </Col>\r\n                            </Row>\r\n                          </FormGroup >\r\n                        </CardBody>\r\n                      </Card>\r\n                    </form>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col >\r\n            </Row >\r\n          </Container >\r\n        </div >\r\n      </React.Fragment >\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <React.Fragment></React.Fragment>\r\n    )\r\n  }\r\n};\r\nexport default CompanyModule;\r\n\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Authentication\\SelectDivisionPage.js",["1289","1290","1291","1292","1293","1294","1295","1296","1297","1298"],"import PropTypes from \"prop-types\"\r\nimport MetaTags from \"react-meta-tags\"\r\nimport React, { useEffect, useState } from \"react\"\r\n\r\nimport { Row, Col, Alert, Container, Label, Button } from \"reactstrap\"\r\n\r\n//redux\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\n\r\nimport { withRouter, Link, useHistory } from \"react-router-dom\"\r\n\r\n// availity-reactstrap-validation\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\"\r\n\r\n\r\n/// tsdfddf Punam demotest\r\n// actions\r\nimport { getUserDetailsAction, loginUser, roleAceessAction } from \"../../store/actions\"\r\n\r\n// import images\r\nimport logo from \"../../assets/images/logo-sm.svg\"\r\n\r\n//Import config\r\nimport CarouselPage from \"./CarouselPage\"\r\nimport Select from \"react-select\";\r\n\r\nconst SelectDivisionPage = props => {\r\n  const dispatch = useDispatch()\r\n  const history = useHistory();\r\n\r\n  const [divisionDropdowSelect, setDivisionDropdowSelect] = useState([]);\r\n\r\n  const { loginError, divisionDropdown_redux } = useSelector(state => ({\r\n    loginError: state.Login.loginError,\r\n    divisionDropdown_redux: state.Login.divisionDropdown,\r\n  }))\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    if (!(localStorage.getItem(\"userId\"))) {\r\n      history.push(\"/login\")\r\n\r\n    }\r\n    else {\r\n      dispatch(getUserDetailsAction(localStorage.getItem(\"userId\")))\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n// debugger\r\n    if (divisionDropdown_redux.length === 1) {\r\n\r\n      let value = divisionDropdown_redux[0]\r\n      let employee = value.Employee_id;\r\n      let party = value.Party_id\r\n      if((party===null)){\r\n        party=0;\r\n        value.Party_id=0\r\n      }\r\n\r\n\r\n      localStorage.setItem(\"roleId\", JSON.stringify(value))\r\n      dispatch(roleAceessAction(party, employee))\r\n      history.push(\"/Dashboard\")\r\n    }\r\n  }, [divisionDropdown_redux])\r\n\r\n\r\n  // const divisionDropdown_DropdownOption = divisionDropdown_redux.filter((d) => {\r\n  //   return !(d.Role_id === null)\r\n  // }).map((d) => ({\r\n  //   value: d.Employee_id,\r\n  //   label: d.PartyName,\r\n  // }));\r\n\r\n  const divisionDropdown_DropdownOption = divisionDropdown_redux.map((d, key) => ({\r\n    value: key,\r\n    label: d.PartyName,\r\n  }));\r\n\r\n  function goButtonHandller() {\r\ndebugger\r\n    let value = divisionDropdown_redux[divisionDropdowSelect.value]\r\n    var employee = value.Employee_id;\r\n    var party = value.Party_id\r\n\r\n    localStorage.setItem(\"roleId\", JSON.stringify(value))\r\n    dispatch(roleAceessAction(party, employee))\r\n    history.push(\"/Dashboard\")\r\n\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <MetaTags>\r\n        <title>Login | FoodERP Live</title>\r\n      </MetaTags>\r\n      <div className=\"auth-page\">\r\n        <Container fluid className=\"p-0\">\r\n          <Row className=\"g-0\">\r\n            <Col lg={4} md={5} className=\"col-xxl-3\">\r\n              <div className=\"auth-full-page-content d-flex p-sm-5 p-4\">\r\n                <div className=\"w-100\">\r\n                  <div className=\"d-flex flex-column h-100\">\r\n                    <div className=\"mb-4 mb-md-5 text-center\">\r\n                      <Link to=\"/dashboard\" className=\"d-block auth-logo\">\r\n                        <img src={logo} alt=\"\" height=\"28\" /> <span className=\"logo-txt\">FoodERP</span>\r\n                      </Link>\r\n                    </div>\r\n                    <div className=\"auth-content my-auto\">\r\n                      <div className=\"text-center\">\r\n                        <h5 className=\"mb-0\">Welcome !</h5>\r\n                        <p className=\"text-muted mt-2\">Select Role to Continue FoodERP.</p>\r\n                      </div>\r\n\r\n\r\n                      <div className=\"mb-3\">\r\n                        {/* <Label className=\"form-label font-size-13 \"></Label> */}\r\n                        <Select\r\n                          value={divisionDropdowSelect}\r\n                          options={divisionDropdown_DropdownOption}\r\n                          autoComplete=\"off\"\r\n                          onChange={(e) => {\r\n                            setDivisionDropdowSelect(e);\r\n                          }}\r\n                        />\r\n                      </div>\r\n                      <div className=\"text-center\">\r\n                        <Button className=\"btn btn-success bg\" onClick={() => {\r\n                          goButtonHandller()\r\n                        }}>GO</Button>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"mt-4 mt-md-5 text-center\">\r\n                      <p className=\"mb-0\">© {new Date().getFullYear()} Minia . Crafted with <i className=\"mdi mdi-heart text-danger\"></i> by Themesbrand</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n            <CarouselPage />\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default SelectDivisionPage\r\n\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\Page-Pages\\PageList.js",["1299"],"import React, { useEffect, } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  deleteHpagesUsingID,\r\n  deleteModuleIDSuccess,\r\n  editHPagesID,\r\n  GetHpageListData,\r\n  saveHPagesSuccess,\r\n  updateHPagesSuccess,\r\n} from \"../../../store/Administrator/HPagesRedux/actions\";\r\nimport HPageMaster from \"./PageMaster\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess, } from \"../../../store/actions\";\r\nimport CommonListPage from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport { PAGE } from \"../../../routes/route_url\";\r\n\r\n\r\nexport default function PageList() {\r\n\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      tableList: state.H_Pages.HPagesListData,\r\n      editData: state.H_Pages.editData,\r\n      updateMsg: state.H_Pages.updateMessage,\r\n      deleteMsg: state.H_Pages.deleteModuleID,\r\n      postMsg: state.H_Pages.saveMessage,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: GetHpageListData,\r\n    editId: editHPagesID,\r\n    deleteId: deleteHpagesUsingID,\r\n    postSucc: saveHPagesSuccess,\r\n    updateSucc: updateHPagesSuccess,\r\n    deleteSucc: deleteModuleIDSuccess\r\n  }\r\n\r\n  // Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(5))\r\n    dispatch(GetHpageListData());\r\n  }, []);\r\n\r\n  const { pageField } = reducers;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        (pageField) ?\r\n          <CommonListPage\r\n            action={action}\r\n            reducers={reducers}\r\n            MasterModal={HPageMaster}\r\n            masterPath={PAGE}\r\n            ButtonMsgLable={\"Page\"}\r\n            deleteName={\"Name\"}\r\n          />\r\n          : null\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\UserRegistrationPages\\UserList.js",["1300"],"import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport AddUser from \"./UserRegistration\";\r\nimport {\r\n    getUser,\r\n    deleteUser,\r\n    deleteSuccess,\r\n    editUserId,\r\n    updateSuccess,\r\n    addUserSuccess\r\n} from \"../../../store/Administrator/UserRegistrationRedux/actions\";\r\nimport CommonListPage from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport {  commonPageFieldList, commonPageFieldListSuccess, } from \"../../../store/actions\";\r\nimport { USER } from \"../../../routes/route_url\";\r\n\r\n\r\nconst UserList = () => {\r\n    \r\n    const dispatch = useDispatch();\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            tableList: state.User_Registration_Reducer.pages,\r\n            editData: state.User_Registration_Reducer.editData,\r\n            updateMsg: state.User_Registration_Reducer.updateMessage,\r\n            deleteMsg: state.User_Registration_Reducer.deleteSuccessRole,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            postMsg: state.User_Registration_Reducer.AddUserMessage,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList\r\n\r\n        })\r\n    );\r\n\r\n    const action = {\r\n        getList: getUser,\r\n        editId: editUserId,\r\n        deleteId: deleteUser,\r\n        postSucc: addUserSuccess,\r\n        updateSucc: updateSuccess,\r\n        deleteSucc: deleteSuccess\r\n    }\r\n\r\n    //  This UseEffect => Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(3))\r\n        dispatch(getUser());\r\n    }, []);\r\n\r\n    const { pageField } = reducers\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                (pageField) ?\r\n                    <CommonListPage\r\n                        action={action}\r\n                        reducers={reducers}\r\n                        MasterModal={AddUser}\r\n                        masterPath={USER}\r\n                        ButtonMsgLable={\"User\"}\r\n                        deleteName={\"LoginName\"}\r\n                    />\r\n                    : null\r\n            }\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default UserList;\r\n\r\n\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\Page-Pages\\PageMaster.js",["1301","1302","1303","1304","1305","1306","1307","1308","1309"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  CardText,\r\n  Col,\r\n  Container,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Row,\r\n  TabContent,\r\n  Table,\r\n  TabPane,\r\n} from \"reactstrap\";\r\nimport MetaTags from \"react-meta-tags\"\r\n//Import Breadcrumb\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport Select from \"react-select\";\r\nimport classnames from \"classnames\";\r\nimport { AvField, AvForm, AvInput } from \"availity-reactstrap-validation\";\r\nimport { Tbody, Thead } from \"react-super-responsive-table\";\r\nimport {\r\n  AlertState,\r\n  Breadcrumb_inputName,\r\n  editHPagesIDSuccess,\r\n  fetchModelsList,\r\n  getControlTypes,\r\n  getFieldValidations,\r\n  getPageAccess_DropDown_API,\r\n  getPageList,\r\n  getPageListSuccess,\r\n  PostModelsSubmitSuccess,\r\n  saveHPages,\r\n  saveHPagesSuccess,\r\n  updateHPages,\r\n  updateHPagesSuccess\r\n} from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { PAGE_lIST } from \"../../../routes/route_url\";\r\n\r\nconst PageMaster = (props) => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory()\r\n\r\n  const [EditData, setEditData] = useState([]);\r\n  const [modalCss, setModalCss] = useState(false);\r\n  const [pageMode, setPageMode] = useState(\"save\");\r\n  const [userPageAccessState, setUserPageAccessState] = useState('');\r\n\r\n  const [customActiveTab, setcustomActiveTab] = useState(\"1\");\r\n  const [relatedPageListShowUI, setRelatedPageListShowUI] = useState(false);\r\n  const [tablePageAccessDataState, setTablePageAccessDataState] = useState([]);\r\n  const [module_DropdownSelect, setModule_DropdownSelect] = useState(\"\");\r\n  const [pageType_DropdownSelect, setPageType_DropdownSelect] = useState(\"\");\r\n  const [relatedPage_DropdownSelect, setrelatedPage_DropdownSelect] = useState(\"\");\r\n  const [pageAccessDropDownView, setPageAccessDropDownView] = useState(false);\r\n  const [modal_center, setmodal_center] = useState(false);\r\n  const [pageAccess_DropDownSelect, setPageAccess_DropDownSelect] = useState(\"\");\r\n\r\n  const [pageFieldTabTable, setPageFieldTabTable] = useState([{\r\n    ControlID: '',\r\n    FieldLabel: '',\r\n    ControlType: { label: \"select\", value: 0 },\r\n    FieldValidation: { label: \"select\", value: 0 },\r\n    InValidMsg: '',\r\n    ListPageSeq: '',\r\n    IsCompulsory: false,\r\n    DefaultSort: 0,\r\n    FieldSequence: false,\r\n    ShowInListPage: false,\r\n    ShowInDownload: false,\r\n    DownloadDefaultSelect: false,\r\n\r\n  }]);\r\n\r\n  const {\r\n    ControlTypes,\r\n    FieldValidations,\r\n    postMsg,\r\n    updateMsg,\r\n    userAccess,\r\n    ModuleData,\r\n    PageAccess,\r\n    modulePostAPIResponse,\r\n    PageList\r\n  } = useSelector((state) => ({\r\n    ControlTypes: state.H_Pages.ControlTypes,\r\n    FieldValidations: state.H_Pages.FieldValidations,\r\n    postMsg: state.H_Pages.saveMessage,\r\n    updateMsg: state.H_Pages.updateMessage,\r\n    userAccess: state.Login.RoleAccessUpdateData,\r\n    ModuleData: state.Modules.modulesList,\r\n    PageAccess: state.H_Pages.PageAccess,\r\n    modulePostAPIResponse: state.Modules.modulesSubmitSuccesss,\r\n    PageList: state.H_Pages.PageList,\r\n  }));\r\n\r\n  const location = { ...history.location }\r\n  const hasShowloction = location.hasOwnProperty(\"editValue\")\r\n  const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n  // userAccess useEffect\r\n  useEffect(() => {\r\n\r\n    let userAcc = null;\r\n    let locationPath = location.pathname;\r\n\r\n    if (hasShowModal) {\r\n      locationPath = props.masterPath;\r\n    };\r\n\r\n    userAcc = userAccess.find((inx) => {\r\n      return (`/${inx.ActualPagePath}` === locationPath)\r\n    })\r\n\r\n    if (userAcc) {\r\n      setUserPageAccessState(userAcc)\r\n    };\r\n  }, [userAccess])\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchModelsList());\r\n    dispatch(getControlTypes());\r\n    dispatch(getFieldValidations());\r\n    dispatch(getPageAccess_DropDown_API());\r\n  }, [dispatch]);\r\n\r\n  // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n  useEffect(() => {\r\n\r\n    // if (!(userPageAccessState === '')) { document.getElementById(\"txtName\").focus(); }\r\n    if ((hasShowloction || hasShowModal)) {\r\n\r\n      let hasEditVal = null\r\n      if (hasShowloction) {\r\n        setPageMode(location.pageMode)\r\n        hasEditVal = location.editValue\r\n      }\r\n      else if (hasShowModal) {\r\n        hasEditVal = props.editValue\r\n        setPageMode(props.pageMode)\r\n        setModalCss(true)\r\n      }\r\n\r\n      if (hasEditVal) {\r\n\r\n        debugger\r\n        setEditData(hasEditVal);\r\n\r\n        dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n\r\n        setTablePageAccessDataState(hasEditVal.PagePageAccess);\r\n\r\n        setModule_DropdownSelect({\r\n          label: hasEditVal.ModuleName,\r\n          value: hasEditVal.Module,\r\n        });\r\n\r\n        let PageFieldMaster = hasEditVal.PageFieldMaster.map((index) => {\r\n          return {\r\n            ControlType: {\r\n              label: index.ControlTypeName,\r\n              value: index.ControlType\r\n            },\r\n            FieldValidation: {\r\n              label: index.FieldValidationName,\r\n              value: index.FieldValidation\r\n            },\r\n            ControlID: index.ControlID,\r\n            FieldLabel: index.FieldLabel,\r\n            InValidMsg: index.InValidMsg,\r\n            IsCompulsory: index.IsCompulsory,\r\n            DefaultSort: index.DefaultSort,\r\n            ListPageSeq: index.ListPageSeq,\r\n            ShowInListPage: index.ShowInListPage,\r\n            ShowInDownload: index.ShowInDownload,\r\n            DownloadDefaultSelect: index.ShownloadDefaultSelect\r\n          }\r\n        })\r\n\r\n        if (!(PageFieldMaster.length === 0)) {\r\n          setPageFieldTabTable(PageFieldMaster)\r\n        }\r\n\r\n        if (hasEditVal.PageType === 2) {\r\n          setRelatedPageListShowUI(true)\r\n        }\r\n        setrelatedPage_DropdownSelect({\r\n          value: hasEditVal.RelatedPageId,\r\n          label: hasEditVal.RelatedPageName,\r\n        });\r\n\r\n        // When value 2 is get then DropDown lable is \"ListPage\" and ShowMenu is disabled Otherwise DropDown lable is \"AddPage\" and ShowMenu is enabled\r\n        let pageType_ID = hasEditVal.PageType;\r\n\r\n        if (pageType_ID === 2) {\r\n          setPageAccessDropDownView(true);\r\n          dispatch(getPageList(pageType_ID));\r\n          setPageType_DropdownSelect({ value: 2, label: \"ListPage\" });\r\n\r\n        } else if (pageType_ID === 1) {\r\n          dispatch(getPageListSuccess([]));\r\n          setrelatedPage_DropdownSelect({ value: 0 });\r\n          setPageType_DropdownSelect({ value: 1, label: \"AddPage\" });\r\n        }\r\n\r\n        dispatch(editHPagesIDSuccess({ Status: false }));\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // This UseEffect clear Form Data and when modules Save Successfully.\r\n  useEffect(() => {\r\n    if (postMsg.Status === true && postMsg.StatusCode === 200) {\r\n      dispatch(saveHPagesSuccess({ Status: false }));\r\n      setModule_DropdownSelect(\"\");\r\n      setPageAccess_DropDownSelect(\"\");\r\n      setPageType_DropdownSelect(\"\");\r\n      setrelatedPage_DropdownSelect(\"\");\r\n      if (pageMode === \"true\") {\r\n        dispatch(\r\n          AlertState({\r\n            Type: 1,\r\n            Status: true,\r\n            Message: postMsg.Message,\r\n          })\r\n        );\r\n      } else {\r\n        dispatch(\r\n          AlertState({\r\n            Type: 1,\r\n            Status: true,\r\n            Message: postMsg.Message,\r\n            RedirectPath: PAGE_lIST,\r\n            AfterResponseAction: false,\r\n          })\r\n        );\r\n      }\r\n    } else if (postMsg.Status === true) {\r\n      dispatch(saveHPagesSuccess({ Status: false }));\r\n      dispatch(\r\n        AlertState({\r\n          Type: 4,\r\n          Status: true,\r\n          Message: JSON.stringify(postMsg.Message),\r\n          RedirectPath: false,\r\n          AfterResponseAction: false,\r\n        })\r\n      );\r\n    }\r\n  }, [postMsg]);\r\n\r\n  useEffect(() => {\r\n    if ((modulePostAPIResponse.Status === true) && (modulePostAPIResponse.StatusCode === 200)) {\r\n      dispatch(PostModelsSubmitSuccess({ Status: false }))\r\n      dispatch(AlertState({\r\n        Type: 1,\r\n        Status: true,\r\n        Message: modulePostAPIResponse.Message,\r\n      }))\r\n      tog_center()\r\n    } else if (modulePostAPIResponse.Status === true) {\r\n      dispatch(PostModelsSubmitSuccess({ Status: false }))\r\n      dispatch(AlertState({\r\n        Type: 4,\r\n        Status: true,\r\n        Message: JSON.stringify(modulePostAPIResponse.Message),\r\n        RedirectPath: false,\r\n        AfterResponseAction: false\r\n      }));\r\n    }\r\n\r\n  }, [modulePostAPIResponse])\r\n\r\n  useEffect(() => {\r\n    if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n      history.push({\r\n        pathname: PAGE_lIST,\r\n      })\r\n    } else if (updateMsg.Status === true && !modalCss) {\r\n      dispatch(updateHPagesSuccess({ Status: false }));\r\n      dispatch(\r\n        AlertState({\r\n          Type: 3,\r\n          Status: true,\r\n          Message: JSON.stringify(updateMsg.Message),\r\n        })\r\n      );\r\n    }\r\n  }, [updateMsg, modalCss]);\r\n\r\n  const PageAccessValues = PageAccess.map((Data) => ({\r\n    value: Data.id,\r\n    label: Data.Name,\r\n  }));\r\n\r\n  const Module_DropdownOption = ModuleData.map((d) => ({\r\n    value: d.id,\r\n    label: d.Name,\r\n  }));\r\n\r\n  // PageList Dropdown\r\n  const PageList_DropdownOption = PageList.map((d) => ({\r\n    value: d.id,\r\n    label: d.Name,\r\n  }));\r\n\r\n  // PageList Dropdown\r\n  const PageType_DropdownOption = [\r\n    {\r\n      value: 1,\r\n      label: \"Add Page\",\r\n    },\r\n    {\r\n      value: 2,\r\n      label: \"Page List\",\r\n    },\r\n  ];\r\n\r\n  const ControlTypes_DropdownOptions = ControlTypes.map((data) => ({\r\n    value: data.id,\r\n    label: data.Name\r\n  }));\r\n\r\n  const FieldValidations_DropdownOptions = FieldValidations.map((data) => ({\r\n    value: data.id,\r\n    label: data.Name\r\n  }));\r\n\r\n  function PageField_Tab_AddRow_Handler() {\r\n\r\n    var newarr1 = [...pageFieldTabTable, {\r\n      ControlID: '',\r\n      FieldLabel: '',\r\n      ControlType: { label: \"select\", value: 0 },\r\n      FieldValidation: { label: \"select\", value: 0 },\r\n      InValidMsg: '',\r\n      IsCompulsory: '',\r\n      DefaultSort: 0,\r\n      FieldSequence: '',\r\n      ShowInListPage: '',\r\n      ListPageSeq: '',\r\n      ShowInDownload: false,\r\n      DownloadDefaultSelect: false,\r\n\r\n    }]\r\n    setPageFieldTabTable(newarr1)\r\n  }\r\n\r\n  function PageField_DeleteRow_Handler(key) {\r\n\r\n    var removeElseArrray1 = pageFieldTabTable.filter((i, k) => {\r\n      return !(k === key)\r\n    })\r\n    setPageFieldTabTable(removeElseArrray1)\r\n  }\r\n\r\n  function arrow_value(key) {\r\n    if (pageFieldTabTable[key].DefaultSort = 2) {\r\n      var x = document.getElementById(\"up\");\r\n      var y = document.getElementById(\"down\");\r\n\r\n      y.style.display = \"block\";\r\n      x.style.display = \"none\";\r\n    }\r\n\r\n  }\r\n\r\n  function arrow_value1(key) {\r\n    if (pageFieldTabTable[key].DefaultSort = 1) {\r\n      var x = document.getElementById(\"up\");\r\n      var y = document.getElementById(\"down\");\r\n\r\n      x.style.display = \"block\";\r\n      y.style.display = \"none\";\r\n    }\r\n  }\r\n\r\n  function PageField_onChange_Handler(event, type = '', key) {\r\n\r\n    var found = pageFieldTabTable.find((i, k) => {\r\n      return (k === key)\r\n    })\r\n\r\n    let newSelectValue = ''\r\n\r\n    switch (type) {\r\n      case 'ControlID':\r\n        newSelectValue = {\r\n          ControlID: event,\r\n          FieldLabel: found.FieldLabel,\r\n          ControlType: found.ControlType,\r\n          FieldValidation: found.FieldValidation,\r\n          InValidMsg: found.InValidMsg,\r\n          IsCompulsory: found.IsCompulsory,\r\n          DefaultSort: found.DefaultSort,\r\n          ShowInListPage: found.ShowInListPage,\r\n          ListPageSeq: found.ListPageSeq,\r\n          ShowInDownload: found.ShowInDownload,\r\n          DownloadDefaultSelect: found.DownloadDefaultSelect,\r\n\r\n        }\r\n        break;\r\n\r\n      case 'FieldLabel':\r\n        newSelectValue = {\r\n          ControlID: found.ControlID,\r\n          FieldLabel: event,\r\n          ControlType: found.ControlType,\r\n          FieldValidation: found.FieldValidation,\r\n          InValidMsg: found.InValidMsg,\r\n          IsCompulsory: found.IsCompulsory,\r\n          DefaultSort: found.DefaultSort,\r\n          ShowInListPage: found.ShowInListPage,\r\n          ListPageSeq: found.ListPageSeq,\r\n          ShowInDownload: found.ShowInDownload,\r\n          DownloadDefaultSelect: found.DownloadDefaultSelect,\r\n\r\n        }\r\n        break;\r\n\r\n      case 'ControlType':\r\n        newSelectValue = {\r\n          ControlID: found.ControlID,\r\n          FieldLabel: found.FieldLabel,\r\n          ControlType: event,\r\n          FieldValidation: found.FieldValidation,\r\n          InValidMsg: found.InValidMsg,\r\n          IsCompulsory: found.IsCompulsory,\r\n          DefaultSort: found.DefaultSort,\r\n          ShowInListPage: found.ShowInListPage,\r\n          ListPageSeq: found.ListPageSeq,\r\n          ShowInDownload: found.ShowInDownload,\r\n          DownloadDefaultSelect: found.DownloadDefaultSelect,\r\n\r\n        }\r\n        break;\r\n\r\n      case 'FieldValidation':\r\n        newSelectValue = {\r\n          ControlID: found.ControlID,\r\n          FieldLabel: found.FieldLabel,\r\n          ControlType: found.ControlType,\r\n          FieldValidation: event,\r\n          InValidMsg: found.InValidMsg,\r\n          IsCompulsory: found.IsCompulsory,\r\n          DefaultSort: found.DefaultSort,\r\n          ShowInListPage: found.ShowInListPage,\r\n          ListPageSeq: found.ListPageSeq,\r\n          ShowInDownload: found.ShowInDownload,\r\n          DownloadDefaultSelect: found.DownloadDefaultSelect,\r\n        }\r\n        break;\r\n\r\n      case 'InValidMsg':\r\n        newSelectValue = {\r\n          ControlID: found.ControlID,\r\n          FieldLabel: found.FieldLabel,\r\n          ControlType: found.ControlType,\r\n          FieldValidation: found.FieldValidation,\r\n          InValidMsg: event,\r\n          IsCompulsory: found.IsCompulsory,\r\n          DefaultSort: found.DefaultSort,\r\n          ShowInListPage: found.ShowInListPage,\r\n          ListPageSeq: found.ListPageSeq,\r\n          ShowInDownload: found.ShowInDownload,\r\n          DownloadDefaultSelect: found.DownloadDefaultSelect,\r\n\r\n        }\r\n        break;\r\n\r\n      case 'IsCompulsory':\r\n        newSelectValue = {\r\n          ControlID: found.ControlID,\r\n          FieldLabel: found.FieldLabel,\r\n          ControlType: found.ControlType,\r\n          FieldValidation: found.FieldValidation,\r\n          InValidMsg: found.InValidMsg,\r\n          IsCompulsory: event,\r\n          DefaultSort: found.DefaultSort,\r\n          ShowInListPage: found.ShowInListPage,\r\n          ListPageSeq: found.ListPageSeq,\r\n          ShowInDownload: found.ShowInDownload,\r\n          DownloadDefaultSelect: found.DownloadDefaultSelect,\r\n\r\n        }\r\n        break;\r\n\r\n      case 'DefaultSort':\r\n        newSelectValue = {\r\n          ControlID: found.ControlID,\r\n          FieldLabel: found.FieldLabel,\r\n          ControlType: found.ControlType,\r\n          FieldValidation: found.FieldValidation,\r\n          InValidMsg: found.InValidMsg,\r\n          IsCompulsory: found.IsCompulsory,\r\n          DefaultSort: event ? 1 : 0,\r\n          ShowInListPage: found.ShowInListPage,\r\n          ListPageSeq: found.ListPageSeq,\r\n          ShowInDownload: found.ShowInDownload,\r\n          DownloadDefaultSelect: found.DownloadDefaultSelect,\r\n\r\n        }\r\n        break;\r\n\r\n      case 'ShowInListPage':\r\n        newSelectValue = {\r\n          ControlID: found.ControlID,\r\n          FieldLabel: found.FieldLabel,\r\n          ControlType: found.ControlType,\r\n          FieldValidation: found.FieldValidation,\r\n          InValidMsg: found.InValidMsg,\r\n          IsCompulsory: found.IsCompulsory,\r\n          DefaultSort: found.DefaultSort,\r\n          ShowInListPage: event,\r\n          ListPageSeq: found.ListPageSeq,\r\n          ShowInDownload: found.ShowInDownload,\r\n          DownloadDefaultSelect: found.DownloadDefaultSelect,\r\n\r\n        }\r\n        break;\r\n\r\n      case 'ListPageSeq':\r\n        newSelectValue = {\r\n          ControlID: found.ControlID,\r\n          FieldLabel: found.FieldLabel,\r\n          ControlType: found.ControlType,\r\n          FieldValidation: found.FieldValidation,\r\n          InValidMsg: found.InValidMsg,\r\n          IsCompulsory: found.IsCompulsory,\r\n          DefaultSort: found.DefaultSort,\r\n          ShowInListPage: found.ShowInListPage,\r\n          ListPageSeq: event,\r\n          ShowInDownload: found.ShowInDownload,\r\n          DownloadDefaultSelect: found.DownloadDefaultSelect,\r\n\r\n        }\r\n        break;\r\n\r\n      case 'ShowInDownload':\r\n        newSelectValue = {\r\n          ControlID: found.ControlID,\r\n          FieldLabel: found.FieldLabel,\r\n          ControlType: found.ControlType,\r\n          FieldValidation: found.FieldValidation,\r\n          InValidMsg: found.InValidMsg,\r\n          IsCompulsory: found.IsCompulsory,\r\n          DefaultSort: found.DefaultSort,\r\n          ShowInListPage: found.ShowInListPage,\r\n          ListPageSeq: found.ListPageSeq,\r\n          ShowInDownload: event,\r\n          DownloadDefaultSelect: found.DownloadDefaultSelect,\r\n\r\n        }\r\n        break;\r\n\r\n      case 'DownloadDefaultSelect':\r\n        newSelectValue = {\r\n          ControlID: found.ControlID,\r\n          FieldLabel: found.FieldLabel,\r\n          ControlType: found.ControlType,\r\n          FieldValidation: found.FieldValidation,\r\n          InValidMsg: found.InValidMsg,\r\n          IsCompulsory: found.IsCompulsory,\r\n          DefaultSort: found.DefaultSort,\r\n          ShowInListPage: found.ShowInListPage,\r\n          ListPageSeq: found.ListPageSeq,\r\n          ShowInDownload: found.ShowInDownload,\r\n          DownloadDefaultSelect: event,\r\n\r\n        }\r\n        break;\r\n    }\r\n\r\n    let newTabArr = pageFieldTabTable.map((index, k) => {\r\n\r\n      if (type === \"DefaultSort\" && !(k === key)) {\r\n        index[\"DefaultSort\"] = 0\r\n      }\r\n      return (k === key) ? newSelectValue : index\r\n    })\r\n    setPageFieldTabTable(newTabArr)\r\n  }\r\n\r\n  function FieldValidation_Dropdown_Handler(e) {\r\n    dispatch(getFieldValidations(e.value))\r\n    setPageFieldTabTable(e)\r\n  }\r\n\r\n  const toggleCustom = (tab) => {\r\n    if (customActiveTab !== tab) {\r\n      setcustomActiveTab(tab);\r\n    }\r\n  };\r\n\r\n  const FormSubmitButton_Handler = (event, values) => {\r\n\r\n    const PageFieldMaster = pageFieldTabTable.map((index) => ({\r\n      ControlID: index.ControlID,\r\n      FieldLabel: index.FieldLabel,\r\n      InValidMsg: index.InValidMsg,\r\n      IsCompulsory: index.IsCompulsory,\r\n      DefaultSort: index.DefaultSort,\r\n      ListPageSeq: index.ListPageSeq,\r\n      ShowInListPage: index.ShowInListPage,\r\n      ShowInDownload: index.ShowInDownload,\r\n      ControlType: index.ControlType.value,\r\n      FieldValidation: index.FieldValidation.value,\r\n      DownloadDefaultSelect: index.DownloadDefaultSelect,\r\n    }))\r\n\r\n    if (\r\n      tablePageAccessDataState.length <= 0 &&\r\n      !(pageType_DropdownSelect.value === 1)\r\n    ) {\r\n      dispatch(\r\n        AlertState({\r\n          Type: 4,\r\n          Status: true,\r\n          Message: \"At Least One PageAccess is Select\",\r\n          RedirectPath: false,\r\n          PermissionAction: false,\r\n        })\r\n      );\r\n      return;\r\n    }\r\n\r\n    const jsonBody = JSON.stringify({\r\n      Name: values.Name,\r\n      Module: module_DropdownSelect.value,\r\n      isActive: values.isActive,\r\n      DisplayIndex: values.displayIndex,\r\n      Icon: values.Icon,\r\n      ActualPagePath: values.pagePath,\r\n      PageType: pageType_DropdownSelect.value,\r\n      PageHeading: values.pageheading,\r\n      PageDescription: values.pagedescription,\r\n      PageDescriptionDetails: values.pageheadingdescription,\r\n      RelatedPageID: relatedPage_DropdownSelect.value,\r\n      IsDivisionRequired: values.IsDivisionRequired,\r\n      IsEditPopuporComponent: values.IsEditPopuporComponent,\r\n      CreatedBy: 1,\r\n      UpdatedBy: 1,\r\n      PagePageAccess: tablePageAccessDataState.map((d) => ({\r\n        Access: d.AccessID,\r\n      })),\r\n      PageFieldMaster: PageFieldMaster,\r\n    })\r\n\r\n    if (pageMode === \"edit\") {\r\n      dispatch(updateHPages(jsonBody, EditData.id));\r\n      console.log(\"updated jsonBody\", jsonBody)\r\n    } else {\r\n      dispatch(saveHPages(jsonBody));\r\n      console.log(\"post jsonBody\", jsonBody)\r\n    }\r\n  };\r\n\r\n\r\n  // for module dropdown\r\n  const Module_DropdownSelectHandller = (e) => {\r\n    setModule_DropdownSelect(e);\r\n  };\r\n\r\n  function PageAccess_DropdownSelect_Handler(e) {\r\n    setPageAccess_DropDownSelect(e);\r\n  }\r\n\r\n  //  for PageType deropDown\r\n  const PageType_DropdownSelectHandller = (e) => {\r\n    if (e.value === 2) {\r\n      relatedPage_DropdownSelectHandller()\r\n      setRelatedPageListShowUI(true)\r\n\r\n      dispatch(getPageList(e.value));\r\n      // showCheckBox.disabled = true\r\n      setPageAccessDropDownView(true);\r\n    } else if (e.value === 1) {\r\n      setRelatedPageListShowUI(false)\r\n      setTablePageAccessDataState([]);\r\n      // showCheckBox.disabled = false\r\n      setPageAccessDropDownView(false);\r\n      dispatch(getPageListSuccess([]));\r\n      setrelatedPage_DropdownSelect({ value: 0 });\r\n    }\r\n    setPageType_DropdownSelect(e);\r\n  };\r\n\r\n  const relatedPage_DropdownSelectHandller = (e) => {\r\n    setrelatedPage_DropdownSelect(e);\r\n  };\r\n\r\n  // ADD Button handler\r\n\r\n  function Common_Find_Function(arry, elementValue, findvalue) {\r\n    return arry.find((index) => {\r\n      return index[elementValue] === findvalue;\r\n    });\r\n  }\r\n\r\n  function AddRoleHandler() {\r\n    const drop_value = pageAccess_DropDownSelect.value;\r\n    const drop_label = pageAccess_DropDownSelect.label;\r\n\r\n    // find function pass Parameter (array,indexParameter,findvalue)\r\n    const find = Common_Find_Function(\r\n      tablePageAccessDataState,\r\n      \"AccessID\",\r\n      drop_value\r\n    );\r\n\r\n    if (pageAccess_DropDownSelect.length <= 0) {\r\n      dispatch(\r\n        AlertState({\r\n          Type: 3,\r\n          Status: true,\r\n          Message: \"Select One DropDown Value\",\r\n        })\r\n      );\r\n    } else if (find === undefined) {\r\n      if (drop_label === \"IsEdit\") {\r\n        // find function pass Parameter (array,indexParameter,findvalue)\r\n        const findIsView = Common_Find_Function(\r\n          tablePageAccessDataState,\r\n          \"AccessName\",\r\n          \"IsView\"\r\n        );\r\n        // find function pass Parameter (array,indexParameter,findvalue)\r\n        const find_IsEditSelf = Common_Find_Function(\r\n          tablePageAccessDataState,\r\n          \"AccessName\",\r\n          \"IsEditSelf\"\r\n        );\r\n\r\n        const ViewValues = Common_Find_Function(\r\n          PageAccessValues,\r\n          \"label\",\r\n          \"IsView\"\r\n        );\r\n\r\n        const IsEditSelfValues = Common_Find_Function(\r\n          PageAccessValues,\r\n          \"label\",\r\n          \"IsEditSelf\"\r\n        );\r\n        if ((findIsView === undefined) && (find_IsEditSelf === undefined)) {\r\n          // find function pass Parameter (array,indexParameter,findvalue)\r\n\r\n          setTablePageAccessDataState([\r\n            ...tablePageAccessDataState,\r\n            {\r\n              AccessID: ViewValues.value,\r\n              AccessName: ViewValues.label,\r\n            },\r\n            {\r\n              AccessID: IsEditSelfValues.value,\r\n              AccessName: IsEditSelfValues.label,\r\n            },\r\n            {\r\n              AccessID: drop_value,\r\n              AccessName: drop_label,\r\n            },\r\n          ]);\r\n          return;\r\n        }\r\n        else if (findIsView === undefined) {\r\n          setTablePageAccessDataState([\r\n            ...tablePageAccessDataState,\r\n            {\r\n              AccessID: ViewValues.value,\r\n              AccessName: ViewValues.label,\r\n            },\r\n            {\r\n              AccessID: drop_value,\r\n              AccessName: drop_label,\r\n            },\r\n          ]);\r\n          return;\r\n        }\r\n        else if (find_IsEditSelf === undefined) {\r\n          setTablePageAccessDataState([\r\n            ...tablePageAccessDataState,\r\n            {\r\n              AccessID: IsEditSelfValues.value,\r\n              AccessName: IsEditSelfValues.label,\r\n            },\r\n            {\r\n              AccessID: drop_value,\r\n              AccessName: drop_label,\r\n            },\r\n          ]);\r\n          return;\r\n        }\r\n      }\r\n\r\n      setTablePageAccessDataState([\r\n        ...tablePageAccessDataState,\r\n        { AccessID: drop_value, AccessName: drop_label },\r\n      ]);\r\n    } else {\r\n      dispatch(\r\n        AlertState({\r\n          Type: 4,\r\n          Status: true,\r\n          Message: \"PageAccess Data already Exists \",\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  // For Delete Button in table\r\n  function PageAccess_DeleteButton_Handller(tableValue) {\r\n    setTablePageAccessDataState(\r\n      tablePageAccessDataState.filter((item) => !(item.AccessID === tableValue))\r\n    );\r\n  }\r\n\r\n  function tog_center() {\r\n    setmodal_center(!modal_center)\r\n  }\r\n  function DropDownAddHandler() {\r\n    tog_center()\r\n  }\r\n\r\n  function TableBodyFunction() {\r\n    return tablePageAccessDataState.map((TableValue) => {\r\n      let ViewValues = false;\r\n\r\n      if ((TableValue.AccessName === \"IsView\") || (TableValue.AccessName === \"IsEditSelf\")) {\r\n        // find function pass Parameter (array,indexParameter,findvalue)\r\n        // const ViewValues = Common_Find_Function(PageAccessValues, \"label\", \"IsView\");\r\n        const View = tablePageAccessDataState.find((element) => {\r\n          return element.AccessName === \"IsEdit\";\r\n        });\r\n        if (!(View === undefined)) ViewValues = true;\r\n      }\r\n      return (\r\n        <tr>\r\n          <td>{TableValue.AccessName}</td>\r\n          <td>\r\n            {!(TableValue.AccessName === \"IsShowOnMenu\") && !ViewValues ? (\r\n              <i\r\n                className=\"mdi mdi-trash-can d-block text-danger font-size-20\"\r\n                onClick={() => {\r\n                  PageAccess_DeleteButton_Handller(TableValue.AccessID);\r\n                }}\r\n              ></i>\r\n            ) : null}\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n\r\n\r\n  // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n  var IsEditMode_Css = ''\r\n  if ((modalCss) || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n  if (!(userPageAccessState === '')) {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n          <MetaTags>\r\n            <title>Page Master| FoodERP-React FrontEnd</title>\r\n          </MetaTags>\r\n          <Container fluid>\r\n            {/* Render Breadcrumbs */}\r\n            <AvForm\r\n              id=\"mainForm\"\r\n              name=\"mainForm\"\r\n              onValidSubmit={(e, v) => { FormSubmitButton_Handler(e, v); }}>\r\n\r\n              <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n              <Col lg={12}>\r\n                <Card className=\"text-black\" >\r\n                  <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                    <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                    <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                  </CardHeader>\r\n                  <CardBody>\r\n                    <Nav tabs className=\"nav-tabs-custom nav-justified\">\r\n                      <NavItem>\r\n                        <NavLink\r\n                          style={{ cursor: \"pointer\" }}\r\n                          className={classnames({\r\n                            active: customActiveTab === \"1\",\r\n                          })}\r\n                          onClick={() => {\r\n                            toggleCustom(\"1\");\r\n                          }}\r\n                        >\r\n                          <span className=\"d-block d-sm-none\">\r\n                            <i className=\"fas fa-home\"></i>\r\n                          </span>\r\n                          <span className=\"d-none d-sm-block\">Page Master Details</span>\r\n                        </NavLink>\r\n                      </NavItem>\r\n                      <NavItem>\r\n                        <NavLink\r\n                          style={{ cursor: \"pointer\" }}\r\n                          className={classnames({\r\n                            active: customActiveTab === \"2\",\r\n                          })}\r\n                          onClick={() => {\r\n                            toggleCustom(\"2\");\r\n                          }}\r\n                        >\r\n                          <span className=\"d-block d-sm-none\">\r\n                            <i className=\"far fa-user\"></i>\r\n                          </span>\r\n                          <span className=\"d-none d-sm-block\">Page Field</span>\r\n                        </NavLink>\r\n                      </NavItem>\r\n\r\n                      <NavItem>\r\n                        <NavLink\r\n                          style={{ cursor: \"pointer\" }}\r\n                        // className={classnames({\r\n                        //     active: activeTab1 === \"7\",\r\n                        // })}\r\n                        // onClick={() => {\r\n                        //     toggle1(\"7\")\r\n                        // }}\r\n                        >\r\n                          <span className=\"d-block d-sm-none\">\r\n                            <i className=\"fas fa-home\"></i>\r\n                          </span>\r\n                          {/* <span className=\"d-none d-sm-block\">Tab7</span> */}\r\n                          {/* <Button type=\"submit\"> save</Button> */}\r\n                          <Row >\r\n                            <Col sm={2}>\r\n                              <div>\r\n                                {\r\n                                  pageMode === \"edit\" ?\r\n                                    userPageAccessState.RoleAccess_IsEdit ?\r\n                                      <button\r\n                                        type=\"submit\"\r\n                                        data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Update Page\"\r\n                                        className=\"btn btn-success w-md float-right\"\r\n                                      >\r\n                                        <i class=\"fas fa-edit me-2\"></i>Update\r\n                                      </button>\r\n                                      :\r\n                                      <></>\r\n                                    : (\r\n                                      userPageAccessState.RoleAccess_IsSave ?\r\n                                        <button\r\n                                          type=\"submit\"\r\n                                          data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Save Page\"\r\n                                          className=\"btn btn-primary w-md float-right\"\r\n                                        > <i className=\"fas fa-save me-2\"></i> Save\r\n                                        </button>\r\n                                        :\r\n                                        <></>\r\n                                    )\r\n                                }\r\n                              </div>\r\n                            </Col>\r\n                          </Row>\r\n                        </NavLink>\r\n                      </NavItem>\r\n                    </Nav>\r\n\r\n                    <TabContent\r\n                      activeTab={customActiveTab}\r\n                      className=\"p-3 text-muted\"\r\n                    >\r\n                      <TabPane tabId=\"1\">\r\n                        <Row>\r\n                          <Card className=\"text-black\"  >\r\n                            <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                              <Row>\r\n                                <Col md=\"3\">\r\n                                  <FormGroup className=\"mb-3 \">\r\n                                    <Label>Name </Label>\r\n                                    <AvField\r\n                                      name=\"Name\"\r\n                                      id=\"txtName\"\r\n                                      value={EditData.Name}\r\n                                      type=\"text\"\r\n                                      placeholder=\"Please Enter Name\"\r\n                                      autoComplete=\"off\"\r\n                                      validate={{\r\n                                        required: {\r\n                                          value: true,\r\n                                          errorMessage: \"Please Enter Name\",\r\n                                        },\r\n                                      }}\r\n                                      onChange={(e) => {\r\n                                        dispatch(Breadcrumb_inputName(e.target.value));\r\n                                      }}\r\n                                    />\r\n                                  </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col md=\"1\"> </Col>\r\n\r\n                                <Col md=\"7\">\r\n                                  <FormGroup className=\"mb-3 \">\r\n                                    <Label>Page Description </Label>\r\n                                    <AvField\r\n                                      name=\"pagedescription\"\r\n                                      value={EditData.PageDescription}\r\n                                      type=\"text\"\r\n                                      placeholder=\"Please Enter Page Description\"\r\n                                      autoComplete=\"off\"\r\n                                      validate={{\r\n                                        required: {\r\n                                          value: true,\r\n                                          errorMessage: \"Please Enter Page Description\",\r\n                                        },\r\n                                      }}\r\n                                    />\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </Row>\r\n\r\n                              <Row>\r\n                                <Col md=\"3\">\r\n                                  <FormGroup className=\"mb-3\">\r\n                                    <Label>Page Heading</Label>\r\n                                    <AvField\r\n                                      name=\"pageheading\"\r\n                                      type=\"text\"\r\n                                      defaultValue=\"\"\r\n                                      value={EditData.PageHeading}\r\n                                      placeholder=\"Enter your Page Heading \"\r\n                                    />\r\n                                  </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col md=\"1\"> </Col>\r\n                                <Col md=\"7\">\r\n                                  <FormGroup className=\"mb-3\">\r\n                                    <Label>Page Description Details</Label>\r\n                                    <AvField\r\n                                      name=\"pageheadingdescription\"\r\n                                      type=\"text\"\r\n                                      defaultValue=\"\"\r\n                                      value={EditData.PageDescriptionDetails}\r\n                                      placeholder=\"Enter your Description \"\r\n                                      validate={{\r\n                                        required: {\r\n                                          value: true,\r\n                                          errorMessage:\r\n                                            \"Please Enter Page Description Deails\",\r\n                                        },\r\n                                      }}\r\n                                    />\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </Row>\r\n                            </CardBody>\r\n                          </Card>\r\n\r\n                          <Card className=\" mt-n2 text-black\">\r\n                            <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                              <Row>\r\n                                <Col md=\"3\">\r\n\r\n                                  <FormGroup className=\"mb-3 \">\r\n                                    <Label htmlFor=\"validationCustom01\">Module</Label>\r\n                                    <Select\r\n                                      value={module_DropdownSelect}\r\n                                      options={Module_DropdownOption}\r\n                                      autoComplete=\"off\"\r\n                                      onChange={(e) => {\r\n                                        Module_DropdownSelectHandller(e);\r\n                                      }}\r\n                                    />\r\n                                  </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col md=\"1\" className=\" mt-3\">\r\n                                  <Button className=\" mt-3 btn btn-sm\" type=\"button\" onClick={() => { DropDownAddHandler() }}>add</Button>\r\n                                </Col>\r\n\r\n                                <Col md=\"3\">\r\n                                  <FormGroup className=\"mb-3\">\r\n                                    <Label htmlFor=\"validationCustom01\">Page Type</Label>\r\n                                    <Select\r\n                                      value={pageType_DropdownSelect}\r\n                                      options={PageType_DropdownOption}\r\n                                      autoComplete=\"off\"\r\n                                      onChange={(e) => {\r\n                                        PageType_DropdownSelectHandller(e);\r\n                                      }}\r\n                                    />\r\n                                  </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col md=\"1\"> </Col>\r\n                                {relatedPageListShowUI ?\r\n                                  <Col md=\"3\">\r\n                                    <FormGroup className=\"mb-3\">\r\n                                      <Label htmlFor=\"validationCustom01\">\r\n                                        Related Page List\r\n                                      </Label>\r\n                                      <Select\r\n                                        value={relatedPage_DropdownSelect}\r\n                                        options={PageList_DropdownOption}\r\n                                        autoComplete=\"off\"\r\n                                        onChange={(e) => {\r\n                                          relatedPage_DropdownSelectHandller(e);\r\n                                        }}\r\n                                      />\r\n                                    </FormGroup>\r\n                                  </Col> : null}\r\n\r\n\r\n                              </Row>\r\n\r\n                              <Row>\r\n                                <Col md=\"3\">\r\n                                  <FormGroup>\r\n                                    <Label htmlFor=\"validationCustom01\">\r\n                                      Display Index\r\n                                    </Label>\r\n                                    <AvField\r\n                                      name=\"displayIndex\"\r\n                                      value={EditData.DisplayIndex}\r\n                                      type=\"text\"\r\n                                      autoComplete=\"off\"\r\n                                      placeholder=\" Please Enter Display Index\"\r\n                                      validate={{\r\n                                        number: true,\r\n                                        required: {\r\n                                          value: true,\r\n                                          errorMessage:\r\n                                            \"Please Enter Display Index Only 2 Digit \",\r\n                                        },\r\n                                        tel: {\r\n                                          pattern: /^\\d{1,2}$/,\r\n                                        },\r\n                                      }}\r\n                                    />\r\n                                  </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col md=\"1\"> </Col>\r\n                                <Col md=\"3\">\r\n                                  <FormGroup className=\"mb-3\">\r\n                                    <Label htmlFor=\"validationCustom01\">Page Path</Label>\r\n                                    <AvField\r\n                                      name=\"pagePath\"\r\n                                      value={EditData.ActualPagePath}\r\n                                      type=\"text\"\r\n                                      placeholder=\"Please Enter Page Path\"\r\n                                      validate={{\r\n                                        required: {\r\n                                          value: true,\r\n                                          errorMessage: \"Please Enter Page Path\",\r\n                                        },\r\n                                      }}\r\n                                      autoComplete=\"off\"\r\n                                    />\r\n                                  </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col md=\"1\"> </Col>\r\n                                <Col md=\"3\">\r\n                                  <FormGroup className=\"mb-3\">\r\n                                    <Label htmlFor=\"validationCustom01\">Icon</Label>\r\n                                    <AvField\r\n                                      name=\"Icon\"\r\n                                      value={EditData.Icon}\r\n                                      type=\"text\"\r\n                                      placeholder=\"Please Enter Icon\"\r\n                                      validate={{\r\n                                        required: {\r\n                                          value: true,\r\n                                          errorMessage: \"Please Enter Icon\",\r\n                                        },\r\n                                      }}\r\n                                      autoComplete=\"off\"\r\n                                    />\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </Row>\r\n\r\n                              <Row Col sm=\"12\">\r\n                                <FormGroup className=\"mb-1 col col-sm-4\">\r\n                                  <Row className=\"justify-content-md-left\">\r\n                                    <Label\r\n                                      htmlFor=\"horizontal-firstname-input\"\r\n                                      className=\"col-sm-3 col-form-label mt-4\"\r\n                                    >\r\n                                      Active{\" \"}\r\n                                    </Label>\r\n                                    <Col md={5} style={{ marginTop: \"15px\" }}>\r\n                                      <div\r\n                                        className=\"form-check form-switch form-switch-md mb-1\"\r\n                                        dir=\"ltr\"\r\n                                      >\r\n                                        <AvInput\r\n                                          type=\"checkbox\"\r\n                                          className=\"form-check-input mt-4\"\r\n                                          id=\"customSwitchsizemd\"\r\n                                          checked={EditData.isActive}\r\n                                          name=\"isActive\"\r\n                                          defaultChecked={true}\r\n                                        />\r\n                                        <label\r\n                                          className=\"form-check-label\"\r\n                                          htmlFor=\"customSwitchsizemd\"\r\n                                        ></label>\r\n                                      </div>\r\n                                    </Col>\r\n                                  </Row>\r\n                                </FormGroup>\r\n\r\n                                <FormGroup className=\"mb-1 col col-sm-4\">\r\n                                  <Row className=\"justify-content-md-left\">\r\n\r\n                                    <Label\r\n                                      htmlFor=\"horizontal-firstname-input\"\r\n                                      className=\"col-sm-4 col-form-label mt-4\"\r\n                                    >\r\n                                      Division Req*{\" \"}\r\n                                    </Label>\r\n                                    <Col md={5} style={{ marginTop: \"15px\" }}>\r\n                                      <div\r\n                                        className=\"form-check form-switch form-switch-md mb-1\"\r\n                                        dir=\"ltr\"\r\n                                      >\r\n                                        <AvInput\r\n                                          type=\"checkbox\"\r\n                                          className=\"form-check-input mt-4\"\r\n                                          id=\"customSwitchsizemd\"\r\n                                          defaultChecked={EditData.IsDivisionRequired}\r\n                                          name=\"IsDivisionRequired\"\r\n                                        />\r\n                                        <label\r\n                                          className=\"form-check-label\"\r\n                                          htmlFor=\"customSwitchsizemd\"\r\n                                        ></label>\r\n                                      </div>\r\n                                    </Col>\r\n                                  </Row>\r\n                                </FormGroup>\r\n\r\n                                <FormGroup className=\"mb-1 col col-sm-4\">\r\n                                  <Row className=\"justify-content-md-left\">\r\n\r\n                                    <Label\r\n                                      htmlFor=\"horizontal-firstname-input\"\r\n                                      className=\"col-sm-4 col-form-label mt-4\"\r\n                                    >\r\n                                      EditMode show In Component\r\n                                    </Label>\r\n                                    <Col md={5} style={{ marginTop: \"15px\" }}>\r\n                                      <div\r\n                                        className=\"form-check form-switch form-switch-md mb-1\"\r\n                                        dir=\"ltr\"\r\n                                      >\r\n                                        <AvInput\r\n                                          type=\"checkbox\"\r\n                                          className=\"form-check-input mt-4\"\r\n                                          id=\"customSwitchsizemd\"\r\n                                          defaultChecked={EditData.IsEditPopuporComponent}\r\n                                          name=\"IsEditPopuporComponent\"\r\n                                        />\r\n                                        <label\r\n                                          className=\"form-check-label\"\r\n                                          htmlFor=\"customSwitchsizemd\"\r\n                                        ></label>\r\n                                      </div>\r\n                                    </Col>\r\n                                  </Row>\r\n                                </FormGroup>\r\n                              </Row>\r\n                            </CardBody>\r\n                          </Card>\r\n\r\n                          {pageAccessDropDownView ? (\r\n                            <Card className=\" mt-n2 text-black\">\r\n                              <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                                <Row className=\"\">\r\n                                  <FormGroup className=\" ml-3 col col-sm-4 mb-4 \">\r\n                                    <Label htmlFor=\"validationCustom01\">\r\n                                      Page Access\r\n                                    </Label>\r\n                                    <Select\r\n                                      options={PageAccessValues}\r\n                                      onChange={(e) => {\r\n                                        PageAccess_DropdownSelect_Handler(e);\r\n                                      }}\r\n                                      // defaultValue={{ label: \"IsShowOnMenu\", value: 1 }}\r\n                                      classNamePrefix=\"select2-selection\"\r\n                                    />\r\n                                  </FormGroup>\r\n\r\n                                  <Col sm={1} style={{ marginTop: \"28px\" }}>\r\n                                    <Button\r\n                                      type=\"button\"\r\n                                      className=\"btn btn-sm mt-1 mb-0 btn-light  btn-outline-primary  \"\r\n                                      onClick={() => AddRoleHandler()}\r\n                                    >\r\n                                      <i className=\"dripicons-plus \"></i>\r\n                                    </Button>\r\n                                  </Col>\r\n\r\n                                  <Col sm={3} style={{ marginTop: \"28px\" }}>\r\n                                    {tablePageAccessDataState.length > 0 ? (\r\n                                      <div className=\"table-responsive\">\r\n                                        <Table className=\"table table-bordered  text-center\">\r\n                                          <Thead>\r\n                                            <tr>\r\n                                              <th>Page Access</th>\r\n\r\n                                              <th>Action</th>\r\n                                            </tr>\r\n                                          </Thead>\r\n\r\n                                          <Tbody>{TableBodyFunction()}</Tbody>\r\n                                        </Table>\r\n                                      </div>\r\n                                    ) : (\r\n                                      <> </>\r\n                                    )}\r\n                                  </Col>\r\n                                </Row>\r\n\r\n                              </CardBody>\r\n                            </Card>\r\n                          ) : <></>}\r\n\r\n                        </Row>\r\n                      </TabPane>\r\n\r\n                      <TabPane tabId=\"2\">\r\n\r\n                        {/* <Card> */}\r\n                        {/* <CardBody style={{ backgroundColor: \"whitesmoke\" }}> */}\r\n\r\n                        {/* {!(PageFieldShowUI) ? */}\r\n\r\n                        <div className=\"table-rep-plugin  mx-n4\">\r\n                          <div\r\n                            className=\"custom_scroll_div\"\r\n                            data-pattern=\"priority-columns \"\r\n                          >\r\n                            <Table className=\"table table-bordered table-responsive\">\r\n                              <Thead >\r\n                                <tr style={{ zIndex: \"23\" }}>\r\n                                  <th className=\"\">Control ID</th>\r\n                                  <th className=\"\">Field Label</th>\r\n                                  <th className=\"\">Control Type</th>\r\n                                  <th className=\"\" >Field Validation</th>\r\n                                  <th className=\"\" >InValid Msg</th>\r\n                                  <th className=\"\">List Page Seq</th>\r\n                                  <th >Is Compulsory</th>\r\n                                  <th>Default Sort</th>\r\n                                  <th>Show In List Page</th>\r\n                                  <th>Show In Download</th>\r\n                                  <th>Download Default Select</th>\r\n                                  <th className=\"col col-sm-1\">Action</th>\r\n\r\n                                </tr>\r\n                              </Thead>\r\n                              <Tbody  >\r\n                                {pageFieldTabTable.map((TableValue, key) => (\r\n                                  <tr >\r\n                                    <td>\r\n\r\n                                      <div style={{ width: \"150px\" }}>\r\n                                        <Input\r\n                                          type=\"text\"\r\n                                          id={`ControlID${key}`}\r\n                                          autoComplete=\"off\"\r\n                                          defaultValue={EditData.ControlID}\r\n                                          value={pageFieldTabTable[key].ControlID}\r\n                                          onChange={(e) => PageField_onChange_Handler(e.target.value, \"ControlID\", key)}>\r\n                                        </Input>\r\n                                      </div>\r\n                                    </td>\r\n                                    <td>\r\n                                      <div style={{ width: \"150px\" }}>\r\n                                        <Input\r\n                                          type=\"text\"\r\n                                          id={`FieldLabel${key}`}\r\n                                          autoComplete=\"off\"\r\n                                          defaultValue={EditData.FieldLabel}\r\n                                          value={pageFieldTabTable[key].FieldLabel}\r\n                                          onChange={(e) => PageField_onChange_Handler(e.target.value, \"FieldLabel\", key)}>\r\n                                        </Input>\r\n                                      </div>\r\n                                    </td>\r\n                                    <td>\r\n                                      <div style={{ width: \"150px\" }}>\r\n                                        <Select\r\n                                          id={`ControlType-${key}`}\r\n                                          // placeholder=\"select unit\"\r\n                                          value={pageFieldTabTable[key].ControlType}\r\n                                          options={ControlTypes_DropdownOptions}\r\n                                          onChange={(e) => { FieldValidation_Dropdown_Handler(e); PageField_onChange_Handler(e, \"ControlType\", key) }}\r\n                                        />\r\n                                      </div>\r\n                                    </td>\r\n                                    <td>\r\n                                      <div style={{ width: \"150px\" }}>\r\n                                        <Select\r\n                                          id={`FieldValidation-${key}`}\r\n                                          // placeholder=\"select unit\"\r\n                                          autoComplete=\"off\"\r\n                                          value={pageFieldTabTable[key].FieldValidation}\r\n                                          options={FieldValidations_DropdownOptions}\r\n                                          onChange={(e) => { PageField_onChange_Handler(e, \"FieldValidation\", key); }}\r\n                                        />\r\n                                      </div>\r\n                                    </td>\r\n                                    <td>\r\n                                      <div style={{ width: \"150px\" }}>\r\n                                        <Input\r\n                                          type=\"text\"\r\n                                          id={`InValidMsg${key}`}\r\n                                          autoComplete=\"off\"\r\n                                          defaultValue={EditData.InValidMsg}\r\n                                          value={pageFieldTabTable[key].InValidMsg}\r\n                                          onChange={(e) => PageField_onChange_Handler(e.target.value, \"InValidMsg\", key)}>\r\n                                        </Input>\r\n                                      </div>\r\n                                    </td>\r\n                                    <td>\r\n                                      <Input\r\n                                        autoComplete=\"off\"\r\n                                        type=\"text\"\r\n                                        id={`ListPageSeq${key}`}\r\n                                        defaultValue={EditData.ListPageSeq}\r\n                                        value={pageFieldTabTable[key].ListPageSeq}\r\n                                        onChange={(e) => PageField_onChange_Handler(e.target.value, \"ListPageSeq\", key)}>\r\n\r\n                                      </Input>\r\n                                    </td>\r\n                                    <td>\r\n                                      <Input\r\n                                        autoComplete=\"off\"\r\n                                        type=\"checkbox\"\r\n                                        id={`IsCompulsory${key}`}\r\n                                        checked={pageFieldTabTable[key].IsCompulsory}\r\n                                        onChange={(e) => PageField_onChange_Handler(e.target.checked, \"IsCompulsory\", key)}>\r\n\r\n                                      </Input>\r\n                                    </td>\r\n\r\n                                    <td >\r\n                                      <div className=\"d-flex\">\r\n                                        <div>\r\n                                          <Input\r\n\r\n                                            type=\"radio\"\r\n                                            name=\"btnradio\"\r\n                                            value={`DefaultSort${key}`}\r\n                                            id={`DefaultSort${key}`}\r\n                                            checked={pageFieldTabTable[key].DefaultSort}\r\n\r\n                                            onChange={(e) => PageField_onChange_Handler(e.target.checked, \"DefaultSort\", key)}>\r\n                                          </Input>\r\n                                        </div>\r\n\r\n                                        {pageFieldTabTable[key].DefaultSort > 0 ?\r\n                                          <div >\r\n                                            <i\r\n                                              className=\" bx bx-caret-up font-size-20 text-danger \"\r\n                                              id=\"up\"\r\n                                              style={{ display: pageFieldTabTable[key].DefaultSort===1  ? \"block\" :\"none\"  }}\r\n\r\n                                              onClick={(e) => arrow_value(key)}></i>\r\n\r\n                                            <i\r\n                                              className=\" bx bx-caret-down font-size-20 text-danger \"\r\n                                              style={{ display: pageFieldTabTable[key].DefaultSort===2  ? \"block\" :\"none\"  }}\r\n\r\n                                              id=\"down\"\r\n                                              onClick={(e) => arrow_value1(key)}></i>\r\n                                          </div>\r\n                                          : null}\r\n\r\n                                      </div>\r\n                                    </td>\r\n\r\n                                    <td>\r\n                                      <Input\r\n                                        type=\"checkbox\"\r\n                                        id={`ShowInListPage${key}`}\r\n                                        checked={pageFieldTabTable[key].ShowInListPage}\r\n                                        onChange={(e) => PageField_onChange_Handler(e.target.checked, \"ShowInListPage\", key)}>\r\n                                      </Input>\r\n                                    </td>\r\n                                    <td>\r\n                                      <Input\r\n                                        type=\"checkbox\"\r\n                                        id={`ShowInDownload${key}`}\r\n                                        defaultChecked={pageFieldTabTable[key].ShowInDownload}\r\n                                        onChange={(e) => PageField_onChange_Handler(e.target.checked, \"ShowInDownload\", key)}>\r\n                                      </Input>\r\n                                    </td>\r\n                                    <td>\r\n                                      <Input\r\n                                        type=\"checkbox\"\r\n                                        id={`DownloadDefaultSelect${key}`}\r\n                                        defaultChecked={pageFieldTabTable[key].DownloadDefaultSelect}\r\n                                        onChange={(e) => PageField_onChange_Handler(e.target.checked, \"DownloadDefaultSelect\", key)}>\r\n                                      </Input>\r\n                                    </td>\r\n                                    <td>\r\n                                      {(pageFieldTabTable.length === key + 1) ?\r\n                                        <Row className=\"\">\r\n                                          <Col md={6} className=\" mt-3\">\r\n                                            {(pageFieldTabTable.length > 1) ? <>\r\n                                              < i className=\"mdi mdi-trash-can d-block text-danger font-size-20\" onClick={() => {\r\n                                                PageField_DeleteRow_Handler(key)\r\n                                              }} >\r\n                                              </i>\r\n                                            </> : <Col md={6} ></Col>}\r\n\r\n                                          </Col>\r\n\r\n                                          <Col md={6} >\r\n                                            {/* <Button className=\"btn btn-sm btn-light align-items-sm-center text-center mt-3\"\r\n                                              type=\"button\"\r\n                                              onClick={() => { PageField_Tab_AddRow_Handler(key) }} >\r\n                                              <i className=\"dripicons-plus\"></i>\r\n                                            </Button> */}\r\n\r\n                                            <div className=\"col border-end d-flex justify-content-center \">\r\n                                              <Button\r\n                                                className=\"btn btn-outline-light btn-sm  align-items-sm-center text-center mt-3\"\r\n                                                type=\"button\"\r\n                                                onClick={() => { PageField_Tab_AddRow_Handler(key) }}\r\n                                              >\r\n                                                <i className=\"dripicons-plus\">\r\n\r\n                                                </i>\r\n                                              </Button>\r\n                                            </div>\r\n                                          </Col>\r\n                                        </Row>\r\n                                        :\r\n\r\n                                        < i className=\"mdi mdi-trash-can d-block text-danger font-size-20\" onClick={() => {\r\n                                          PageField_DeleteRow_Handler(key)\r\n                                        }} >\r\n                                        </i>\r\n                                      }\r\n\r\n                                    </td>\r\n                                  </tr>\r\n                                ))}\r\n\r\n                              </Tbody>\r\n                            </Table>\r\n                          </div>\r\n                        </div>\r\n\r\n\r\n                        {/* : <></>} */}\r\n\r\n                        {/* </CardBody> */}\r\n                        {/* </Card> */}\r\n\r\n                      </TabPane>\r\n\r\n                    </TabContent>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n            </AvForm>\r\n          </Container>\r\n        </div>\r\n      </React.Fragment >\r\n    )\r\n  }\r\n  else {\r\n    return (\r\n      <React.Fragment></React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default PageMaster;","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\UserRegistrationPages\\UserRegistration.js",["1310","1311","1312","1313","1314","1315","1316","1317","1318","1319","1320"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport Select from \"react-select\";\r\nimport { Card, CardBody, Col, Container, Row, CardHeader, Label, FormGroup, Input, } from \"reactstrap\";\r\nimport { AvForm, AvInput } from \"availity-reactstrap-validation\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getRoles,\r\n  addUser,\r\n  updateID,\r\n  addUserSuccess,\r\n  GetUserPartiesForUserMastePage,\r\n  getEmployeeForUseRegistration,\r\n  editSuccess\r\n}\r\n  from \"../../../store/Administrator/UserRegistrationRedux/actions\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport AvField from \"availity-reactstrap-validation/lib/AvField\";\r\nimport { AlertState } from \"../../../store/Utilites/CustomAlertRedux/actions\";\r\nimport { Tbody, Thead } from \"react-super-responsive-table\";\r\nimport { Breadcrumb_inputName } from \"../../../store/Utilites/Breadcrumb/actions\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst AddUser = (props) => {\r\n\r\n  const formRef = useRef(null);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory()\r\n\r\n  //*** \"isEditdata get all data from ModuleID for Binding  Form controls\r\n  let editDataGatingFromList = props.state;\r\n  let pageModeProps = props.pageMode;\r\n\r\n  //SetState  Edit data Geting From Modules List component\r\n  const [EditData, setEditData] = useState([]);\r\n  const [modalCss, setModalCss] = useState(false);\r\n  const [pageMode, setPageMode] = useState(\"save\");\r\n  const [userPageAccessState, setUserPageAccessState] = useState('');\r\n\r\n  const [partyRoleData, setPartyRoleData] = useState([]);\r\n  const [EmployeeSelect, setEmployeeSelect] = useState(\"\");\r\n  const [userPartiesForUserMaster, setUserPartiesForUserMaster] = useState([]);\r\n  // M_Roles DropDown\r\n  const [RoleDropDown, setRoleDropDown] = useState([]);\r\n\r\n  const [password, setPassword] = useState('');\r\n  const [cPassword, setCPassword] = useState('');\r\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\r\n  const [cPasswordClass, setCPasswordClass] = useState('form-control');\r\n  const [isCPassword, setisCPassword] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    if (isCPassword) {\r\n      if (password === cPassword) {\r\n        setShowErrorMessage(false);\r\n        setCPasswordClass('form-control is-valid')\r\n      } else {\r\n        setShowErrorMessage(true)\r\n        setCPasswordClass('form-control is-invalid')\r\n      }\r\n    }\r\n  }, [cPassword])\r\n\r\n\r\n  const handleCPassword = (e) => {\r\n    setCPassword(e.target.value);\r\n    setisCPassword(true);\r\n  }\r\n\r\n\r\n  //Access redux store Data /  'save_ModuleSuccess' action data\r\n  const {\r\n    PostAPIResponse,\r\n    employeelistForDropdown,\r\n    Roles,\r\n    userPartiesForUserMaster_redux,\r\n    userAccess\r\n  } = useSelector((state) => ({\r\n    PostAPIResponse: state.User_Registration_Reducer.AddUserMessage,\r\n    userPartiesForUserMaster_redux: state.User_Registration_Reducer.userPartiesForUserMaster,\r\n    employeelistForDropdown: state.User_Registration_Reducer.employeelistForDropdown,\r\n    Roles: state.User_Registration_Reducer.Roles,\r\n    userAccess: state.Login.RoleAccessUpdateData,\r\n    pageField: state.CommonPageFieldReducer.pageField\r\n  }));\r\n\r\n  const location = { ...history.location }\r\n  const hasShowloction = location.hasOwnProperty(\"editValue\")\r\n  const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n  // userAccess useEffect\r\n  useEffect(() => {\r\n    let userAcc = null;\r\n    let locationPath = location.pathname;\r\n\r\n    if (hasShowModal) {\r\n      locationPath = props.masterPath;\r\n    };\r\n\r\n    userAcc = userAccess.find((inx) => {\r\n      return (`/${inx.ActualPagePath}` === locationPath)\r\n    })\r\n\r\n    if (userAcc) {\r\n      setUserPageAccessState(userAcc)\r\n    };\r\n  }, [userAccess])\r\n\r\n  const FindPartyID = userPartiesForUserMaster_redux.find((index) => {\r\n    return index.Party_id === null\r\n  })\r\n\r\n  useEffect(() => {\r\n\r\n    let newArray = userPartiesForUserMaster_redux.map((i) => (\r\n      {\r\n        PartyRoles: [],\r\n        Party: i.Party_id,\r\n        PartyName: i.PartyName\r\n      }\r\n    ))\r\n    setUserPartiesForUserMaster(newArray)\r\n\r\n  }, [userPartiesForUserMaster_redux])\r\n\r\n  // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n  useEffect(() => {\r\n    debugger\r\n    // if (!(userPageAccessState === '')) { document.getElementById(\"txtName\").focus(); }\r\n   \r\n    if ((hasShowloction || hasShowModal)) {\r\n     \r\n      let hasEditVal = null\r\n      if (hasShowloction) {\r\n        setPageMode(location.pageMode)\r\n        hasEditVal = location.editValue\r\n        \r\n      }\r\n      else if (hasShowModal) {\r\n        hasEditVal = props.editValue\r\n        setPageMode(props.pageMode)\r\n        setModalCss(true)\r\n      }\r\n\r\n      if (hasEditVal) {\r\n        dispatch(Breadcrumb_inputName(hasEditVal.LoginName))\r\n        setEditData(hasEditVal)\r\n       \r\n        setEmployeeSelect({\r\n          value: hasEditVal.Employee,\r\n          label: hasEditVal.EmployeeName,\r\n        })\r\n\r\n        setUserPartiesForUserMaster(hasEditVal.UserRole)\r\n\r\n        \r\n        let arraynew = []\r\n        hasEditVal.UserRole.map((i) => {\r\n          i.PartyRoles.map((i2) => {\r\n            arraynew.push({ Party: i.Party, Role: i2.Role })\r\n          })\r\n        })\r\n        console.log(\"arraynew\",arraynew)\r\n        setPartyRoleData(arraynew)\r\n      \r\n        dispatch(editSuccess({ Status: false }))\r\n      }\r\n    }\r\n\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n\r\n    if ((PostAPIResponse.Status === true) && (PostAPIResponse.StatusCode === 200) && !(pageMode === \"dropdownAdd\")) {\r\n      dispatch(addUserSuccess({ Status: false }))\r\n      formRef.current.reset();\r\n      setEmployeeSelect('')\r\n      setRoleDropDown('')\r\n      setPartyRoleData('')\r\n      if (pageMode === \"other\") {\r\n        dispatch(AlertState({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: PostAPIResponse.Message,\r\n        }))\r\n      }\r\n      else {\r\n        dispatch(AlertState({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: PostAPIResponse.Message,\r\n          RedirectPath: '/UserList',\r\n          AfterResponseAction: false\r\n        }))\r\n      }\r\n    }\r\n    else if ((PostAPIResponse.Status === true) && !(pageMode === \"dropdownAdd\")) {\r\n      dispatch(addUserSuccess({ Status: false }))\r\n      dispatch(AlertState({\r\n        Type: 4,\r\n        Status: true,\r\n        Message: JSON.stringify(PostAPIResponse.Message),\r\n        RedirectPath: false,\r\n        AfterResponseAction: false\r\n      }));\r\n    }\r\n  }, [PostAPIResponse.Status])\r\n\r\n  useEffect(() => {\r\n    dispatch(getEmployeeForUseRegistration());\r\n    dispatch(getRoles());\r\n  }, [dispatch]);\r\n\r\n\r\n  const EmployeeValues = employeelistForDropdown.map((Data) => ({\r\n    value: Data.id,\r\n    label: Data.Name\r\n  }));\r\n\r\n  function handllerEmployeeID(e) {\r\n    setEmployeeSelect(e)\r\n    dispatch(GetUserPartiesForUserMastePage(e.value))\r\n  }\r\n\r\n  const RolesValues = Roles.map((Data) => ({\r\n    value: Data.id,\r\n    label: Data.Name\r\n  }));\r\n\r\n\r\n  function RoleDropdownHandler(e) {\r\n    setRoleDropDown(e)\r\n  }\r\n\r\n  /// Role dopdown\r\n  function RoleDropDown_select_handler(event, pty, key) {\r\n\r\n    const nwPtRole = event.map((ind) => ({\r\n      Party: pty.Party,\r\n      Role: ind.value\r\n    }))\r\n\r\n    const find = partyRoleData.filter((index, key1) => {\r\n      return !(index.Party === pty.Party)\r\n    })\r\n    if ((find === undefined)) {\r\n      setPartyRoleData(nwPtRole)\r\n    } else {\r\n      // RoleDropDown\r\n      // const newarray=nwPtRole.concat(nwPtRole)\r\n      setPartyRoleData(nwPtRole.concat(find))\r\n    }\r\n  };\r\n\r\n  const handleValidSubmit = (event, values) => {\r\n    debugger\r\n    const jsonBody = JSON.stringify({\r\n      email: values.email,\r\n      LoginName: values.loginName,\r\n      password: \"1234\",\r\n      AdminPassword: \"1234\",\r\n      Employee: EmployeeSelect.value,\r\n      isActive: values.isActive,\r\n      isSendOTP: values.isSendOTP,\r\n      isLoginUsingMobile: values.isLoginUsingMobile,\r\n      isLoginUsingEmail: values.isLoginUsingEmail,\r\n      CreatedBy: 1,\r\n      UpdatedBy: 1,\r\n      UserRole: partyRoleData\r\n    })\r\n\r\n    if (partyRoleData.length <= 0 && !(FindPartyID)) {\r\n      dispatch(AlertState({\r\n        Type: 4, Status: true,\r\n        Message: \"At Least One Role Data Add in the Table\",\r\n        RedirectPath: false,\r\n        PermissionAction: false,\r\n      }));\r\n    }\r\n    else if (pageMode === 'edit') {\r\n\r\n      dispatch(updateID(jsonBody, EditData.id));\r\n      setEditData([]);\r\n      console.log(\"Update jsonBody\", jsonBody)\r\n    }\r\n    else {\r\n      dispatch(addUser(jsonBody));\r\n      console.log(\"Post jsonBody\", jsonBody)\r\n    }\r\n  };\r\n\r\n\r\n  const rolaTable = () => {\r\n\r\n    return (\r\n      <table className=\"table table-bordered \">\r\n        <Thead >\r\n          <tr>\r\n            <th>Party Name</th>\r\n            <th>RoleName</th>\r\n\r\n          </tr>\r\n        </Thead>\r\n        <Tbody  >\r\n          {userPartiesForUserMaster.map((index, key) => (\r\n            <tr key={index.Role}>\r\n              <td className=\"col-sm-6\">\r\n                {index.PartyName}\r\n              </td>\r\n              <td>\r\n                <FormGroup className=\"\" >\r\n\r\n                  <Select\r\n                    defaultValue={pageMode === \"edit\" ? index.PartyRoles.map((i) => ({ value: i.Role, label: i.RoleName })) : null}\r\n                    options={RolesValues}\r\n                    isMulti={true}\r\n                    className=\"basic-multi-select\"\r\n                    onChange={(event) => { RoleDropDown_select_handler(event, index, key) }}\r\n                    classNamePrefix=\"select2-selection\"\r\n                  />\r\n                </FormGroup>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </Tbody>\r\n\r\n      </table>\r\n    )\r\n  }\r\n\r\n  // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n  var IsEditMode_Css = ''\r\n  if (modalCss || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n  if (!(userPageAccessState === '')) {\r\n    return (\r\n      <React.Fragment>\r\n        <MetaTags>\r\n          <title>User Registration| FoodERP-React FrontEnd</title>\r\n        </MetaTags>\r\n        <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n          <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n          <Container fluid>\r\n            <div >\r\n            <Row>\r\n              <Col lg={12}>\r\n                <Card className=\"text-black\" >\r\n                  <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                    <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                    <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                  </CardHeader>\r\n                  <CardBody className=\"text-black\">\r\n                    <AvForm\r\n                      onValidSubmit={(e, v) => {\r\n                        handleValidSubmit(e, v);\r\n                      }}\r\n                      ref={formRef}\r\n                    >\r\n                      <Card className=\" text-black\">\r\n                        <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                          <Row >\r\n\r\n                            \r\n                              <FormGroup className=\"mb-2 col col-sm-4 \" >\r\n                                <Label htmlFor=\"validationCustom01\">Employee</Label>\r\n                                <Select\r\n                                  id=\"EmployeeDropDown \"\r\n                                  isDisabled={pageMode === \"edit\" ? true : false}\r\n                                  value={EmployeeSelect}\r\n                                  options={EmployeeValues}\r\n                                  onChange={(e) => { handllerEmployeeID(e) }}\r\n                                />\r\n                              </FormGroup>\r\n                              <Row >\r\n\r\n                            <FormGroup\r\n                             className=\"mb-1 col col-sm-4 \" >\r\n                              <Label htmlFor=\"validationCustom01\">Login Name</Label>\r\n                              <AvField \r\n                            \r\n                              name=\"loginName\" id=\"txtName\"\r\n                                type=\"text\"\r\n                                placeholder=\"Please Enter Name\"\r\n                                defaultvalue=''\r\n                                value={EditData.LoginName}\r\n                              disabled={pageMode === \"edit\" ? true : false}\r\n                                autoComplete='off'\r\n                                validate={{\r\n                                  required: { value: true, errorMessage: 'Please Enter Name' },\r\n                                }}\r\n                                onChange={(e) => { dispatch(Breadcrumb_inputName(e.target.value)) }}\r\n                               /> \r\n                            </FormGroup>\r\n                            </Row>\r\n                            \r\n\r\n                          </Row>\r\n                         \r\n\r\n\r\n                          {pageMode === \"save\" ?\r\n                            <Row>\r\n                              <Row>\r\n                                <FormGroup className=\"mb-1 col col-sm-4 \" >\r\n                                  <Label htmlFor=\"validationCustom01\">Password</Label>\r\n                                  <AvField name=\"password\" id=\"password\"\r\n                                    type=\"password\"\r\n                                    // value={EditData.password}\r\n                                    placeholder=\"Please Enter Password\"\r\n                                    autoComplete=\"new-password\"\r\n                                    className=\"form-control\"\r\n                                    // validate={{\r\n                                    //   required: { value: true, errorMessage: 'Please Enter Password' },\r\n                                    // }}\r\n\r\n                                    value={password}\r\n                                    onChange={(e) => { setPassword(e.target.value) }} />\r\n\r\n                                </FormGroup>\r\n\r\n                              </Row>\r\n                              <Row>\r\n                                <FormGroup className=\"mb-1 col col-sm-4 \" >\r\n                                  <Label htmlFor=\"validationCustom01\">Confirm Password</Label>\r\n                                  <AvField name=\"password\" id=\"password\"\r\n                                    type=\"password\"\r\n                                    // value={EditData.password}\r\n                                    placeholder=\"Please Enter Password\"\r\n                                    autoComplete=\"new-password\"\r\n                                    className={cPasswordClass}\r\n                                    // validate={{\r\n                                    //   required: { value: true, errorMessage: 'Please Enter Password' },\r\n                                    // }}\r\n                                    value={cPassword}\r\n                                    onChange={handleCPassword} />\r\n                                  {showErrorMessage && isCPassword ? <div> Passwords did not match </div> : ''}\r\n                                  {/* <AvFeedback> Passwords did not match </AvFeedback> */}\r\n                                </FormGroup>\r\n                              </Row>\r\n                            </Row>\r\n                            : null}\r\n\r\n\r\n\r\n                          <Row className=\"mt-2\">\r\n                            <FormGroup className=\"mb-1 col col-sm-12 \" >\r\n                              <Row className=\"justify-content-md-left\">\r\n                                <Label htmlFor=\"horizontal-firstname-input\" className=\" col-sm-2 col-form-label\" >Enable Mobile Login</Label>\r\n                                <Col md=\"1\" style={{ marginTop: '9px' }} >\r\n                                  <div className=\"form-check form-switch form-switch-md ml-4 \" dir=\"ltr\">\r\n                                    <AvInput type=\"checkbox\" className=\"form-check-input\" id=\"customSwitchsizemd\"\r\n                                      checked={EditData.isLoginUsingMobile}\r\n                                      name=\"isLoginUsingMobile\"\r\n                                      defaultChecked={true}\r\n                                    />\r\n                                    <label className=\"form-check-label\" htmlFor=\"customSwitchsizemd\"></label>\r\n                                  </div>\r\n                                </Col>\r\n\r\n                                <Col md=\"2\" >  </Col>\r\n                                <Label htmlFor=\"horizontal-firstname-input\" className=\"col-sm-1 col-form-label \" >Active </Label>\r\n                                <Col md=\"1\" style={{ marginTop: '9px' }} >\r\n                                  <div className=\"form-check form-switch form-switch-md \" dir=\"ltr\">\r\n                                    <AvInput type=\"checkbox\" className=\"form-check-input\" id=\"customSwitchsizemd\"\r\n                                      checked={EditData.isActive}\r\n                                      defaultChecked={true}\r\n                                      name=\"isActive\"\r\n                                    />\r\n                                    <label className=\"form-check-label\" htmlFor=\"customSwitchsizemd\"></label>\r\n                                  </div>\r\n                                </Col>\r\n                                <Col md=\"5\" >  </Col>\r\n                              </Row>\r\n                            </FormGroup>\r\n                          </Row>\r\n\r\n                          <Row >\r\n                            <FormGroup className=\"col col-sm-12  \" >\r\n                              <Row className=\"justify-content-md-left\">\r\n                                <Label htmlFor=\"horizontal-firstname-input\" className=\"col-sm-2 col-form-label\" >Enable Email Login</Label>\r\n                                <Col md={1} style={{ marginTop: '10px' }} >\r\n                                  <div className=\"form-check form-switch form-switch-md\" dir=\"ltr\">\r\n                                    <AvInput type=\"checkbox\" className=\"form-check-input\" id=\"customSwitchsizemd\"\r\n                                      checked={EditData.isLoginUsingEmail}\r\n                                      name=\"isLoginUsingEmail\"\r\n                                      defaultChecked={true}\r\n                                    />\r\n                                    <label className=\"form-check-label\" htmlFor=\"customSwitchsizemd\"></label>\r\n                                  </div>\r\n                                </Col>\r\n\r\n                                <Col md=\"2\" >  </Col>\r\n                                <Label htmlFor=\"horizontal-firstname-input\" className=\"col-sm-1 col-form-label \" >Send OTP </Label>\r\n                                <Col md={1} style={{ marginTop: '10px' }} >\r\n                                  <div className=\"form-check form-switch form-switch-md\" dir=\"ltr\">\r\n                                    <AvInput type=\"checkbox\" className=\"form-check-input\" id=\"customSwitchsizemd\"\r\n                                      defaultChecked={EditData.isSendOTP}\r\n                                      name=\"isSendOTP\"\r\n                                    />\r\n                                    <label className=\"form-check-label\" htmlFor=\"customSwitchsizemd\"></label>\r\n                                  </div>\r\n                                </Col>\r\n                                <Col md=\"5\" >  </Col>\r\n                              </Row>\r\n                            </FormGroup>\r\n                          </Row>\r\n                        </CardBody>\r\n                      </Card>\r\n\r\n                      <Card className=\"mt-n2\">\r\n                        <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                          <Row className=\"\">\r\n                            {/* <FormGroup className=\" ml-3 col col-sm-4 \" >\r\n                              <Label htmlFor=\"validationCustom01\">Roles </Label>\r\n                              <Select\r\n                                value={RoleDropDown}\r\n                                options={RolesValues}\r\n                                onChange={(e) => { RoleDropDown_select_handler(e) }}\r\n                                classNamePrefix=\"select2-selection\"\r\n                              />\r\n\r\n                            </FormGroup> */}\r\n\r\n                            {/* <Col className=\"text-center\" sm={1} style={{ marginTop: '28px' }} >\r\n                              {\" \"}\r\n                              <Button\r\n                                type=\"button\"\r\n                                className=\"btn btn-sm mt-1 mb-0 btn-light  btn-outline-primary  \"\r\n                                onClick={() =>\r\n                                  AddRoleHandler()\r\n                                }\r\n                              >\r\n                                <i className=\"dripicons-plus \"></i>\r\n                              </Button>\r\n                            </Col> */}\r\n                            {!(userPartiesForUserMaster.length === 0) ? userPartiesForUserMaster[0].Party > 0 ?\r\n                              <Col sm={6} style={{ marginTop: '28px' }}>\r\n\r\n                                {partyRoleData ? (\r\n                                  <div >\r\n                                    {rolaTable()}\r\n                                  </div>\r\n                                ) :\r\n                                  null\r\n                                }\r\n                              </Col> : <div className=\"col-lg-3 col-md-6\">\r\n                                <div className=\"mb-3\">\r\n                                  <Label className=\"form-label font-size-13 \">Role name</Label>\r\n\r\n                                  <Select\r\n                                    defaultValue={pageMode === \"edit\" ? userPartiesForUserMaster[0].PartyRoles.map((i) => ({ value: i.Role, label: i.RoleName })) : null}\r\n                                    options={RolesValues}\r\n                                    isMulti={true}\r\n                                    className=\"basic-multi-select\"\r\n                                    onChange={(event) => { RoleDropDown_select_handler(event, userPartiesForUserMaster[0], 0) }}\r\n                                    classNamePrefix=\"select2-selection\"\r\n                                  />\r\n                                </div>\r\n                              </div> : <></>}\r\n\r\n                            {/* {FindPartyID ? <div className=\"col-lg-3 col-md-6\">\r\n                              <div className=\"mb-3\">\r\n                                <Label className=\"form-label font-size-13 \">Role name</Label>\r\n                                <Select\r\n                                  defaultValue={RoleDropDown}\r\n                                  isMulti={true}\r\n                                  className=\"basic-multi-select\"\r\n                                  options={RolesValues}\r\n                                  onChange={(e) => { RoleDropdownHandler(e) }}\r\n                                  classNamePrefix=\"select2-selection\"\r\n                                />\r\n                              </div>\r\n                            </div> : <></>} */}\r\n\r\n                            <Row >\r\n                              <Col sm={2}>\r\n                                <div>\r\n                                  {\r\n                                    pageMode === \"edit\" ?\r\n\r\n                                      userPageAccessState.RoleAccess_IsEdit ?\r\n\r\n                                        <button\r\n                                          type=\"submit\"\r\n                                          data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Update User\"\r\n                                          className=\"btn btn-success w-md\"\r\n                                        >\r\n                                          <i class=\"fas fa-edit me-2\"></i>Update\r\n                                        </button>\r\n                                        :\r\n                                        <></>\r\n                                      : (\r\n                                        userPageAccessState.RoleAccess_IsSave ?\r\n                                          <button\r\n                                            type=\"submit\"\r\n                                            data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Save User\"\r\n                                            className=\"btn btn-primary w-md\"\r\n                                          > <i className=\"fas fa-save me-2\"></i> Save\r\n                                          </button>\r\n                                          :\r\n                                          <></>\r\n                                      )\r\n                                  }\r\n                                </div>\r\n                                \r\n\r\n                              </Col>\r\n                            </Row>\r\n                            {/* </FormGroup > */}\r\n                          </Row>\r\n                        </CardBody>\r\n                      </Card>\r\n                    </AvForm>\r\n                  </CardBody>\r\n                  <br></br>\r\n                  <br></br>\r\n                  <br></br>\r\n                  <br></br>\r\n                  <br></br>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n            </div>\r\n          </Container >\r\n        </div >\r\n      </React.Fragment >\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <React.Fragment></React.Fragment>\r\n    )\r\n  }\r\n};\r\nexport default AddUser;\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\EmployeePages\\EmployeeList.js",["1321"],"import React, { useEffect } from \"react\";\r\nimport {\r\n  getEmployeelist,\r\n  editEmployeeeId,\r\n  deleteEmployeeIDSuccess,\r\n  updateEmployeeIDSuccess,\r\n  delete_Employee_ID,\r\n  PostEmployeeSuccess,\r\n} from \"../../../store/Administrator/M_EmployeeRedux/action\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport AddEmployee from \"./EmployeeMaster\";\r\nimport CommonListPage from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport { EMPLOYEE } from \"../../../routes/route_url\";\r\n\r\nconst Employee_List = () => {\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      tableList: state.M_EmployeesReducer.employeeList,\r\n      editData: state.M_EmployeesReducer.editData,\r\n      updateMsg: state.M_EmployeesReducer.updateMessage,\r\n      deleteMsg: state.M_EmployeesReducer.deleteMessage,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      postMsg: state.M_EmployeesReducer.postMessage,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n\r\n    })\r\n    );\r\n\r\n    const action = {\r\n      getList: getEmployeelist,\r\n      editId: editEmployeeeId,\r\n      deleteId: delete_Employee_ID,\r\n      postSucc: PostEmployeeSuccess,\r\n      updateSucc: updateEmployeeIDSuccess,\r\n      deleteSucc: deleteEmployeeIDSuccess\r\n    }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(9))\r\n    dispatch(getEmployeelist());\r\n  }, []);\r\n\r\n  const { pageField } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        (pageField) ?\r\n          <CommonListPage\r\n            action={action}\r\n            reducers={reducers}\r\n            MasterModal={AddEmployee}\r\n            masterPath={EMPLOYEE}\r\n            ButtonMsgLable={\"Employee\"}\r\n            deleteName={\"Name\"}\r\n          />\r\n          : null\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n  \r\nexport default Employee_List;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\RoleMasterPages\\RoleList.js",["1322"],"import React, { useEffect } from \"react\";\r\nimport {\r\n  getRole,\r\n  deleteRole,\r\n  editRoleId,\r\n  updateSuccess,\r\n  deleteSuccess,\r\n  PostSuccess,\r\n} from \"../../../store/Administrator/RoleMasterRedux/action\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport RoleMaster from \"./RoleMaster\";\r\nimport CommonListPage from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport { ROLE } from \"../../../routes/route_url\";\r\n\r\nconst RoleList = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      tableList: state.RoleMaster_Reducer.roleList,\r\n      editData: state.RoleMaster_Reducer.editData,\r\n      updateMsg: state.RoleMaster_Reducer.updateMsg,\r\n      deleteMsg: state.RoleMaster_Reducer.deleteMsg,\r\n      postMsg: state.RoleMaster_Reducer.postMsg,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: getRole,\r\n    editId: editRoleId,\r\n    deleteId: deleteRole,\r\n    postSucc: PostSuccess,\r\n    updateSucc: updateSuccess,\r\n    deleteSucc: deleteSuccess\r\n  }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(13))\r\n    dispatch(getRole());\r\n  }, []);\r\n\r\n  const { pageField } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        (pageField) ?\r\n          <CommonListPage\r\n            action={action}\r\n            reducers={reducers}\r\n            MasterModal={RoleMaster}\r\n            masterPath={ROLE}\r\n            ButtonMsgLable={\"Role\"}\r\n            deleteName={\"Name\"}\r\n          />\r\n          : null\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default RoleList;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\RoleMasterPages\\RoleMaster.js",["1323","1324","1325","1326","1327","1328","1329","1330"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport { Card, CardBody, Col, Container, Row, Label, CardHeader, FormGroup, Input, } from \"reactstrap\";\r\nimport { AvInput } from \"availity-reactstrap-validation\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  editSuccess,\r\n  postRole,\r\n  updateID,\r\n  PostSuccess\r\n} from \"../../../store/Administrator/RoleMasterRedux/action\";\r\nimport { AlertState, commonPageField, commonPageFieldSuccess, updateSuccess } from \"../../../store/actions\";\r\nimport Select from \"react-select\";\r\nimport { Breadcrumb_inputName } from \"../../../store/Utilites/Breadcrumb/actions\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getEmployeeTypelist } from \"../../../store/Administrator/EmployeeTypeRedux/action\";\r\nimport {\r\n  comAddPageFieldFunc,\r\n  formValid,\r\n  initialFiledFunc,\r\n  onChangeSelect,\r\n  onChangeText,\r\n} from \"../../../components/Common/CmponentRelatedCommonFile/validationFunction\";\r\nimport { ROLE_lIST } from \"../../../routes/route_url\";\r\nimport SaveButton from \"../../../components/Common/CommonSaveButton\";\r\n\r\n\r\nconst RoleMaster = (props) => {\r\n  const formRef = useRef(null);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory()\r\n\r\n  //SetState  Edit data Geting From Modules List component\r\n  const [pageMode, setPageMode] = useState(\"\");\r\n  const [modalCss, setModalCss] = useState(false);\r\n  const [userPageAccessState, setUserPageAccessState] = useState(123);\r\n\r\n  const initialFiled = {\r\n    id: \"\",\r\n    Name: \"\",\r\n    Description: \"\",\r\n    Dashboard: \"\",\r\n    RoleEmployeeTypes: \"\",\r\n    isActive: \"\",\r\n    isSCMRole: '',\r\n    IsPartyConnection: \"\"\r\n  }\r\n\r\n  const [state, setState] = useState(initialFiledFunc(initialFiled))\r\n\r\n  //Access redux store Data /  'save_ModuleSuccess' action data\r\n  const {\r\n    postMsg,\r\n    updateMsg,\r\n    pageField,\r\n    userAccess,\r\n    EmployeeType } = useSelector((state) => ({\r\n      postMsg: state.RoleMaster_Reducer.postMsg,\r\n      updateMsg: state.RoleMaster_Reducer.updateMsg,\r\n      EmployeeType: state.EmployeeTypeReducer.EmployeeTypeList,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageField\r\n    }));\r\n\r\n  const location = { ...history.location }\r\n  const hasShowloction = location.hasOwnProperty(\"editValue\")\r\n  const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n\r\n  useEffect(() => {\r\n    dispatch(commonPageFieldSuccess());\r\n    dispatch(commonPageField(12))\r\n    dispatch(getEmployeeTypelist());\r\n  }, []);\r\n\r\n  // userAccess useEffect\r\n  useEffect(() => {\r\n    let userAcc = null;\r\n    let locationPath = location.pathname;\r\n\r\n    if (hasShowModal) {\r\n      locationPath = props.masterPath;\r\n    };\r\n\r\n    userAcc = userAccess.find((inx) => {\r\n      return (`/${inx.ActualPagePath}` === locationPath)\r\n    })\r\n\r\n    if (userAcc) {\r\n      setUserPageAccessState(userAcc)\r\n    };\r\n  }, [userAccess])\r\n\r\n  useEffect(() => {\r\n\r\n    if (pageField) {\r\n      const fieldArr = pageField.PageFieldMaster\r\n      comAddPageFieldFunc({ state, setState, fieldArr })// new change\r\n    }\r\n  }, [pageField])\r\n\r\n  useEffect(() => {\r\n\r\n    if ((hasShowloction || hasShowModal)) {\r\n\r\n      let hasEditVal = null\r\n      if (hasShowloction) {\r\n        setPageMode(location.pageMode)\r\n        hasEditVal = location.editValue\r\n      }\r\n      else if (hasShowModal) {\r\n        hasEditVal = props.editValue\r\n        setPageMode(props.pageMode)\r\n        setModalCss(true)\r\n      }\r\n\r\n      if (hasEditVal) {\r\n        const listItems = hasEditVal.RoleEmployeeTypes.map((data) => ({\r\n          value: data.EmployeeType,\r\n          label: data.EmployeeTypeName\r\n        }))\r\n\r\n        const { id, Name, Description, Dashboard, isActive, isSCMRole, IsPartyConnection, RoleEmployeeTypes } = hasEditVal\r\n        const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n        hasValid.Name.valid = true;\r\n        hasValid.Description.valid = true;\r\n        hasValid.Dashboard.valid = true;\r\n        hasValid.isActive.valid = true;\r\n        hasValid.isSCMRole.valid = true;\r\n        hasValid.IsPartyConnection.valid = true;\r\n        hasValid.RoleEmployeeTypes.valid = true;\r\n\r\n        values.id = id\r\n        values.Name = Name\r\n        values.Description = Description\r\n        values.Dashboard = Dashboard\r\n        values.isActive = isActive\r\n        values.isSCMRole = isSCMRole\r\n        values.IsPartyConnection = IsPartyConnection\r\n        values.RoleEmployeeTypes = listItems;\r\n\r\n        setState({ values, fieldLabel, hasValid, required, isError })\r\n        dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n      }\r\n      dispatch(editSuccess({ Status: false }))\r\n\r\n    }\r\n\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if ((postMsg.Status === true) && (postMsg.StatusCode === 200) && !(pageMode === \"dropdownAdd\")) {\r\n      dispatch(PostSuccess({ Status: false }))\r\n      formRef.current.reset();\r\n      if (pageMode === \"dropdownAdd\") {\r\n        dispatch(AlertState({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: postMsg.Message,\r\n        }))\r\n      }\r\n      else {\r\n        dispatch(AlertState({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: postMsg.Message,\r\n          RedirectPath: ROLE_lIST,\r\n\r\n        }))\r\n      }\r\n    }\r\n    else if ((postMsg.Status === true) && !(pageMode === \"dropdownAdd\")) {\r\n      dispatch(PostSuccess({ Status: false }))\r\n      dispatch(AlertState({\r\n        Type: 4,\r\n        Status: true,\r\n        Message: JSON.stringify(postMsg.Message),\r\n        RedirectPath: false,\r\n        AfterResponseAction: false\r\n      }));\r\n    }\r\n  }, [postMsg.Status])\r\n\r\n  useEffect(() => {\r\n    if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n      history.push({\r\n        pathname: ROLE_lIST,\r\n      })\r\n    } else if (updateMsg.Status === true && !modalCss) {\r\n      dispatch(updateSuccess({ Status: false }));\r\n      dispatch(\r\n        AlertState({\r\n          Type: 3,\r\n          Status: true,\r\n          Message: JSON.stringify(updateMsg.Message),\r\n        })\r\n      );\r\n    }\r\n  }, [updateMsg, modalCss]);\r\n\r\n  const EmployeeType_DropdownOptions = EmployeeType.map((data) => ({\r\n    value: data.id,\r\n    label: data.Name\r\n  }));\r\n\r\n\r\n  const values = { ...state.values }\r\n  const { isError } = state;\r\n  const { fieldLabel } = state;\r\n\r\n  const formSubmitHandler = (event) => {\r\n\r\n    event.preventDefault();\r\n    if (formValid(state, setState)) {\r\n\r\n      const jsonBody = JSON.stringify({\r\n        Name: values.Name,\r\n        Description: values.Description,\r\n        Dashboard: values.Dashboard,\r\n        isActive: values.isActive,\r\n        isSCMRole: values.isSCMRole,\r\n        IsPartyConnection: values.IsPartyConnection,\r\n        RoleEmployeeTypes: values.RoleEmployeeTypes.map((i) => { return ({ EmployeeType: i.value }) }),\r\n        // RoleEmployeeTypes: [\r\n        //   {\r\n        //     EmployeeType: 1\r\n        //   }\r\n        // ],\r\n        CreatedBy: 1,\r\n        CreatedOn: \"2022-05-20T11:22:55.711483Z\",\r\n        UpdatedBy: 1,\r\n        UpdatedOn: \"2022-05-20T11:22:55.711483Z\"\r\n      });\r\n\r\n      if (pageMode === 'edit') {\r\n        dispatch(updateID(jsonBody, values.id));\r\n        console.log(\"jsonBody\", jsonBody)\r\n      }\r\n\r\n      else {\r\n        dispatch(postRole(jsonBody));\r\n\r\n      }\r\n    }\r\n  };\r\n\r\n  // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n  var IsEditMode_Css = ''\r\n  if (modalCss || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n  if (!(userPageAccessState === '')) {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n          <Container fluid>\r\n            <MetaTags>\r\n              <title>{userPageAccessState.PageHeading}| FoodERP-React FrontEnd</title>\r\n            </MetaTags>\r\n            <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n\r\n            <Card className=\"text-black\">\r\n              <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n              </CardHeader>\r\n\r\n              <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n\r\n                <form onSubmit={formSubmitHandler} ref={formRef} noValidate>\r\n\r\n                  <Row className=\"\">\r\n                    <Col md={12}>\r\n                      <Card>\r\n                        <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                          <Row>\r\n                            <FormGroup className=\"mb-2 col col-sm-4 \" >\r\n                              <Label>{fieldLabel.Name} </Label>\r\n                              <Input\r\n                                name=\"Name\"\r\n                                id=\"txtName\"\r\n                                value={values.Name}\r\n                                type=\"text\"\r\n                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                placeholder=\"Please Enter Name\"\r\n                                autoComplete='off'\r\n                                autoFocus={true}\r\n                                onChange={(event) => {\r\n                                  onChangeText({ event, state, setState })\r\n                                  dispatch(Breadcrumb_inputName(event.target.value))\r\n                                }}\r\n                              />\r\n                              {isError.Name.length > 0 && (\r\n                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                              )}\r\n                            </FormGroup>\r\n\r\n\r\n                            <Col md={1} className=\"mx-n1\"> </Col>\r\n\r\n                            <FormGroup className=\"mb-2 col col-sm-4 \">\r\n\r\n                              <Label htmlFor=\"validationCustom01\">{fieldLabel.RoleEmployeeTypes} </Label>\r\n                              <Select\r\n                                name=\"RoleEmployeeTypes\"\r\n                                // defaultValue={EmployeeType_DropdownOptions[0]}\r\n                                value={values.RoleEmployeeTypes}\r\n                                isSearchable={false}\r\n                                isMulti={true}\r\n                                options={EmployeeType_DropdownOptions}\r\n                                onChange={(hasSelect, evn) => onChangeSelect({ hasSelect, evn, state, setState, })}\r\n                                classNamePrefix=\"dropdown\"\r\n                              />\r\n                              {isError.RoleEmployeeTypes.length > 0 && (\r\n                                <span className=\"text-danger f-8\"><small>{isError.RoleEmployeeTypes}</small></span>\r\n                              )}\r\n                            </FormGroup>\r\n\r\n                            <Row>\r\n                              <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                <Label htmlFor=\"validationCustom01\">{fieldLabel.Description} </Label>\r\n                                <Input\r\n                                  type=\"text\"\r\n                                  defaultValue={values.Description}\r\n                                  className={isError.Description.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                  name=\"Description\"\r\n                                  placeholder=\"Please Enter description\"\r\n                                  onChange={(event) => onChangeText({ event, state, setState })}\r\n                                />\r\n                                {isError.Description.length > 0 && (\r\n                                  <span className=\"invalid-feedback\">{isError.Description}</span>\r\n                                )}\r\n                              </FormGroup>\r\n\r\n                              <Col md=\"1\">  </Col>\r\n                              {/* <Row md=\"1\"></Row> */}\r\n\r\n\r\n                              <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                <Label htmlFor=\"validationCustom01\">{fieldLabel.Dashboard} </Label>\r\n                                <Input\r\n                                  type=\"text\"\r\n                                  value={values.Dashboard}\r\n                                  className={isError.Dashboard.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                  name=\"Dashboard\"\r\n                                  placeholder=\"Please Enter dashboard\"\r\n                                  onChange={(event) => onChangeText({ event, state, setState })}\r\n                                />\r\n                                {isError.Dashboard.length > 0 && (\r\n                                  <span className=\"invalid-feedback\">{isError.Dashboard}</span>\r\n                                )}\r\n                              </FormGroup>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                              <FormGroup className=\"mb-2 col col-sm-5\">\r\n                                <Row className=\"justify-content-md-left\">\r\n                                  <Label className=\"col-sm-4 col-form-label\" >{fieldLabel.isSCMRole}</Label>\r\n                                  <Col md={2} style={{ marginTop: '9px' }} >\r\n\r\n                                    <div className=\"form-check form-switch form-switch-md mb-3\" >\r\n                                      <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                        checked={values.isSCMRole}\r\n                                        name=\"isSCMRole\"\r\n                                        onChange={(event) => onChangeText({ event, state, setState })}\r\n                                      />\r\n                                    </div>\r\n                                  </Col>\r\n                                </Row>\r\n                              </FormGroup>\r\n\r\n                              <FormGroup className=\"mb-2 col col-sm-5\">\r\n                                <Row className=\"justify-content-md-left\">\r\n                                  <Label className=\"col-sm-3 col-form-label\" >{fieldLabel.isActive}</Label>\r\n                                  <Col md={2} style={{ marginTop: '9px' }} >\r\n\r\n                                    <div className=\"form-check form-switch form-switch-md mb-3\" dir=\"ltr\">\r\n                                      <Input type=\"checkbox\" className=\"form-check-input\" id=\"customSwitchsizemd\"\r\n                                        checked={values.isActive}\r\n                                        name=\"isActive\"\r\n                                        onChange={(event) => onChangeText({ event, state, setState })}\r\n                                      />\r\n                                    </div>\r\n                                  </Col>\r\n                                </Row>\r\n                              </FormGroup>\r\n\r\n                              <FormGroup className=\"mb-2 col col-sm-5\">\r\n                                <Row className=\"justify-content-md-left\">\r\n                                  <Label className=\"col-sm-4 col-form-label\" >{fieldLabel.IsPartyConnection}</Label>\r\n                                  <Col md={2} style={{ marginTop: '9px' }} >\r\n\r\n                                    <div className=\"form-check form-switch form-switch-md mb-3\" dir=\"ltr\">\r\n                                      <Input type=\"checkbox\" className=\"form-check-input\" id=\"customSwitchsizemd\"\r\n                                        checked={values.IsPartyConnection}\r\n                                        name=\"IsPartyConnection\"\r\n                                        onChange={(event) => onChangeText({ event, state, setState })}\r\n                                      />\r\n                                    </div>\r\n                                  </Col>\r\n                                </Row>\r\n                              </FormGroup>\r\n                            </Row>\r\n\r\n                            <FormGroup>\r\n                              <Row>\r\n                                <Col sm={2}>\r\n                                  <SaveButton pageMode={pageMode} userAcc={userPageAccessState}\r\n                                    module={\"RoleMaster\"}\r\n                                  />\r\n                                </Col>\r\n                              </Row>\r\n                            </FormGroup >\r\n                          </Row>\r\n                        </CardBody>\r\n                      </Card>\r\n                    </Col>\r\n                  </Row>\r\n                </form>\r\n              </CardBody>\r\n            </Card>\r\n          </Container>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <React.Fragment></React.Fragment>\r\n    )\r\n  }\r\n};\r\nexport default RoleMaster\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemList.js",["1331"],"import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  deleteItemID,\r\n  deleteItemIdSuccess,\r\n  editItemId,\r\n  getItemList,\r\n  PostItemDataSuccess,\r\n  updateItemSuccess,\r\n} from \"../../../store/Administrator/ItemsRedux/action\";\r\nimport ItemsMaster from \"./ItemMaster/itemIndex\";\r\nimport CommonListPage from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess, } from \"../../../store/actions\";\r\nimport { ITEM } from \"../../../routes/route_url\";\r\n\r\n\r\nconst ItemsList = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      tableList: state.ItemMastersReducer.pages,\r\n      editData: state.ItemMastersReducer.editData,\r\n      updateMsg: state.ItemMastersReducer.updateMessage,\r\n      deleteMsg: state.ItemMastersReducer.deleteMessage,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      postMsg: state.ItemMastersReducer.postMessage,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: getItemList,\r\n    editId: editItemId,\r\n    deleteId: deleteItemID,\r\n    postSucc: PostItemDataSuccess,\r\n    updateSucc: updateItemSuccess,\r\n    deleteSucc: deleteItemIdSuccess\r\n  }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(21))\r\n    dispatch(getItemList());\r\n  }, []);\r\n\r\n  const { pageField } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        (pageField) ?\r\n          <CommonListPage\r\n            action={action}\r\n            reducers={reducers}\r\n            MasterModal={ItemsMaster}\r\n            masterPath={ITEM}\r\n            ButtonMsgLable={\"Item\"}\r\n            deleteName={\"Name\"}\r\n          />\r\n          : null\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default ItemsList;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PartyPages\\PartyList.js",["1332","1333"],"import React, { useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    deletePartyID,\r\n    deletePartyIDSuccess,\r\n    editPartyID,\r\n    getPartyListAPI,\r\n    postPartyDataSuccess,\r\n    updatePartyIDSuccess\r\n} from '../../../store/Administrator/PartyRedux/action';\r\nimport PartyMaster from './PartyMaster';\r\nimport CommonListPage from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport { PARTY } from '../../../routes/route_url';\r\n\r\nconst PartyList = () => {\r\n    const dispatch = useDispatch();\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            tableList: state.PartyMasterReducer.partyList,\r\n            editData: state.PartyMasterReducer.editData,\r\n            updateMsg: state.PartyMasterReducer.updateMessage,\r\n            deleteMsg: state.PartyMasterReducer.deleteMessage,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            postMsg: state.PartyMasterReducer.PartySaveSuccess,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList\r\n        })\r\n    );\r\n\r\n    const action = {\r\n        getList: getPartyListAPI,\r\n        editId: editPartyID,\r\n        deleteId: deletePartyID,\r\n        updateSucc: updatePartyIDSuccess,\r\n        deleteSucc: deletePartyIDSuccess,\r\n        postSucc: postPartyDataSuccess\r\n    }\r\n\r\n\r\n    //  This UseEffect => Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(11))\r\n        dispatch(getPartyListAPI());\r\n    }, []);\r\n\r\n    const { pageField } = reducers\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                (pageField) ?\r\n                    <CommonListPage\r\n                        action={action}\r\n                        reducers={reducers}\r\n                        MasterModal={PartyMaster}\r\n                        masterPath={PARTY}\r\n                        ButtonMsgLable={\"Party\"}\r\n                        deleteName={\"Name\"}\r\n                    />\r\n                    : null\r\n            }\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default PartyList;","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PartyPages\\PartyMaster.js",["1334","1335","1336","1337","1338","1339","1340","1341","1342"],"import React, { useEffect, useState } from \"react\"\r\nimport MetaTags from \"react-meta-tags\"\r\nimport './partymaster.scss'\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Modal,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    Row,\r\n    TabContent,\r\n    Table,\r\n    TabPane,\r\n} from \"reactstrap\"\r\nimport { Link, useHistory } from \"react-router-dom\"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport classnames from \"classnames\"\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport { AvField, AvForm, AvInput } from \"availity-reactstrap-validation\"\r\nimport Select from \"react-select\";\r\nimport { getPriceListData } from \"../../../store/Administrator/PriceList/action\";\r\nimport { getState } from \"../../../store/Administrator/M_EmployeeRedux/action\"\r\nimport {\r\n    editPartyIDSuccess,\r\n    getAddressTypes,\r\n    getCompany,\r\n    getDistrictOnState,\r\n    getPartyTypes,\r\n    getPriceList,\r\n    postPartyData,\r\n    postPartyDataSuccess,\r\n    updatePartyID\r\n} from \"../../../store/Administrator/PartyRedux/action\"\r\nimport { AlertState, Breadcrumb_inputName } from \"../../../store/actions\"\r\nimport Tree from \"./Tree\"\r\nimport AddressDetails_Tab from \".\"\r\n\r\nconst PartyMaster = (props) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    //*** \"isEditdata get all data from ModuleID for Binding  Form controls\r\n    let editDataGatingFromList = props.state;\r\n    let propsPageMode = props.pageMode;\r\n    let pageModeProps = props.pageMode;\r\n\r\n    const [EditData, setEditData] = useState([]);\r\n    const [pageMode, setPageMode] = useState(\"save\");\r\n    const [userPageAccessState, setUserPageAccessState] = useState(11);\r\n    const [activeTab1, setactiveTab1] = useState(\"1\")\r\n    const [state_DropDown_select, setState_DropDown_select] = useState(\"\");\r\n    const [district_dropdown_Select, setDistrict_dropdown_Select] = useState(\"\");\r\n    const [companyList_dropdown_Select, setCompanyList_dropdown_Select] = useState(\"\");\r\n    const [partyType_dropdown_Select, setPartyType_dropdown_Select] = useState(\"\");\r\n    const [PriceList_dropdown_Select, setPriceList_dropdown_Select] = useState(\"\");\r\n    const [dropOpen, setDropOpen] = useState(false);\r\n    const [AddressDetailsMaster, setAddressDetailsMaster] = useState([]);\r\n    // console.log(\"AddressDetailsMaster\", AddressDetailsMaster)\r\n    const toggle1 = tab => {\r\n        if (activeTab1 !== tab) {\r\n            setactiveTab1(tab)\r\n        }\r\n    }\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { PostAPIResponse,\r\n        State,\r\n        // PriceList,\r\n        DistrictOnState,\r\n        Company,\r\n        PartyTypes,\r\n        priceListByPartyType,\r\n        RoleAccessModifiedinSingleArray\r\n    } = useSelector((state) => ({\r\n        PostAPIResponse: state.PartyMasterReducer.PartySaveSuccess,\r\n        State: state.M_EmployeesReducer.State,\r\n        DistrictOnState: state.PartyMasterReducer.DistrictOnState,\r\n        Company: state.PartyMasterReducer.Company,\r\n        PartyTypes: state.PartyMasterReducer.PartyTypes,\r\n        PriceList: state.PartyMasterReducer.PriceList,\r\n        AddressTypes: state.PartyMasterReducer.AddressTypes,\r\n        RoleAccessModifiedinSingleArray: state.Login.RoleAccessUpdateData,\r\n        priceListByPartyType: state.PriceListReducer.priceListByPartyType,\r\n\r\n    }));\r\n\r\n    useEffect(() => {\r\n\r\n        let userAcc = undefined\r\n        if ((editDataGatingFromList === undefined)) {\r\n\r\n            let locationPath = history.location.pathname\r\n            userAcc = RoleAccessModifiedinSingleArray.find((inx) => {\r\n                return (`/${inx.ActualPagePath}` === locationPath)\r\n            })\r\n        }\r\n        else if (!(editDataGatingFromList === undefined)) {\r\n            let relatatedPage = props.relatatedPage\r\n            userAcc = RoleAccessModifiedinSingleArray.find((inx) => {\r\n                return (`/${inx.ActualPagePath}` === relatatedPage)\r\n            })\r\n\r\n        }\r\n        if (!(userAcc === undefined)) {\r\n            setUserPageAccessState(userAcc)\r\n        }\r\n\r\n    }, [RoleAccessModifiedinSingleArray])\r\n\r\n    useEffect(() => {\r\n        dispatch(getState());\r\n        dispatch(getDistrictOnState());\r\n        dispatch(getAddressTypes());\r\n        dispatch(getPriceList());\r\n        dispatch(getPartyTypes());\r\n        dispatch(getCompany());\r\n\r\n\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (!(userPageAccessState === '')) { document.getElementById(\"txtName\").focus(); }\r\n        if (!(editDataGatingFromList === undefined)) {\r\n            debugger\r\n            setEditData(editDataGatingFromList);\r\n            dispatch(Breadcrumb_inputName(editDataGatingFromList.Name))\r\n            setPageMode(pageModeProps);\r\n\r\n\r\n            setCompanyList_dropdown_Select({\r\n                value: editDataGatingFromList.Company,\r\n                label: editDataGatingFromList.CompanyName\r\n            })\r\n\r\n            setPartyType_dropdown_Select({\r\n                value: editDataGatingFromList.PartyType,\r\n                label: editDataGatingFromList.PartyTypeName\r\n            })\r\n            setPriceList_dropdown_Select({\r\n                value: editDataGatingFromList.PriceList,\r\n                label: editDataGatingFromList.PriceListName\r\n            })\r\n            setState_DropDown_select({\r\n                value: editDataGatingFromList.State,\r\n                label: editDataGatingFromList.StateName\r\n            })\r\n            setDistrict_dropdown_Select({\r\n                value: editDataGatingFromList.District,\r\n                label: editDataGatingFromList.DistrictName\r\n            })\r\n\r\n\r\n            setAddressDetailsMaster(editDataGatingFromList.PartyAddress)\r\n\r\n            dispatch(editPartyIDSuccess({ Status: false }))\r\n        }\r\n        else if (!(propsPageMode === undefined)) {\r\n            setPageMode(propsPageMode)\r\n        }\r\n    }, [editDataGatingFromList, propsPageMode])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if ((PostAPIResponse.Status === true) && (PostAPIResponse.StatusCode === 200) && !(pageMode === \"dropdownAdd\")) {\r\n            dispatch(postPartyDataSuccess({ Status: false }))\r\n            setCompanyList_dropdown_Select('')\r\n            setPartyType_dropdown_Select('')\r\n            setPriceList_dropdown_Select('')\r\n            setDistrict_dropdown_Select('')\r\n            setState_DropDown_select('')\r\n            // setMKupMkdown_DropdownSelect('')\r\n            if (pageMode === \"dropdownAdd\") {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: PostAPIResponse.Message,\r\n                }))\r\n            }\r\n            else {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: PostAPIResponse.Message,\r\n                    RedirectPath: '/PartyList',\r\n                    AfterResponseAction: false\r\n                }))\r\n            }\r\n        }\r\n        else if ((PostAPIResponse.Status === true) && !(pageMode === \"dropdownAdd\")) {\r\n            dispatch(postPartyDataSuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(PostAPIResponse.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [PostAPIResponse.Status])\r\n\r\n    const StateValues = State.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name\r\n    }));\r\n\r\n    const DistrictOnStateValues = DistrictOnState.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name\r\n    }));\r\n\r\n    const companyListValues = Company.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name\r\n    }));\r\n\r\n    const PartyTypeDropdown_Options = PartyTypes.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n        division: index.IsDivision\r\n    }));\r\n\r\n    function handllerState(e) {\r\n        setState_DropDown_select(e)\r\n        dispatch(getDistrictOnState(e.value))\r\n        setDistrict_dropdown_Select('')\r\n    }\r\n\r\n    function handllerDistrictOnState(e) {\r\n        setDistrict_dropdown_Select(e)\r\n    }\r\n\r\n    function handllercompanyList(e) {\r\n        setCompanyList_dropdown_Select(e)\r\n    }\r\n\r\n    function PartyType_Dropdown_OnChange_Handller(e) {\r\n        setPartyType_dropdown_Select(e)\r\n        setPriceList_dropdown_Select({ label: '' })\r\n        setCompanyList_dropdown_Select('')\r\n        dispatch(getPriceListData(e.value))\r\n    }\r\n\r\n    const test1 = () => {\r\n        return (\r\n            <>\r\n                <Modal\r\n                    isOpen={dropOpen}\r\n                    toggle={() => { setDropOpen(!dropOpen) }}\r\n                    size=\"sm\"\r\n                    centered={true}\r\n                // backdrop={'static'}\r\n                >\r\n                    <div>\r\n                        <div className=\"text-center mt-2\">\r\n                            {/* <Label className=\"text-primary text-center \"> {priceList.label}</Label> */}\r\n                            <Input type=\"button\" className=\"btn btn-light text-primary\"\r\n\r\n                                onClick={() => {\r\n                                    // sub_Price_Add_Handler()\r\n                                }}\r\n                                value={PriceList_dropdown_Select.label}\r\n                            />\r\n\r\n\r\n                        </div>\r\n                        <Tree data={priceListByPartyType} priceList={PriceList_dropdown_Select}\r\n                            func1={setPriceList_dropdown_Select} func2={setDropOpen} />\r\n                    </div>\r\n\r\n                </Modal>\r\n\r\n            </>\r\n        )\r\n    }\r\n\r\n    const FormSubmitButton_Handler = (event, values) => {\r\n       \r\n        const SortArray = AddressDetailsMaster.map(function (index) {\r\n            return index.IsDefault\r\n        })\r\n        const count = SortArray.filter(value => value === true).length;\r\n       \r\n        if (count>1) {\r\n            dispatch(\r\n                AlertState({\r\n                    Type: 4,\r\n                    Status: true,\r\n                    Message: \"only one default is true\",\r\n                    RedirectPath: false,\r\n                    PermissionAction: false,\r\n                }))\r\n        }\r\n\r\n        const jsonBody = JSON.stringify({\r\n            Name: values.Name,\r\n            PriceList: PriceList_dropdown_Select.value,\r\n            PartyType: partyType_dropdown_Select.value,\r\n            Company: companyList_dropdown_Select.value,\r\n            PAN: values.PAN,\r\n            Email: values.Email,\r\n            MobileNo: values.MobileNo,\r\n            AlternateContactNo: values.AlternateContactNo,\r\n            State: state_DropDown_select.value,\r\n            District: district_dropdown_Select.value,\r\n            Taluka: 0,\r\n            City: 0,\r\n            GSTIN: values.GSTIN,\r\n            MkUpMkDn: values.MkUpMkDn,\r\n            isActive: values.isActive,\r\n            IsDivision: partyType_dropdown_Select.division,\r\n            CreatedBy: 1,\r\n            CreatedOn: \"2022-06-24T11:16:53.165483Z\",\r\n            UpdatedBy: 1,\r\n            UpdatedOn: \"2022-06-24T11:16:53.330888Z\",\r\n            PartyAddress: AddressDetailsMaster,\r\n\r\n        });\r\n\r\n        if (!AddressDetailsMaster.length > 0) {\r\n            dispatch(AlertState({\r\n                Type: 4, Status: true,\r\n                Message: \"Address Details can not blank\",\r\n                RedirectPath: false,\r\n                PermissionAction: false,\r\n            }));\r\n        }\r\n\r\n        else if (pageMode === 'edit') {\r\n            dispatch(updatePartyID(jsonBody, EditData.id));\r\n            console.log(\"update jsonBody\", jsonBody)\r\n        }\r\n        else {\r\n            // dispatch(postPartyData(jsonBody));\r\n            console.log(\"post jsonBody\", jsonBody)\r\n        }\r\n    };\r\n\r\n    var IsEditMode_Css = ''\r\n    if ((pageMode === \"edit\") || (pageMode === \"copy\") || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <MetaTags>\r\n                        <title>Item Master| FoodERP-React FrontEnd</title>\r\n                    </MetaTags>\r\n                    <Container fluid>\r\n                        <AvForm onValidSubmit={(e, v) => { FormSubmitButton_Handler(e, v); }}>\r\n                            {/* Render Breadcrumbs */}\r\n                            <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n\r\n                            <Row>\r\n\r\n                                <Col lg={12}>\r\n                                    <Card className=\"text-black\" >\r\n                                        <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                                            <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                            <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                                        </CardHeader>\r\n                                        <CardBody>\r\n                                            <Nav tabs className=\"nav-tabs-custom nav-justified\">\r\n                                                <NavItem>\r\n                                                    <NavLink\r\n                                                        id=\"nave-link-1\"\r\n                                                        style={{ cursor: \"pointer\" }}\r\n                                                        className={classnames({\r\n                                                            active: activeTab1 === \"1\",\r\n                                                        })}\r\n                                                        onClick={() => {\r\n                                                            toggle1(\"1\")\r\n                                                        }}\r\n                                                    >\r\n                                                        <span className=\"d-block d-sm-none\">\r\n                                                            <i className=\"fas fa-home\"></i>\r\n                                                        </span>\r\n                                                        <span className=\"d-none d-sm-block\">Party Master</span>\r\n                                                    </NavLink>\r\n                                                </NavItem>\r\n                                                <NavItem>\r\n                                                    <NavLink\r\n                                                        id=\"nave-link-2\"\r\n                                                        style={{ cursor: \"pointer\" }}\r\n                                                        className={classnames({\r\n                                                            active: activeTab1 === \"2\",\r\n                                                        })}\r\n                                                        onClick={() => {\r\n                                                            toggle1(\"2\")\r\n                                                        }}\r\n                                                    >\r\n                                                        <span className=\"d-block d-sm-none\">\r\n                                                            <i className=\"fas fa-home\"></i>\r\n                                                        </span>\r\n                                                        <span className=\"d-none d-sm-block\">Address Details</span>\r\n\r\n                                                    </NavLink>\r\n                                                </NavItem>\r\n\r\n                                                <NavItem>\r\n\r\n                                                    <NavLink\r\n                                                        style={{ cursor: \"pointer\" }}\r\n                                                    // className={classnames({\r\n                                                    //     active: activeTab1 === \"7\",\r\n                                                    // })}\r\n                                                    // onClick={() => {\r\n                                                    //     toggle1(\"7\")\r\n                                                    // }}\r\n                                                    >\r\n                                                        <span className=\"d-block d-sm-none\">\r\n                                                            <i className=\"fas fa-home\"></i>\r\n                                                        </span>\r\n                                                        {/* <span className=\"d-none d-sm-block\">Tab7</span> */}\r\n                                                        {/* <Button type=\"submit\"> save</Button> */}\r\n                                                        <Row >\r\n                                                            <Col sm={2}>\r\n                                                                <div>\r\n                                                                    {/* {\r\n                                                                        pageMode === \"edit\" ?\r\n                                                                            userPageAccessState.RoleAccess_IsEdit ?\r\n                                                                                <button\r\n                                                                                    type=\"submit\"\r\n                                                                                    data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Update Role\"\r\n                                                                                    className=\"btn btn-success w-md\"\r\n                                                                                >\r\n                                                                                    <i class=\"fas fa-edit me-2\"></i>Update\r\n                                                                                </button>\r\n                                                                                :\r\n                                                                                <></>\r\n                                                                            : (\r\n                                                                                userPageAccessState.RoleAccess_IsSave ? */}\r\n                                                                    <button\r\n                                                                        type=\"submit\"\r\n                                                                        data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Save Role\"\r\n                                                                        className=\"btn btn-primary w-md\"\r\n                                                                    > <i className=\"fas fa-save me-2\"></i> Save\r\n                                                                    </button>\r\n                                                                    {/* :\r\n                                                                                    <></>\r\n                                                                            )\r\n                                                                    } */}\r\n                                                                </div>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </NavLink>\r\n                                                </NavItem>\r\n                                            </Nav>\r\n\r\n                                            <TabContent activeTab={activeTab1} className=\"p-3 text-muted\">\r\n                                                <TabPane tabId=\"1\">\r\n                                                    <Row>\r\n                                                        <Card className=\"text-black\" style={{ backgroundColor: \"whitesmoke\" }} >\r\n\r\n                                                            <Row className=\"mt-3 \">\r\n                                                                <Col md=\"3\">\r\n                                                                    <FormGroup className=\"mb-3\">\r\n                                                                        <Label htmlFor=\"validationCustom01\">Name </Label>\r\n                                                                        <AvField name=\"Name\" id=\"txtName\"\r\n                                                                            value={EditData.Name}\r\n                                                                            type=\"text\"\r\n                                                                            placeholder=\"Please Enter Name\"\r\n                                                                            autoComplete='off'\r\n\r\n                                                                            autoFocus={true}\r\n                                                                            validate={{\r\n                                                                                required: { value: true, errorMessage: 'Please Enter Name' },\r\n                                                                            }}\r\n                                                                            onChange={(e) => { dispatch(Breadcrumb_inputName(e.target.value)) }}\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                                <Col md=\"1\">  </Col>\r\n                                                                <Col md=\"3\">\r\n                                                                    <FormGroup className=\"mb-3\">\r\n                                                                        <Label htmlFor=\"validationCustom01\">Mobile Number </Label>\r\n                                                                        <AvField name=\"MobileNo\" type=\"tel\"\r\n                                                                            value={EditData.MobileNo}\r\n                                                                            id=\"mobileNo\"\r\n                                                                            placeholder=\"Enter Mobile No.\"\r\n                                                                            validate={{\r\n                                                                                required: { value: true, errorMessage: 'Enter your Mobile Number' },\r\n                                                                                tel: {\r\n                                                                                    pattern: /^(\\+\\d{1,3}[- ]?)?\\d{10}$/,\r\n                                                                                    errorMessage: \"Please Enter 10 Digit Mobile Number.\"\r\n                                                                                }\r\n                                                                            }}\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                                <Col md=\"1\">  </Col>\r\n\r\n                                                                <Col md=\"3\">\r\n                                                                    <FormGroup className=\"mb-3\">\r\n                                                                        <Label htmlFor=\"validationCustom01\">Alternate Contact Number(s)</Label>\r\n                                                                        <AvField name=\"AlternateContactNo\" type=\"tel\"\r\n                                                                            value={EditData.AlternateContactNo}\r\n                                                                            id=\"mobileNo\"\r\n                                                                            // defaultValue={''}\r\n                                                                            placeholder=\"Alternate Contact Number(s)\"\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                            <Row className=\"mt-3\">\r\n                                                                <Col md=\"3\">\r\n                                                                    <FormGroup className=\"mb-3\">\r\n                                                                        <Label htmlFor=\"validationCustom01\">Email </Label>\r\n                                                                        <AvField name=\"Email\" type=\"email\"\r\n                                                                            id=\"email\"\r\n                                                                            value={EditData.Email}\r\n                                                                            placeholder=\"Enter your Email\"\r\n                                                                            validate={{\r\n                                                                                required: { value: true, errorMessage: 'Please Enter your Email' },\r\n                                                                                tel: {\r\n                                                                                    pattern: \"/^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/\",\r\n                                                                                    errorMessage: \"Please Enter valid Email Address.(Ex:abc@gmail.com)\"\r\n                                                                                }\r\n                                                                            }\r\n                                                                            }\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Card>\r\n                                                    </Row>\r\n                                                    <Row>\r\n                                                        <Card className=\" text-black mt-n2\" style={{ backgroundColor: \"whitesmoke\" }} >\r\n                                                            <Row className=\"mt-3 \">\r\n                                                                <Col md=\"3\">\r\n                                                                    <FormGroup className=\"mb-3\">\r\n                                                                        <Label htmlFor=\"validationCustom01\"> Party Type </Label>\r\n                                                                        <Col sm={12}>\r\n                                                                            <Select\r\n                                                                                value={partyType_dropdown_Select}\r\n                                                                                options={PartyTypeDropdown_Options}\r\n                                                                                onChange={(e) => { PartyType_Dropdown_OnChange_Handller(e) }}\r\n                                                                            />\r\n\r\n                                                                        </Col>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n\r\n                                                                <Col md=\"1\">  </Col>\r\n                                                                <Col md=\"3\">\r\n                                                                    <FormGroup className=\"mb-3\">\r\n                                                                        <Label htmlFor=\"validationCustom01\">Price List </Label>\r\n\r\n                                                                        {/* <Select\r\n                                                                        value={PriceList_dropdown_Select}\r\n                                                                        options={PriceList_DropdownOptions}\r\n                                                                        // onChange={(e) =>{ handllerPriceList(e)}}\r\n                                                                        onChange={(e) =>{setPriceList_dropdown_Select(e)}}\r\n\r\n\r\n\r\n                                                                    /> */}\r\n\r\n                                                                        <Input\r\n                                                                            value={PriceList_dropdown_Select.label}\r\n                                                                            placeholder=\"Select...\"\r\n                                                                            onClick={(e) => setDropOpen(!dropOpen)}\r\n                                                                        >\r\n                                                                        </Input>\r\n                                                                        {test1()}\r\n\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                                <Col md=\"1\">  </Col>\r\n\r\n                                                                <Col md=\"3\">\r\n                                                                    <FormGroup className=\"mb-3\">\r\n                                                                        <Label htmlFor=\"validationCustom01\">Company Name </Label>\r\n                                                                        <Col sm={12}>\r\n                                                                            <Select\r\n                                                                                value={companyList_dropdown_Select}\r\n                                                                                options={companyListValues}\r\n                                                                                onChange={(e) => { handllercompanyList(e) }}\r\n                                                                            />\r\n                                                                        </Col>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                            </Row>\r\n\r\n                                                            <Row>\r\n                                                                {/* <Col md=\"3\">\r\n                                                        <FormGroup className=\"mb-3\">\r\n                                                            <Label htmlFor=\"validationCustom01\">CustomerDivision </Label>\r\n                                                            <Col sm={12}>\r\n                                                                <Select\r\n                                                                    value={\"\"}\r\n                                                                    options={\"\"}\r\n                                                                // onChange={(e) => { handllerDesignationID(e) }}\r\n                                                                />\r\n                                                            </Col>\r\n                                                        </FormGroup>\r\n                                                    </Col> */}\r\n                                                                {/* <Col md=\"1\">  </Col> */}\r\n                                                                <Col md=\"3\">\r\n                                                                    <FormGroup className=\"mb-3\">\r\n                                                                        <Label htmlFor=\"validationCustom01\"> PAN </Label>\r\n                                                                        <AvField\r\n                                                                            name=\"PAN\"\r\n                                                                            value={EditData.PAN}\r\n                                                                            placeholder=\"Please Enter PAN\"\r\n                                                                            type=\"text\"\r\n                                                                            errorMessage=\"Please Enter PAN Number.\"\r\n                                                                            className=\"form-control\"\r\n                                                                            validate={{\r\n                                                                                required: { value: true },\r\n                                                                                tel: {\r\n                                                                                    pattern: /[A-Z]{5}[0-9]{4}[A-Z]{1}/,\r\n                                                                                    errorMessage: 'Please Enter valid PAN Number.(Ex:AAAAA1234A).'\r\n                                                                                }\r\n                                                                            }}\r\n                                                                            id=\"validationCustom01\"\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n\r\n                                                                <Col md=\"1\">  </Col>\r\n                                                                <Col md=\"3\">\r\n                                                                    <FormGroup className=\"mb-3\">\r\n                                                                        <Label htmlFor=\"validationCustom01\"> GSTIN </Label>\r\n                                                                        <AvField\r\n                                                                            name=\"GSTIN\"\r\n                                                                            value={EditData.GSTIN}\r\n                                                                            placeholder=\"Please Enter GSTIN\"\r\n                                                                            type=\"text\"\r\n                                                                            errorMessage=\"Please Enter GSTIN Number.\"\r\n                                                                            className=\"form-control\"\r\n                                                                            validate={{\r\n                                                                                required: { value: true },\r\n                                                                                tel: {\r\n                                                                                    pattern: /^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$/,\r\n                                                                                    errorMessage: 'Please Enter valid GSTIN number.(Ex:27AAAAA0000A1Z5).'\r\n                                                                                }\r\n                                                                            }}\r\n                                                                            id=\"validationCustom01\"\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n\r\n                                                                <Col md=\"1\">  </Col>\r\n                                                                {/* <Col md=\"3\">\r\n                                                                    <FormGroup className=\"mb-3\">\r\n                                                                        <Label htmlFor=\"validationCustom01\">MKUp MkDown</Label>\r\n                                                                        <Select\r\n                                                                            value={MKupMkdown_DropdownSelect}\r\n                                                                            options={MkupMkdown_DropdownOption}\r\n                                                                            autoComplete=\"off\"\r\n                                                                            onChange={(e) => {\r\n                                                                                MKupMkdown_DropdownSelectHandller(e);\r\n                                                                            }}\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n                                                                </Col> */}\r\n                                                                <Col md=\"3\">\r\n                                                                    <FormGroup className=\"mb-3\">\r\n                                                                        <Row style={{ marginTop: '25px' }}>\r\n                                                                            <Label\r\n                                                                                htmlFor=\"horizontal-firstname-input\"\r\n                                                                                className=\"col-sm-4 col-form-label\"\r\n                                                                            >\r\n                                                                                MKUpMkDn\r\n                                                                            </Label>\r\n                                                                            <Col md={4} style={{ marginTop: '7px' }} className=\" form-check form-switch form-switch-sm \">\r\n                                                                                <div className=\"form-check form-switch form-switch-md mb-3\" dir=\"ltr\">\r\n                                                                                    <AvInput type=\"checkbox\" className=\"form-check-input \" id=\"inp-MkUpMkDn\"\r\n                                                                                        checked={EditData.MkUpMkDn}\r\n                                                                                        // defaultChecked={true}\r\n                                                                                        name=\"MkUpMkDn\"\r\n                                                                                    />\r\n                                                                                    <label className=\"form-check-label\" ></label>\r\n                                                                                </div>\r\n                                                                            </Col>\r\n                                                                        </Row>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n\r\n                                                            </Row>\r\n                                                            <Row>\r\n                                                                <Col md=\"3\">\r\n                                                                    <FormGroup className=\"mb-3\">\r\n                                                                        <Label htmlFor=\"validationCustom01\">State</Label>\r\n                                                                        <Col sm={12} style={{ height: \"2.9cm\" }}>\r\n                                                                            <Select\r\n                                                                                value={state_DropDown_select}\r\n                                                                                options={StateValues}\r\n                                                                                onChange={(e) => { handllerState(e) }}\r\n                                                                            />\r\n                                                                        </Col>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n\r\n                                                                <Col md=\"1\">  </Col>\r\n                                                                <Col md=\"3\">\r\n                                                                    <FormGroup className=\"mb-3\">\r\n                                                                        <Label htmlFor=\"validationCustom01\">District </Label>\r\n                                                                        <Col sm={12}>\r\n                                                                            <Select\r\n                                                                                value={district_dropdown_Select}\r\n                                                                                options={DistrictOnStateValues}\r\n                                                                                onChange={(e) => { handllerDistrictOnState(e) }}\r\n                                                                            />\r\n                                                                        </Col>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n\r\n                                                                <Col md=\"1\"></Col>\r\n                                                                <Col md=\"3\">\r\n                                                                    <FormGroup className=\"mb-3\">\r\n                                                                        <Row style={{ marginTop: '25px' }}>\r\n                                                                            <Label\r\n                                                                                htmlFor=\"horizontal-firstname-input\"\r\n                                                                                className=\"col-sm-4 col-form-label\"\r\n                                                                            >\r\n                                                                                Active\r\n                                                                            </Label>\r\n                                                                            <Col md={4} style={{ marginTop: '7px' }} className=\" form-check form-switch form-switch-sm \">\r\n                                                                                <div className=\"form-check form-switch form-switch-md mb-3\" dir=\"ltr\">\r\n                                                                                    <AvInput type=\"checkbox\" className=\"form-check-input \" id=\"inp-isActive\"\r\n                                                                                        checked={EditData.isActive}\r\n                                                                                        defaultChecked={true}\r\n                                                                                        name=\"isActive\"\r\n                                                                                    />\r\n                                                                                    <label className=\"form-check-label\" htmlFor=\"customSwitchsizemd\"></label>\r\n                                                                                </div>\r\n                                                                            </Col>\r\n                                                                        </Row>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Card>\r\n                                                    </Row>\r\n                                                </TabPane>\r\n\r\n                                                <TabPane tabId=\"2\">\r\n                                                    <Row>\r\n                                                        <Col md={12}  >\r\n                                                            <Row className=\"mt-3\">\r\n                                                                <Col className=\" col col-11 \">\r\n                                                                    <AddressDetails_Tab tableData={AddressDetailsMaster} func={setAddressDetailsMaster} />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </TabPane>\r\n\r\n                                                <TabPane tabId=\"3\">\r\n\r\n                                                </TabPane>\r\n                                            </TabContent>\r\n                                        </CardBody>\r\n                                    </Card>\r\n                                </Col>\r\n\r\n                            </Row>\r\n\r\n                        </AvForm>\r\n                    </Container>\r\n                </div >\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\nexport default PartyMaster;\r\n\r\n\r\n\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\SearchBox\\SearchBoxSecond.js",["1343","1344","1345","1346","1347","1348","1349","1350","1351","1352","1353","1354","1355","1356","1357","1358","1359"],"import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport './Search.scss'\r\nimport { Search } from \"react-bootstrap-table2-toolkit\";\r\nlet view = false;\r\nconst onchange = (e) => {\r\n    e.preventDefault();\r\n    view = e.target.value.length\r\n}\r\nexport default function SearchBoxSecond() {\r\n    const { SearchBar } = Search;\r\n\r\n    const [searchRoleData, setSearchRoleData] = useState([])\r\n    // const  RoleAccessData=demoRolleAcess\r\n\r\n    const { RoleAccessData, searchProps } = useSelector((state) => ({\r\n        RoleAccessData: state.Login.RoleData,\r\n        searchProps: state.BreadcrumbReducer.searchProps,\r\n    }));\r\n\r\n    useEffect(() => {\r\n\r\n        let SearchRoleData_initial = []\r\n\r\n        RoleAccessData.map((i) => {\r\n            i.ModuleData.map((index) => {\r\n                SearchRoleData_initial.push(index)\r\n            })\r\n        })\r\n        setSearchRoleData(SearchRoleData_initial)\r\n    }, [RoleAccessData])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        function autocomplete(inp, arr) {\r\n            /*the autocomplete function takes two arguments,\r\n            the text field element and an array of possible autocompleted values:*/\r\n            var currentFocus;\r\n            /*execute a function when someone writes in the text field:*/\r\n\r\n            inp.addEventListener(\"input\", function (e) {\r\n\r\n                var a, b, i, val = this.value;\r\n                /*close any already open lists of autocompleted values*/\r\n                closeAllLists();\r\n                if (!val) { return false; }\r\n                // var a = input.value\r\n\r\n                if (val[0] === \"/\") {\r\n                    val = val.substring(1);\r\n                } else {\r\n                    return false;\r\n                }\r\n                currentFocus = -1;\r\n                /*create a DIV element that will contain the items (values):*/\r\n                a = document.createElement(\"DIV\");\r\n                a.setAttribute(\"id\", this.id + \"autocomplete-list\");\r\n                a.setAttribute(\"class\", \"autocomplete-items\");\r\n                /*append the DIV element as a child of the autocomplete container:*/\r\n                this.parentNode.appendChild(a);\r\n                /*for each item in the array...*/\r\n                for (i = 0; i < arr.length; i++) {\r\n                    /*check if the item starts with the same letters as the text field value:*/\r\n                    if (arr[i].Name.substr(0, val.length).toUpperCase() == val.toUpperCase()) {\r\n                        /*create a DIV element for each matching element:*/\r\n                        b = document.createElement(\"DIV\");\r\n                        /*make the matching letters bold:*/\r\n                        b.innerHTML = \"<strong>\" + arr[i].Name.substr(0, val.length) + \"</strong>\";\r\n                        b.innerHTML += arr[i].Name.substr(val.length);\r\n                        /*insert a input field that will hold the current array item's value:*/\r\n                        b.innerHTML += \"<input type='hidden' id='\" + i + \"' value='\" + arr[i].Name + \"'>\";\r\n                        //  var ActualPagePath=arr[i].ActualPagePath\r\n                        // alert(ActualPagePath)\r\n                        /*execute a function when someone clicks on the item value (DIV element):*/\r\n                        b.addEventListener(\"click\", function (e) {\r\n                            /*insert the value for the autocomplete text field:*/\r\n                            inp.value = this.getElementsByTagName(\"input\")[0].value;\r\n                            var input_id = this.getElementsByTagName(\"input\")[0].id;\r\n\r\n                            // alert(input_id)\r\n                            var ActualPagePath = arr[input_id].ActualPagePath\r\n                            window.location.href = (ActualPagePath)\r\n                            // window.open(ActualPagePath)\r\n                            /*close the list of autocompleted values,\r\n                            (or any other open lists of autocompleted values:*/\r\n                            closeAllLists();\r\n                        });\r\n                        a.appendChild(b);\r\n                    }\r\n                }\r\n            });\r\n            /*execute a function presses a key on the keyboard:*/\r\n            inp.addEventListener(\"keydown\", function (e) {\r\n                // debugger\r\n                var x = document.getElementById(this.id + \"autocomplete-list\");\r\n                if (x) x = x.getElementsByTagName(\"div\");\r\n                if (e.keyCode == 40) {\r\n                    /*If the arrow DOWN key is pressed,\r\n                    increase the currentFocus variable:*/\r\n                    currentFocus++;\r\n                    /*and and make the current item more visible:*/\r\n                    addActive(x);\r\n                } else if (e.keyCode == 38) { //up\r\n                    /*If the arrow UP key is pressed,\r\n                    decrease the currentFocus variable:*/\r\n                    currentFocus--;\r\n                    /*and and make the current item more visible:*/\r\n                    addActive(x);\r\n                } else if (e.keyCode == 13) {\r\n                    /*If the ENTER key is pressed, prevent the form from being submitted,*/\r\n                    e.preventDefault();\r\n                    if (currentFocus > -1) {\r\n                        /*and simulate a click on the \"active\" item:*/\r\n                        if (x) x[currentFocus].click();\r\n                    }\r\n                }\r\n            });\r\n            function addActive(x) {\r\n                /*a function to classify an item as \"active\":*/\r\n                if (!x) return false;\r\n                /*start by removing the \"active\" class on all items:*/\r\n                removeActive(x);\r\n                if (currentFocus >= x.length) currentFocus = 0;\r\n                if (currentFocus < 0) currentFocus = (x.length - 1);\r\n                /*add class \"autocomplete-active\":*/\r\n                x[currentFocus].classList.add(\"autocomplete-active\");\r\n            }\r\n            function removeActive(x) {\r\n                /*a function to remove the \"active\" class from all autocomplete items:*/\r\n                for (var i = 0; i < x.length; i++) {\r\n                    x[i].classList.remove(\"autocomplete-active\");\r\n                }\r\n            }\r\n            function closeAllLists(elmnt) {\r\n                /*close all autocomplete lists in the document,\r\n                except the one passed as an argument:*/\r\n                var x = document.getElementsByClassName(\"autocomplete-items\");\r\n                for (var i = 0; i < x.length; i++) {\r\n                    if (elmnt != x[i] && elmnt != inp) {\r\n                        x[i].parentNode.removeChild(x[i]);\r\n                    }\r\n                }\r\n            }\r\n            /*execute a function when someone clicks in the document:*/\r\n            document.addEventListener(\"click\", function (e) {\r\n                closeAllLists(e.target);\r\n            });\r\n        }\r\n\r\n        /*An array containing all the country names in the world:*/\r\n\r\n\r\n\r\n        var countries = [\r\n            {\r\n                ID: 2,\r\n                Name: \"Module List\",\r\n                DisplayIndex: 2,\r\n                Icon: \"Module List\",\r\n                ActualPagePath: \"/ModulesList\"\r\n            },\r\n            {\r\n                ID: 3,\r\n                Name: \"Modules Master\",\r\n                DisplayIndex: 1,\r\n                Icon: \"Modules Master\",\r\n                ActualPagePath: \"ModulesMaster\"\r\n            },\r\n            {\r\n                ID: 4,\r\n                Name: \"Company Master\",\r\n                DisplayIndex: 3,\r\n                Icon: \"Companys Master\",\r\n                ActualPagePath: \"companyMaster\"\r\n            },\r\n            {\r\n                ID: 5,\r\n                Name: \"Company List\",\r\n                DisplayIndex: 3,\r\n                Icon: \"CompanyList\",\r\n                ActualPagePath: \"companyList\"\r\n            },\r\n            {\r\n                ID: 6,\r\n                Name: \"Pages Master\",\r\n                DisplayIndex: 5,\r\n                Icon: \"pagesMaster\",\r\n                ActualPagePath: \"pagesMaster\"\r\n            },\r\n            {\r\n                ID: 7,\r\n                Name: \"Pages List\",\r\n                DisplayIndex: 3,\r\n                Icon: \"Pages List\",\r\n                ActualPagePath: \"PagesList\"\r\n            },\r\n            {\r\n                ID: 8,\r\n                Name: \"Users List\",\r\n                DisplayIndex: 8,\r\n                Icon: \"Users List\",\r\n                ActualPagePath: \"usersList\"\r\n            },\r\n            {\r\n                ID: 9,\r\n                Name: \"Users Master\",\r\n                DisplayIndex: 7,\r\n                Icon: \"Users Master\",\r\n                ActualPagePath: \"usersMaster\"\r\n            },\r\n            {\r\n                ID: 2,\r\n                Name: \"Module List1\",\r\n                DisplayIndex: 2,\r\n                Icon: \"Module List\",\r\n                ActualPagePath: \"/ModulesList\"\r\n            }, {\r\n                ID: 2,\r\n                Name: \"Module List2\",\r\n                DisplayIndex: 2,\r\n                Icon: \"Module List\",\r\n                ActualPagePath: \"/ModulesList\"\r\n            }, {\r\n                ID: 2,\r\n                Name: \"Module List3\",\r\n                DisplayIndex: 2,\r\n                Icon: \"Module List\",\r\n                ActualPagePath: \"/ModulesList\"\r\n            }, {\r\n                ID: 2,\r\n                Name: \"Module List4\",\r\n                DisplayIndex: 2,\r\n                Icon: \"Module List\",\r\n                ActualPagePath: \"/ModulesList\"\r\n            },\r\n        ]\r\n\r\n\r\n        /*initiate the autocomplete function on the \"myInput\" element, and pass along the countries array as possible autocomplete values:*/\r\n        autocomplete(document.getElementById(\"myInput\"), searchRoleData);\r\n\r\n    }, [searchRoleData])\r\n\r\n    // searchProps2 = searchProps\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MySearch />\r\n        </React.Fragment>\r\n\r\n\r\n    )\r\n}\r\n\r\nlet props2 = function onSearch() { }\r\n\r\nexport const mySearchProps1 = (props1) => {\r\n    props2 = props1;\r\n};\r\n\r\nlet input;\r\nconst handleClick = () => {\r\n    props2.onSearch(input.value);\r\n};\r\nfunction onChange2() {\r\n    debugger\r\n    var a = input.value\r\n\r\n    if (!(a[0] === \"/\")) {\r\n        const str = a.substring(1);\r\n        props2.onSearch(str);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst MySearch = () => {\r\n\r\n    let input;\r\n    const handleClick = (e) => {\r\n        debugger\r\n        var a = e.target.value\r\n\r\n    if (!(a[0] === \"/\")) {\r\n        const str = a.substring(1);\r\n        props2.onSearch(str);\r\n    }\r\n    };\r\n    function onChange() {\r\n       \r\n    }\r\n    return (\r\n        <div className=\"app-search d-none d-lg-block \" style={{ marginTop: \"-3px\" }} autocomplete=\"off\">\r\n            <div className=\"position-relative\">\r\n                <input\r\n                    id=\"myInput\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Search...\"\r\n                    // style={{ backgroundColor: 'pink' }}\r\n                    // ref={n => input = n}\r\n                    type=\"text\"\r\n                    onChange={handleClick}\r\n                    name=\"myCountry\"\r\n                />\r\n                <button className=\"btn btn-primary\"\r\n                    onClick={handleClick}\r\n                    type=\"butten\">\r\n                    <i className=\"bx bx-search-alt align-middle\" />\r\n                </button>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\SearchBox\\SerachBox3.js",["1360","1361"],"import React, { useState } from 'react'\r\nimport { Link, Router } from 'react-router-dom'\r\nimport { Tbody, Td, Thead, Tr } from 'react-super-responsive-table'\r\nimport { Col, Input, Label, Row, Table } from 'reactstrap'\r\n\r\nexport default function SerachBox3() {\r\n    const [list,setList]=useState([])\r\n     function searchHandeler(e){\r\n        let value = e.target.value\r\n        if (value && value.trim().length > 0) {\r\n            value = value.trim().toLowerCase()\r\n            //returning only the results of setList if the value of the search is included in the person's name\r\n            setList(people.filter(person => {\r\n                return (person.Name.trim().toLowerCase()).includes(value)\r\n            })\r\n            )\r\n        }\r\n     }\r\n     \r\n    return (\r\n        <div className=\"page-content\" >\r\n            <body>\r\n                <Row className=\"\">\r\n                    <Label className=\"col-sm-1 col-form-label \">\r\n                        search box\r\n                    </Label>\r\n                    <Col sm={5}>\r\n                        <div className=\"mt-1 container col-sm-1 col-md-5 col-lg-7 col-xl-10\" >\r\n                            <Input\r\n                                name=\"seachBox3\"\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Search\"\r\n                                onChange={(e)=>searchHandeler(e)}\r\n                            />\r\n<Row class=\"rrounded-circle\">\r\n               \r\n               <Table \r\n                      className=\"table table-bordered text-black w-100 p-3 table table-hover ml-1\"\r\n                        >\r\n                    <Tbody>\r\n                        \r\n                      {\r\n                        list.map((index)=>{\r\n                       return(\r\n                        \r\n                    <Tr>\r\n                          <Td>\r\n                          <Link to={`/${index.ActualPagePath}`}>{index.Icon}</Link>\r\n                          </Td>\r\n                          </Tr>\r\n                        \r\n                       )     \r\n                        })\r\n                      }\r\n                      \r\n                    </Tbody>\r\n                    </Table>\r\n            \r\n                    </Row>\r\n\r\n                    </div>\r\n                    </Col>\r\n                </Row>\r\n               \r\n            </body>\r\n        </div>\r\n    )\r\n}\r\nconst people = [\r\n    {\r\n        ID: 2,\r\n        Name: \"Module List name\",\r\n        DisplayIndex: 2,\r\n        Icon: \"Module List\",\r\n        ActualPagePath: \"ModulesList\"\r\n    },\r\n    {\r\n        ID: 3,\r\n        Name: \"Modules Master name\",\r\n        DisplayIndex: 1,\r\n        Icon: \"Modules Master\",\r\n        ActualPagePath: \"modulesMaster\"\r\n    },\r\n    {\r\n        ID: 4,\r\n        Name: \"Company Master name\",\r\n        DisplayIndex: 3,\r\n        Icon: \"Companys Master\",\r\n        ActualPagePath: \"companyMaster\"\r\n    },\r\n    {\r\n        ID: 5,\r\n        Name: \"Company List name\",\r\n        DisplayIndex: 3,\r\n        Icon: \"CompanyList\",\r\n        ActualPagePath: \"companyList\"\r\n    },\r\n    {\r\n        ID: 6,\r\n        Name: \"Pages Master name\",\r\n        DisplayIndex: 5,\r\n        Icon: \"pagesMaster\",\r\n        ActualPagePath: \"pagesMaster\"\r\n    },\r\n    {\r\n        ID: 7,\r\n        Name: \"Pages List name\",\r\n        DisplayIndex: 3,\r\n        Icon: \"Pages List\",\r\n        ActualPagePath: \"PagesList\"\r\n    },\r\n    {\r\n        ID: 8,\r\n        Name: \"Users List name\",\r\n        DisplayIndex: 8,\r\n        Icon: \"Users List\",\r\n        ActualPagePath: \"usersList\"\r\n    },\r\n    {\r\n        ID: 9,\r\n        Name: \"Users Master\",\r\n        DisplayIndex: 7,\r\n        Icon: \"Users Master\",\r\n        ActualPagePath: \"usersMaster\"\r\n    }\r\n]","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\RoleAccessPages\\RoleAccessListPage.js",["1362","1363","1364","1365"],"import React, { useEffect, useState } from \"react\"\r\nimport { Row, Col, Modal, Button } from \"reactstrap\"\r\nimport MetaTags from 'react-meta-tags'\r\n\r\n// datatable related plugins\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory, {\r\n    PaginationProvider, PaginationListStandalone,\r\n} from 'react-bootstrap-table2-paginator';\r\nimport ToolkitProvider from 'react-bootstrap-table2-toolkit';\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb3\"\r\nimport \"../../../assets/scss/CustomTable2/datatables.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    getRoleAccessListPage,\r\n    PostMethod_ForCopyRoleAccessFor_Role_Success,\r\n\r\n} from \"../../../store/actions\";\r\nimport { AlertState } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport RoleAccessCopyFunctionality from \"./RoleAccessCopyFunctionality\";\r\nimport { mySearchProps } from \"../../../components/Common/CmponentRelatedCommonFile/SearchBox/MySearch\";\r\nimport { countlabelFunc } from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\n\r\nconst RoleAccessListPage = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const [userAccState, setUserAccState] = useState('');\r\n    const [modal_center, setmodal_center] = useState(false);\r\n    const [copy_user_RowData, setCopy_user_RowData] = useState({});\r\n\r\n\r\n    const { TableListData, RoleAccessModifiedinSingleArray, PostMessage_ForCopyRoleAccess } = useSelector((state) => ({\r\n        TableListData: state.RoleAccessReducer.RoleAccessListPage,\r\n        RoleAccessModifiedinSingleArray: state.Login.RoleAccessUpdateData,\r\n        PostMessage_ForCopyRoleAccess: state.RoleAccessReducer.PostMessage_ForCopyRoleAccess,\r\n\r\n    }));\r\n\r\n    // useEffect(() => {\r\n    //     const userAcc = CommonGetRoleAccessFunction(history)\r\n    //     if (!(userAcc === undefined)) {\r\n    //         setUserPageAccessState(userAcc)\r\n    //     }\r\n    // }, [history])\r\n\r\n    useEffect(() => {\r\n        // debugger\r\n        // const userAcc = CommonGetRoleAccessFunction(history)\r\n        const locationPath = history.location.pathname\r\n        let userAcc = RoleAccessModifiedinSingleArray.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (!(userAcc === undefined)) {\r\n            setUserAccState(userAcc)\r\n        }\r\n    }, [RoleAccessModifiedinSingleArray])\r\n\r\n\r\n    //  This UseEffect => Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        dispatch(getRoleAccessListPage());\r\n    }, []);\r\n\r\n    const EditPageHandler = (rowData) => {\r\n        debugger\r\n        if (rowData.Division_id === null) {\r\n            rowData.Division_id = 0\r\n        }\r\n\r\n        // let RelatedPageID = 0\r\n        // const userPageAccess = history.location.state\r\n\r\n        let RelatedPageID = userAccState.RelatedPageID\r\n\r\n        const found = RoleAccessModifiedinSingleArray.find((element) => {\r\n            return element.id === RelatedPageID\r\n        })\r\n\r\n        if (!(found === undefined)) {\r\n            history.push({\r\n                pathname: `/${found.ActualPagePath}`,\r\n                // pathname: `/${found.ActualPagePath}`,\r\n                // state: { fromDashboardAccess: true, UserDetails: found, EditData: rowData }\r\n                state: rowData,\r\n                // relatatedPage:\"/UserMaster\"\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if ((PostMessage_ForCopyRoleAccess.Status === true) && (PostMessage_ForCopyRoleAccess.StatusCode === 200)) {\r\n            dispatch(PostMethod_ForCopyRoleAccessFor_Role_Success({ Status: false }))\r\n\r\n            dispatch(getRoleAccessListPage());\r\n            // GoButton_Handler()\r\n            tog_center()\r\n            dispatch(AlertState({\r\n                Type: 1,\r\n                Status: true,\r\n                Message: PostMessage_ForCopyRoleAccess.Message,\r\n                AfterResponseAction: false\r\n            }))\r\n        }\r\n        else if (PostMessage_ForCopyRoleAccess.Status === true) {\r\n            dispatch(PostMethod_ForCopyRoleAccessFor_Role_Success({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(PostMessage_ForCopyRoleAccess.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [PostMessage_ForCopyRoleAccess])\r\n\r\n    //select id for copy row\r\n    const CopyHandeler = (event) => {\r\n\r\n        setCopy_user_RowData(event)\r\n        tog_center()\r\n    };\r\n\r\n\r\n\r\n    //select id for delete row\r\n    const deleteHandeler = (id, name) => {\r\n        dispatch(\r\n            AlertState({\r\n                Type: 5,\r\n                Status: true,\r\n                Message: `Are you sure you want to delete this item : \"${name}\"`,\r\n                RedirectPath: false,\r\n                // PermissionAction: deleteItemID,\r\n                ID: id,\r\n            })\r\n        );\r\n    };\r\n\r\n    // Modules list component table columns \r\n    const columns = [\r\n        {\r\n            dataField: 'RoleName',\r\n            text: 'Role Name',\r\n            sort: true\r\n        }, {\r\n            dataField: 'DivisionName',\r\n            text: 'Division Name',\r\n            sort: true\r\n        },\r\n        {\r\n            dataField: 'CompanyName',\r\n            text: 'Company Name',\r\n            sort: true\r\n        },\r\n        {\r\n            text: \"Action\",\r\n            hidden: (\r\n                !(userAccState.RoleAccess_IsEdit)\r\n                && !(userAccState.RoleAccess_IsView)\r\n                && !(userAccState.RoleAccess_IsDelete)) ? true : false,\r\n\r\n            formatter: (cellContent, RoleAccess) => (\r\n\r\n                <div className=\"d-flex gap-3\" style={{ display: 'flex', justifyContent: 'center' }} >\r\n\r\n                    <Button\r\n                        className=\"badge badge-soft-primary font-size-12 btn btn-primary waves-effect waves-light w-xxs border border-light\"\r\n                        data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Copy RoleAccess\"\r\n                        onClick={() => { CopyHandeler(RoleAccess); }}\r\n                    >\r\n                        copy\r\n                    </Button>\r\n\r\n\r\n                    {((userAccState.RoleAccess_IsEdit)) ?\r\n                        <Button\r\n                            type=\"button\"\r\n                            data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Edit RoleAccess\"\r\n                            onClick={() => { EditPageHandler(RoleAccess); }}\r\n                            className=\"badge badge-soft-success font-size-12 btn btn-success waves-effect waves-light w-xxs border border-light\"\r\n                        >\r\n                            {console.log(\"id\", RoleAccess)} <i className=\"mdi mdi-pencil font-size-18\" id=\"edittooltip\"></i>\r\n                        </Button> : null}\r\n\r\n                    {(!(userAccState.RoleAccess_IsEdit) && (userAccState.RoleAccess_IsView)) ?\r\n                        <Button\r\n                            type=\"button\"\r\n                            data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"View RoleAccess\"\r\n                            onClick={() => { EditPageHandler(RoleAccess); }}\r\n                            className=\"badge badge-soft-primary font-size-12 btn btn-primary waves-effect waves-light w-xxs border border-light\"\r\n\r\n                        >\r\n                            <i className=\"bx bxs-show font-size-18 \"></i>\r\n                        </Button> : null}\r\n\r\n                    {(userAccState.RoleAccess_IsDelete)\r\n                        ?\r\n                        <Button\r\n                            className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n                            data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Delete RoleAccess\"\r\n                            onClick={() => { deleteHandeler(RoleAccess.id, RoleAccess.Name); }}\r\n                        >\r\n                            <i className=\"mdi mdi-delete font-size-18\"></i>\r\n                        </Button>\r\n                        : null\r\n                    }\r\n\r\n                </div>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const defaultSorted = [{\r\n        dataField: 'RoleName',\r\n        order: 'asc'\r\n    }];\r\n\r\n    const pageOptions = {\r\n        sizePerPage: 10,\r\n        totalSize: TableListData.length, // replace later with size(customers),\r\n        custom: true,\r\n    }\r\n\r\n    // tag_center -- Control the Edit Modal show and close\r\n    function tog_center() {\r\n        setmodal_center(!modal_center)\r\n    }\r\n\r\n    if (!(userAccState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\">\r\n                    <MetaTags>\r\n                        <title>RoleAccess List Page| FoodERP-React FrontEnd</title>\r\n                    </MetaTags>\r\n                    <Breadcrumb\r\n                        pageHeading={userAccState.PageHeading}\r\n                        newBtnView={(userAccState.RoleAccess_IsSave) ? true : false}\r\n                        showCount={true}\r\n                        excelBtnView={true}\r\n                        excelData={TableListData}\r\n                    />\r\n                    <PaginationProvider\r\n                        pagination={paginationFactory(pageOptions)}\r\n                        keyField='id'\r\n                        columns={columns}\r\n                        data={TableListData}\r\n                    >\r\n                        {({ paginationProps, paginationTableProps }) => (\r\n                            <ToolkitProvider\r\n                                keyField='id'\r\n                                columns={columns}\r\n                                data={TableListData}\r\n                                search\r\n                            >\r\n                                {toolkitProps => (\r\n                                    <React.Fragment>\r\n                                        <div className=\"table-responsive\">\r\n                                            <BootstrapTable\r\n                                                keyField={\"id\"}\r\n                                                responsive\r\n                                                bordered={true}\r\n                                                striped={false}\r\n                                                classes={\"table align-middle table-nowrap table-hover\"}\r\n                                                noDataIndication={<div className=\"text-danger text-center \">Items Not available</div>}\r\n                                                headerWrapperClasses={\"thead-light\"}\r\n                                                {...toolkitProps.baseProps}\r\n                                                {...paginationTableProps}\r\n                                            />\r\n                                            {countlabelFunc(toolkitProps, paginationProps, dispatch, \"RoleAccess\")}\r\n                                            {mySearchProps(toolkitProps.searchProps)}\r\n                                        </div>\r\n\r\n                                        <Row className=\"align-items-md-center mt-30\">\r\n                                            <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n                                                <PaginationListStandalone\r\n                                                    {...paginationProps}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </React.Fragment>\r\n                                )\r\n                                }\r\n                            </ToolkitProvider>\r\n                        )\r\n                        }\r\n                    </PaginationProvider>\r\n                    <Modal\r\n                        isOpen={modal_center}\r\n                        toggle={() => { tog_center() }}\r\n                        size=\"xl\"\r\n                    >\r\n                        <RoleAccessCopyFunctionality state={copy_user_RowData} />\r\n\r\n                    </Modal>\r\n                </div>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n}\r\nexport default RoleAccessListPage\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\RoleAccessPages\\RoleAccessCopyFunctionality.js",["1366","1367","1368","1369","1370","1371","1372","1373","1374","1375","1376"],"import React, { useEffect, useRef, useState, } from \"react\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport { Card, CardHeader, Col, Container, FormGroup, Label, Row, Button } from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { getPartyListAPI } from \"../../../store/Administrator/PartyRedux/action\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport {\r\n    AlertState,\r\n    getRoles, PostMethodForCopyRoleAccessForRoleAccess,\r\n    PostMethod_ForCopyRoleAccessFor_Role_Success\r\n} from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst RoleAccessCopyFunctionality = (props) => {\r\n\r\n    const [copyRole_Dropdown_Select, setCopyRole_Dropdown_Select] = useState(\"\");\r\n    const [copyDivision_dropdown_Select, setCopyDivision_dropdown_Select] = useState(\"\");\r\n\r\n    const [newRoleDropdown_Select, setNewRoleDropdown_Select] = useState(\"\");\r\n    const [newDivision_dropdown_Select, setNewDivision_dropdown_Select] = useState(null);\r\n\r\n    const [userPageAccessState, setUserPageAccessState] = useState('');\r\n    const [showTableOnUI, setShowTableOnUI] = useState(false)\r\n\r\n    // const [EditData, setEditData] = useState([]);\r\n    const [pageMode, setPageMode] = useState(\"edit\");\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n\r\n\r\n    //Access redux store Data \r\n    const { Roles_redux,\r\n        DivisionTypes_redux,\r\n    } = useSelector((state) => ({\r\n        DivisionTypes_redux: state.PartyMasterReducer.partyList,\r\n        Roles_redux: state.User_Registration_Reducer.Roles,\r\n    }));\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getRoles());\r\n        dispatch(getPartyListAPI());\r\n\r\n    }, []);\r\n\r\n\r\n\r\n    let editDataGatingFromList = props.state;\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        debugger\r\n        if (!(editDataGatingFromList === undefined)) {\r\n            var C_props = editDataGatingFromList\r\n\r\n            var divisionId = C_props.Division_id\r\n            if (divisionId === null) {\r\n                divisionId = 0\r\n            }\r\n            var roleId = C_props.Role_id\r\n\r\n            if (roleId > 0) {\r\n\r\n                setCopyRole_Dropdown_Select({ label: C_props.RoleName, value: roleId })\r\n                setCopyDivision_dropdown_Select({ label: C_props.DivisionName, value: divisionId })\r\n            }\r\n        }\r\n\r\n    }, [history]);\r\n\r\n\r\n    const newDivisionTypesOption = DivisionTypes_redux.map((Data) => ({\r\n        value: Data.id,\r\n        label: Data.Name\r\n    }));\r\n\r\n    const newRole_DropdownOption = Roles_redux.map((Data) => ({\r\n        value: Data.id,\r\n        label: Data.Name\r\n    }));\r\n\r\n\r\n\r\n    function newRoleDropDown_onChangeHandler(e) {\r\n        setNewRoleDropdown_Select(e)\r\n    }\r\n\r\n    function newDivisionTypes_onChangeHandler(e) {\r\n        setNewDivision_dropdown_Select(e)\r\n    }\r\n\r\n    function CopyButton_Handler() {\r\n        const jsonBody = JSON.stringify(\r\n            {\r\n                Role: copyRole_Dropdown_Select.value,\r\n                Division: copyDivision_dropdown_Select.value,\r\n                NewRole: newRoleDropdown_Select.value,\r\n                NewDivision: (newDivision_dropdown_Select) ?\r\n                    newDivision_dropdown_Select.value\r\n                    : 0,\r\n            })\r\n\r\n        dispatch(PostMethodForCopyRoleAccessForRoleAccess(jsonBody))\r\n    }\r\n\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    let IsEditMode_Css = ''\r\n    if (pageMode === \"edit\" || pageMode == \"other\") { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                {/* <Breadcrumbs breadcrumbItem={\"Role Access List\"} /> */}\r\n                <Breadcrumb\r\n                    title={\"Count :\"}\r\n                    IsSearch={true}\r\n                    // breadcrumbItem={userPageAccessState.PageHeading}\r\n                    breadcrumbItem={\"Copy Role Access\"}\r\n                />\r\n                <MetaTags>\r\n                    <title>Role Access| FoodERP-React FrontEnd</title>\r\n                </MetaTags>\r\n                <Container fluid>\r\n\r\n                    <Card className=\"text-black\" >\r\n\r\n\r\n\r\n\r\n                        <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n\r\n                            <Row style={{ backgroundColor: \"#f2f2f2\" }} className='mb-3 mt-n1'>\r\n                                <Col md=\"4\" className=\"p-2 \">\r\n                                    <Label className=\"p-2 col-sm-3\">Role</Label>\r\n                                    <Button type=\"button\" color=\"btn btn-outline-warning\" className=\"btn-sm\" ><h className=\"text-black\">{copyRole_Dropdown_Select.label}</h></Button>\r\n                                </Col>\r\n\r\n                                {(copyDivision_dropdown_Select.value > 0)\r\n                                    ?\r\n                                    <Col md=\"4\" className=\"p-2 \">\r\n\r\n                                        <Label className=\" p-2 col-sm-3 \">Division</Label>\r\n                                        <Button type=\"button\" color=\"btn btn-outline-warning\" className=\"btn-sm\" ><h className=\"text-black\">{copyDivision_dropdown_Select.label}</h></Button>\r\n                                    </Col>\r\n                                    : null\r\n                                }\r\n                                {/* <Col md=\"4\" className=\"p-2 text-end\">\r\n                                                    <Button type=\"button\" color=\"btn btn-outline-secondary\" className=\"btn-sm\" onClick={() => { ChangeButtonHandeler() }}><h className=\"text-black\">Change Role</h></Button>\r\n                                                </Col> */}\r\n\r\n                            </Row>\r\n\r\n\r\n                            <Row className=\"mt-3\">\r\n                                <Col md=\"4\">\r\n\r\n                                    <FormGroup className=\"mb-3 row \">\r\n                                        <Label className=\"col-sm-2 p-2 ml-n4 \">Role</Label>\r\n                                        <Col md=\"9\">\r\n                                            <Select\r\n                                                value={newRoleDropdown_Select}\r\n                                                options={newRole_DropdownOption}\r\n                                                className=\"rounded-bottom\"\r\n                                                onChange={(e) => { newRoleDropDown_onChangeHandler(e) }}\r\n                                                classNamePrefix=\"select2-selection\"\r\n\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col md=\"4\" className=\"\">\r\n                                    <FormGroup className=\"mb-3 row\" >\r\n                                        <Label className=\"col-sm-3 p-2\">Division</Label>\r\n                                        <Col md=\"9\">\r\n                                            <Select\r\n                                                value={newDivision_dropdown_Select}\r\n                                                className=\"rounded-bottom\"\r\n                                                options={newDivisionTypesOption}\r\n                                                onChange={(e) => { newDivisionTypes_onChangeHandler(e) }}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col md=\"3\" className=\"mt- \">\r\n                                    <Button type=\"button\" color=\"primary\" onClick={() => { CopyButton_Handler() }}>Copy Role</Button>\r\n                                </Col>\r\n\r\n                            </Row>\r\n                        </CardHeader>\r\n\r\n                    </Card>\r\n\r\n                </Container>\r\n            </div>\r\n        </React.Fragment >\r\n    );\r\n\r\n\r\n};\r\nexport default RoleAccessCopyFunctionality\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\itemIndex.js",["1377","1378","1379","1380","1381","1382","1383","1384","1385","1386","1387","1388","1389","1390","1391"],"import React, { useEffect, useState } from \"react\"\r\nimport MetaTags from \"react-meta-tags\"\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    Row,\r\n    TabContent,\r\n    Table,\r\n    TabPane,\r\n} from \"reactstrap\"\r\nimport { Link, useHistory } from \"react-router-dom\"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport classnames from \"classnames\"\r\nimport Breadcrumb from \"../../../../components/Common/Breadcrumb\";\r\nimport { AvForm } from \"availity-reactstrap-validation\"\r\nimport Select from \"react-select\";\r\nimport { fetchCompanyList } from \"../../../../store/Administrator/CompanyRedux/actions\"\r\nimport {\r\n    editItemSuccess,\r\n    getBaseUnit_ForDropDown,\r\n    get_CategoryTypes_ForDropDown,\r\n    get_Category_By_CategoryType_ForDropDown,\r\n    get_Category_By_CategoryType_ForDropDownAPI,\r\n    get_Category_By_CategoryType_ForDropDown_Success,\r\n    get_Division_ForDropDown,\r\n    get_ImageType_ForDropDown,\r\n    get_Party_ForDropDown,\r\n    get_PriceList_ForDropDown,\r\n    get_Sub_Category_By_CategoryType_ForDropDown,\r\n    get_Sub_Category_By_CategoryType_ForDropDown_Success,\r\n    postItemData,\r\n    PostItemDataSuccess,\r\n    updateItemID\r\n} from \"../../../../store/Administrator/ItemsRedux/action\";\r\nimport { AlertState, Breadcrumb_inputName, getCategoryTypelist } from \"../../../../store/actions\";\r\nimport { Tbody, Thead } from \"react-super-responsive-table\";\r\nimport { getPartyListAPI } from \"../../../../store/Administrator/PartyRedux/action\";\r\nimport GSTTab from \"./GST_Tab\";\r\nimport MRPTab from \"./MRP_Tab\";\r\nimport Margin_Tab from \"./MarginTab/index\";\r\nimport GroupTab from \"./Group_Tab\";\r\nimport CategoryTab from \"./Category_Tab\";\r\nimport DivisionTab from \"./Division_Tab\";\r\n\r\nconst ItemsMaster = (props) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n\r\n    const [EditData, setEditData] = useState({});\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(\"save\");\r\n    const [userPageAccessState, setUserPageAccessState] = useState('');\r\n\r\n    const [activeTab1, setactiveTab1] = useState(\"1\")\r\n\r\n\r\n    let initial = {\r\n        Name: \"\",\r\n        Sequence: \"\",\r\n        ShortName: \"\",\r\n        BarCode: '',\r\n        Company: [],\r\n        BaseUnit: [],\r\n        Category: [],\r\n        CategoryType: [],\r\n        Division: [],\r\n        MRP: '',\r\n        GST: '',\r\n        HSN: '',\r\n        isActive: true,\r\n    }\r\n\r\n    const initialInValid = [\"txtName0\", \"txtShortName0\",]\r\n    const [inValidDrop, setInValidDrop] = useState({\r\n        BaseUnit: false,\r\n        Company: false,\r\n        CategoryType: false,\r\n        Category: false,\r\n        Division: false\r\n    })\r\n    let [isValidate, setIsValidate] = useState(initialInValid);\r\n\r\n    const [formValue, setFormValue] = useState(initial);\r\n    const [pageRefresh, setpageRefresh] = useState(false);\r\n\r\n\r\n\r\n    const [marginMaster, setMarginMaster] = useState([]);\r\n\r\n    const [imageTabTable, setImageTabTable] = useState([{\r\n        ImageType: '',\r\n        ImageUpload: ''\r\n    }]);\r\n    const [baseUnitTableData, setBaseUnitTableData] = useState([{\r\n        Conversion: '',\r\n        Unit: '',\r\n    }]);\r\n\r\n    const [Division_Tab_TableData, setDivision_Tab_TableData] = useState([]);\r\n\r\n    const [MRP_Tab_TableData, setMRP_Tab_TableData] = useState([]);\r\n\r\n    const [Group_Tab_TableData, setGroup_Tab_TableData] = useState([]);\r\n\r\n    const [Category_Tab_TableData, setCategory_Tab_TableData] = useState([]);\r\n\r\n    const [GStDetailsMaster, setGStDetailsMaster] = useState([]);\r\n\r\n    const {\r\n        companyList,\r\n        BaseUnit,\r\n        PostAPIResponse,\r\n        userAccess,\r\n        ImageType,\r\n        Division,\r\n        CategoryTypeList,\r\n        CategoryList\r\n    } = useSelector((state) => ({\r\n        companyList: state.Company.companyList,\r\n        BaseUnit: state.ItemMastersReducer.BaseUnit,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        PostAPIResponse: state.ItemMastersReducer.postMessage,\r\n        ImageType: state.ItemMastersReducer.ImageType,\r\n        Division: state.ItemMastersReducer.Division,\r\n        CategoryTypeList: state.categoryTypeReducer.categoryTypeListData,\r\n        CategoryList: state.ItemMastersReducer.Category,\r\n    }));\r\n\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(\"editValue\")\r\n    const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserPageAccessState(userAcc)\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n\r\n        // if (!(userPageAccessState === '')) { document.getElementById(\"txtName\").focus(); }\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                setEditData(hasEditVal);\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n\r\n                const editDivision = hasEditVal.ItemDivisionDetails.map(index => ({\r\n                    value: index.Division,\r\n                    label: index.DivisionName\r\n                }))\r\n\r\n                const editCategoryType = {\r\n                    value: hasEditVal.ItemCategoryDetails[0].CategoryType,\r\n                    label: hasEditVal.ItemCategoryDetails[0].CategoryTypeName\r\n                }\r\n\r\n                const editCategory = hasEditVal.ItemCategoryDetails.map(index => ({\r\n                    value: index.Category,\r\n                    label: index.CategoryName\r\n                }))\r\n\r\n                let initialFormValue = {\r\n                    Name: hasEditVal.Name,\r\n                    Sequence: hasEditVal.Sequence,\r\n                    ShortName: hasEditVal.ShortName,\r\n                    BarCode: hasEditVal.BarCode,\r\n                    Company: { label: hasEditVal.CompanyName, value: hasEditVal.Company },\r\n                    CategoryType: editCategoryType,\r\n                    Category: editCategory,\r\n                    Division: editDivision,\r\n                    BaseUnit: { label: hasEditVal.BaseUnitName, value: hasEditVal.BaseUnitID },\r\n                    isActive: hasEditVal.isActive,\r\n                }\r\n\r\n                let ItemImagesDetails = hasEditVal.ItemImagesDetails.map((index) => {\r\n                    return {\r\n                        ImageType: {\r\n                            label: index.ImageTypeName,\r\n                            value: index.ImageType\r\n                        },\r\n                        ImageUpload: index.Item_pic\r\n                    }\r\n                })\r\n\r\n                const ItemUnitDetails = []\r\n                hasEditVal.ItemUnitDetails.forEach((index) => {\r\n\r\n                    if (!(hasEditVal.BaseUnitID === index.UnitID)) {\r\n                        ItemUnitDetails.push({\r\n                            Unit: {\r\n                                label: index.UnitName,\r\n                                value: index.UnitID,\r\n                            },\r\n                            Conversion: index.BaseUnitQuantity,\r\n                        })\r\n                    }\r\n                });\r\n\r\n                if (ItemUnitDetails.length === 0) {\r\n                    ItemUnitDetails.push({\r\n                        Unit: '',\r\n                        Conversion: '',\r\n                    })\r\n                };\r\n\r\n                setFormValue(initialFormValue);\r\n                setImageTabTable(ItemImagesDetails)\r\n                setBaseUnitTableData(ItemUnitDetails)\r\n                setMRP_Tab_TableData(hasEditVal.ItemMRPDetails)\r\n                setMarginMaster(hasEditVal.ItemMarginDetails)\r\n                setGStDetailsMaster(hasEditVal.ItemGSTHSNDetails)\r\n                setGroup_Tab_TableData(hasEditVal.ItemGroupDetails)\r\n                setCategory_Tab_TableData(hasEditVal.ItemCategoryDetails)\r\n\r\n                dispatch(editItemSuccess({ Status: false }))\r\n\r\n            }\r\n        }\r\n\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if ((PostAPIResponse.Status === true) && (PostAPIResponse.StatusCode === 200) && !(pageMode === \"dropdownAdd\")) {\r\n            dispatch(PostItemDataSuccess({ Status: false }))\r\n\r\n            if (pageMode === \"dropdownAdd\") {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: PostAPIResponse.Message,\r\n                }))\r\n            }\r\n            else {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: PostAPIResponse.Message,\r\n                    RedirectPath: '/ItemList',\r\n                }))\r\n            }\r\n        }\r\n\r\n        else if (PostAPIResponse.Status === true) {\r\n            dispatch(PostItemDataSuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(PostAPIResponse.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [PostAPIResponse])\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchCompanyList());\r\n        dispatch(getBaseUnit_ForDropDown());\r\n        dispatch(get_CategoryTypes_ForDropDown());\r\n        dispatch(getPartyListAPI());\r\n        dispatch(get_ImageType_ForDropDown());\r\n        dispatch(get_Division_ForDropDown());\r\n        dispatch(get_Party_ForDropDown());\r\n        dispatch(get_PriceList_ForDropDown());\r\n        dispatch(getCategoryTypelist());\r\n        dispatch(get_Category_By_CategoryType_ForDropDownAPI());\r\n    }, [dispatch]);\r\n\r\n\r\n    const toggle1 = tab => {\r\n        if (activeTab1 !== tab) {\r\n            setactiveTab1(tab)\r\n        }\r\n    }\r\n\r\n    const Company_DropdownOptions = companyList.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }));\r\n\r\n    const BaseUnit_DropdownOptions = BaseUnit.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }));\r\n\r\n    let BaseUnit_DropdownOptions2 = []\r\n    BaseUnit.forEach(myFunction);\r\n    function myFunction(item, index, arr) {\r\n        if (!(formValue.BaseUnit.label === item.Name)) {\r\n            BaseUnit_DropdownOptions2[index] = {\r\n                value: item.id,\r\n                label: item.Name\r\n            };\r\n        }\r\n    }\r\n\r\n    const CategoryTypeList_DropdownOptions = CategoryTypeList.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name,\r\n    }));\r\n\r\n    const CategoryList_DropdownOptions = CategoryList.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name,\r\n    }));\r\n\r\n\r\n    const ImageType_DropdownOptions = ImageType.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }));\r\n\r\n    const Division_DropdownOptions = Division.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }));\r\n\r\n\r\n    function dropDownValidation(event, type,) {\r\n\r\n        let returnVal = event.value === ''\r\n        if (returnVal) {\r\n            inValidDrop[type] = true\r\n            return\r\n        } else {\r\n            formValue[type] = event\r\n            inValidDrop[type] = false\r\n\r\n        }\r\n        setpageRefresh(!pageRefresh)\r\n    }\r\n\r\n    function Common_Drop_Validation(event, type, key) {\r\n\r\n        let OnchangeControl = document.getElementById(`drop${type}-${key}`)\r\n        if (event.value === 0) {\r\n            OnchangeControl.className = 'form-control is-invalid'\r\n            return false\r\n        } else {\r\n            OnchangeControl.className = '';\r\n            return true\r\n        }\r\n\r\n    }\r\n    function Common_Text_INPUT_Validation(value, type, key) {\r\n\r\n        let OnchangeControl = document.getElementById(`txt${type}${key}`)\r\n\r\n        if (value === '') {\r\n            OnchangeControl.className = 'form-control is-invalid'\r\n            return false\r\n        } else {\r\n            OnchangeControl.className = 'form-control';\r\n            return true\r\n        }\r\n    }\r\n    function CommonTab_SimpleText_INPUT_handller_ForAll(event, type, key) {\r\n\r\n        let validateReturn = Common_Text_INPUT_Validation(event, type, 0);\r\n\r\n        if (validateReturn === false) {\r\n            isValidate.push(`txt${type}0`)\r\n            return\r\n        } else {\r\n\r\n            formValue[type] = event\r\n            isValidate = isValidate.filter((indF) => {\r\n                return !(indF === `txt${type}0`)\r\n            })\r\n            setIsValidate(isValidate)\r\n        }\r\n\r\n    }\r\n\r\n    function Common_DropDown_handller_ForAll(event, type, key) {\r\n\r\n        let returnVal = Common_Drop_Validation(event, type, key)\r\n        if (returnVal === '') {\r\n\r\n            isValidate.push(`drop${type}-${key}`)\r\n            return\r\n        } else {\r\n            formValue[type] = event\r\n            isValidate = isValidate.filter((indFind) => {\r\n                return !(indFind === `drop${type}-${key}`)\r\n            })\r\n            setIsValidate(isValidate)\r\n        }\r\n\r\n    }\r\n\r\n    function UnitConversionsTab_AddRow_Handle() {\r\n\r\n        let key = baseUnitTableData.length - 1\r\n        let unit_TableElement = baseUnitTableData[key];\r\n\r\n        let validateReturn = Common_Drop_Validation(unit_TableElement.Unit, \"Unit\", key);\r\n        let validateReturn1 = Common_Text_INPUT_Validation(unit_TableElement.Conversion, \"Conversion\", key)\r\n        if ((validateReturn1 === false) || (validateReturn === false)) return;\r\n\r\n        var newarr = [...baseUnitTableData, {\r\n            Conversion: '',\r\n            Unit: '',\r\n        }]\r\n        setBaseUnitTableData(newarr)\r\n    }\r\n    function UnitConversionsTab_DeleteRow_Handler(key) {\r\n\r\n        var removeElseArrray = baseUnitTableData.filter((i, k) => {\r\n            return !(k === key)\r\n        })\r\n\r\n        setBaseUnitTableData(removeElseArrray)\r\n\r\n    }\r\n    function UnitConversionsTab_BaseUnit2_onChange_Handller(event, type, key,) {\r\n        let newSelectValue = ''\r\n\r\n        var found = baseUnitTableData.find((i, k) => {\r\n            return (k === key)\r\n        })\r\n\r\n        if (type === \"Conversion\") {\r\n            let validateReturn = Common_Text_INPUT_Validation(event, type, key);\r\n            if (validateReturn === false) return;\r\n\r\n            newSelectValue = {\r\n                Conversion: event.target.value,\r\n                Unit: found.Unit,\r\n            }\r\n        }\r\n        else if (type === 'Unit') {\r\n            // if(event.label===formValue.){ }\r\n            const foundDublicate = baseUnitTableData.find((element) => {\r\n                return (element[type].value === event.value)\r\n            });\r\n            if (!(foundDublicate === undefined)) {\r\n                dispatch(AlertState({\r\n                    Type: 4,\r\n                    Status: true,\r\n                    Message: \"Unit already Select\",\r\n                }))\r\n                return\r\n            }\r\n            let validateReturn = Common_Drop_Validation(event, type, key,)\r\n            if (validateReturn === false) return;\r\n\r\n            newSelectValue = {\r\n                Conversion: found.Conversion,\r\n                Unit: event,\r\n            }\r\n        }\r\n\r\n        let newTabArr = baseUnitTableData.map((index, k) => {\r\n            return (k === key) ? newSelectValue : index\r\n        })\r\n        setBaseUnitTableData(newTabArr)\r\n        // setBaseUnit_dropdown_Select2(e)\r\n    }\r\n\r\n    function ImageTab_AddRow_Handler(key) {\r\n\r\n\r\n        var newarr1 = [...imageTabTable, {\r\n            ImageType: { value: 0, label: \"select\" },\r\n            ImageUpload: {}\r\n        }]\r\n        setImageTabTable(newarr1)\r\n    }\r\n    function ImageTab_DeleteRow_Handler(key) {\r\n        var removeElseArrray1 = imageTabTable.filter((i, k) => {\r\n            return !(k === key)\r\n        })\r\n        setImageTabTable(removeElseArrray1)\r\n    }\r\n    function ImageTab_onChange_Handler(event, key, type) {\r\n\r\n        var found = imageTabTable.find((i, k) => {\r\n            return (k === key)\r\n        })\r\n        let newSelectValue = ''\r\n\r\n        if (type === \"ImageType\") {\r\n            const foundDublicate = imageTabTable.find((element) => {\r\n                return (element[type].value === event.value)\r\n            });\r\n            if (!(foundDublicate === undefined)) {\r\n                dispatch(AlertState({\r\n                    Type: 4,\r\n                    Status: true,\r\n                    Message: \"Image Type Already Select\",\r\n                }))\r\n                return\r\n            }\r\n            newSelectValue = {\r\n                ImageType: event,\r\n                ImageUpload: found.ImageUpload,\r\n            }\r\n        }\r\n        else if (type === 'ImageUpload') {\r\n            newSelectValue = {\r\n                ImageType: found.ImageType,\r\n                ImageUpload: event.target.value,\r\n            }\r\n        }\r\n\r\n        let newTabArr = imageTabTable.map((index, k) => {\r\n            return (k === key) ? newSelectValue : index\r\n        })\r\n        setImageTabTable(newTabArr)\r\n    }\r\n\r\n\r\n    const CategoryType_Handler = (event) => {\r\n        dropDownValidation(event, \"CategoryType\")\r\n        // setCategoryTypeDropdownSelect(event);\r\n        dispatch(get_Category_By_CategoryType_ForDropDownAPI(event.value))\r\n    };\r\n\r\n    const Category_Handler = (event) => {\r\n        // setcategoryDropdownSelect(event);\r\n        dropDownValidation(event, \"Category\")\r\n\r\n    };\r\n\r\n    const Division_Handler = (event) => {\r\n        dropDownValidation(event, \"Division\")\r\n        // setDivision_dropdown_Select(event);\r\n\r\n    };\r\n\r\n    const handleValidSubmit = (event, values) => {\r\n\r\n        let isvalid = true\r\n        let inValidMsg = []\r\n\r\n        if (formValue.Name === '') {\r\n            document.getElementById(\"txtName0\").className = \"form-control is-invalid\"\r\n            inValidMsg.push(\"Name: Is Requried\")\r\n            isvalid = false\r\n        }\r\n        if (formValue.ShortName === '') {\r\n            document.getElementById(\"txtShortName0\").className = \"form-control is-invalid\"\r\n            isvalid = false\r\n            inValidMsg.push(\"ShortName: Is Requried\")\r\n        }\r\n        if (formValue.Company.length < 1) {\r\n            inValidDrop.Company = true\r\n            isvalid = false\r\n            inValidMsg.push(\"Company: Is Requried\")\r\n        }\r\n        if (formValue.BaseUnit.length < 1) {\r\n            inValidDrop.BaseUnit = true\r\n            isvalid = false\r\n            inValidMsg.push(\"BaseUnit: Is Requried\")\r\n\r\n        }\r\n        if (formValue.CategoryType.length < 1) {\r\n            inValidDrop.CategoryType = true\r\n            isvalid = false\r\n            inValidMsg.push(\"CategoryType: Is Requried\")\r\n        }\r\n        if (formValue.Category.length < 1) {\r\n            inValidDrop.Category = true\r\n            isvalid = false\r\n            inValidMsg.push(\"Category: Is Requried\")\r\n\r\n        }\r\n\r\n        if (formValue.Division.length < 1) {\r\n            inValidDrop.Division = true\r\n            isvalid = false\r\n            inValidMsg.push(\"Division:Is Requried\")\r\n        }\r\n        if (!Group_Tab_TableData.length > 0) {\r\n            isvalid = false\r\n            inValidMsg.push(\" GroupType Primary:Is Requried\")\r\n        }\r\n        else {\r\n            const found = Group_Tab_TableData.find(element => {\r\n                return element.GroupTypeName === \"Primary\"\r\n            });\r\n            if (found === undefined) {\r\n                isvalid = false;\r\n                inValidMsg.push(\" GroupType Primary:Is Requried\")\r\n            }\r\n        }\r\n        if (isvalid) {\r\n\r\n            const itemUnitDetails = baseUnitTableData.map((index) => ({\r\n                BaseUnitQuantity: index.Conversion,\r\n                UnitID: index.Unit.value,\r\n            }))\r\n            const islastIndex = itemUnitDetails.length\r\n\r\n            if ((islastIndex === 1) && (itemUnitDetails[0].BaseUnitQuantity === \"\")) {\r\n                itemUnitDetails[0] = {\r\n                    BaseUnitQuantity: 1,\r\n                    UnitID: formValue.BaseUnit.value,\r\n                }\r\n            }\r\n            else if (islastIndex > 0) {\r\n\r\n                itemUnitDetails.unshift({\r\n                    BaseUnitQuantity: 1,\r\n                    UnitID: formValue.BaseUnit.value,\r\n                })\r\n            }\r\n            debugger\r\n            const ItemCategoryDetails = formValue.Category.map((index) => ({\r\n                CategoryType: formValue.CategoryType.value,\r\n                Category: index.value\r\n            }))\r\n\r\n            let hasAdd_MRP = []\r\n            MRP_Tab_TableData.forEach((index) => {\r\n                if (index.IsAdd === true) { hasAdd_MRP.push(index) }\r\n            })\r\n            let hasAdd_Margin = []\r\n            marginMaster.forEach((index) => {\r\n                if (index.IsAdd === true) { hasAdd_Margin.push(index) }\r\n            })\r\n\r\n            let hasAdd_GST = []\r\n            GStDetailsMaster.forEach((index) => {\r\n                if (index.IsAdd === true) { hasAdd_GST.push(index) }\r\n            })\r\n\r\n\r\n            const jsonBody = JSON.stringify({\r\n                Name: formValue.Name,\r\n                ShortName: formValue.ShortName,\r\n                Sequence: formValue.Sequence,\r\n                BarCode: formValue.BarCode,\r\n                isActive: formValue.isActive,\r\n                Company: formValue.Company.value,\r\n                BaseUnitID: formValue.BaseUnit.value,\r\n                CreatedBy: 1,\r\n                UpdatedBy: 1,\r\n                ItemCategoryDetails: ItemCategoryDetails,\r\n\r\n                ItemUnitDetails: itemUnitDetails,\r\n\r\n                ItemDivisionDetails: formValue.Division.map((i) => {\r\n                    return ({ Division: i.value })\r\n                }),\r\n                ItemImagesDetails: [\r\n                    {\r\n                        ImageType: \"1\",\r\n                        Item_pic: \"sadsadasdas\"\r\n                    }\r\n                ],\r\n                ItemMRPDetails: hasAdd_MRP,\r\n                ItemMarginDetails: hasAdd_Margin,\r\n                ItemGSTHSNDetails: hasAdd_GST,\r\n                ItemGroupDetails: Group_Tab_TableData,\r\n\r\n            });\r\n\r\n            if (pageMode === 'edit') {\r\n                dispatch(updateItemID(jsonBody, EditData.id));\r\n                console.log(\"edit json\", jsonBody)\r\n            }\r\n\r\n            else {\r\n                dispatch(postItemData(jsonBody));\r\n                console.log(\"post json\", jsonBody)\r\n            }\r\n        }\r\n        else {\r\n            dispatch(AlertState({\r\n                Type: 4, Status: true,\r\n                Message: JSON.stringify(inValidMsg),\r\n                // Message: (inValidMsg),\r\n                RedirectPath: false,\r\n                PermissionAction: false,\r\n            }));\r\n        }\r\n\r\n    };\r\n\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <MetaTags>\r\n                        <title>Item Master| FoodERP-React FrontEnd</title>\r\n                    </MetaTags>\r\n                    <Container fluid>\r\n                        <AvForm onValidSubmit={(e, v) => { handleValidSubmit(e, v); }}>\r\n                            {/* Render Breadcrumbs */}\r\n                            <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n\r\n                            <Row>\r\n\r\n                                <Col lg={12}>\r\n                                    <Card className=\"text-black\" >\r\n                                        <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                                            <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                            <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                                        </CardHeader>\r\n                                        <CardBody>\r\n                                            <Nav tabs className=\"nav-tabs-custom nav-justified\">\r\n                                                <NavItem>\r\n                                                    <NavLink\r\n                                                        id=\"nave-link-1\"\r\n                                                        style={{ cursor: \"pointer\" }}\r\n                                                        className={classnames({\r\n                                                            active: activeTab1 === \"1\",\r\n                                                        })}\r\n                                                        onClick={() => {\r\n                                                            toggle1(\"1\")\r\n                                                        }}\r\n                                                    >\r\n                                                        <span className=\"d-block d-sm-none\">\r\n                                                            <i className=\"fas fa-home\"></i>\r\n                                                        </span>\r\n                                                        <span className=\"d-none d-sm-block\">Basic Info</span>\r\n                                                    </NavLink>\r\n                                                </NavItem>\r\n\r\n                                                <NavItem>\r\n                                                    <NavLink\r\n                                                        id=\"nave-link-2\"\r\n                                                        style={{ cursor: \"pointer\" }}\r\n                                                        className={classnames({\r\n                                                            active: activeTab1 === \"2\",\r\n                                                        })}\r\n                                                        onClick={() => {\r\n                                                            toggle1(\"2\")\r\n                                                        }}\r\n                                                    >\r\n                                                        <span className=\"d-block d-sm-none\">\r\n                                                            <i className=\"fas fa-home\"></i>\r\n                                                        </span>\r\n                                                        <span className=\"d-none d-sm-block\">Item Group</span>\r\n\r\n                                                    </NavLink>\r\n                                                </NavItem>\r\n                                                <NavItem>\r\n                                                    <NavLink\r\n                                                        id=\"nave-link-3\"\r\n                                                        style={{ cursor: \"pointer\" }}\r\n                                                        className={classnames({\r\n                                                            active: activeTab1 === \"3\",\r\n                                                        })}\r\n                                                        onClick={() => {\r\n                                                            toggle1(\"3\")\r\n                                                        }}\r\n                                                    >\r\n                                                        <span className=\"d-block d-sm-none\">\r\n                                                            <i className=\"fas fa-home\"></i>\r\n                                                        </span>\r\n                                                        <span className=\"d-none d-sm-block\">Unit Conversions</span>\r\n                                                    </NavLink>\r\n                                                </NavItem>\r\n                                                <NavItem>\r\n                                                    <NavLink\r\n                                                        id=\"nave-link-5\"\r\n                                                        style={{ cursor: \"pointer\" }}\r\n                                                        className={classnames({\r\n                                                            active: activeTab1 === \"4\",\r\n                                                        })}\r\n                                                        onClick={() => {\r\n                                                            toggle1(\"4\")\r\n                                                        }}\r\n                                                    >\r\n                                                        <span className=\"d-block d-sm-none\">\r\n                                                            <i className=\"fas fa-home\"></i>\r\n                                                        </span>\r\n                                                        <span className=\"d-none d-sm-block\">Image</span>\r\n                                                    </NavLink>\r\n                                                </NavItem>\r\n\r\n                                                <NavItem>\r\n                                                    <NavLink\r\n                                                        id=\"nave-link-5\"\r\n                                                        style={{ cursor: \"pointer\" }}\r\n                                                        className={classnames({\r\n                                                            active: activeTab1 === \"5\",\r\n                                                        })}\r\n                                                        onClick={() => {\r\n                                                            toggle1(\"5\")\r\n                                                        }}\r\n                                                    >\r\n                                                        <span className=\"d-block d-sm-none\">\r\n                                                            <i className=\"fas fa-home\"></i>\r\n                                                        </span>\r\n                                                        <span className=\"d-none d-sm-block\">MRP</span>\r\n                                                    </NavLink>\r\n                                                </NavItem>\r\n\r\n                                                <NavItem>\r\n                                                    <NavLink\r\n                                                        id=\"nave-link-6\"\r\n                                                        style={{ cursor: \"pointer\" }}\r\n                                                        className={classnames({\r\n                                                            active: activeTab1 === \"6\",\r\n                                                        })}\r\n                                                        onClick={() => {\r\n                                                            toggle1(\"6\")\r\n                                                        }}\r\n                                                    >\r\n                                                        <span className=\"d-block d-sm-none\">\r\n                                                            <i className=\"fas fa-home\"></i>\r\n                                                        </span>\r\n                                                        <span className=\"d-none d-sm-block\">Margin</span>\r\n                                                    </NavLink>\r\n                                                </NavItem>\r\n\r\n                                                <NavItem>\r\n                                                    <NavLink\r\n                                                        id=\"nave-link-7\"\r\n                                                        style={{ cursor: \"pointer\" }}\r\n                                                        className={classnames({\r\n                                                            active: activeTab1 === \"7\",\r\n                                                        })}\r\n                                                        onClick={() => {\r\n                                                            toggle1(\"7\")\r\n                                                        }}\r\n                                                    >\r\n                                                        <span className=\"d-block d-sm-none\">\r\n                                                            <i className=\"fas fa-home\"></i>\r\n                                                        </span>\r\n                                                        <span className=\"d-none d-sm-block\">GST Details</span>\r\n                                                    </NavLink>\r\n                                                </NavItem>\r\n\r\n                                            </Nav>\r\n\r\n                                            <TabContent activeTab={activeTab1} className=\"p-3 text-muted\">\r\n                                                <TabPane tabId=\"1\">\r\n                                                    <Col md={12}  >\r\n                                                        <Card className=\"text-black\">\r\n                                                            <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                                                                <Row>\r\n\r\n                                                                    <FormGroup className=\"mb-3 col col-sm-4 \" >\r\n                                                                        <Label >Name</Label>\r\n                                                                        <Input type=\"text\" id='txtName0'\r\n                                                                            placeholder=\" Please Enter Name \"\r\n                                                                            defaultValue={EditData.Name}\r\n                                                                            autoComplete=\"off\"\r\n                                                                            // onChange={(e) => { dispatch(Breadcrumb_inputName(e.target.value)) }}\r\n                                                                            onChange={(e) => {\r\n                                                                                dispatch(Breadcrumb_inputName(e.target.value));\r\n                                                                                CommonTab_SimpleText_INPUT_handller_ForAll(e.target.value, \"Name\")\r\n                                                                            }}\r\n\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n\r\n                                                                    <FormGroup className=\"mb-3 col col-sm-4 \" >\r\n                                                                        <Label >ShortName</Label>\r\n                                                                        <Input type=\"text\"\r\n                                                                            id='txtShortName0'\r\n                                                                            className=\"\"\r\n                                                                            defaultValue={EditData.ShortName}\r\n                                                                            placeholder=\" Please Enter ShortName \"\r\n                                                                            autoComplete=\"off\"\r\n                                                                            onChange={(e) => { CommonTab_SimpleText_INPUT_handller_ForAll(e.target.value, \"ShortName\") }}\r\n                                                                        // onChange={(e) => { formValue.ShortName = e.target.value }}\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n\r\n                                                                    <FormGroup className=\" col col-sm-4 \" >\r\n                                                                        <Label htmlFor=\"validationCustom21\">Company</Label>\r\n                                                                        <Select\r\n                                                                            id='dropCompany-0'\r\n                                                                            value={formValue.Company}\r\n                                                                            options={Company_DropdownOptions}\r\n                                                                            styles={{\r\n                                                                                control: base => ({\r\n                                                                                    ...base,\r\n                                                                                    border: inValidDrop.Company ? '1px solid red' : '',\r\n\r\n                                                                                })\r\n                                                                            }}\r\n                                                                            onChange={(event) => dropDownValidation(event, \"Company\")}\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n\r\n                                                                </Row>\r\n\r\n                                                                <Row>\r\n                                                                    <FormGroup className=\" col col-sm-4 \" >\r\n                                                                        <Label htmlFor=\"validationCustom21\">Base Unit</Label>\r\n                                                                        <Select\r\n                                                                            id='dropBaseUnit-0'\r\n                                                                            value={formValue.BaseUnit}\r\n                                                                            options={BaseUnit_DropdownOptions}\r\n                                                                            isDisabled={pageMode === \"edit\" ? true : false}\r\n                                                                            styles={{\r\n                                                                                control: base => ({\r\n                                                                                    ...base,\r\n                                                                                    border: inValidDrop.BaseUnit ? '1px solid red' : '',\r\n\r\n                                                                                })\r\n                                                                            }}\r\n                                                                            onChange={(event) => dropDownValidation(event, \"BaseUnit\")}\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n\r\n                                                                    <FormGroup className=\"mb-3 col col-sm-4 \" >\r\n                                                                        <Label htmlFor=\"validationCustom01\">BarCode</Label>\r\n                                                                        <Input\r\n                                                                            id='txtBarCode0'\r\n                                                                            placeholder=\" Please Enter BarCode \"\r\n                                                                            defaultValue={EditData.BarCode}\r\n                                                                            autoComplete=\"off\"\r\n                                                                            onChange={(e) => { CommonTab_SimpleText_INPUT_handller_ForAll(e.target.value, \"BarCode\") }}\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n\r\n                                                                    <FormGroup className=\"mb-3 col col-sm-4 \" >\r\n                                                                        <Label htmlFor=\"validationCustom01\">Sequence</Label>\r\n                                                                        <Input\r\n                                                                            id='txtSequence0'\r\n                                                                            defaultValue={EditData.Sequence}\r\n                                                                            placeholder=\" Please Enter Sequence \"\r\n                                                                            autoComplete=\"off\"\r\n                                                                            onChange={(e) => { CommonTab_SimpleText_INPUT_handller_ForAll(e.target.value, \"Sequence\") }}\r\n                                                                        // onChange={(e) => { formValue.Sequence = e.target.value }}\r\n                                                                        />\r\n\r\n                                                                    </FormGroup>\r\n                                                                </Row>\r\n\r\n                                                                <Row>\r\n                                                                    <FormGroup className=\"mb-3 col col-sm-4 \">\r\n                                                                        <Label>Category Type</Label>\r\n                                                                        <Select\r\n                                                                            id={`dropCategoryType-${0}`}\r\n                                                                            value={formValue.CategoryType}\r\n                                                                            options={CategoryTypeList_DropdownOptions}\r\n                                                                            styles={{\r\n                                                                                control: base => ({\r\n                                                                                    ...base,\r\n                                                                                    border: inValidDrop.CategoryType ? '1px solid red' : '',\r\n\r\n                                                                                })\r\n                                                                            }}\r\n                                                                            onChange={(e) => { CategoryType_Handler(e) }}\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n\r\n\r\n                                                                    <FormGroup className=\"mb-3 col col-sm-4 \">\r\n\r\n                                                                        <Label className=\"form-label font-size-13 \">Category</Label>\r\n                                                                        <Select\r\n                                                                            defaultValue={formValue.Category}\r\n                                                                            isMulti={true}\r\n                                                                            className=\"basic-multi-select\"\r\n                                                                            options={CategoryList_DropdownOptions}\r\n                                                                            styles={{\r\n                                                                                control: base => ({\r\n                                                                                    ...base,\r\n                                                                                    border: inValidDrop.Category ? '1px solid red' : '',\r\n\r\n                                                                                })\r\n                                                                            }}\r\n                                                                            onChange={(e) => { Category_Handler(e) }}\r\n                                                                            classNamePrefix=\"select2-selection\"\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n\r\n                                                                </Row>\r\n\r\n                                                                <Row>\r\n                                                                    <FormGroup className=\"mb-3 col col-sm-4 \">\r\n                                                                        <div className=\"mb-3\">\r\n                                                                            <Label className=\"form-label font-size-13 \">Division</Label>\r\n                                                                            <Select\r\n                                                                                defaultValue={formValue.Division}\r\n                                                                                isMulti={true}\r\n                                                                                className=\"basic-multi-select\"\r\n                                                                                options={Division_DropdownOptions}\r\n                                                                                styles={{\r\n                                                                                    control: base => ({\r\n                                                                                        ...base,\r\n                                                                                        border: (inValidDrop.Division) ? '1px solid red' : '',\r\n\r\n                                                                                    })\r\n                                                                                }}\r\n                                                                                onChange={(e) => { Division_Handler(e) }}\r\n                                                                                classNamePrefix=\"select2-selection\"\r\n                                                                            />\r\n                                                                        </div>\r\n                                                                    </FormGroup>\r\n                                                                    <FormGroup className=\"mt-4 col col-md-5\">\r\n                                                                        <Row className=\"justify-content-ml-left \">\r\n                                                                            <Label htmlFor=\"horizontal-firstname-input\"\r\n                                                                                className=\"col-md-2 col-form-label\" >Active </Label>\r\n                                                                            <Col md={6} style={{ marginTop: '9px' }} >\r\n\r\n                                                                                <div className=\"form-check form-switch form-switch-md mb-3\" dir=\"ltr\">\r\n                                                                                    <Input type=\"checkbox\" className=\"form-check-input\" id=\"customSwitchsizemd\"\r\n                                                                                        defaultChecked={formValue.isActive}\r\n                                                                                        onChange={(e) => { formValue.isActive = e.target.checked }}\r\n\r\n                                                                                    />\r\n                                                                                </div>\r\n                                                                            </Col>\r\n                                                                        </Row>\r\n                                                                    </FormGroup>\r\n                                                                </Row>\r\n\r\n\r\n                                                            </CardBody>\r\n                                                        </Card>\r\n                                                    </Col>\r\n\r\n                                                </TabPane>\r\n\r\n                                                <TabPane tabId=\"2\">\r\n                                                    <Row>\r\n                                                        <Col md={12}  >\r\n                                                            <Row className=\"mt-3\">\r\n                                                                <Col className=\" col col-12 \">\r\n                                                                    <GroupTab tableData={Group_Tab_TableData} func={setGroup_Tab_TableData} />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </TabPane>\r\n                                                <TabPane tabId=\"3\">\r\n                                                    <Col md={12}>\r\n                                                        <Row>\r\n                                                            <Col md={12}  >\r\n                                                                <Card className=\"text-black\">\r\n                                                                    <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n\r\n                                                                        <Row>\r\n                                                                            <FormGroup className=\" col col-sm-4 \" >\r\n                                                                                <Label >Base Unit</Label>\r\n                                                                                <Select\r\n                                                                                    id={`dropBaseUnit-0`}\r\n                                                                                    placeholder=\"Select...\"\r\n                                                                                    value={formValue.BaseUnit}\r\n                                                                                    isDisabled={pageMode === \"edit\" ? true : false}\r\n                                                                                    options={BaseUnit_DropdownOptions}\r\n                                                                                    onChange={(e) => Common_DropDown_handller_ForAll(e, \"BaseUnit\", 0)}\r\n                                                                                />\r\n                                                                            </FormGroup>\r\n                                                                        </Row>\r\n\r\n                                                                        {!(formValue.BaseUnit.value === 0)\r\n                                                                            ? <Row className=\"mt-3\">\r\n                                                                                <Col md={8}><Table className=\"table table-bordered  \">\r\n                                                                                    <Thead >\r\n                                                                                        <tr>\r\n                                                                                            <th className=\"col-sm-3\">Unit Name</th>\r\n                                                                                            <th className=\"col-sm-3 text-center\">Conversion To Base Unit </th>\r\n                                                                                            <th className=\"col-sm-2\">Action</th>\r\n                                                                                        </tr>\r\n                                                                                    </Thead>\r\n                                                                                    <Tbody  >\r\n                                                                                        {baseUnitTableData.map((TableValue, key) => (\r\n\r\n                                                                                            <tr >\r\n                                                                                                <td>\r\n                                                                                                    <Row>\r\n                                                                                                        <Label className=\" col-sm-2 col-form-label\">1</Label>\r\n                                                                                                        <Col md={7}>\r\n                                                                                                            <Select\r\n                                                                                                                id={`dropUnit-${key}`}\r\n                                                                                                                placeholder=\"Select...\"\r\n                                                                                                                value={baseUnitTableData[key].Unit}\r\n                                                                                                                options={BaseUnit_DropdownOptions2}\r\n                                                                                                                onChange={(e) => UnitConversionsTab_BaseUnit2_onChange_Handller(e, \"Unit\", key)}\r\n                                                                                                            />\r\n                                                                                                        </Col>\r\n                                                                                                        < Label className=\" col-sm-3 col-form-label\">=</Label>\r\n                                                                                                    </Row>\r\n                                                                                                </td>\r\n                                                                                                <td>\r\n                                                                                                    <Row>\r\n                                                                                                        <Col>\r\n                                                                                                            <Input\r\n                                                                                                                type=\"text\"\r\n                                                                                                                id={`txtConversion${key}`}\r\n                                                                                                                placeholder=\"Select...\"\r\n                                                                                                                autoComplete=\"off\"\r\n                                                                                                                value={baseUnitTableData[key].Conversion}\r\n                                                                                                                onChange={(e) => UnitConversionsTab_BaseUnit2_onChange_Handller(e, \"Conversion\", key,)}>\r\n\r\n                                                                                                            </Input>\r\n                                                                                                        </Col>\r\n                                                                                                        <Label className=\" col-sm-4 col-form-label\"> {formValue.BaseUnit.label}</Label>\r\n                                                                                                    </Row>\r\n                                                                                                </td>\r\n\r\n                                                                                                <td>\r\n                                                                                                    {(baseUnitTableData.length === key + 1) ?\r\n                                                                                                        <Row className=\"\">\r\n                                                                                                            <Col md={6} className=\" mt-3\">\r\n                                                                                                                {(baseUnitTableData.length > 1) ? <>\r\n                                                                                                                    < i className=\"mdi mdi-trash-can d-block text-danger font-size-20\" onClick={() => {\r\n                                                                                                                        UnitConversionsTab_DeleteRow_Handler(key)\r\n                                                                                                                    }} >\r\n                                                                                                                    </i>\r\n                                                                                                                </> : <Col md={6} ></Col>}\r\n\r\n                                                                                                            </Col>\r\n\r\n                                                                                                            <Col md={6} >\r\n                                                                                                                <Button className=\"btn btn-sm btn-light mt-3   align-items-sm-end\"\r\n                                                                                                                    type=\"button\"\r\n                                                                                                                    onClick={() => { UnitConversionsTab_AddRow_Handle(key) }} >\r\n                                                                                                                    <i className=\"dripicons-plus\"></i>\r\n                                                                                                                </Button>\r\n                                                                                                            </Col>\r\n                                                                                                        </Row>\r\n                                                                                                        :\r\n\r\n                                                                                                        < i className=\"mdi mdi-trash-can d-block text-danger font-size-20\" onClick={() => {\r\n                                                                                                            UnitConversionsTab_DeleteRow_Handler(key)\r\n                                                                                                        }} >\r\n                                                                                                        </i>\r\n                                                                                                    }\r\n                                                                                                </td>\r\n\r\n                                                                                            </tr>\r\n                                                                                        ))}\r\n                                                                                    </Tbody>\r\n                                                                                </Table>\r\n                                                                                </Col>\r\n                                                                            </Row>\r\n                                                                            :\r\n                                                                            <Row className=\"mt-3\">\r\n                                                                                <br></br>\r\n                                                                                <Label className=\"text-danger\">Please select BaseUnit</Label></Row>}\r\n                                                                    </CardBody>\r\n                                                                </Card>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </Col>\r\n                                                </TabPane>\r\n\r\n                                                <TabPane tabId=\"4\">\r\n                                                    <Col md={12} >\r\n                                                        <Card className=\"text-black\">\r\n                                                            <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n\r\n                                                                {imageTabTable.map((index, key) => {\r\n                                                                    return <Row className=\" col col-sm-11\" >\r\n                                                                        <FormGroup className=\"mb-3 col col-sm-4 \" >\r\n                                                                            <Label htmlFor=\"validationCustom21\">Image Type</Label>\r\n                                                                            <Select\r\n                                                                                value={imageTabTable[key].ImageType}\r\n                                                                                options={ImageType_DropdownOptions}\r\n                                                                                onChange={(e) => { ImageTab_onChange_Handler(e, key, \"ImageType\") }}\r\n                                                                            />\r\n                                                                        </FormGroup>\r\n\r\n                                                                        <FormGroup className=\"mb-3 col col-sm-4 \" >\r\n                                                                            <Label >Upload</Label>\r\n                                                                            <Input type=\"file\" className=\"form-control col col-sm-4 \"\r\n                                                                                value={imageTabTable.ImageUpload}\r\n                                                                                // value={\"C:\\fakepath\\cropper.jpg\"}\r\n                                                                                onChange={(e) => ImageTab_onChange_Handler(e, key, \"ImageUpload\")} />\r\n                                                                        </FormGroup>\r\n\r\n\r\n                                                                        <Col md={1}>\r\n                                                                            {(imageTabTable.length === key + 1) ?\r\n                                                                                <Row className=\" mt-3\">\r\n                                                                                    <Col md={6} className=\" mt-3\">\r\n                                                                                        {(imageTabTable.length > 1)\r\n                                                                                            ?\r\n                                                                                            < i className=\"mdi mdi-trash-can d-block text-danger font-size-20\" onClick={() => {\r\n                                                                                                ImageTab_DeleteRow_Handler(key)\r\n                                                                                            }} >\r\n                                                                                            </i>\r\n                                                                                            : <Col md={6} ></Col>\r\n                                                                                        }\r\n\r\n                                                                                    </Col>\r\n\r\n                                                                                    <Col md={6}>\r\n                                                                                        <Button className=\"btn btn-sm mt-3 btn-light  btn-outline-primary  align-items-sm-end\"\r\n                                                                                            type=\"button\"\r\n                                                                                            onClick={() => { ImageTab_AddRow_Handler(key) }} >\r\n                                                                                            <i className=\"dripicons-plus\"></i>Add\r\n                                                                                        </Button>\r\n                                                                                    </Col>\r\n                                                                                </Row>\r\n                                                                                :\r\n                                                                                <Row className=\"mt-3\">\r\n                                                                                    < i className=\"mdi mdi-trash-can d-block text-danger font-size-20 mt-3\" onClick={() => {\r\n                                                                                        ImageTab_DeleteRow_Handler(key)\r\n                                                                                    }} >\r\n                                                                                    </i>\r\n                                                                                </Row>\r\n                                                                            }\r\n\r\n                                                                        </Col>\r\n                                                                    </Row>\r\n                                                                })}\r\n                                                            </CardBody>\r\n                                                        </Card>\r\n                                                    </Col>\r\n                                                    <Row>\r\n                                                    </Row>\r\n                                                </TabPane>\r\n\r\n                                                <TabPane tabId=\"5\">\r\n                                                    <Row>\r\n                                                        <Col md={12}  >\r\n                                                            <Row className=\"mt-3\">\r\n                                                                <Col className=\" col col-12 \">\r\n                                                                    <MRPTab tableData={MRP_Tab_TableData} func={setMRP_Tab_TableData} />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </TabPane>\r\n\r\n                                                <TabPane tabId=\"6\">\r\n\r\n                                                    <Row>\r\n                                                        <Col md={12}  >\r\n                                                            <Row className=\"mt-3\">\r\n                                                                <Col className=\" col col-12 \">\r\n                                                                    <Margin_Tab tableData={marginMaster} func={setMarginMaster} />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Col>\r\n                                                    </Row>\r\n\r\n                                                </TabPane>\r\n\r\n                                                <TabPane tabId=\"7\">\r\n                                                    <Row>\r\n                                                        <Col md={12}  >\r\n                                                            <Row className=\"mt-3\">\r\n                                                                <Col className=\" col col-12 \">\r\n                                                                    <GSTTab tableData={GStDetailsMaster} func={setGStDetailsMaster} />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </TabPane>\r\n                                            </TabContent>\r\n                                            <Row >\r\n                                                <Col sm={2}>\r\n                                                    <div className=\"\">\r\n                                                        {\r\n                                                            pageMode === \"edit\" ?\r\n                                                                userPageAccessState.RoleAccess_IsEdit ?\r\n                                                                    <button\r\n                                                                        type=\"submit\"\r\n                                                                        data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Update Role\"\r\n                                                                        className=\"btn btn-success w-md\"\r\n                                                                    >\r\n                                                                        <i class=\"fas fa-edit me-2\"></i>Update\r\n                                                                    </button>\r\n                                                                    :\r\n                                                                    <></>\r\n                                                                : (\r\n                                                                    userPageAccessState.RoleAccess_IsSave ?\r\n                                                                        <button\r\n                                                                            type=\"submit\"\r\n                                                                            data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Save Role\"\r\n                                                                            className=\"btn btn-primary w-md\"\r\n                                                                        > <i className=\"fas fa-save me-2\"></i> Save\r\n                                                                        </button>\r\n                                                                        :\r\n                                                                        <></>\r\n                                                                )\r\n                                                        }\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </CardBody>\r\n                                    </Card>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                        </AvForm>\r\n                    </Container>\r\n                </div >\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\nexport default ItemsMaster;\r\n\r\n\r\n\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\EmployeeTypes\\EmployeeTypesMaster.js",["1392","1393","1394","1395","1396","1397"],"import React, { useEffect, useRef, useState, } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport {\r\n    editEmployeeTypeSuccess,\r\n    PostEmployeeTypeSubmit,\r\n    PostEmployeeTypeSubmitSuccess,\r\n    updateEmployeeTypeID,\r\n    updateEmployeeTypeIDSuccess\r\n} from \"../../../store/Administrator/EmployeeTypeRedux/action\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    AlertState,\r\n    commonPageField,\r\n    commonPageFieldSuccess\r\n} from \"../../../store/actions\";\r\nimport { Breadcrumb_inputName } from \"../../../store/actions\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeText\r\n} from \"../../../components/Common/CmponentRelatedCommonFile/validationFunction\";\r\nimport { EMPLOYEETYPE_lIST } from \"../../../routes/route_url\";\r\nimport SaveButton from \"../../../components/Common/CommonSaveButton\";\r\n\r\n\r\nconst EmployeeTypesMaster = (props) => {\r\n\r\n    const formRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n    const history  = useHistory()\r\n\r\n    const [pageMode, setPageMode] = useState();\r\n    const [userPageAccessState, setUserPageAccessState] = useState('');\r\n    const [modalCss, setModalCss] = useState(false);\r\n\r\n    const initialFiled = {\r\n        id: \"\",\r\n        Name: \"\",\r\n        IsPartyConnection: false,\r\n        IsSCM: false\r\n      }\r\n    \r\n    const [state, setState] = useState(initialFiledFunc(initialFiled))\r\n  \r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { postMsg, updateMsg ,pageField, userAccess, } = useSelector((state) => ({\r\n        postMsg: state.EmployeeTypeReducer.PostEmployeeType,\r\n        updateMsg: state.EmployeeTypeReducer.updateMessage,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField\r\n    }));\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(\"editValue\")\r\n    const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(115))\r\n    }, []);\r\n\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserPageAccessState(userAcc)\r\n        };\r\n    }, [userAccess])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        // if (!(userPageAccessState === '')) { document.getElementById(\"txtName\").focus(); }\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n                const { id, Name, IsPartyConnection, IsSCM } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n                values.Name = Name;\r\n                values.IsPartyConnection = IsPartyConnection;\r\n                values.IsSCM = IsSCM;\r\n                values.id = id\r\n                hasValid.Name.valid = true;\r\n                hasValid.IsSCM.valid = true;\r\n                hasValid.IsPartyConnection.valid = true;\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n            }\r\n            dispatch(editEmployeeTypeSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200) && !(pageMode === \"dropdownAdd\")) {\r\n\r\n            dispatch(PostEmployeeTypeSubmitSuccess({ Status: false }))\r\n            formRef.current.reset();\r\n            if (pageMode === \"dropdownAdd\") {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                }))\r\n            }\r\n            else {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                    RedirectPath: EMPLOYEETYPE_lIST,\r\n\r\n                }))\r\n            }\r\n        }\r\n        else if ((postMsg.Status === true) && !(pageMode === \"dropdownAdd\")) {\r\n            dispatch(PostEmployeeTypeSubmitSuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(postMsg.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            history.push({\r\n                pathname: EMPLOYEETYPE_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateEmployeeTypeIDSuccess({ Status: false }));\r\n            dispatch(\r\n                AlertState({\r\n                    Type: 3,\r\n                    Status: true,\r\n                    Message: JSON.stringify(updateMsg.Message),\r\n                })\r\n            );\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n\r\n    const formSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        if (formValid(state, setState)) {\r\n            const jsonBody = JSON.stringify({\r\n                Name: values.Name,\r\n                IsPartyConnection: values.IsPartyConnection,\r\n                IsSCM: values.IsSCM,\r\n                Description: \"sfasfgasd\",\r\n                CreatedBy: 1,\r\n                CreatedOn: \"2022-07-18T00:00:00\",\r\n                UpdatedBy: 1,\r\n                UpdatedOn: \"2022-07-18T00:00:00\"\r\n            });\r\n\r\n            if (pageMode === \"edit\") {\r\n                dispatch(updateEmployeeTypeID(jsonBody, values.id));\r\n            }\r\n            else {\r\n                dispatch(PostEmployeeTypeSubmit(jsonBody));\r\n            }\r\n        }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <MetaTags>\r\n                        <title>{userPageAccessState.PageHeading}| FoodERP-React FrontEnd</title>\r\n                    </MetaTags>\r\n                    <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n                    <Container fluid>\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form onSubmit={formSubmitHandler} ref={formRef} noValidate>\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Name} </Label>\r\n                                                            <Input\r\n                                                                name=\"Name\"\r\n                                                                id=\"txtName\"\r\n                                                                value={values.Name}\r\n                                                                type=\"text\"\r\n                                                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                placeholder=\"Please Enter Name\"\r\n                                                                autoComplete='off'\r\n                                                                autoFocus={true}\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.Name.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n\r\n                                                        <Row>\r\n                                                            <FormGroup className=\"mb-2 col col-sm-5\">\r\n                                                                <Row className=\"justify-content-md-left\">\r\n                                                                    <Label htmlFor=\"horizontal-firstname-input\" className=\"col-sm-5 col-form-label\" >{fieldLabel.IsPartyConnection}</Label>\r\n                                                                    <Col md={2} style={{ marginTop: '9px' }}>\r\n                                                                        <div className=\"form-check form-switch form-switch-md mb-3\" >\r\n                                                                            <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                                 checked={values.IsPartyConnection}\r\n                                                                                name=\"IsPartyConnection\"\r\n                                                                                onChange={(event) => onChangeText({ event, state, setState })}\r\n                                                                            />\r\n                                                                        </div>\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                            </FormGroup>\r\n                                                        </Row>\r\n\r\n                                                        <Row>\r\n                                                            <FormGroup className=\"mb-2 col col-sm-5\">\r\n                                                                <Row className=\"justify-content-md-left\">\r\n                                                                    <Label htmlFor=\"horizontal-firstname-input\" className=\"col-sm-5 col-form-label\" >{fieldLabel.IsSCM} </Label>\r\n                                                                    <Col md={2} style={{ marginTop: '9px' }} >\r\n                                                                    <div className=\"form-check form-switch form-switch-md mb-3\" >\r\n                                                                            <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                                 checked={values.IsSCM}\r\n                                                                                name=\"IsSCM\"\r\n                                                                                onChange={(event) => onChangeText({ event, state, setState })}\r\n                                                                            />\r\n                                                                        </div>\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                            </FormGroup>\r\n\r\n                                                        </Row>\r\n                                                        <FormGroup >\r\n                                                            <Row >\r\n                                                                <Col sm={2}>\r\n                                                                    <SaveButton pageMode={pageMode} userAcc={userPageAccessState}\r\n                                                                        module={\"EmployeeTypesMaster\"}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default EmployeeTypesMaster\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\EmployeeTypes\\EmployeeTypeList.js",["1398"],"import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  deleteEmployeeTypeIDSuccess,\r\n  delete_EmployeeType_ID,\r\n  editEmployeeTypeId,\r\n  getEmployeeTypelist,\r\n  PostEmployeeTypeSubmitSuccess,\r\n  updateEmployeeTypeIDSuccess\r\n} from \"../../../store/Administrator/EmployeeTypeRedux/action\";\r\nimport EmployeeTypesMaster from \"./EmployeeTypesMaster\";\r\nimport CommonListPage from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport {  commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport { EMPLOYEETYPE } from \"../../../routes/route_url\";\r\n\r\n\r\nconst EmployeeTypeList = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      tableList: state.EmployeeTypeReducer.EmployeeTypeList,\r\n      editData: state.EmployeeTypeReducer.editData,\r\n      updateMsg: state.EmployeeTypeReducer.updateMessage,\r\n      deleteMsg: state.EmployeeTypeReducer.deleteMessage,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      postMsg: state.EmployeeTypeReducer.PostEmployeeType,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: getEmployeeTypelist,\r\n    editId: editEmployeeTypeId,\r\n    deleteId: delete_EmployeeType_ID,\r\n    postSucc: PostEmployeeTypeSubmitSuccess,\r\n    updateSucc: updateEmployeeTypeIDSuccess,\r\n    deleteSucc: deleteEmployeeTypeIDSuccess\r\n  }\r\n\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(116))\r\n    dispatch(getEmployeeTypelist());\r\n  }, []);\r\n\r\n  const { pageField } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        (pageField) ?\r\n          <CommonListPage\r\n            action={action}\r\n            reducers={reducers}\r\n            MasterModal={EmployeeTypesMaster}\r\n            masterPath={EMPLOYEETYPE}\r\n            ButtonMsgLable={\"Employee Type\"}\r\n            deleteName={\"Name\"}\r\n          />\r\n          : null\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default EmployeeTypeList;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\RoleAccessPages\\RoleAccessAdd.js",["1399","1400","1401","1402","1403","1404","1405","1406","1407","1408","1409","1410","1411","1412","1413","1414","1415","1416","1417","1418","1419","1420","1421","1422","1423","1424","1425","1426","1427"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport { Card, CardBody, Col, Container, Row, Label, Input, CardHeader, FormGroup, Button, Table, } from \"reactstrap\";\r\nimport { AvForm, AvGroup, AvField, AvInput } from \"availity-reactstrap-validation\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AlertState } from \"../../../store/Utilites/CustomAlertRedux/actions\";\r\nimport Select from \"react-select\";\r\nimport {\r\n    editPartyIDSuccess, getDistrictOnState, getDistrictOnStateSuccess, getDivisionTypesID,\r\n    getPartyListAPI,\r\n    GetPartyTypeByDivisionTypeID, postPartyData, postPartyDataSuccess, updatePartyID\r\n} from \"../../../store/Administrator/PartyRedux/action\";\r\nimport { Tbody, Thead } from \"react-super-responsive-table\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\n// import { getRoles } from \"../../../store/Administrator/UserRegistrationRedux/actions\";\r\nimport { AddPageHandlerForRoleAccessListPage, GetHpageListData, getH_Modules, getPageAccess_DropDown_API, GetRoleListForRoleAccessListPage, getRoles, GO_Button_HandlerForRoleAccessListPage, GO_Button_HandlerForRoleAccessListPage_Success, PageDropdownForRoleAccessList, PageDropdownForRoleAccessList_Success, PageMasterForRoleAccessLit, PostMethodForRoleAccessListPage, PostMethod_ForRoleAccessListPage_Success, roleAceessAction } from \"../../../store/actions\";\r\nimport { fetchModelsList } from \"../../../store/actions\";\r\n\r\nimport { useHistory, useLocation, useParams } from \"react-router-dom\";\r\nimport { CommonGetRoleAccessFunction } from \"../../../components/Common/CommonGetRoleAccessFunction\";\r\nimport \"./table-fixed.scss\"\r\nconst RoleAccessAdd = (props) => {\r\n\r\n    const formRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    const [userPageAccessState, setUserPageAccessState] = useState('11');\r\n\r\n    const [tableListData, setTableListData] = useState([])\r\n    const [tableHederList, setTableHederList] = useState([])\r\n    const [showTableOnUI, setShowTableOnUI] = useState(false)\r\n\r\n    const [division_dropdown_Select, setDivision_dropdown_Select] = useState({ label: \"Select...\", value: 0 });\r\n    const [role_dropdown_Select, setRoleDropDown] = useState(\"\");\r\n    const [module_DropdownSelect, setModule_DropdownSelect] = useState('');\r\n    const [page_DropdownSelect, setPage_DropdownSelect] = useState({ value: 0, label: \"All Pages\" });\r\n\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n\r\n    const {\r\n        PageAccess,\r\n        ModuleData,\r\n        PageDropdownForRoleAccess,\r\n        AddPage_PageMasterListForRoleAccess_Redux,\r\n        GO_buttonPageMasterListForRoleAccess_Redux,\r\n        PostMessage_ForRoleAccessList,\r\n        Roles,\r\n        PartyTypes,\r\n        RoleAccessModifiedinSingleArray\r\n    } = useSelector((state) => ({\r\n        PartySaveSuccess: state.PartyMasterReducer.PartySaveSuccess,\r\n        companyList: state.Company.companyList,\r\n        PartyTypes: state.PartyMasterReducer.partyList,\r\n        Roles: state.User_Registration_Reducer.Roles,\r\n        ModuleData: state.Modules.modulesList,\r\n        PageAccess: state.H_Pages.PageAccess,\r\n        PageDropdownForRoleAccess: state.RoleAccessReducer.PageDropdownForRoleAccess,\r\n        AddPage_PageMasterListForRoleAccess_Redux: state.RoleAccessReducer.AddPage_PageMasterListForRoleAccess,\r\n        GO_buttonPageMasterListForRoleAccess_Redux: state.RoleAccessReducer.GO_buttonPageMasterListForRoleAccess,\r\n        PostMessage_ForRoleAccessList: state.RoleAccessReducer.PostMessage_ForRoleAccessList,\r\n        RoleAccessModifiedinSingleArray: state.Login.RoleAccessUpdateData,\r\n    }));\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const editDataGatingFromList = history.location.state\r\n\r\n        const locationPath = history.location.pathname\r\n        let userAcc = RoleAccessModifiedinSingleArray.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        debugger\r\n        if (!(editDataGatingFromList === undefined)) {\r\n\r\n            var divisionid = editDataGatingFromList.Division_id\r\n            var companyid = editDataGatingFromList.company\r\n            var roleid = editDataGatingFromList.Role_id\r\n            var roleName = editDataGatingFromList.RoleName\r\n            var divisionName = editDataGatingFromList.DivisionName\r\n\r\n            if (roleid > 0) {\r\n                dispatch(GO_Button_HandlerForRoleAccessListPage(roleid, divisionid));\r\n                setShowTableOnUI(true)\r\n                setRoleDropDown({ label: roleName, value: roleid })\r\n                setDivision_dropdown_Select({ label: divisionName, value: divisionid })\r\n            }\r\n        }\r\n        if (!(userAcc === undefined)) {\r\n            setUserPageAccessState(userAcc)\r\n        }\r\n    }, [RoleAccessModifiedinSingleArray])\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(GO_Button_HandlerForRoleAccessListPage_Success([]))\r\n        dispatch(getPartyListAPI());//for division dropdown API\r\n        dispatch(getRoles());//for Role  dropdown API\r\n        dispatch(fetchModelsList())//for Modules  dropdown API\r\n        dispatch(getPageAccess_DropDown_API());//for Page Access  API from pages saga file\r\n        dispatch(PageDropdownForRoleAccessList_Success([]))// for clear page dropdown clear  list when first rendring\r\n\r\n        // dispatch(GetHpageListData())\r\n        // dispatch(fetchCompanyList());\r\n        // dispatch(getDivisionTypesID());\r\n        // dispatch(PageMasterForRoleAccessLit(1));\r\n        // dispatch(roleAceessAction(1, 1, 1))\r\n\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        var Array = []\r\n        var eleList = {}\r\n\r\n        let count1 = 0\r\n        GO_buttonPageMasterListForRoleAccess_Redux.map((indexdata) => {\r\n\r\n            count1 = count1 + 1\r\n\r\n            eleList = indexdata;\r\n            eleList[\"ID\"] = count1;\r\n\r\n            Array.push(eleList)\r\n            eleList = {}\r\n\r\n        })\r\n\r\n        setTableListData(Array)\r\n        // console.log(\"GO_buttonPageMasterListForRoleAccess\", JSON.stringify(GO_buttonPageMasterListForRoleAccess_Redux))\r\n\r\n\r\n    }, [GO_buttonPageMasterListForRoleAccess_Redux])\r\n\r\n    useEffect(() => {\r\n\r\n        var Array = []\r\n        var eleList = {}\r\n        let NewID = tableListData.length + 1\r\n        let previousData = tableListData\r\n        // debugger\r\n\r\n        // AddPage_PageMasterListForRoleAccess.map((indexdata) => {\r\n        let indexdata = AddPage_PageMasterListForRoleAccess_Redux[0]\r\n        // let found =previousData.find((inx)=>{return inx.PageID===indexdata.PageID})\r\n        if (!(indexdata === undefined)) {\r\n            eleList = indexdata\r\n            eleList[\"ID\"] = NewID;\r\n            Array.push(eleList)\r\n            // eleList = {}\r\n\r\n            previousData = previousData.concat(Array)\r\n            setTableListData(previousData)\r\n        }\r\n        // console.log(\"AddPage_PageMasterListForRoleAccess\", JSON.stringify(AddPage_PageMasterListForRoleAccess_Redux))\r\n\r\n    }, [AddPage_PageMasterListForRoleAccess_Redux])\r\n\r\n    useEffect(() => {\r\n\r\n        var NewColoumList = PageAccess.map((i) => {\r\n            return ({\r\n                text: i.Name,\r\n                dataField: i.Name,\r\n            }\r\n            )\r\n        })\r\n        RoleAccessListColoums = RoleAccessListColoums.concat(NewColoumList)\r\n        setTableHederList(RoleAccessListColoums)\r\n    }, [PageAccess])\r\n\r\n    useEffect(() => {\r\n        if ((PostMessage_ForRoleAccessList.Status === true) && (PostMessage_ForRoleAccessList.StatusCode === 200)) {\r\n            dispatch(PostMethod_ForRoleAccessListPage_Success({ Status: false }))\r\n            // GoButton_Handler()\r\n            dispatch(AlertState({\r\n                Type: 1,\r\n                Status: true,\r\n                Message: PostMessage_ForRoleAccessList.Message,\r\n                AfterResponseAction: false\r\n            }))\r\n        }\r\n        else if (PostMessage_ForRoleAccessList.Status === true) {\r\n            dispatch(PostMethod_ForRoleAccessListPage_Success({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(PostMessage_ForRoleAccessList.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [PostMessage_ForRoleAccessList])\r\n\r\n    let RoleAccessListColoums = [\r\n\r\n        {\r\n            text: \"Module Name\",\r\n            dataField: \"ModuleName\",\r\n        },\r\n        {\r\n            text: \"PageName\",\r\n            dataField: \"PageName\",\r\n        }\r\n    ]\r\n\r\n\r\n    const DivisionTypesValues = PartyTypes.map((Data) => ({\r\n        value: Data.id,\r\n        label: Data.Name\r\n    }));\r\n\r\n    const Role_DropdownOption = Roles.map((Data) => ({\r\n        value: Data.id,\r\n        label: Data.Name\r\n    }));\r\n\r\n\r\n    const Module_DropdownOption = ModuleData.map((d) => ({\r\n        value: d.id,\r\n        label: d.Name,\r\n    }));\r\n\r\n    // for Page dropdown\r\n    const Page_DropdownOption = PageDropdownForRoleAccess.map((d) => ({\r\n        value: d.id,\r\n        label: d.Name,\r\n    }));\r\n    // console.log(\"PageDropdownForRoleAccess\",PageDropdownForRoleAccess)\r\n\r\n    /// Role dopdown\r\n    function RoleDropDown_select_handler(e) {\r\n        setRoleDropDown(e)\r\n    };\r\n\r\n\r\n    function handllerDivisionTypes(e) {\r\n        setDivision_dropdown_Select(e)\r\n        dispatch(GetPartyTypeByDivisionTypeID(e.value))\r\n    }\r\n\r\n    // for module dropdown\r\n    const Module_DropdownSelectHandller = (e) => {\r\n        var module = e.value;\r\n        var division = division_dropdown_Select.value\r\n        setModule_DropdownSelect(e);\r\n        setPage_DropdownSelect({ value: 0, label: \"All Pages\" })\r\n        dispatch(PageDropdownForRoleAccessList(module, division));\r\n    }\r\n\r\n    const Page_DropdownSelectHandller = (e) => {\r\n        setPage_DropdownSelect(e);\r\n    }\r\n\r\n    const GoButton_Handler = () => {\r\n\r\n        var division = division_dropdown_Select.value\r\n        var role = role_dropdown_Select.value\r\n        if (division === undefined) {\r\n            division = 0\r\n        }\r\n        if (role > 0) {\r\n            dispatch(GO_Button_HandlerForRoleAccessListPage(role, division));\r\n            setShowTableOnUI(true)\r\n        }\r\n        // console.log(\"role\", role)\r\n        // else {\r\n        //     dispatch(AlertState({\r\n        //         Type: 4,\r\n        //         Status: true,\r\n        //         Message: role > 0 ? \"Please Select Division\" : \"Please Select Role\",\r\n        //         RedirectPath: false,\r\n        //         AfterResponseAction: false\r\n        //     }));\r\n        // }\r\n    }\r\n\r\n    const AddPageButton_Handeler = () => {\r\n\r\n        let selectePageID = page_DropdownSelect.value\r\n\r\n        if (selectePageID === 0) {\r\n            var pageId = 0\r\n            PageDropdownForRoleAccess.forEach((i) => {\r\n                pageId = i.id\r\n                let found = tableListData.find((inx) => { return inx.PageID === pageId })\r\n                if ((found === undefined) && !(pageId === 0)) {\r\n                    dispatch(AddPageHandlerForRoleAccessListPage(pageId));\r\n                }\r\n            })\r\n        }\r\n        else {\r\n\r\n            let found = tableListData.find((inx) => { return inx.PageID === selectePageID })\r\n\r\n            if ((found === undefined) && !(selectePageID === undefined)) {\r\n                dispatch(AddPageHandlerForRoleAccessListPage(selectePageID));\r\n            }\r\n            else if (found) {\r\n                dispatch(AlertState({\r\n                    Type: 4, Status: true,\r\n                    Message: \"Page Alredy Exist\",\r\n                    RedirectPath: false,\r\n                    PermissionAction: false,\r\n                }));\r\n\r\n            }\r\n            else {\r\n                dispatch(AlertState({\r\n                    Type: 4, Status: true,\r\n                    Message: \"Page is Not Select\",\r\n                    RedirectPath: false,\r\n                    PermissionAction: false,\r\n                }));\r\n            }\r\n        }\r\n    }\r\n\r\n    const ChangeButtonHandeler = () => {\r\n        setShowTableOnUI(false);\r\n        setModule_DropdownSelect('')\r\n        setPage_DropdownSelect('')\r\n        setTableListData([])\r\n    }\r\n    const saveHandeller = () => {\r\n\r\n        let selectedItemArray = [];\r\n        let pageAccessElement = {}\r\n        let roleAccessArray = []\r\n        let roleAccessArray2 = []\r\n\r\n        for (var i = 0; i < tableListData.length; i++) {\r\n            debugger\r\n            var moduleName = document.getElementById(\"ModuleID\" + i).value;\r\n            var pageName = document.getElementById(\"PageID\" + i).value;\r\n            var relatedPage = document.getElementById(\"RelatedPageID\" + i).value;\r\n            var pageId = parseInt(pageName)\r\n            var moduleId = parseInt(moduleName)\r\n            var relatedPageID = parseInt(relatedPage)\r\n\r\n\r\n            var addIsShowOnMenu = document.getElementById(\"addIsShowOnMenu\" + i).checked;\r\n            var listIsShowOnMenu = document.getElementById(\"listIsShowOnMenu\" + i).checked;\r\n            var isSave = document.getElementById(\"IsSave\" + i).checked\r\n            var isView = document.getElementById(\"IsView\" + i).checked;\r\n            var isEdit = document.getElementById(\"IsEdit\" + i).checked;\r\n            var isDelete = document.getElementById(\"IsDelete\" + i).checked;\r\n            var isEditSelf = document.getElementById(\"IsEditSelf\" + i).checked;\r\n            var isDeleteSelf = document.getElementById(\"IsDeleteSelf\" + i).checked;\r\n            var isPrint = document.getElementById(\"IsPrint\" + i).checked;\r\n            var isTopOfTheDivision = document.getElementById(\"IsTopOfTheDivision\" + i).checked;\r\n\r\n\r\n            // if (isShowOnMenu) { isSave = true }\r\n            // if (isEdit || isEditSelf) { isView = true }\r\n\r\n\r\n            // roleAccessArray.push({ \"PageAccess\": 1 });\r\n            if (listIsShowOnMenu) roleAccessArray.push({ \"PageAccess\": 1 });\r\n            if (isSave) roleAccessArray.push({ \"PageAccess\": 2 });\r\n            if (isView) roleAccessArray.push({ \"PageAccess\": 3 });\r\n            if (isEdit) roleAccessArray.push({ \"PageAccess\": 4 });\r\n            if (isDelete) roleAccessArray.push({ \"PageAccess\": 5 });\r\n            if (isEditSelf) roleAccessArray.push({ \"PageAccess\": 6 });\r\n            if (isDeleteSelf) roleAccessArray.push({ \"PageAccess\": 7 });\r\n            if (isPrint) roleAccessArray.push({ \"PageAccess\": 8 });\r\n            if (isTopOfTheDivision) roleAccessArray.push({ \"PageAccess\": 9 });\r\n\r\n            if (addIsShowOnMenu) roleAccessArray2.push({ \"PageAccess\": 1 });\r\n            if (isSave) roleAccessArray2.push({ \"PageAccess\": 2 });\r\n            if (isView) roleAccessArray2.push({ \"PageAccess\": 3 });\r\n            if (isEdit) roleAccessArray2.push({ \"PageAccess\": 4 });\r\n            if (isDelete) roleAccessArray2.push({ \"PageAccess\": 5 });\r\n            if (isEditSelf) roleAccessArray2.push({ \"PageAccess\": 6 });\r\n            if (isDeleteSelf) roleAccessArray2.push({ \"PageAccess\": 7 });\r\n            if (isPrint) roleAccessArray2.push({ \"PageAccess\": 8 });\r\n            if (isTopOfTheDivision) roleAccessArray2.push({ \"PageAccess\": 9 });\r\n            // roleAccessArray.push(roleAccessElement)\r\n\r\n            let divisionID = division_dropdown_Select.value\r\n\r\n            pageAccessElement[\"Role\"] = role_dropdown_Select.value\r\n            pageAccessElement[\"Company\"] = \"\"\r\n            pageAccessElement[\"Division\"] = (divisionID === 0 ? \"\" : divisionID)\r\n            pageAccessElement[\"Modules\"] = moduleId\r\n            pageAccessElement[\"Pages\"] = pageId\r\n            pageAccessElement[\"CreatedBy\"] = 1\r\n            pageAccessElement[\"UpdatedBy\"] = 1\r\n            pageAccessElement[\"RolePageAccess\"] = roleAccessArray\r\n\r\n            if (roleAccessArray.length > 0) {\r\n                let pageAccessElement2 = {}\r\n                selectedItemArray.push(pageAccessElement)\r\n                if (relatedPageID > 0) {\r\n\r\n                    pageAccessElement2[\"Role\"] = role_dropdown_Select.value\r\n                    pageAccessElement2[\"Company\"] = \"\"\r\n                    pageAccessElement2[\"Division\"] = (divisionID === 0 ? \"\" : divisionID)\r\n                    pageAccessElement2[\"Modules\"] = moduleId\r\n                    pageAccessElement2[\"Pages\"] = relatedPageID\r\n                    pageAccessElement2[\"CreatedBy\"] = 1\r\n                    pageAccessElement2[\"UpdatedBy\"] = 1\r\n                    pageAccessElement2[\"RolePageAccess\"] = roleAccessArray2\r\n                    selectedItemArray.push(pageAccessElement2)\r\n                    pageAccessElement2 = {}\r\n                }\r\n            }\r\n            // debugger\r\n            roleAccessArray2 = []\r\n            roleAccessArray = []\r\n            pageAccessElement = {}\r\n        }\r\n        // debugger\r\n        const jsonBody = JSON.stringify(selectedItemArray)\r\n\r\n        dispatch(PostMethodForRoleAccessListPage(jsonBody));\r\n        debugger\r\n        // console.log(\"roleAccess Post data\", jsonBody)\r\n\r\n    };\r\n\r\n    function DeleteRolePage_Handler(id) {\r\n        const newList = tableListData.filter((index) => {\r\n            return (!(index.ID === id))\r\n        })\r\n        setTableListData(newList)\r\n    }\r\n\r\n\r\n    function input_checkBoxHandler(e, v,) {\r\n\r\n        if (e === \"IsEdit\") {\r\n        debugger\r\n            let isEdit = document.getElementById(`IsEdit${v}`)\r\n            let isView = document.getElementById(`IsView${v}`)\r\n            let isEditSelf = document.getElementById(`IsEditSelf${v}`)\r\n            if (isEdit.checked) {\r\n                isView.checked = true;\r\n                isEditSelf.checked = true;\r\n                isView.disabled = true;\r\n                isEditSelf.disabled = true;\r\n            }\r\n            else {\r\n                isView.disabled = false;\r\n                isEditSelf.disabled = false;\r\n            }\r\n            return\r\n        }\r\n        if (e === \"IsEditSelf\") {\r\n            let isView = document.getElementById(`IsView${v}`)\r\n            let isEditSelf = document.getElementById(`IsEditSelf${v}`)\r\n            let isEdit = document.getElementById(`IsEdit${v}`)\r\n\r\n            if ((isEdit.checked) && (e === \"IsEditSelf\")) {\r\n                isEditSelf.checked = true;\r\n                isEditSelf.disabled = true\r\n            }\r\n            else if (isEditSelf.checked) {\r\n                isView.checked = true;\r\n                isView.disabled = true;\r\n            }\r\n            else {\r\n                isView.disabled = false;\r\n            }\r\n            return\r\n        }\r\n        if ((e === \"IsView\")) {\r\n            let isEdit = document.getElementById(`IsEdit${v}`)\r\n            if ((isEdit.checked)) {\r\n                let isView = document.getElementById(`IsView${v}`)\r\n                isView.checked = true;\r\n                isView.disabled = true\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n        if (e === \"IsDelete\") {\r\n            let isDelete = document.getElementById(`IsDelete${v}`)\r\n            let isDeleteSelf = document.getElementById(`IsDeleteSelf${v}`)\r\n            if (isDelete.checked) {\r\n                isDeleteSelf.checked = true;\r\n                isDeleteSelf.disabled = true;\r\n            }\r\n            else {\r\n                isDeleteSelf.disabled = false;\r\n            }\r\n            return\r\n        }\r\n        if ((e === \"IsDeleteSelf\")) {\r\n            let isDelete = document.getElementById(`IsDelete${v}`)\r\n            if ((isDelete.checked)) {\r\n                let isDeleteSelf = document.getElementById(`IsDeleteSelf${v}`)\r\n                isDeleteSelf.checked = true;\r\n                isDeleteSelf.disabled = true\r\n\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n        if (e === \"addIsShowOnMenu\") {\r\n            let isShowOnMenu = document.getElementById(`addIsShowOnMenu${v}`)\r\n            let save = document.getElementById(`IsSave${v}`)\r\n            if (isShowOnMenu.checked) {\r\n                save.checked = true;\r\n                save.disabled = true;\r\n            }\r\n            else {\r\n                save.disabled = false;\r\n            }\r\n            return\r\n        }\r\n        if ((e === \"IsSave\")) {\r\n            let isShowOnMenu = document.getElementById(`addIsShowOnMenu${v}`)\r\n            if ((isShowOnMenu.checked)) {\r\n                let isSave = document.getElementById(`IsSave${v}`)\r\n                isSave.checked = true;\r\n                isSave.disabled = true\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n\r\n    }\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content text-black\" >\r\n                    <MetaTags>\r\n                        <title>Role Access| FoodERP-React FrontEnd</title>\r\n                    </MetaTags>\r\n                    {/* <Breadcrumbs breadcrumbItem={\"Role Access List\"} /> */}\r\n                    <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n\r\n                    <Container fluid>\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-dark\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <Card className=\"mt-n2\">\r\n                                <CardBody >\r\n\r\n                                    {\r\n                                        !showTableOnUI ?\r\n                                            <>\r\n                                                <CardHeader className=\"card-header   text-black \" style={{ backgroundColor: \"#dddddd\" }} >\r\n                                                    <Row className=\"mt-3\">\r\n                                                        <Col md=\"4\">\r\n\r\n                                                            <FormGroup className=\"mb-3 row \">\r\n                                                                <Label className=\"col-sm-2 p-2 ml-n4 \">Role</Label>\r\n                                                                <Col md=\"9\">\r\n                                                                    <Select\r\n                                                                    \r\n                                                                        value={role_dropdown_Select}\r\n                                                                        options={Role_DropdownOption}\r\n                                                                        className=\"rounded-bottom\"\r\n                                                                        placeholder=\"Select...\"\r\n                                                                        onChange={(e) => { RoleDropDown_select_handler(e) }}\r\n                                                                        classNamePrefix=\"select2-selection\"\r\n\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n\r\n                                                        <Col md=\"4\" className=\"\">\r\n                                                            <FormGroup className=\"mb-3 row\" >\r\n                                                                <Label className=\"col-sm-3 p-2\">Division</Label>\r\n                                                                <Col md=\"9\">\r\n                                                                    <Select\r\n                                                                        value={division_dropdown_Select}\r\n                                                                        className=\"rounded-bottom\"\r\n                                                                        placeholder=\"Select...\"\r\n                                                                        options={DivisionTypesValues}\r\n                                                                        onChange={(e) => { handllerDivisionTypes(e) }}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n\r\n                                                        <Col md=\"3\" className=\"mt- \">\r\n                                                            <Button type=\"button\" color=\"primary\" onClick={() => { GoButton_Handler() }}>Go</Button>\r\n                                                        </Col>\r\n\r\n                                                    </Row>\r\n                                                </CardHeader>\r\n\r\n                                                <br></br>\r\n                                                <br></br>\r\n                                                <br></br>\r\n                                                <br></br>\r\n                                                <br></br>\r\n                                                <br></br>\r\n                                                <br></br>\r\n                                                <br></br><br></br>\r\n                                                <br></br>\r\n                                                <br></br>\r\n                                                <br></br>\r\n                                                <br></br>\r\n                                                <br></br>\r\n                                                <br></br>\r\n                                                <br></br><br></br>\r\n                                                <br></br>\r\n                                                <br></br>\r\n                                                <br></br>\r\n                                                <br></br>\r\n                                                <br></br>\r\n                                                <br></br>\r\n                                                <br></br>\r\n\r\n                                            </>\r\n                                            :\r\n                                            <>\r\n                                                <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n\r\n                                                    <Row style={{ backgroundColor: \"#f2f2f2\" }} className='mb-3 mt-n1'>\r\n                                                        <Col md=\"4\" className=\"p-2 \">\r\n                                                            <Label className=\"p-2 col-sm-3\">Role</Label>\r\n                                                            <Button type=\"button\" color=\"btn btn-outline-warning\" className=\"btn-sm\" ><h className=\"text-black\">{role_dropdown_Select.label}</h></Button>\r\n                                                        </Col>\r\n\r\n                                                        <Col md=\"4\" className=\"p-2 \">\r\n                                                            {(division_dropdown_Select.value > 0)\r\n                                                                ? <> <Label className=\" p-2 col-sm-3 \">Division</Label>\r\n                                                                    <Button type=\"button\" color=\"btn btn-outline-warning\" className=\"btn-sm\" >\r\n                                                                        <h className=\"text-black\">{division_dropdown_Select.label}</h></Button>\r\n                                                                </>\r\n                                                                : null}\r\n                                                        </Col>\r\n                                                        <Col md=\"4\" className=\"p-2 text-end\">\r\n                                                            <Button type=\"button\" color=\"btn btn-outline-secondary\" className=\"btn-sm\" onClick={() => { ChangeButtonHandeler() }}><h className=\"text-black\">Change Role</h></Button>\r\n                                                        </Col>\r\n\r\n                                                    </Row>\r\n\r\n\r\n                                                    <Row >\r\n                                                        <Col className=\"\">\r\n                                                            <FormGroup className=\"mb-3  row\">\r\n                                                                <Label className=\"col-sm-3 p-2 ml-n5\">Module</Label>\r\n                                                                <Col md=\"7\" style={{zIndex:\"3\"}}>\r\n                                                                    \r\n\r\n                                            \r\n                                                                    <Select\r\n                                                                        value={module_DropdownSelect}\r\n                                                                        placeholder=\"select..\"\r\n                                                                        options={Module_DropdownOption}\r\n                                                                        onChange={(e) => { Module_DropdownSelectHandller(e) }}\r\n                                                                        classNamePrefix=\"select2-selection\"\r\n                                                                    />\r\n                                                                </Col>\r\n\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n\r\n                                                        <Col md=\"4\">\r\n                                                            <FormGroup className=\"mb-3 row \">\r\n                                                                <Label className=\"col-sm-3 p-2 ml-n5\">Page</Label>\r\n                                                                <Col md=\"7\" style={{zIndex:\"3\"}}>\r\n\r\n                                                                    <Select\r\n                                                                        value={page_DropdownSelect}\r\n                                                                        placeholder=\"select..\"\r\n                                                                        options={Page_DropdownOption}\r\n                                                                        onChange={(e) => { Page_DropdownSelectHandller(e) }}\r\n                                                                        // onChange={(e)=> {const selectAllOption = {label: 'select all', value: '*' }}}\r\n                                                                        classNamePrefix=\"select2-selection\"\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </FormGroup>\r\n                                                        </Col >\r\n\r\n                                                        <Col md=\"2\" className=\" \">\r\n                                                            <Button type=\"button\" color=\"btn btn-outline-success\" className=\"\"\r\n                                                                onClick={() => { AddPageButton_Handeler() }}>\r\n                                                                {page_DropdownSelect.value === 0 ? 'Add All Page' : \"Add Page\"}</Button>\r\n                                                        </Col>\r\n\r\n\r\n                                                        <Col md=\"2\" className=\"text-end\">\r\n                                                            <Button type=\"button\" color=\"primary\" onClick={() => { saveHandeller() }}>Save</Button>\r\n                                                        </Col>\r\n\r\n                                                    </Row>\r\n                                                </CardHeader>\r\n\r\n                                                {tableListData.length > 0\r\n                                                    ?\r\n                                                        <>\r\n                                                    <div className=\"table-rep-plugin  mx-n4\">\r\n                                                        <div\r\n                                                            className=\"custom_scroll_div\"\r\n                                                            data-pattern=\"priority-columns \"\r\n                                                        >\r\n                                                            {/* <Table className=\"table-responsive table-bordered  table-fixed mt-2 \"> */}\r\n                                                            <Table className=\"table table-bordered table-responsive  mt-3\">\r\n                                                                <thead>\r\n                                                                <tr style={{zIndex:\"2\"}}>\r\n                                                                    {tableHederList.map((indx) => {\r\n                                                                        if (indx.text === \"IsShowOnMenu\") {\r\n                                                                            return (\r\n                                                                                <th colSpan={2} style={{\r\n                                                                                    textAlign: \"center\",\r\n                                                                                    verticalAlign: \"middle\",\r\n                                                                                    \r\n                                                                                    \r\n\r\n                                                                                }}>\r\n\r\n                                                                                    {indx.text}\r\n                                                                                    {/* change line css */}\r\n                                                                    <th style={{width:\"10%\",height:\"30px\"}}  scope=\"col\">Add </th>\r\n\r\n                                                                    <th  style={{width:\"10%\",height:\"30px\"}} scope=\"col\">List</th>\r\n\r\n\r\n                                                                                </th>\r\n                                                                            )\r\n                                                                        }\r\n                                                                        else if ((indx.text === \"PageName\")) {\r\n\r\n                                                                            return (\r\n                                                                                <th rowSpan={2}\r\n                                                                                    style={{\r\n                                                                                        textAlign: \"center\",\r\n                                                                                        verticalAlign: \"middle\",\r\n                                                                                        \r\n                                                                                    }}>\r\n                                                                                    {indx.text}\r\n                                                                                </th>\r\n                                                                            )\r\n                                                                        }\r\n                                                                        else {\r\n                                                                            return <th rowSpan={2} style={{ textAlign: \"center\", verticalAlign: \"middle\" }} >{indx.text}</th>\r\n                                                                        }\r\n\r\n                                                                    })}\r\n                                                                </tr>\r\n                                                                {/* <tr style={{position:\"relative\"}}> */}\r\n                                                                    {/* <th scope=\"col\">Add</th> */}\r\n                                                                    {/* <th scope=\"col\">List</th> */}\r\n                                                                    {/* <th scope=\"col\">Accepted</th> */}\r\n                                                                {/* </tr> */}\r\n                                                                </thead>\r\n\r\n                                                                <Tbody>\r\n\r\n                                                                    {tableListData.map((indx, key) => {\r\n                                                                        return (\r\n                                                                            <tr>\r\n                                                                                <td>\r\n                                                                                    {indx.ModuleName}\r\n                                                                                    <Input\r\n                                                                                        type=\"hidden\"\r\n                                                                                        id={\"ModuleID\" + key}\r\n                                                                                        name={\"ModuleID\" + key}\r\n                                                                                        value={indx.ModuleID}\r\n                                                                                    />\r\n                                                                                    <Input\r\n                                                                                        type=\"hidden\"\r\n                                                                                        id={\"ID\" + key}\r\n                                                                                        name={\"ID\" + key}\r\n                                                                                        value={indx.ID}\r\n                                                                                    />\r\n                                                                                    <Input\r\n                                                                                        type=\"hidden\"\r\n                                                                                        id={\"RelatedPageID\" + key}\r\n                                                                                        value={indx.RelatedPageID}\r\n                                                                                    />\r\n                                                                                </td>\r\n                                                                                <td>\r\n                                                                                    <div className=\"row\">\r\n                                                                                        <div className=\"text-left col\">\r\n                                                                                            {indx.PageName}\r\n                                                                                        </div>\r\n\r\n                                                                                        <div className=\"text-right col col-3\">\r\n                                                                                            <Input\r\n                                                                                                type=\"hidden\"\r\n                                                                                                id={\"PageID\" + key}\r\n                                                                                                name={\"PageID\" + key}\r\n                                                                                                value={indx.PageID}\r\n                                                                                            />\r\n                                                                                            <i className=\"mdi mdi-delete font-size-18 text-danger text-right\" onClick={() => { DeleteRolePage_Handler(indx.ID) }}></i>\r\n                                                                                        </div>\r\n                                                                                    </div>\r\n                                                                                </td>\r\n                                                                                {\r\n                                                                                    PageAccess.map((indexPage) => {\r\n                                                                                        if (indexPage.Name === \"IsShowOnMenu\") {\r\n                                                                                            return (\r\n                                                                                                // <td className=\"text-center\" >\r\n                                                                                                //     {indx[`PageAccess_${indexPage.Name}`] ?\r\n                                                                                                //         <Row>\r\n                                                                                                //             <Col md={6}>\r\n                                                                                                //                 <Input type={\"checkbox\"} id={indexPage.Name + key}\r\n                                                                                                //                     onChange={(e) => input_checkBoxHandler(indexPage.Name, key, e)}\r\n                                                                                                //                     defaultChecked={indx[`RoleAccess_${indexPage.Name}`] > 0 ? true : false} />\r\n                                                                                                //             </Col>\r\n\r\n                                                                                                //             <Col md={6}>\r\n                                                                                                //                 <Input type={\"checkbox\"} id={indexPage.Name + key}\r\n                                                                                                //                     onChange={(e) => input_checkBoxHandler(indexPage.Name, key, e)}\r\n                                                                                                //                     defaultChecked={indx[`RoleAccess_${indexPage.Name}`] > 0 ? true : false} />\r\n                                                                                                //             </Col>\r\n\r\n                                                                                                //         </Row>\r\n                                                                                                //         : <>\r\n                                                                                                //             <Input type={\"hidden\"} id={indexPage.Name + key} />\r\n                                                                                                //             <Input type={\"hidden\"} id={indexPage.Name + key} />\r\n                                                                                                //         </>\r\n                                                                                                //     }\r\n\r\n                                                                                                // </td>\r\n                                                                                                <>\r\n                                                                                                    <td className=\"text-center\">\r\n                                                                                                        {indx[`PageAccess_${indexPage.Name}`] ?\r\n                                                                                                            <Input type={\"checkbox\"} id={`addIsShowOnMenu${key}`}\r\n                                                                                                                onChange={(e) => input_checkBoxHandler(`addIsShowOnMenu`, key, e)}\r\n                                                                                                                defaultChecked={indx[`RoleAccess_IsShowOnMenuForMaster`] > 0 ? true : false} />\r\n                                                                                                            : <Input type={\"hidden\"} id={`addIsShowOnMenu${key}`} />\r\n                                                                                                        }\r\n\r\n                                                                                                    </td>\r\n                                                                                                    <td className=\"text-center\">\r\n                                                                                                        {indx[`PageAccess_${indexPage.Name}`] ?\r\n                                                                                                            <Input type={\"checkbox\"} id={`listIsShowOnMenu${key}`}\r\n                                                                                                                onChange={(e) => input_checkBoxHandler(`listIsShowOnMenu`, key, e)}\r\n                                                                                                                defaultChecked={indx[`RoleAccess_IsShowOnMenuForList`] > 0 ? true : false} />\r\n                                                                                                            : <Input type={\"hidden\"} id={`listIsShowOnMenu${key}`} />\r\n                                                                                                        }\r\n\r\n                                                                                                    </td>\r\n                                                                                                </>\r\n                                                                                            )\r\n                                                                                        }\r\n                                                                                        else {\r\n                                                                                            return (\r\n                                                                                                <td className=\"text-center\">\r\n                                                                                                    {indx[`PageAccess_${indexPage.Name}`] ?\r\n                                                                                                        <Input type={\"checkbox\"} id={indexPage.Name + key}\r\n                                                                                                            onChange={(e) => input_checkBoxHandler(indexPage.Name, key, e)}\r\n                                                                                                            defaultChecked={indx[`RoleAccess_${indexPage.Name}`] > 0 ? true : false} />\r\n                                                                                                        : <Input type={\"hidden\"} id={indexPage.Name + key} />\r\n                                                                                                    }\r\n\r\n                                                                                                </td>\r\n                                                                                            )\r\n                                                                                        }\r\n                                                                                    })\r\n                                                                                }\r\n\r\n\r\n                                                                            </tr>\r\n                                                                        )\r\n                                                                    })}\r\n\r\n\r\n\r\n                                                                </Tbody>\r\n                                                            </Table>\r\n                                                           </div>\r\n                                                           </div>\r\n                                                        </> :\r\n                                                       \r\n                                                        <>\r\n                                                            <br></br>\r\n                                                            <br></br>\r\n                                                            <br></br>\r\n                                                            <br></br>\r\n                                                            <br></br>\r\n                                                            <br></br>\r\n                                                            <br></br>\r\n                                                            <br></br>\r\n                                                        </>\r\n                                                }\r\n\r\n\r\n                                                    </>\r\n                                    }\r\n\r\n                                            </CardBody>\r\n                            </Card>\r\n                        </Card>\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\nexport default RoleAccessAdd\r\n{/* <td>\r\n{indx.PageAccess_IsSave ?\r\n    <input type={\"checkbox\"} id={'isSave' + key}\r\n        defaultChecked={indx.RoleAccess_IsSave > 0 ? true : false} />\r\n\r\n    : <input type={\"hidden\"} id={'isSave' + key} />\r\n}\r\n</td>\r\n<td>\r\n{indx.PageAccess_IsEdit ?\r\n    <input type={\"checkbox\"} id={'isEdit' + key}\r\n        defaultChecked={indx.RoleAccess_IsEdit > 0 ? true : false} />\r\n    : <input type={\"hidden\"} id={'isEdit' + key} />\r\n}\r\n</td>\r\n<td>\r\n{indx.PageAccess_IsDelete ?\r\n    <input type={\"checkbox\"}\r\n        id={'isDelete' + key}\r\n        defaultChecked={indx.RoleAccess_IsDelete > 0 ? true : false} />\r\n    :\r\n    <input type={\"hidden\"} id={'isDelete' + key} />\r\n}\r\n</td>\r\n<td>\r\n{indx.PageAccess_IsEditSelf ?\r\n    <input type={\"checkbox\"}\r\n        id={'isEditSelf' + key}\r\n        defaultChecked={indx.RoleAccess_IsEditSelf > 0 ? true : false} />\r\n    :\r\n    <input type={\"hidden\"} id={'isEditSelf' + key} />\r\n}\r\n\r\n</td>\r\n<td>\r\n{indx.PageAccess_IsDeleteSelf ?\r\n    <input type={\"checkbox\"}\r\n        id={'isDeleteSelf' + key}\r\n        defaultChecked={indx.RoleAccess_IsDeleteSelf > 0 ? true : false} />\r\n    :\r\n    <input type={\"hidden\"} id={'isDeleteSelf' + key} />\r\n}\r\n</td>\r\n<td>\r\n{indx.PageAccess_IsShow ?\r\n    <input type={\"checkbox\"}\r\n        id={'isShow' + key}\r\n        defaultChecked={indx.RoleAccess_IsShow > 0 ? true : false} />\r\n    :\r\n    <input type={\"hidden\"} id={'isShow' + key} />\r\n}\r\n</td>\r\n<td>\r\n{indx.PageAccess_IsView ?\r\n    <input type={\"checkbox\"}\r\n        id={'isView' + key}\r\n        defaultChecked={indx.RoleAccess_IsView > 0 ? true : false} />\r\n    :\r\n    <input type={\"hidden\"} id={'isView' + key} />}\r\n</td>\r\n<td>\r\n{indx.PageAccess_IsTopOfTheDivision ?\r\n    <input type={\"checkbox\"}\r\n        id={'isTopOfDivision' + key}\r\n        defaultChecked={indx.RoleAccess_IsTopOfTheDivision > 0 ? true : false} />\r\n    :\r\n    <input type={\"hidden\"} id={'isTopOfDivision' + key} />\r\n}\r\n</td> */}","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PartyTypes\\PartyType.js",["1428","1429","1430","1431","1432","1433","1434","1435","1436","1437","1438","1439","1440","1441","1442","1443","1444"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport { AvField, AvForm, AvInput, } from \"availity-reactstrap-validation\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { CommonGetRoleAccessFunction } from \"../../../components/Common/CommonGetRoleAccessFunction\";\r\nimport { Breadcrumb_inputName, AlertState, commonPageField } from \"../../../store/actions\";\r\nimport {\r\n    editPartyTypeSuccess,\r\n    PostPartyTypeAPISuccess,\r\n    getPartyTypelist,\r\n    updatePartyTypeID,\r\n    PostPartyTypeAPI,\r\n} from \"../../../store/Administrator/PartyTypeRedux/action\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValChange,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeText\r\n} from \"../../../components/Common/CmponentRelatedCommonFile/validationFunction\";\r\nimport { PARTYTYPE_lIST } from \"../../../routes/route_url\";\r\nimport SaveButton from \"../../../components/Common/CommonSaveButton\";\r\n\r\nconst PartyType = (props) => {\r\n    const formRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [EditData, setEditData] = useState([]);\r\n    const [pageMode, setPageMode] = useState(\"save\");\r\n    const [userPageAccessState, setUserPageAccessState] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n\r\n    const { PostAPIResponse, PartyTypes, pageField, userAccess } =\r\n        useSelector((state) => ({\r\n            PostAPIResponse: state.PartyTypeReducer.PostData,\r\n            PartyTypes: state.PartyMasterReducer.PartyTypes,\r\n            pageField: state.CommonPageFieldReducer.pageField,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n        }));\r\n\r\n    useEffect(() => {\r\n        dispatch(commonPageField(53))\r\n    }, []);\r\n\r\n    {/** Dyanamic Page access state and OnChange function */ }\r\n    const initialFiled = {\r\n        id: \"\",\r\n        Name: \"\",\r\n        IsSCM: \"\",\r\n        IsDivision: \"\",\r\n    }\r\n\r\n    const [state, setState] = useState(initialFiledFunc(initialFiled))\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(\"editValue\")\r\n    const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserPageAccessState(userAcc)\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        dispatch(getPartyTypelist());\r\n    }, [dispatch]);\r\n\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        // if (!(userPageAccessState === '')) { document.getElementById(\"txtName\").focus(); }\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                const { id, Name, IsSCM, IsDivision } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n                values.Name = Name;\r\n                values.IsSCM = IsSCM;\r\n                values.IsDivision = IsDivision;\r\n                values.id = id\r\n                hasValid.Name.valid = true;\r\n                hasValid.IsSCM.valid = true;\r\n                hasValid.IsDivision.valid = true;\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n\r\n            }\r\n            dispatch(editPartyTypeSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        if ((PostAPIResponse.Status === true) && (PostAPIResponse.StatusCode === 200) && !(pageMode === \"dropdownAdd\")) {\r\n            // setpartyType_dropdown_Select('')\r\n            dispatch(PostPartyTypeAPISuccess({ Status: false }))\r\n            formRef.current.reset();\r\n            if (pageMode === \"dropdownAdd\") {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: PostAPIResponse.Message,\r\n                }))\r\n            }\r\n            else {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: PostAPIResponse.Message,\r\n                    RedirectPath: PARTYTYPE_lIST,\r\n\r\n                }))\r\n            }\r\n        }\r\n        else if ((PostAPIResponse.Status === true) && !(pageMode === \"dropdownAdd\")) {\r\n            dispatch(PostPartyTypeAPISuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(PostAPIResponse.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [PostAPIResponse])\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const formSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        if (formValid(state, setState)) {\r\n            const jsonBody = JSON.stringify({\r\n                Name: values.Name,\r\n                IsSCM: values.IsSCM,\r\n                IsDivision: values.IsDivision,\r\n                CreatedBy: 1,\r\n                CreatedOn: \"2022-07-18T00:00:00\",\r\n                UpdatedBy: 1,\r\n                UpdatedOn: \"2022-07-18T00:00:00\"\r\n            });\r\n            console.log(\"jsonBody\", jsonBody)\r\n\r\n            if (pageMode === \"edit\") {\r\n                dispatch(updatePartyTypeID(jsonBody, values.id));\r\n            }\r\n            else {\r\n                dispatch(PostPartyTypeAPI(jsonBody));\r\n            }\r\n        }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((pageMode === \"edit\") || (pageMode === \"copy\") || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <MetaTags>\r\n                        <title>{userPageAccessState.PageHeading}| FoodERP-React FrontEnd</title>\r\n                    </MetaTags>\r\n                    <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n                    <Container fluid>\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form onSubmit={formSubmitHandler} ref={formRef} noValidate>\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Name} </Label>\r\n                                                            <Input\r\n                                                                name=\"Name\"\r\n                                                                id=\"txtName\"\r\n                                                                value={values.Name}\r\n                                                                type=\"text\"\r\n                                                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                placeholder=\"Please Enter Name\"\r\n                                                                autoComplete='off'\r\n                                                                autoFocus={true}\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.Name.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n\r\n                                                        <Row>\r\n                                                            <FormGroup className=\"mb-2 col col-sm-5\">\r\n                                                                <Row className=\"justify-content-md-left\">\r\n                                                                    <Label htmlFor=\"horizontal-firstname-input\" className=\"col-sm-3 col-form-label\" >{fieldLabel.IsSCM} </Label>\r\n                                                                    <Col md={2} style={{ marginTop: '9px' }} >\r\n                                                                        <div className=\"form-check form-switch form-switch-md mb-3\">\r\n                                                                            <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                                checked={values.IsSCM}\r\n                                                                                name=\"IsSCM\"\r\n                                                                                onChange={(event) => onChangeText({ event, state, setState })}\r\n                                                                            />\r\n                                                                        </div>\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                            </FormGroup>\r\n                                                        </Row>\r\n\r\n                                                        <Row>\r\n                                                            <FormGroup className=\"mb-2 col col-sm-5\">\r\n                                                                <Row className=\"justify-content-md-left\">\r\n                                                                    <Label htmlFor=\"horizontal-firstname-input\" className=\"col-sm-3 col-form-label\" >{fieldLabel.IsDivision} </Label>\r\n                                                                    <Col md={2} style={{ marginTop: '9px' }} >\r\n                                                                        <div className=\"form-check form-switch form-switch-md mb-3\">\r\n                                                                            <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                                defaultChecked={values.IsDivision}\r\n                                                                                name=\"IsDivision\"\r\n                                                                                onChange={(event) => onChangeText({ event, state, setState })}\r\n                                                                            />\r\n                                                                        </div>\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                            </FormGroup>\r\n                                                        </Row>\r\n\r\n                                                        <FormGroup>\r\n                                                            <Row>\r\n                                                                <Col sm={2}>\r\n                                                                    <SaveButton pageMode={pageMode} userAcc={userPageAccessState}\r\n                                                                        module={\"PartyType\"}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </FormGroup >\r\n                                                    </Row>\r\n\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default PartyType\r\n\r\n\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PartyTypes\\PartyTypeList.js",["1445"],"import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  deletePartyTypeIDSuccess,\r\n  delete_PartyType_ID,\r\n  editPartyTypeId,\r\n  getPartyTypelist,\r\n  PostPartyTypeAPISuccess,\r\n  updatePartyTypeIDSuccess\r\n} from \"../../../store/Administrator/PartyTypeRedux/action\";\r\nimport PartyType from \"./PartyType\";\r\nimport CommonListPage from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport {  commonPageFieldList, commonPageFieldListSuccess} from \"../../../store/actions\";\r\nimport { PARTYTYPE } from \"../../../routes/route_url\";\r\n\r\nconst PartyTypeList = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      tableList: state.PartyTypeReducer.ListData,\r\n      editData: state.PartyTypeReducer.editData,\r\n      updateMsg: state.PartyTypeReducer.updateMessage,\r\n      deleteMsg: state.PartyTypeReducer.deleteMessage,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      postMsg: state.PartyTypeReducer.PostData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n\r\n    })\r\n    );\r\n\r\n    const action = {\r\n      getList: getPartyTypelist,\r\n      editId: editPartyTypeId,\r\n      deleteId: delete_PartyType_ID,\r\n      postSucc: PostPartyTypeAPISuccess,\r\n      updateSucc: updatePartyTypeIDSuccess,\r\n      deleteSucc: deletePartyTypeIDSuccess\r\n    }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(54))\r\n    dispatch(getPartyTypelist());\r\n  }, []);\r\n\r\n  const { pageField } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        (pageField) ?\r\n          <CommonListPage\r\n            action={action}\r\n            reducers={reducers}\r\n            MasterModal={PartyType}\r\n            masterPath={PARTYTYPE}\r\n            ButtonMsgLable={\"PartyType\"}\r\n            deleteName={\"Name\"}\r\n          />\r\n          : null\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default PartyTypeList;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\CategoryTypePages\\CategoryTypeMaster.js",["1446","1447","1448","1449","1450","1451","1452"],"import React, { useEffect, useRef, useState, } from \"react\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\n\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { AlertState, commonPageField } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { Breadcrumb_inputName } from \"../../../store/Utilites/Breadcrumb/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    PostMethodForCategoryTypeMaster,\r\n    PostMethod_ForCategoryTypeMasterAPISuccess,\r\n    editCategoryTypeIDSuccess,\r\n    updateCategoryTypeID,\r\n    getCategoryTypelistSuccess,\r\n    updateCategoryTypeIDSuccess,\r\n} from \"../../../store/Administrator/CategoryTypeRedux/actions\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeText\r\n} from \"../../../components/Common/CmponentRelatedCommonFile/validationFunction\";\r\nimport { CATEGORYTYPE_lIST } from \"../../../routes/route_url\";\r\nimport SaveButton from \"../../../components/Common/CommonSaveButton\";\r\n\r\nconst CategoryTypeMaster = (props) => {\r\n    const formRef = useRef(null);\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n    const [modalCss, setModalCss] = useState(false);\r\n\r\n    const [pageMode, setPageMode] = useState(\"\");\r\n    const [userPageAccessState, setUserPageAccessState] = useState(123);\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { postMsg, updateMsg, pageField, userAccess } = useSelector((state) => ({\r\n        postMsg: state.categoryTypeReducer.PostData,\r\n        updateMsg: state.categoryTypeReducer.updateMessage,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField\r\n    }));\r\n\r\n    useEffect(() => {\r\n        dispatch(commonPageField(16))\r\n    }, []);\r\n\r\n    {/** Dyanamic Page access state and OnChange function */ }\r\n    const initialFiled = {\r\n        Name: \"\",\r\n        id: \"\"\r\n    }\r\n\r\n    const [state, setState] = useState(initialFiledFunc(initialFiled))\r\n\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(\"editValue\")\r\n    const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n    //userAccess useEffect\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserPageAccessState(userAcc)\r\n        };\r\n    }, [userAccess])\r\n\r\n    //This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                const { id, Name } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n                values.Name = Name;\r\n                values.id = id\r\n\r\n                hasValid.Name.valid = true;\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n\r\n            }\r\n            dispatch(editCategoryTypeIDSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(PostMethod_ForCategoryTypeMasterAPISuccess({ Status: false }))\r\n\r\n\r\n            if (pageMode === \"other\") {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                }))\r\n            }\r\n\r\n            else {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                    RedirectPath: CATEGORYTYPE_lIST,\r\n                }))\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(getCategoryTypelistSuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(postMsg.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            history.push({\r\n                pathname: CATEGORYTYPE_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateCategoryTypeIDSuccess({ Status: false }));\r\n            dispatch(\r\n                AlertState({\r\n                    Type: 3,\r\n                    Status: true,\r\n                    Message: JSON.stringify(updateMsg.Message),\r\n                })\r\n            );\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n  \r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const formSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        if (formValid(state, setState)) {\r\n            const jsonBody = JSON.stringify({\r\n                Name: values.Name,\r\n            });\r\n            if (pageMode === \"edit\") {\r\n                dispatch(updateCategoryTypeID(jsonBody, values.id));\r\n            }\r\n            else {\r\n                dispatch(PostMethodForCategoryTypeMaster(jsonBody))\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n                        <MetaTags>\r\n                            <title>{userPageAccessState.PageHeading}| FoodERP-React FrontEnd</title>\r\n                        </MetaTags>\r\n                        <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form onSubmit={formSubmitHandler} ref={formRef} noValidate>\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Name}</Label>\r\n                                                            <Input\r\n                                                                name=\"Name\"\r\n                                                                id=\"txtName\"\r\n                                                                value={values.Name}\r\n                                                                type=\"text\"\r\n                                                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                placeholder=\"Please Enter Name\"\r\n                                                                autoComplete=\"off\"\r\n                                                                autoFocus={true}\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.Name.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n\r\n                                                        <FormGroup className=\"mt-2\">\r\n                                                            <Row>\r\n                                                                <Col sm={2}>\r\n                                                                    <SaveButton pageMode={pageMode} userAcc={userPageAccessState}\r\n                                                                        module={\"CategoryTypeMaster\"}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </FormGroup>\r\n\r\n                                                    </Row>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n\r\n                        </Card>\r\n\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default CategoryTypeMaster\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\CategoryTypePages\\CategoryTypeList.js",["1453"],"import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport CategoryTypeMaster from \"./CategoryTypeMaster\";\r\nimport {\r\n  deleteCategoryTypeIDSuccess,\r\n  delete_CategoryType_ID,\r\n  editCategoryTypeID,\r\n  getCategoryTypelist,\r\n  PostMethod_ForCategoryTypeMasterAPISuccess,\r\n  updateCategoryTypeIDSuccess\r\n} from \"../../../store/actions\";\r\nimport CommonListPage from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport {  commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport { CATEGORYTYPE } from \"../../../routes/route_url\";\r\n\r\nconst CategoryTypeList = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      tableList: state.categoryTypeReducer.categoryTypeListData,\r\n      postMsg: state.categoryTypeReducer.PostData,\r\n      editData: state.categoryTypeReducer.editData,\r\n      updateMsg: state.categoryTypeReducer.updateMessage,\r\n      deleteMsg: state.categoryTypeReducer.deleteMessage,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: getCategoryTypelist,\r\n    editId: editCategoryTypeID,\r\n    deleteId:  delete_CategoryType_ID,\r\n    postSucc: PostMethod_ForCategoryTypeMasterAPISuccess,\r\n    updateSucc: updateCategoryTypeIDSuccess,\r\n    deleteSucc: deleteCategoryTypeIDSuccess,\r\n  }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(17))\r\n    dispatch(getCategoryTypelist());\r\n  }, []);\r\n\r\n  const { pageField } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        (pageField) ?\r\n          <CommonListPage\r\n            action={action}\r\n            reducers={reducers}\r\n            MasterModal={CategoryTypeMaster}\r\n            masterPath={CATEGORYTYPE}\r\n            ButtonMsgLable={\"CategoryType\"}\r\n            deleteName={\"Name\"}\r\n          />\r\n          : null\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default CategoryTypeList;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\EmployeePages\\EmployeeMaster.js",["1454","1455","1456","1457","1458","1459","1460","1461","1462","1463","1464","1465","1466","1467"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport Select from \"react-select\";\r\nimport { Card, CardBody, Col, Container, Row, Label, CardHeader, FormGroup, Input } from \"reactstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getDesignationID,\r\n  getEmployeeType,\r\n  getState,\r\n  postEmployee,\r\n  updateEmployeeID,\r\n  PostEmployeeSuccess,\r\n  Get_CompanyName_By_EmployeeTypeID,\r\n  editEmployeeSuccess,\r\n  updateEmployeeIDSuccess,\r\n  Get_CompanyName_By_EmployeeTypeID_Success\r\n} from \"../../../store/Administrator/M_EmployeeRedux/action\";\r\nimport { AlertState, commonPageField, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { getDistrictOnState, getPartyListAPI } from \"../../../store/Administrator/PartyRedux/action\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport Flatpickr from \"react-flatpickr\"\r\nimport { Breadcrumb_inputName } from \"../../../store/Utilites/Breadcrumb/actions\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { EMPLOYEE_lIST } from \"../../../routes/route_url\";\r\nimport {\r\n  comAddPageFieldFunc,\r\n  formValid,\r\n  initialFiledFunc,\r\n  onChangeDate,\r\n  onChangeSelect,\r\n  onChangeText,\r\n\r\n} from \"../../../components/Common/CmponentRelatedCommonFile/validationFunction\";\r\nimport SaveButton from \"../../../components/Common/CommonSaveButton\";\r\n\r\nconst AddEmployee = (props) => {\r\n\r\n  const formRef = useRef(null);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory()\r\n\r\n  const [pageMode, setPageMode] = useState(\"save\");\r\n  const [userPageAccessState, setUserPageAccessState] = useState('');\r\n\r\n  const [modalCss, setModalCss] = useState(false);\r\n  const [designation_DropdownSelect, setDesignation_DropdownSelect] = useState(\"\");\r\n  const [employeeType_DropdownSelect, setEmployeeType_DropdownSelect] = useState(\"\");\r\n  const [State_DropdownSelect, setState_DropdownSelect] = useState(\"\");\r\n  const [district_DropdownSelect, setDistrict_DropdownSelect] = useState(\"\");\r\n  const [company_DropdownSelect, setCompany_DropdownSelect] = useState(\"\");\r\n  const [party_DropdownSelect, setParty_DropdownSelect] = useState('');\r\n  const [DOB_Date_Select, setDOB_Date_Select] = useState(\"\");\r\n  const [partyDropDownShow_UI, setPartyDropDownShow_UI] = useState(false);\r\n\r\n  const {\r\n    designation,\r\n    employeeType,\r\n    State,\r\n    district,\r\n    partyList,\r\n    company,\r\n    postMsg,\r\n    userAccess,\r\n    pageField,\r\n    updateMsg } = useSelector((state) => ({\r\n      designation: state.M_EmployeesReducer.designation,\r\n      employeeType: state.M_EmployeesReducer.employeeType,\r\n      State: state.M_EmployeesReducer.State,\r\n      district: state.PartyMasterReducer.DistrictOnState,\r\n      partyList: state.PartyMasterReducer.partyList,\r\n      company: state.M_EmployeesReducer.CompanyNames,\r\n      postMsg: state.M_EmployeesReducer.postMessage,\r\n      updateMsg: state.M_EmployeesReducer.updateMessage,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageField\r\n\r\n    }));\r\n\r\n  const initialFiled = {\r\n    id: \"\",\r\n    Name: \"\",\r\n    Address: \"\",\r\n    Mobile: \"\",\r\n    email: \"\",\r\n    DOB: \"\",\r\n    PAN: \"\",\r\n    AadharNo: \"\",\r\n    working_hours: \"\",\r\n    CompanyName: \"\",\r\n    DesignationName: \"\",\r\n    EmployeeTypeName: \"\",\r\n    StateName: \"\",\r\n    DistrictName: \"\",\r\n    EmployeeParties: \"\"\r\n  }\r\n\r\n  const [state, setState] = useState(initialFiledFunc(initialFiled))\r\n  console.log(\"state\", state)\r\n  const values = { ...state.values }\r\n  const { isError } = state;\r\n  const { fieldLabel } = state;\r\n\r\n  useEffect(() => {\r\n\r\n    dispatch(commonPageFieldSuccess(null));\r\n    dispatch(commonPageField(8))\r\n    dispatch(getDesignationID());\r\n    dispatch(getEmployeeType());\r\n    dispatch(getState());\r\n    dispatch(getPartyListAPI());\r\n    dispatch(Get_CompanyName_By_EmployeeTypeID());\r\n  }, [dispatch]);\r\n\r\n  const location = { ...history.location }\r\n  const hasShowloction = location.hasOwnProperty(\"editValue\")\r\n  const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n  // userAccess useEffect\r\n  useEffect(() => {\r\n    let userAcc = null;\r\n    let locationPath = location.pathname;\r\n\r\n    if (hasShowModal) {\r\n      locationPath = props.masterPath;\r\n    };\r\n\r\n    userAcc = userAccess.find((inx) => {\r\n      return (`/${inx.ActualPagePath}` === locationPath)\r\n    })\r\n\r\n    if (userAcc) {\r\n      setUserPageAccessState(userAcc)\r\n    };\r\n  }, [userAccess])\r\n\r\n\r\n  // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n  useEffect(() => {\r\n\r\n    // if (!(userPageAccessState === '')) { document.getElementById(\"txtName\").focus(); }\r\n    if ((hasShowloction || hasShowModal)) {\r\n\r\n      let hasEditVal = null\r\n      if (hasShowloction) {\r\n        setPageMode(location.pageMode)\r\n        hasEditVal = location.editValue\r\n      }\r\n      else if (hasShowModal) {\r\n        hasEditVal = props.editValue\r\n        setPageMode(props.pageMode)\r\n        setModalCss(true)\r\n      }\r\n\r\n      if (hasEditVal) {\r\n        debugger\r\n        const listItems = hasEditVal.EmployeeParties.map((data) => ({\r\n          value: data.id,\r\n          label: data.Name\r\n        }))\r\n\r\n        setParty_DropdownSelect(listItems)\r\n\r\n        if ((hasEditVal.EmployeeParties).length > 0) { setPartyDropDownShow_UI(true) };\r\n\r\n\r\n        const { id, Name, Address, Mobile, email, DOB, PAN, AadharNo, working_hours,\r\n          CompanyName, DesignationName, EmployeeTypeName, StateName, DistrictName, EmployeeParties,\r\n          State_id, District_id, Company_id, EmployeeType_id, Designation_id } = hasEditVal\r\n        const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n        hasValid.Name.valid = true;\r\n        hasValid.Address.valid = true;\r\n        hasValid.Mobile.valid = true;\r\n        hasValid.email.valid = true;\r\n        hasValid.DOB.valid = true;\r\n        hasValid.PAN.valid = true;\r\n        hasValid.AadharNo.valid = true;\r\n        hasValid.working_hours.valid = true;\r\n        hasValid.CompanyName.valid = true;\r\n        hasValid.DesignationName.valid = true;\r\n        hasValid.EmployeeTypeName.valid = true;\r\n        hasValid.StateName.valid = true;\r\n        hasValid.DistrictName.valid = true;\r\n        hasValid.EmployeeParties.valid = true;\r\n\r\n\r\n        values.id = id\r\n        values.Address = Address;\r\n        values.Mobile = Mobile\r\n        values.email = email;\r\n        values.DOB = DOB\r\n        values.PAN = PAN;\r\n        values.AadharNo = AadharNo\r\n        values.working_hours = working_hours;\r\n        values.Name = Name;\r\n        values.DesignationName = { label: DesignationName, value: Designation_id };\r\n        values.CompanyName = { label: CompanyName, value: Company_id };\r\n        values.EmployeeTypeName = { label: EmployeeTypeName, value: EmployeeType_id };\r\n        values.StateName = { label: StateName, value: State_id };\r\n        values.DistrictName = { label: DistrictName, value: District_id };\r\n        values.EmployeeParties = listItems;\r\n\r\n        // values.CategoryTypeName = { label: CategoryTypeName, value: CategoryType };\r\n\r\n        setState({ values, fieldLabel, hasValid, required, isError })\r\n        dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n\r\n      }\r\n      dispatch(editEmployeeSuccess({ Status: false }))\r\n    }\r\n  }, [])\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    if ((postMsg.Status === true) && (postMsg.StatusCode === 200) && !(pageMode === \"dropdownAdd\")) {\r\n      dispatch(PostEmployeeSuccess({ Status: false }))\r\n      formRef.current.reset();\r\n      setDesignation_DropdownSelect('')\r\n      setEmployeeType_DropdownSelect('')\r\n      setState_DropdownSelect('')\r\n      setDOB_Date_Select('')\r\n      setDistrict_DropdownSelect('')\r\n      setParty_DropdownSelect('')\r\n      setCompany_DropdownSelect('')\r\n\r\n      if (pageMode === \"other\") {\r\n        dispatch(AlertState({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: postMsg.Message,\r\n        }))\r\n      }\r\n      else {\r\n        dispatch(AlertState({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: postMsg.Message,\r\n          RedirectPath: EMPLOYEE_lIST,\r\n        }))\r\n      }\r\n    }\r\n\r\n    else if (postMsg.Status === true) {\r\n      dispatch(PostEmployeeSuccess({ Status: false }))\r\n      dispatch(AlertState({\r\n        Type: 4,\r\n        Status: true,\r\n        Message: JSON.stringify(postMsg.Message),\r\n        RedirectPath: false,\r\n        AfterResponseAction: false\r\n      }));\r\n    }\r\n  }, [postMsg])\r\n\r\n  useEffect(() => {\r\n    if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n      history.push({\r\n        pathname: EMPLOYEE_lIST,\r\n      })\r\n    } else if (updateMsg.Status === true && !modalCss) {\r\n      dispatch(updateEmployeeIDSuccess({ Status: false }));\r\n      dispatch(\r\n        AlertState({\r\n          Type: 3,\r\n          Status: true,\r\n          Message: JSON.stringify(updateMsg.Message),\r\n        })\r\n      );\r\n    }\r\n  }, [updateMsg, modalCss]);\r\n\r\n  useEffect(() => {\r\n\r\n    if (pageField) {\r\n      const fieldArr = pageField.PageFieldMaster\r\n      comAddPageFieldFunc({ state, setState, fieldArr })\r\n    }\r\n  }, [pageField])\r\n\r\n  const Party_DropdownOptions = partyList.map((data) => ({\r\n    value: data.id,\r\n    label: data.Name\r\n  }));\r\n\r\n  const Company_DropdownOptions = company.map((data) => ({\r\n    value: data.id,\r\n    label: data.Name\r\n  }));\r\n\r\n  const EmployeeType_DropdownOptions = employeeType.map((data) => ({\r\n    value: data.id,\r\n    label: data.Name\r\n  }));\r\n\r\n  const State_DropdownOptions = State.map((data) => ({\r\n    value: data.id,\r\n    label: data.Name\r\n  }));\r\n\r\n  const District_DropdownOptions = district.map((data) => ({\r\n    value: data.id,\r\n    label: data.Name\r\n  }));\r\n\r\n  const Designation_DropdownOptions = designation.map((data) => ({\r\n    value: data.id,\r\n    label: data.Name\r\n  }));\r\n\r\n  function EmployeeType_Dropdown_Handler(e) {\r\ndebugger\r\n    dispatch(Get_CompanyName_By_EmployeeTypeID(e.value))\r\n   \r\n    const IsPartyConnection = employeeType.find((element) => {\r\n      return element.id === e.value\r\n    });\r\n\r\n    if (IsPartyConnection.IsPartyConnection) {\r\n      Party_Dropdown_Handler()\r\n      setPartyDropDownShow_UI(true)\r\n    }\r\n    else {\r\n      setPartyDropDownShow_UI(false)\r\n      setParty_DropdownSelect([{ value: null }])\r\n    }\r\n\r\n  }\r\n\r\n  function State_Dropdown_Handler(e, v) {\r\n    dispatch(getDistrictOnState(e.value))\r\n    setState_DropdownSelect(e)\r\n  }\r\n\r\n  function District_Dropdown_Handler(e, v) {\r\n    setDistrict_DropdownSelect(e)\r\n  }\r\n\r\n  function Party_Dropdown_Handler(e, v) {\r\n    setParty_DropdownSelect(e)\r\n  }\r\n\r\n  function Company_Dropdown_Handler(e, v) {\r\n    setCompany_DropdownSelect(e)\r\n\r\n  }\r\n\r\n  const formSubmitHandler = (event) => {\r\n    debugger\r\n    event.preventDefault();\r\n    if (formValid(state, setState)) {\r\n      const jsonBody = JSON.stringify({\r\n        Name: values.Name,\r\n        Address: values.Address,\r\n        Mobile: values.Mobile,\r\n        email: values.email,\r\n        DOB: values.DOB,\r\n        PAN: values.PAN,\r\n        AadharNo: values.AadharNo,\r\n        working_hours: values.working_hours,\r\n        Designation: values.DesignationName.value,\r\n        EmployeeType: values.EmployeeTypeName.value,\r\n        State: values.StateName.value,\r\n        District: values.DistrictName.value,\r\n        EmployeeParties: values.EmployeeParties.length > 0 ? [] : values.EmployeeParties.map((i) => { return ({ Party: i.value }) }),\r\n        Company: values.CompanyName.value,\r\n        CreatedBy: 1,\r\n        UpdatedBy: 1,\r\n      });\r\n\r\n      if (pageMode === \"edit\") {\r\n        dispatch(updateEmployeeID(jsonBody, values.id,));\r\n        console.log(\"update jsonBody\", jsonBody)\r\n      }\r\n      else {\r\n        dispatch(postEmployee(jsonBody));\r\n        console.log(\"post jsonBody\", jsonBody)\r\n\r\n      }\r\n    }\r\n  };\r\n\r\n  // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n  var IsEditMode_Css = ''\r\n  if ((modalCss) || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n  if (!(userPageAccessState === '')) {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n          <MetaTags>\r\n            <title>{userPageAccessState.PageHeading} | FoodERP-React FrontEnd</title>\r\n          </MetaTags>\r\n          <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n\r\n          <Container fluid>\r\n\r\n            <Card className=\"text-black\">\r\n              <CardHeader className=\"card-header   text-dark\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n              </CardHeader>\r\n\r\n              <CardBody>\r\n                <form onSubmit={formSubmitHandler} ref={formRef} noValidate>\r\n                  <Card  >\r\n                    <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                      <Row >\r\n\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\">{fieldLabel.Name} </Label>\r\n                          <Input\r\n                            name=\"Name\"\r\n                            id=\"txtName\"\r\n                            value={values.Name}\r\n                            type=\"text\"\r\n                            className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                            placeholder=\"Please Enter Name\"\r\n                            autoComplete='off'\r\n                            autoFocus={true}\r\n                            onChange={(event) => {\r\n                              onChangeText({ event, state, setState })\r\n                              dispatch(Breadcrumb_inputName(event.target.value))\r\n                            }}\r\n                          />\r\n                          {isError.Name.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                          )}\r\n                        </FormGroup>\r\n\r\n                        <Col md=\"1\">  </Col>\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\">{fieldLabel.email} </Label>\r\n                          <Input\r\n                            name=\"email\"\r\n                            value={values.email}\r\n                            type=\"text\"\r\n                            className={isError.email.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                            placeholder=\"Please Enter email\"\r\n                            autoComplete='off'\r\n                            onChange={(event) => {\r\n                              onChangeText({ event, state, setState })\r\n                            }}\r\n                          />\r\n                          {isError.email.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.email}</span>\r\n                          )}\r\n                        </FormGroup>\r\n\r\n                        <Col md=\"1\">  </Col>\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\">{fieldLabel.Mobile} </Label>\r\n                          <Input\r\n                            name=\"Mobile\"\r\n                            value={values.Mobile}\r\n                            type=\"text\"\r\n                            className={isError.Mobile.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                            placeholder=\"Please Enter Mobile\"\r\n                            autoComplete='off'\r\n                            onChange={(event) => {\r\n                              onChangeText({ event, state, setState })\r\n                            }}\r\n                          />\r\n                          {isError.Mobile.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.Mobile}</span>\r\n                          )}\r\n                        </FormGroup>\r\n                      </Row>\r\n\r\n                      <Row>\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\">{fieldLabel.DOB} </Label>\r\n                          <Flatpickr\r\n                            name=\"DOB\"\r\n                            value={values.DOB}\r\n                            className=\"form-control d-block p-2 bg-white text-dark\"\r\n                            placeholder=\"YYYY-MM-DD\"\r\n                            autoComplete=\"0,''\"\r\n                            options={{\r\n                              altInput: true,\r\n                              altFormat: \"F j, Y\",\r\n                              dateFormat: \"Y-m-d\",\r\n                              minDate: new Date().fp_incr(\"n\"),\r\n                              maxDate: new Date().fp_incr(0) // 14 days from now\"0,''\"\r\n                            }}\r\n                            onChange={(y, v, e) => { onChangeDate({ e, v, state, setState }) }}\r\n                          />\r\n                          {isError.DOB.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.DOB}</span>\r\n                          )}\r\n                        </FormGroup>\r\n\r\n                        <Col md=\"1\">  </Col>\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\">{fieldLabel.AadharNo} </Label>\r\n                          <Input\r\n                            name=\"AadharNo\"\r\n                            value={values.AadharNo}\r\n                            type=\"text\"\r\n                            className={isError.AadharNo.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                            placeholder=\"Please Enter AadharNo\"\r\n                            autoComplete='off'\r\n                            onChange={(event) => {\r\n                              onChangeText({ event, state, setState })\r\n                            }}\r\n                          />\r\n                          {isError.AadharNo.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.AadharNo}</span>\r\n                          )}\r\n                        </FormGroup>\r\n\r\n                        <Col md=\"1\">  </Col>\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\">{fieldLabel.PAN} </Label>\r\n                          <Input\r\n                            name=\"PAN\"\r\n                            value={values.PAN}\r\n                            type=\"text\"\r\n                            className={isError.PAN.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                            placeholder=\"Please Enter PAN\"\r\n                            autoComplete='off'\r\n                            onChange={(event) => {\r\n                              onChangeText({ event, state, setState })\r\n                            }}\r\n                          />\r\n                          {isError.PAN.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.PAN}</span>\r\n                          )}\r\n                        </FormGroup>\r\n                      </Row>\r\n\r\n                      <Row>\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\">{fieldLabel.Address} </Label>\r\n                          <Input\r\n                            name=\"Address\"\r\n                            value={values.Address}\r\n                            type=\"text\"\r\n                            className={isError.Address.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                            placeholder=\"Please Enter Address\"\r\n                            autoComplete='off'\r\n                            onChange={(event) => {\r\n                              onChangeText({ event, state, setState })\r\n                            }}\r\n                          />\r\n                          {isError.Address.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.Address}</span>\r\n                          )}\r\n                        </FormGroup>\r\n\r\n                        <Col md=\"1\"></Col>\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\"> {fieldLabel.StateName} </Label>\r\n                          <Col sm={12}>\r\n                            <Select\r\n                              name=\"StateName\"\r\n                              value={values.StateName}\r\n                              isSearchable={true}\r\n                              className=\"react-dropdown\"\r\n                              classNamePrefix=\"dropdown\"\r\n                              options={State_DropdownOptions}\r\n                              onChange={(hasSelect, evn) => {\r\n                                onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                State_Dropdown_Handler(hasSelect)\r\n                              }}\r\n\r\n                            />\r\n                            {isError.StateName.length > 0 && (\r\n                              <span className=\"text-danger f-8\"><small>{isError.StateName}</small></span>\r\n                            )}\r\n                          </Col>\r\n                        </FormGroup>\r\n\r\n                        <Col md=\"1\"></Col>\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\"> {fieldLabel.DistrictName} </Label>\r\n                          <Col sm={12}>\r\n                            <Select\r\n                              name=\"DistrictName\"\r\n                              value={values.DistrictName}\r\n                              isSearchable={true}\r\n                              className=\"react-dropdown\"\r\n                              classNamePrefix=\"dropdown\"\r\n                              options={District_DropdownOptions}\r\n                              onChange={(hasSelect, evn) => {\r\n                                onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                District_Dropdown_Handler(hasSelect)\r\n                              }}\r\n\r\n                            />\r\n                            {isError.DistrictName.length > 0 && (\r\n                              <span className=\"text-danger f-8\"><small>{isError.DistrictName}</small></span>\r\n                            )}\r\n                          </Col>\r\n                        </FormGroup>\r\n                      </Row>\r\n                    </CardBody>\r\n                  </Card>\r\n\r\n                  <Card className=\"mt-n2\">\r\n                    <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                      <Row >\r\n\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\"> {fieldLabel.EmployeeTypeName} </Label>\r\n                          <Col sm={12}>\r\n                            <Select\r\n                              name=\"EmployeeTypeName\"\r\n                              value={values.EmployeeTypeName}\r\n                              isSearchable={false}\r\n                              className=\"react-dropdown\"\r\n                              classNamePrefix=\"dropdown\"\r\n                              options={EmployeeType_DropdownOptions}\r\n                              onChange={(hasSelect, evn) => {\r\n                                onChangeSelect({ hasSelect, evn, state, setState });\r\n                                EmployeeType_Dropdown_Handler(hasSelect)\r\n                              }\r\n                              }\r\n                            />\r\n                            {isError.EmployeeTypeName.length > 0 && (\r\n                              <span className=\"text-danger f-8\"><small>{isError.EmployeeTypeName}</small></span>\r\n                            )}\r\n                          </Col>\r\n                        </FormGroup>\r\n\r\n                        <Col md=\"1\">  </Col>\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\"> {fieldLabel.CompanyName} </Label>\r\n                          <Col sm={12}>\r\n                            <Select\r\n                              name=\"CompanyName\"\r\n                              value={values.CompanyName}\r\n                              isSearchable={false}\r\n                              className=\"react-dropdown\"\r\n                              classNamePrefix=\"dropdown\"\r\n                              options={Company_DropdownOptions}\r\n                              onChange={(hasSelect, evn) => {\r\n                                onChangeSelect({ hasSelect, evn, state, setState });\r\n                                Company_Dropdown_Handler(hasSelect)\r\n                              }\r\n                              }\r\n                            />\r\n                            {isError.CompanyName.length > 0 && (\r\n                              <span className=\"text-danger f-8\"><small>{isError.CompanyName}</small></span>\r\n                            )}\r\n                          </Col>\r\n                        </FormGroup>\r\n\r\n\r\n                        <Col md=\"1\">  </Col>\r\n                        {partyDropDownShow_UI ?\r\n                          <div className=\"col-lg-3 col-md-4\">\r\n                            <div className=\"mb-3\">\r\n                              <Label htmlFor=\"validationCustom01\">{fieldLabel.EmployeeParties} </Label>\r\n                              <Select\r\n                                name=\"EmployeeParties\"\r\n                                // defaultValue={EmployeeType_DropdownOptions[0]}\r\n                                value={values.EmployeeParties}\r\n                                isSearchable={false}\r\n                                isMulti={true}\r\n                                className=\"react-dropdown\"\r\n                                options={Party_DropdownOptions}\r\n                                onChange={(hasSelect, evn) => {\r\n                                  onChangeSelect({ hasSelect, evn, state, setState });\r\n                                  Party_Dropdown_Handler(hasSelect)\r\n                                }\r\n                                }\r\n                                classNamePrefix=\"dropdown\"\r\n                              />\r\n                              {isError.EmployeeParties.length > 0 && (\r\n                                <span className=\"text-danger f-8\"><small>{isError.EmployeeParties}</small></span>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                          : <></>}\r\n                      </Row>\r\n\r\n                      <Row>\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\"> {fieldLabel.DesignationName} </Label>\r\n                          <Col sm={12}>\r\n                            <Select\r\n                              name=\"DesignationName\"\r\n                              value={values.DesignationName}\r\n                              isSearchable={false}\r\n                              className=\"react-dropdown\"\r\n                              classNamePrefix=\"dropdown\"\r\n                              options={Designation_DropdownOptions}\r\n                              onChange={(hasSelect, evn) => onChangeSelect({ hasSelect, evn, state, setState })}\r\n                            />\r\n                            {isError.DesignationName.length > 0 && (\r\n                              <span className=\"text-danger f-8\"><small>{isError.DesignationName}</small></span>\r\n                            )}\r\n                          </Col>\r\n                        </FormGroup>\r\n\r\n\r\n                        <Col md=\"1\">  </Col>\r\n\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\">{fieldLabel.working_hours} </Label>\r\n                          <Input\r\n                            name=\"working_hours\"\r\n                            value={values.working_hours}\r\n                            type=\"text\"\r\n                            className={isError.working_hours.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                            placeholder=\"Please Enter working hours\"\r\n                            autoComplete='off'\r\n                            onChange={(event) => {\r\n                              onChangeText({ event, state, setState })\r\n                            }}\r\n                          />\r\n                          {isError.working_hours.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.working_hours}</span>\r\n                          )}\r\n                        </FormGroup>\r\n\r\n                      </Row>\r\n\r\n                      <FormGroup className=\"mt-3\">\r\n                        <Row>\r\n                          <Col sm={2}>\r\n                            <SaveButton pageMode={pageMode} userAcc={userPageAccessState}\r\n                              module={\"EmployeeMaster\"}\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                      </FormGroup >\r\n                    </CardBody>\r\n                  </Card>\r\n\r\n                </form>\r\n              </CardBody>\r\n            </Card>\r\n          </Container>\r\n        </div>\r\n      </React.Fragment >\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <React.Fragment></React.Fragment>\r\n    )\r\n  }\r\n};\r\nexport default AddEmployee\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\CategoryPages\\CategoryMaster.js",["1468","1469","1470","1471","1472","1473","1474"],"import React, { useEffect, useRef, useState, } from \"react\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { Breadcrumb_inputName, commonPageField, commonPageFieldSuccess, getCategoryTypelist } from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    editCategoryIDSuccess,\r\n    PostMethodForCategory,\r\n    PostMethod_ForCategoryAPISuccess,\r\n    updateCategoryID,\r\n    updateCategoryIDSuccess\r\n} from \"../../../store/Administrator/CategoryRedux/action\";\r\nimport { AlertState } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    onChangeText,\r\n\r\n} from \"../../../components/Common/CmponentRelatedCommonFile/validationFunction\";\r\nimport { CATEGORY_lIST } from \"../../../routes/route_url\";\r\nimport SaveButton from \"../../../components/Common/CommonSaveButton\";\r\n\r\nconst CategoryMaster = (props) => {\r\n\r\n    const formRef = useRef(null);\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n\r\n    const [pageMode, setPageMode] = useState(\"\");\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [userPageAccessState, setUserPageAccessState] = useState(123);\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        CategoryAPI,\r\n        pageField,\r\n        updateMsg,\r\n        userAccess } = useSelector((state) => ({\r\n            postMsg: state.CategoryReducer.PostDataMessage,\r\n            updateMsg: state.CategoryReducer.updateMessage,\r\n            CategoryAPI: state.categoryTypeReducer.categoryTypeListData,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        }));\r\n\r\n\r\n    {/** Dyanamic Page access state and OnChange function */ }\r\n    const initialFiled = {\r\n        id: \"\",\r\n        Name: \"\",\r\n        CategoryTypeName: \"\",\r\n      }\r\n    \r\n    const [state, setState] = useState(initialFiledFunc(initialFiled))\r\n \r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(18))\r\n    }, []);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(\"editValue\")\r\n    const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserPageAccessState(userAcc)\r\n        };\r\n    }, [userAccess])\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                const { id, Name, CategoryTypeName, CategoryType } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n                hasValid.Name.valid = true;\r\n                hasValid.CategoryTypeName.valid = true;\r\n\r\n                values.id = id\r\n                values.Name = Name;\r\n                values.CategoryTypeName = { label: CategoryTypeName, value: CategoryType };\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n\r\n            }\r\n            dispatch(editCategoryIDSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(PostMethod_ForCategoryAPISuccess({ Status: false }))\r\n            formRef.current.reset();\r\n            if (pageMode === \"other\") {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                }))\r\n            }\r\n            else {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                    RedirectPath: CATEGORY_lIST,\r\n                }))\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(PostMethod_ForCategoryAPISuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(postMessage.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            history.push({\r\n                pathname: CATEGORY_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateCategoryIDSuccess({ Status: false }));\r\n            dispatch(\r\n                AlertState({\r\n                    Type: 3,\r\n                    Status: true,\r\n                    Message: JSON.stringify(updateMsg.Message),\r\n                })\r\n            );\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    //get method for dropdown\r\n    useEffect(() => {\r\n        dispatch(getCategoryTypelist());\r\n    }, [dispatch]);\r\n\r\n    const CategoryTypesValues = CategoryAPI.map((Data) => ({\r\n        value: Data.id,\r\n        label: Data.Name\r\n    }));\r\n\r\n    const formSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        if (formValid(state, setState)) {\r\n            const jsonBody = JSON.stringify({\r\n                Name: values.Name,\r\n                CategoryType: values.CategoryTypeName.value,\r\n            });\r\n\r\n            if (pageMode === \"edit\") {\r\n                dispatch(updateCategoryID(jsonBody, values.id,));\r\n            }\r\n            else {\r\n                dispatch(PostMethodForCategory(jsonBody));\r\n            }\r\n        }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n                        <MetaTags>\r\n                            <title>{userPageAccessState.PageHeading} | FoodERP-React FrontEnd</title>\r\n                        </MetaTags>\r\n                        <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form onSubmit={formSubmitHandler} ref={formRef} noValidate>\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Name} </Label>\r\n                                                            <Input\r\n                                                                name=\"Name\"\r\n                                                                id=\"txtName\"\r\n                                                                value={values.Name}\r\n                                                                type=\"text\"\r\n                                                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                placeholder=\"Please Enter Name\"\r\n                                                                autoComplete='off'\r\n                                                                autoFocus={true}\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.Name.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n\r\n                                                        <Row>\r\n                                                            <Col md=\"4\" >\r\n                                                                <FormGroup className=\"mb-3\">\r\n                                                                    <Label htmlFor=\"validationCustom01\"> {fieldLabel.CategoryTypeName} </Label>\r\n                                                                    <Col sm={12}  style={{height:\"2.5cm\"}}>\r\n                                                                        <Select\r\n                                                                            name=\"CategoryTypeName\"\r\n                                                                            value={values.CategoryTypeName}\r\n                                                                            isSearchable={false}\r\n                                                                            className=\"react-dropdown\"\r\n                                                                            classNamePrefix=\"dropdown\"\r\n                                                                            options={CategoryTypesValues}\r\n                                                                            onChange={(hasSelect, evn) => onChangeSelect({ hasSelect, evn, state, setState, })}\r\n\r\n                                                                        />\r\n                                                                        {isError.CategoryTypeName.length > 0 && (\r\n                                                                            <span className=\"text-danger f-8\"><small>{isError.CategoryTypeName}</small></span>\r\n                                                                        )}\r\n                                                                    </Col>\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                        </Row>\r\n\r\n                                                        <FormGroup>\r\n                                                            <Row>\r\n                                                                <Col sm={2}>\r\n                                                                    <SaveButton pageMode={pageMode} userAcc={userPageAccessState}\r\n                                                                        module={\"CategoryMaster\"}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </FormGroup >\r\n                                                    </Row>\r\n\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n\r\n                        </Card>\r\n\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default CategoryMaster\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\VehiclePages\\VehicleList.js",["1475"],"import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport VehicleMaster from \"./VehicleMaster\";\r\nimport {\r\n  deleteVehicleTypeIDSuccess,\r\n  updateVehicleTypeIDSuccess,\r\n  getMethodForVehicleList,\r\n  editVehicleTypeId,\r\n  delete_VehicleType_ID,\r\n  PostMethod_ForVehicleMasterSuccess,\r\n} from \"../../../store/Administrator/VehicleRedux/action\";\r\nimport CommonListPage from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess, } from \"../../../store/actions\";\r\nimport { VEHICLE } from \"../../../routes/route_url\";\r\n\r\nconst VehicleList = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      tableList: state.VehicleReducer.VehicleList,\r\n      postMsg: state.VehicleReducer.postMsg,\r\n      editData: state.VehicleReducer.editData,\r\n      updateMsg: state.VehicleReducer.updateMsg,\r\n      deleteMsg: state.VehicleReducer.deleteMsg,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: getMethodForVehicleList,\r\n    editId: editVehicleTypeId,\r\n    deleteId: delete_VehicleType_ID,\r\n    postSucc: PostMethod_ForVehicleMasterSuccess,\r\n    updateSucc: updateVehicleTypeIDSuccess,\r\n    deleteSucc: deleteVehicleTypeIDSuccess,\r\n  }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(31))\r\n    dispatch(getMethodForVehicleList());\r\n  }, []);\r\n\r\n  const { pageField } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        (pageField) ?\r\n          <CommonListPage\r\n            action={action}\r\n            reducers={reducers}\r\n            MasterModal={VehicleMaster}\r\n            masterPath={VEHICLE}\r\n            ButtonMsgLable={\"Vehicle\"}\r\n            deleteName={\"VehicleNumber\"}\r\n\r\n          />\r\n          : null\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default VehicleList;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\SubCategoryPages\\SubCategoryMaster.js",["1476","1477","1478","1479","1480","1481","1482","1483","1484","1485","1486"],"import React, { useEffect, useRef, useState, } from \"react\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    editSubCategoryIDSuccess,\r\n    PostMethodForSubCategory,\r\n    PostMethod_ForSubCategoryAPISuccess,\r\n    updateSubCategoryID\r\n} from \"../../../store/Administrator/SubCategoryRedux/action\";\r\nimport { AlertState, Breadcrumb_inputName, commonPageField } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getCategorylist } from \"../../../store/Administrator/CategoryRedux/action\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValChange,\r\n    formValid,\r\n    onChangeSelect,\r\n    onChangeText,\r\n} from \"../../../components/Common/CmponentRelatedCommonFile/validationFunction\";\r\nimport SaveButton from \"../../../components/Common/CommonSaveButton\";\r\n\r\nconst SubCategoryMaster = (props) => {\r\n\r\n    //*** \"isEditdata get all data from ModuleID for Binding  Form controls\r\n    let editDataGetingFromList = props.state;\r\n    let pageModeProps = props.pageMode;\r\n\r\n    const formRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    const [pageMode, setPageMode] = useState(\"\");\r\n    const [EditData, setEditData] = useState([]);\r\n    const [category_dropdown_Select, setCategory_dropdown_Select] = useState(\"\");\r\n    const [userPageAccessState, setUserPageAccessState] = useState(123);\r\n\r\n\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        PostAPIResponse,\r\n        CategoryAPI,\r\n        pageField,\r\n        RoleAccessModifiedinSingleArray\r\n    } = useSelector((state) => ({\r\n        PostAPIResponse: state.SubCategoryReducer.PostDataMessage,\r\n        CategoryAPI: state.CategoryReducer.CategoryListData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        RoleAccessModifiedinSingleArray: state.Login.RoleAccessUpdateData,\r\n\r\n    }));\r\n\r\n\r\n    {/** Dyanamic Page access state and OnChange function */ }\r\n    {/*start */ }\r\n    const [state, setState] = useState({\r\n        values: {\r\n            Name: \"\",\r\n            ProductCategoryName: \"\",\r\n        },\r\n        fieldLabel: {\r\n            Name: '',\r\n            Category: '',\r\n        },\r\n\r\n        isError: {\r\n            Name: \"\",\r\n            ProductCategoryName: \"\",\r\n\r\n        },\r\n\r\n        hasValid: {\r\n            Name: {\r\n                regExp: '',\r\n                inValidMsg: \"\",\r\n                valid: false\r\n            },\r\n            ProductCategoryName: {\r\n                regExp: '',\r\n                inValidMsg: \"\",\r\n                valid: false\r\n            },\r\n        },\r\n        required: {\r\n\r\n        }\r\n    })\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n\r\n    useEffect(() => {\r\n        // dispatch(commonPageFieldSuccess([]));\r\n        dispatch(commonPageField(90))\r\n    }, []);\r\n    {/*End */ }\r\n\r\n\r\n\r\n    //userAccess useEffect\r\n    useEffect(() => {\r\n\r\n        let userAcc = undefined\r\n        if ((editDataGetingFromList === undefined)) {\r\n\r\n            let locationPath = history.location.pathname\r\n            userAcc = RoleAccessModifiedinSingleArray.find((inx) => {\r\n                return (`/${inx.ActualPagePath}` === locationPath)\r\n            })\r\n        }\r\n        else if (!(editDataGetingFromList === undefined)) {\r\n            let relatatedPage = props.relatatedPage\r\n            userAcc = RoleAccessModifiedinSingleArray.find((inx) => {\r\n                return (`/${inx.ActualPagePath}` === relatatedPage)\r\n            })\r\n\r\n        }\r\n        if (!(userAcc === undefined)) {\r\n            setUserPageAccessState(userAcc)\r\n        }\r\n\r\n    }, [RoleAccessModifiedinSingleArray])\r\n\r\n    useEffect(() => {\r\n        dispatch(getCategorylist());\r\n    }, [dispatch]);\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n        if (!(userPageAccessState === '')) { document.getElementById(\"txtName\").focus(); }\r\n        if (!(editDataGetingFromList === undefined)) {\r\n            setEditData(editDataGetingFromList);\r\n            setPageMode(pageModeProps);\r\n            setCategory_dropdown_Select({\r\n                value: editDataGetingFromList.ProductCategory_id,\r\n                label: editDataGetingFromList.ProductCategoryName\r\n            })\r\n            dispatch(editSubCategoryIDSuccess({ Status: false }))\r\n            dispatch(Breadcrumb_inputName(editDataGetingFromList.Name))\r\n            return\r\n        }\r\n    }, [editDataGetingFromList])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if ((PostAPIResponse.Status === true) && (PostAPIResponse.StatusCode === 200)) {\r\n            setCategory_dropdown_Select('')\r\n            dispatch(PostMethod_ForSubCategoryAPISuccess({ Status: false }))\r\n            formRef.current.reset();\r\n            if (pageMode === \"dropdownAdd\") {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: PostAPIResponse.Message,\r\n                }))\r\n            }\r\n            else {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: PostAPIResponse.Message,\r\n                    RedirectPath: '/SubCategoryList',\r\n                }))\r\n            }\r\n        }\r\n        else if (PostAPIResponse.Status === true) {\r\n            dispatch(PostMethod_ForSubCategoryAPISuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(PostAPIResponse.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [PostAPIResponse])\r\n\r\n\r\n    useEffect(() => {\r\n        if (pageField.length > 0) {\r\n            comAddPageFieldFunc({ state, setState, pageField })\r\n        }\r\n    }, [pageField])\r\n\r\n    const CategoryDropdownOptions = CategoryAPI.map((Data) => ({\r\n        value: Data.id,\r\n        label: Data.Name\r\n    }));\r\n\r\n    function handllerCategoryDropdown(e) {\r\n        setCategory_dropdown_Select(e)\r\n    }\r\n\r\n\r\n    const formSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        if (formValid(state, setState)) {\r\n            const jsonBody = JSON.stringify({\r\n                Name: values.Name,\r\n                ProductCategory: values.ProductCategoryName.value,\r\n            });\r\n\r\n            if (pageMode === \"edit\") {\r\n                dispatch(updateSubCategoryID(jsonBody, EditData.id));\r\n            }\r\n            else {\r\n                dispatch(PostMethodForSubCategory(jsonBody));\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((pageMode === \"edit\") || (pageMode === \"copy\") || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n                        <MetaTags>\r\n                            <title>{userPageAccessState.PageHeading}| FoodERP-React FrontEnd</title>\r\n                        </MetaTags>\r\n                        <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form onSubmit={formSubmitHandler} ref={formRef} noValidate>\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Name} </Label>\r\n                                                            <Input\r\n                                                                name=\"Name\"\r\n                                                                id=\"txtName\"\r\n                                                                value={EditData.Name}\r\n                                                                type=\"text\"\r\n                                                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                placeholder=\"Please Enter Name\"\r\n                                                                autoComplete='off'\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.Name.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n\r\n                                                        <Row>\r\n                                                            <Col md=\"4\">\r\n                                                                <FormGroup className=\"mb-3\">\r\n                                                                    <Label htmlFor=\"validationCustom01\"> {fieldLabel.ProductCategoryName}</Label>\r\n                                                                    <Col sm={12}>\r\n                                                                        <Select\r\n                                                                            name=\"ProductCategoryName\"\r\n                                                                            Value={values.category}\r\n                                                                            isSearchable={false}\r\n                                                                            className=\"react-dropdown\"\r\n                                                                            classNamePrefix=\"dropdown\"\r\n                                                                            onChange={(v, e) => onChangeSelect({ e, v, state, setState })}\r\n                                                                            options={CategoryDropdownOptions}\r\n                                                                            styles={{\r\n                                                                                control: base => ({\r\n                                                                                    ...base,\r\n                                                                                    border: isError.ProductCategoryName.length > 0 ? '1px solid red' : '',\r\n\r\n                                                                                })\r\n                                                                            }}\r\n                                                                        />\r\n                                                                        {isError.ProductCategoryName.length > 0 && (\r\n                                                                            <span className=\"text-danger f-8\"><small>{isError.ProductCategoryName}</small></span>\r\n                                                                        )}\r\n                                                                    </Col>\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                        </Row>\r\n\r\n                                                        <FormGroup>\r\n                                                            <Row>\r\n                                                                <Col sm={2}>\r\n                                                                    <SaveButton pageMode={pageMode} userAcc={userPageAccessState}\r\n                                                                        module={\"SubCategoryMaster\"}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </FormGroup >\r\n                                                    </Row>\r\n\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n\r\n\r\n\r\n                        </Card>\r\n\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default SubCategoryMaster\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\SubCategoryPages\\SubCategoryList.js",["1487","1488","1489"],"import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  deleteSubCategoryIDSuccess,\r\n  delete_SubCategory_ID,\r\n  editSubCategoryID,\r\n  getSubCategorylist,\r\n  PostMethod_ForSubCategoryAPISuccess,\r\n  updateSubCategoryIDSuccess\r\n} from \"../../../store/Administrator/SubCategoryRedux/action\";\r\nimport SubCategoryMaster from \"./SubCategoryMaster\";\r\nimport CommonListPage from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport { commonPageField, commonPageFieldList, commonPageFieldListSuccess, commonPageFieldSuccess } from \"../../../store/actions\";\r\n\r\n\r\nconst SubCategoryList = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      tableList: state.SubCategoryReducer.SubCategoryListData,\r\n      editData: state.SubCategoryReducer.editData,\r\n      updateMsg: state.SubCategoryReducer.updateMessage,\r\n      deleteMsg: state.SubCategoryReducer.deleteMessage,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      postMsg: state.SubCategoryReducer.PostDataMessage,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: getSubCategorylist,\r\n    editId: editSubCategoryID,\r\n    deleteId: deleteSubCategoryIDSuccess,\r\n    postSucc: PostMethod_ForSubCategoryAPISuccess,\r\n    updateSucc: updateSubCategoryIDSuccess,\r\n    deleteSucc: delete_SubCategory_ID\r\n  }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(25))\r\n    dispatch(getSubCategorylist());\r\n  }, []);\r\n\r\n  const { pageField } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        (pageField) ?\r\n          <CommonListPage\r\n            action={action}\r\n            reducers={reducers}\r\n            MasterModal={SubCategoryMaster}\r\n            masterPath={\"/SubCategoryMaster\"}\r\n          />\r\n          : null\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default SubCategoryList;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\VehiclePages\\VehicleMaster.js",["1490","1491","1492","1493","1494","1495","1496","1497","1498","1499"],"import React, { useEffect, useRef, useState, } from \"react\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Label,\r\n    Row,\r\n    Table,\r\n    Button,\r\n    Input,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { Breadcrumb_inputName, commonPageField, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Tbody, Thead } from \"react-super-responsive-table\";\r\nimport { AlertState } from \"../../../store/actions\";\r\nimport {\r\n    PostMethodForVehicleMaster,\r\n    getMethodForVehicleList,\r\n    getMethod_DriverList_ForDropDown,\r\n    getMethod_VehicleTypes_ForDropDown,\r\n    PostMethod_ForVehicleMasterSuccess,\r\n    getMethod_ForVehicleListSuccess,\r\n    editVehicleTypeSuccess,\r\n    updateVehicleTypeID,\r\n    updateVehicleTypeIDSuccess\r\n} from \"../../../store/Administrator/VehicleRedux/action\";\r\nimport { get_Division_ForDropDown, } from \"../../../store/Administrator/ItemsRedux/action\";\r\nimport { useHistory } from \"react-router-dom\";\r\n// import { actionChannel } from \"redux-saga/effects\";\r\nimport { DRIVER_lIST, VEHICLE_lIST } from \"../../../routes/route_url\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    onChangeText\r\n} from \"../../../components/Common/CmponentRelatedCommonFile/validationFunction\";\r\nimport SaveButton from \"../../../components/Common/CommonSaveButton\";\r\n\r\n\r\nconst VehicleMaster = (props) => {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    const formRef = useRef(null);\r\n\r\n    //*** \"isEditdata get all data from ModuleID for Binding  Form controls\r\n    const [EditData, setEditData] = useState({});\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(\"save\");\r\n    const [userPageAccessState, setUserPageAccessState] = useState('');\r\n\r\n    const [divisionData, setDivisionData] = useState([]);\r\n\r\n    const [divisionType_dropdown_Select, setDivisionType_dropdown_Select] = useState(\"\");\r\n   \r\n    const initialFiled = {\r\n        id: \"\",\r\n        VehicleNumber: \"\",\r\n        Description: \"\",\r\n        Driver: \"\",\r\n        VehicleType: \"\",\r\n        VehicleDivisions: \"\"\r\n      }\r\n    \r\n    const [state, setState] = useState(initialFiledFunc(initialFiled))\r\n   \r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        updateMsg,\r\n        Divisions,\r\n        VehicleTypes,\r\n        pageField,\r\n        DriverList_redux,\r\n        userAccess } = useSelector((state) => ({\r\n            postMsg: state.VehicleReducer.postMsg,\r\n            updateMsg: state.VehicleReducer.updateMsg,\r\n            VehicleList: state.VehicleReducer.VehicleList,\r\n            Divisions: state.ItemMastersReducer.Division,\r\n            VehicleTypes: state.VehicleReducer.VehicleTypes,\r\n            DriverList_redux: state.VehicleReducer.DriverList,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        }));\r\n\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(\"editValue\")\r\n    const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(29))\r\n    }, []);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        //  dispatch(PostMethodForVehicleMaster());\r\n        dispatch(getMethodForVehicleList());\r\n        dispatch(getMethod_DriverList_ForDropDown());\r\n        dispatch(getMethod_VehicleTypes_ForDropDown());\r\n        dispatch(get_Division_ForDropDown());\r\n    }, [dispatch]);\r\n\r\n\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserPageAccessState(userAcc)\r\n        };\r\n    }, [userAccess])\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        // if (!(userPageAccessState === '')) { document.getElementById(\"txtName\").focus(); }\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n                debugger\r\n                const divisionTable = hasEditVal.VehicleDivisions.map((data) => ({\r\n                    value: data.Division,\r\n                    label: data.DivisionName\r\n                }))\r\n\r\n                const { id, VehicleNumber, Description, Driver, DriverName, VehicleType, VehicleTypeName , VehicleDivisions, } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n                hasValid.VehicleNumber.valid = true;\r\n                hasValid.Driver.valid = true;\r\n                hasValid.Description.valid = true;\r\n                hasValid.VehicleType.valid = true;\r\n                hasValid.VehicleDivisions.valid = true;\r\n\r\n\r\n                values.id = id\r\n                values.VehicleNumber = VehicleNumber\r\n                values.Description = Description\r\n                values.Driver = { label: DriverName, value: Driver };\r\n                values.VehicleType = { label: VehicleTypeName, value: VehicleType };\r\n                values.VehicleDivisions = divisionTable\r\n\r\n                setDivisionData(divisionTable)\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.RoleMaster))\r\n                dispatch(editVehicleTypeSuccess({ Status: false }))\r\n\r\n\r\n            }\r\n        }\r\n\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n\r\n            dispatch(PostMethod_ForVehicleMasterSuccess({ Status: false }))\r\n            formRef.current.reset();\r\n\r\n            if (pageMode === \"dropdownAdd\") {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                }))\r\n            }\r\n            else {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                    RedirectPath: VEHICLE_lIST,\r\n                }))\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(getMethod_ForVehicleListSuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(postMessage.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            history.push({\r\n                pathname: VEHICLE_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateVehicleTypeIDSuccess({ Status: false }));\r\n            dispatch(\r\n                AlertState({\r\n                    Type: 3,\r\n                    Status: true,\r\n                    Message: JSON.stringify(updateMsg.Message),\r\n                })\r\n            );\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const DivisionType_DropdownOptions = Divisions.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }));\r\n\r\n    function DivisionType_DropDown_handller(e) {\r\n        setDivisionType_dropdown_Select(e)\r\n    }\r\n\r\n    const DriverList_DropdownOptions = DriverList_redux.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }));\r\n\r\n\r\n    const VehicleType_DropdownOptions = VehicleTypes.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }));\r\n\r\n\r\n\r\n    const formSubmitHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n        const leng = divisionData.length\r\n        if (leng === 0) {\r\n            dispatch(AlertState({\r\n                Type: 3, Status: true,\r\n                Message: \"Select Atleast One Division..!\",\r\n            }));\r\n            return\r\n        }\r\n        if (formValid(state, setState)) {\r\n            var division = divisionData.map(i => ({ Division: i.value }))\r\n            const jsonBody = JSON.stringify({\r\n                VehicleNumber: values.VehicleNumber,\r\n                Description: values.Description,\r\n                Driver: values.Driver.value,\r\n                VehicleType: values.VehicleType.value,\r\n                VehicleDivisions: division,\r\n            });\r\n\r\n\r\n            if (pageMode === 'edit') {\r\n                dispatch(updateVehicleTypeID(jsonBody, values.id));\r\n                console.log(\"update jsonBody\", jsonBody)\r\n            }\r\n            else {\r\n                dispatch(PostMethodForVehicleMaster(jsonBody));\r\n                console.log(\"post jsonBody\", jsonBody)\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    function AddDivisionHandler() {\r\n\r\n        const find = divisionData.find((element) => {\r\n            return element.value === divisionType_dropdown_Select.value\r\n        });\r\n\r\n        if (divisionType_dropdown_Select.length <= 0) {\r\n            dispatch(AlertState({\r\n                Type: 3, Status: true,\r\n                Message: \"Select One Role\",\r\n            }));\r\n        }\r\n        else if (find === undefined) {\r\n            setDivisionData([...divisionData, divisionType_dropdown_Select]);\r\n        }\r\n        else {\r\n            dispatch(AlertState({\r\n                Type: 4, Status: true,\r\n                Message: \"DivisionType already Exists \",\r\n            }));\r\n        }\r\n    }\r\n\r\n\r\n    // For Delete Button in table\r\n    function UserRoles_DeleteButton_Handller(tableValue) {\r\n        setDivisionData(divisionData.filter(\r\n            (item) => !(item.value === tableValue)\r\n        )\r\n        )\r\n    }\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n                        <MetaTags>\r\n                            <title>{userPageAccessState.PageHeading}  | FoodERP-React FrontEnd</title>\r\n                        </MetaTags>\r\n                        <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form onSubmit={formSubmitHandler} ref={formRef} noValidate>\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                                                    <Row className=\"mt-1\">\r\n                                                        <Col md=\"3\">\r\n                                                            <FormGroup className=\"mb-3\">\r\n                                                                <Label htmlFor=\"validationCustom01\">{fieldLabel.Driver} </Label>\r\n                                                                <Col sm={12}>\r\n                                                                    <Select\r\n                                                                        id=\"DriverDropDown \"\r\n                                                                        // disabled={true}\r\n                                                                        name=\"Driver\"\r\n                                                                        value={values.Driver}\r\n                                                                        isSearchable={false}\r\n                                                                        className=\"react-dropdown\"\r\n                                                                        classNamePrefix=\"dropdown\"\r\n                                                                        options={DriverList_DropdownOptions}\r\n                                                                        onChange={(hasSelect, evn) => onChangeSelect({ hasSelect, evn, state, setState, })}\r\n                                                                       \r\n                                                                    />\r\n                                                                    {isError.Driver.length > 0 && (\r\n                                                                        <span className=\"text-danger f-8\"><small>{isError.Driver}</small></span>\r\n                                                                    )}\r\n                                                                </Col>\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n\r\n\r\n                                                        <Col md=\"1\"className=\"mx-n1\">  </Col>\r\n                                                        <Col md=\"3\">\r\n                                                            <FormGroup className=\"mb-3\">\r\n                                                                <Label htmlFor=\"validationCustom01\"> {fieldLabel.VehicleType}</Label>\r\n                                                                <Col sm={12}>\r\n                                                                    <Select\r\n                                                                        id=\"VehicleDropDown \"\r\n                                                                        // disabled={true}\r\n                                                                        name=\"VehicleType\"\r\n                                                                        value={values.VehicleType}\r\n                                                                        isSearchable={false}\r\n                                                                        className=\"react-dropdown\"\r\n                                                                        classNamePrefix=\"dropdown\"\r\n                                                                        options={VehicleType_DropdownOptions}\r\n                                                                        onChange={(hasSelect, evn) => onChangeSelect({ hasSelect, evn, state, setState, })}\r\n                                                                    />\r\n                                                                    {isError.VehicleType.length > 0 && (\r\n                                                                        <span className=\"text-danger f-8\"><small>{isError.VehicleType}</small></span>\r\n                                                                    )}\r\n                                                                </Col>\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n\r\n                                                        <Row>\r\n                                                            <Col md=\"4\">\r\n                                                                <FormGroup className=\"mb-2 col col-sm-9 \">\r\n                                                                    <Label htmlFor=\"validationCustom01\">{fieldLabel.VehicleNumber} </Label>\r\n                                                                    <Input\r\n                                                                        name=\"VehicleNumber\"\r\n                                                                        id=\"VehicleNumber\"\r\n                                                                        value={values.VehicleNumber}\r\n                                                                        type=\"text\"\r\n                                                                        className={isError.VehicleNumber.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                        placeholder=\"Please Enter VehicleNumber\"\r\n                                                                        autoComplete='off'\r\n                                                                        onChange={(event) => {\r\n                                                                            onChangeText({ event, state, setState })\r\n                                                                            dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                        }}\r\n                                                                    />\r\n                                                                    {isError.VehicleNumber.length > 0 && (\r\n                                                                        <span className=\"invalid-feedback\">{isError.VehicleNumber}</span>\r\n                                                                    )}\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n\r\n                                                            <Col md=\"3\">\r\n                                                                <FormGroup className=\"mb-3\">\r\n                                                                    <Label htmlFor=\"validationCustom01\"> {fieldLabel.Description} </Label>\r\n                                                                    <Input\r\n                                                                        name=\"Description\"\r\n                                                                        id=\"Description\"\r\n                                                                        value={values.Description}\r\n                                                                        type=\"text\"\r\n                                                                        className={isError.Description.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                        placeholder=\"Please Enter Description\"\r\n                                                                        autoComplete='off'\r\n                                                                        onChange={(event) => {\r\n                                                                            onChangeText({ event, state, setState })\r\n                                                                            dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                        }}\r\n                                                                    />\r\n                                                                    {isError.Description.length > 0 && (\r\n                                                                        <span className=\"invalid-feedback\">{isError.Description}</span>\r\n                                                                    )}\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                        </Row>\r\n\r\n                                                        <Row>\r\n                                                            <FormGroup className=\"col col-sm-3\">\r\n                                                                <Label htmlFor=\"validationCustom21\">{fieldLabel.VehicleDivisions}</Label>\r\n                                                                <Select\r\n                                                                    id=\"DivisionDropDown \"\r\n                                                                    // disabled={true}\r\n                                                                    name=\"VehicleDivisions\"\r\n                                                                    value={values.VehicleDivisions}\r\n                                                                    isSearchable={false}\r\n                                                                    className=\"react-dropdown\"\r\n                                                                    classNamePrefix=\"dropdown\"\r\n                                                                    options={DivisionType_DropdownOptions}\r\n                                                                    onChange={(hasSelect, evn) => {\r\n                                                                        onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                                                        DivisionType_DropDown_handller(hasSelect)\r\n                                                                    }}\r\n                                                                />\r\n                                                                {isError.VehicleDivisions.length > 0 && (\r\n                                                                    <span className=\"text-danger f-8\"><small>{isError.VehicleDivisions}</small></span>\r\n                                                                )}\r\n\r\n                                                            </FormGroup>\r\n                                                            <Col sm={1} style={{ marginTop: '28px' }} >\r\n                                                                {\" \"}\r\n                                                                <Button\r\n                                                                    type=\"button\"\r\n                                                                    className=\"btn btn-sm mt-1 mb-0 btn-light  btn-outline-primary\"\r\n                                                                    onClick={() =>\r\n                                                                        AddDivisionHandler()\r\n                                                                    }\r\n                                                                >\r\n                                                                    <i className=\"dripicons-plus \"></i>\r\n                                                                </Button>\r\n                                                            </Col>\r\n                                                            <Col sm={3} style={{ marginTop: '28px' }}>\r\n                                                                {divisionData.length > 0 ? (\r\n\r\n                                                                    <div className=\"table-responsive\">\r\n                                                                        <Table className=\"table table-bordered  text-center\">\r\n                                                                            <Thead >\r\n                                                                                <tr>\r\n                                                                                    <th>Division Name</th>\r\n\r\n                                                                                    <th>Action</th>\r\n                                                                                </tr>\r\n                                                                            </Thead>\r\n                                                                            <Tbody>\r\n                                                                                {divisionData.map((TableValue) => (\r\n                                                                                    <tr>\r\n                                                                                        <td>\r\n                                                                                            {TableValue.label}\r\n                                                                                        </td>\r\n                                                                                        <td>\r\n                                                                                            <i className=\"mdi mdi-trash-can d-block text-danger font-size-20\" onClick={() => {\r\n                                                                                                UserRoles_DeleteButton_Handller(TableValue.value)\r\n                                                                                            }} >\r\n                                                                                            </i>\r\n                                                                                        </td>\r\n                                                                                    </tr>\r\n                                                                                ))}\r\n                                                                            </Tbody>\r\n                                                                        </Table>\r\n                                                                    </div>\r\n                                                                ) : (\r\n                                                                    <>\r\n                                                                    </>\r\n                                                                )}\r\n                                                            </Col>\r\n                                                        </Row>\r\n\r\n                                                        <FormGroup>\r\n                                                            <Row>\r\n                                                                <Col sm={2} className=\"mt-3\">\r\n                                                                    <SaveButton pageMode={pageMode} userAcc={userPageAccessState}\r\n                                                                        module={\"VehicleMaster\"}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </FormGroup >\r\n                                                    </Row>\r\n\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default VehicleMaster\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\DriverPage\\DriverList.js",["1500","1501"],"import React, { useEffect } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DriverMaster from \"./DriverMaster\";\r\nimport {\r\n  deleteDriverTypeIDSuccess,\r\n  updateDriverTypeIDSuccess,\r\n  getMethodForDriverList,\r\n  editDriverTypeId,\r\n  delete_DriverType_ID,\r\n  PostMethod_ForDriverMasterSuccess,\r\n} from \"../../../store/Administrator/DriverRedux/action\";\r\n\r\nimport CommonListPage from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport { DRIVER } from \"../../../routes/route_url\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst DriverList = (props) => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      tableList: state.DriverReducer.DriverList,\r\n      editData: state.DriverReducer.editData,\r\n      updateMsg: state.DriverReducer.updateMessage,\r\n      deleteMsg: state.DriverReducer.deleteMessage,\r\n      postMsg: state.DriverReducer.PostDataMessage,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n\r\n  const action = {\r\n    getList: getMethodForDriverList,\r\n    editId: editDriverTypeId,\r\n    deleteId: delete_DriverType_ID,\r\n    postSucc: PostMethod_ForDriverMasterSuccess,\r\n    updateSucc: updateDriverTypeIDSuccess,\r\n    deleteSucc: deleteDriverTypeIDSuccess\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(106))\r\n    dispatch(getMethodForDriverList())\r\n\r\n  }, []);\r\n\r\n  const { pageField } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        (pageField) ?\r\n          <CommonListPage\r\n            action={action}\r\n            reducers={reducers}\r\n            MasterModal={DriverMaster}\r\n            masterPath={DRIVER}\r\n            ButtonMsgLable={\"Driver\"}\r\n            deleteName={\"Name\"}\r\n          />\r\n          : null\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default DriverList;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\CompanyGroupPages\\CompanyGroupList.js",["1502"],"import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport CompanyGroupMaster from \"./CompanyGroupMaster\";\r\nimport {\r\n  deleteCompanyGroupTypeIDSuccess,\r\n  updateCompanyGroupTypeIDSuccess,\r\n  getMethodForCompanyGroupList,\r\n  editCompanyGroupTypeId,\r\n  delete_CompanyGroupType_ID,\r\n  PostMethod_ForCompanyGroupMasterSuccess,\r\n} from \"../../../store/Administrator/CompanyGroupRedux/action\";\r\nimport CommonListPage from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport {  commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport { COMPANYGROUP } from \"../../../routes/route_url\";\r\n\r\n\r\nconst CompanyGroupList = (props) => {\r\ndebugger\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      tableList: state.CompanyGroupReducer.CompanyGroupList,\r\n      editData: state.CompanyGroupReducer.editData,\r\n      updateMsg: state.CompanyGroupReducer.updateMessage,\r\n      deleteMsg: state.CompanyGroupReducer.deleteMessage,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      postMsg: state.CompanyGroupReducer.PostDataMessage,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: getMethodForCompanyGroupList,\r\n    editId: editCompanyGroupTypeId,\r\n    deleteId:delete_CompanyGroupType_ID,\r\n    postSucc: PostMethod_ForCompanyGroupMasterSuccess,\r\n    updateSucc: updateCompanyGroupTypeIDSuccess,\r\n    deleteSucc: deleteCompanyGroupTypeIDSuccess,\r\n  }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(33))\r\n    dispatch(getMethodForCompanyGroupList());\r\n  }, []);\r\n\r\n  const { pageField } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        (pageField) ?\r\n          <CommonListPage\r\n            action={action}\r\n            reducers={reducers}\r\n            MasterModal={CompanyGroupMaster}\r\n            masterPath={COMPANYGROUP}\r\n            ButtonMsgLable={\"CompanyGroup\"}\r\n            deleteName={\"Name\"}\r\n          />\r\n          : null\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default CompanyGroupList;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\CompanyGroupPages\\CompanyGroupMaster.js",["1503","1504","1505","1506","1507","1508","1509","1510"],"import React, { useEffect, useRef, useState, } from \"react\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { Breadcrumb_inputName } from \"../../../store/actions\";\r\nimport {\r\n    AlertState,\r\n    commonPageField,\r\n    commonPageFieldSuccess\r\n} from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    PostMethod_ForCompanyGroupMasterSuccess,\r\n    editCompanyGroupTypeSuccess,\r\n    updateCompanyGroupTypeID,\r\n    PostMethodForCompanyGroupMaster,\r\n    getMethodForCompanyGroupList\r\n} from \"../../../store/Administrator/CompanyGroupRedux/action\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeText\r\n} from \"../../../components/Common/CmponentRelatedCommonFile/validationFunction\";\r\nimport { COMPANYGROUP_lIST } from \"../../../routes/route_url\";\r\nimport { UPDATE_COMPANYGROUP_TYPE_ID_SUCCESS } from \"../../../store/Administrator/CompanyGroupRedux/actionType\";\r\nimport SaveButton from \"../../../components/Common/CommonSaveButton\";\r\n\r\n\r\nconst CompanyGroupMaster = (props) => {\r\n\r\n    const formRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    const [pageMode, setPageMode] = useState();\r\n    const [userPageAccessState, setUserPageAccessState] = useState('');\r\n    const [modalCss, setModalCss] = useState(false);\r\n\r\n\r\n    {/** Dyanamic Page access state and OnChange function */ }\r\n    const initialFiled = {\r\n        id: \"\",\r\n        Name: \"\",\r\n        IsSCM:false\r\n      }\r\n    \r\n    const [state, setState] = useState(initialFiledFunc(initialFiled))\r\n\r\n   \r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { postMsg, updateMsg ,pageField, userAccess } = useSelector((state) => ({\r\n        postMsg: state.CompanyGroupReducer.PostDataMessage,\r\n        updateMsg: state.CompanyGroupReducer.updateMessage,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField\r\n\r\n    }));\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(\"editValue\")\r\n    const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(32))\r\n    }, []);\r\n\r\n\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserPageAccessState(userAcc)\r\n        };\r\n    }, [userAccess])\r\n\r\n\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n                const { id, Name, IsSCM } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n                values.Name = Name;\r\n                values.IsSCM = IsSCM;\r\n                hasValid.Name.valid = true;\r\n                hasValid.IsSCM.valid = true;\r\n                values.id = id\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n            }\r\n            dispatch(editCompanyGroupTypeSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n\r\n            dispatch(PostMethod_ForCompanyGroupMasterSuccess({ Status: false }))\r\n            formRef.current.reset();\r\n            if (pageMode === \"dropdownAdd\") {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                }))\r\n            }\r\n            else {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                    RedirectPath: COMPANYGROUP_lIST,\r\n                }))\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(PostMethod_ForCompanyGroupMasterSuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(postMsg.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            history.push({\r\n                pathname: COMPANYGROUP_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(UPDATE_COMPANYGROUP_TYPE_ID_SUCCESS({ Status: false }));\r\n            dispatch(\r\n                AlertState({\r\n                    Type: 3,\r\n                    Status: true,\r\n                    Message: JSON.stringify(updateMsg.Message),\r\n                })\r\n            );\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n\r\n    const formSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        if (formValid(state, setState)) {\r\n            const jsonBody = JSON.stringify({\r\n                Name: values.Name,\r\n                IsSCM: values.IsSCM,\r\n                CreatedBy: 1,\r\n                UpdatedBy: 1\r\n            });\r\n\r\n            if (pageMode === \"edit\") {\r\n                dispatch(updateCompanyGroupTypeID(jsonBody, values.id));\r\n            }\r\n            else {\r\n                dispatch(PostMethodForCompanyGroupMaster(jsonBody));\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n                        <MetaTags>\r\n                            <title>{userPageAccessState.PageHeading} | FoodERP-React FrontEnd</title>\r\n                        </MetaTags>\r\n                        <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n\r\n                                <form onSubmit={formSubmitHandler} ref={formRef} noValidate>\r\n\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\"> {fieldLabel.Name}</Label>\r\n                                                            <Input\r\n                                                                name=\"Name\"\r\n                                                                id=\"txtName\"\r\n                                                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                type=\"text\"\r\n                                                                value={values.Name}\r\n                                                                placeholder=\"Please Enter Name\"\r\n                                                                autoComplete='off'\r\n                                                                autoFocus={true}\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n\r\n                                                            />\r\n                                                            {isError.Name.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n\r\n                                                        <Row>\r\n                                                            <FormGroup className=\"mb-2 col col-sm-5\">\r\n                                                                <Row className=\"justify-content-md-left\">\r\n                                                                    <Label htmlFor=\"horizontal-firstname-input\" className=\"col-sm-3 col-form-label\">{fieldLabel.IsSCM}</Label>\r\n                                                                    <Col md={2} style={{ marginTop: '9px' }} >\r\n                                                                        <div className=\"form-check form-switch form-switch-md mb-3\">\r\n                                                                            <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                                defaultChecked={values.IsSCM}\r\n                                                                                name=\"IsSCM\"\r\n                                                                                onChange={(event) => onChangeText({ event, state, setState })}\r\n                                                                            />\r\n                                                                        </div>\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                            </FormGroup>\r\n                                                        </Row>\r\n\r\n                                                        <FormGroup>\r\n                                                            <Row>\r\n                                                                <Col sm={2}>\r\n                                                                    <SaveButton pageMode={pageMode} userAcc={userPageAccessState}\r\n                                                                        module={\"CompanyGroupMaster\"}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </FormGroup >\r\n                                                    </Row>\r\n\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n\r\n                        </Card>\r\n\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default CompanyGroupMaster\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\CategoryPages\\CategoryList.js",["1511"],"import React, { useEffect} from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport CategoryMaster from \"./CategoryMaster\";\r\nimport {\r\n  deleteCategoryIDSuccess,\r\n  delete_Category_ID,\r\n  editCategoryID,\r\n  getCategorylist,\r\n  PostMethod_ForCategoryAPISuccess,\r\n  updateCategoryIDSuccess\r\n} from \"../../../store/Administrator/CategoryRedux/action\";\r\nimport CommonListPage from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport {  commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport { CATEGORY } from \"../../../routes/route_url\";\r\n\r\nconst CategoryList = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      tableList: state.CategoryReducer.CategoryListData,\r\n      editData: state.CategoryReducer.editData,\r\n      updateMsg: state.CategoryReducer.updateMessage,\r\n      deleteMsg: state.CategoryReducer.deleteMessage,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      postMsg:state.CategoryReducer.PostDataMessage,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: getCategorylist,\r\n    editId: editCategoryID,\r\n    deleteId: delete_Category_ID,\r\n    postSucc: PostMethod_ForCategoryAPISuccess,\r\n    updateSucc: updateCategoryIDSuccess,\r\n    deleteSucc: deleteCategoryIDSuccess\r\n  }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(19))\r\n    dispatch(getCategorylist());\r\n  }, []);\r\n\r\n  const { pageField } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        (pageField) ?\r\n          <CommonListPage\r\n            action={action}\r\n            reducers={reducers}\r\n            MasterModal={CategoryMaster}\r\n            masterPath={CATEGORY}\r\n            ButtonMsgLable={\"Category\"}\r\n            deleteName={\"Name\"}\r\n          />\r\n          : null\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default CategoryList;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PriceList\\PriceList.js",["1512"],"import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport PriceMaster from \"./PriceMaster\";\r\nimport {\r\n  delete_PriceListSuccess,\r\n  postPriceListDataSuccess,\r\n  delete_PriceList,\r\n  editPriceList,\r\n  updatePriceListSuccess,\r\n  getPriceListPage\r\n} from \"../../../store/Administrator/PriceList/action\";\r\nimport CommonListPage from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport { PRICE } from \"../../../routes/route_url\";\r\n\r\nconst PriceList = (props) => {\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      tableList: state.PriceListReducer.priceList,\r\n      editData: state.PriceListReducer.editData,\r\n      updateMsg: state.PriceListReducer.updateMessage,\r\n      deleteMsg: state.PriceListReducer.deleteMsg,\r\n      postMsg: state.PriceListReducer.postMsg,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: getPriceListPage,\r\n    editId: editPriceList,\r\n    deleteId: delete_PriceListSuccess,\r\n    postSucc: postPriceListDataSuccess,\r\n    updateSucc: updatePriceListSuccess,\r\n    deleteSucc: delete_PriceList\r\n  }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(94))\r\n    dispatch(getPriceListPage());\r\n  }, []);\r\n\r\n\r\n  const { pageField } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        (pageField) ?\r\n          <CommonListPage\r\n            action={action}\r\n            reducers={reducers}\r\n            MasterModal={PriceMaster}\r\n            masterPath={PRICE}\r\n            ButtonMsgLable={\"Price List\"}\r\n            deleteName={\"Name\"}\r\n          />\r\n          : null\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n    }\r\n  export default PriceList;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PriceList\\PriceMaster.js",["1513","1514","1515","1516","1517","1518","1519","1520","1521","1522","1523","1524","1525"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport './pricemaster.scss'\r\n\r\n\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardFooter,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Modal,\r\n    Row,\r\n} from \"reactstrap\";\r\n\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\n\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { Breadcrumb_inputName, AlertState } from \"../../../store/actions\";\r\nimport {\r\n    delete_PriceList,\r\n    delete_PriceListSuccess,\r\n    getPriceListData,\r\n    postPriceListData,\r\n    postPriceListDataSuccess,\r\n    editPriceList,\r\n    updatePriceList\r\n\r\n\r\n} from \"../../../store/Administrator/PriceList/action\";\r\nimport { getPartyTypes } from \"../../../store/Administrator/PartyRedux/action\";\r\nimport Tree from \"../PartyPages/Tree\";\r\n\r\n\r\n\r\n\r\nconst PriceMaster = (props) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    //*** \"isEditdata get all data from ModuleID for Binding  Form controls\r\n    let editDataGatingFromList = props.state;\r\n    let propsPageMode = props.pageMode;\r\n\r\n    //SetState  Edit data Geting From Modules List component\r\n    const [EditData, setEditData] = useState([]);\r\n    const [pageMode, setPageMode] = useState(\"save\");\r\n\r\n\r\n    // const [partyTypeSelect, setPartyTypeSelect] = useState({ value: '' });\r\n    const [userPageAccessState, setUserPageAccessState] = useState(\"\");\r\n    const [partyType_dropdown_Select, setPartyType_dropdown_Select] = useState(\"\");\r\n    const [PriceList_dropdown_Select, setPriceList_dropdown_Select] = useState(\"\");\r\n\r\n\r\n    const [menu, setMenu] = useState(false);\r\n    const [dropOpen, setDropOpen] = useState(false);\r\n    const [dropOpen2, setDropOpen2] = useState(false);\r\n\r\n    const [currentPrice, setCurrentPrice] = useState({ Name: '' });\r\n    const [hasPartySelect, setHasPartySelect] = useState(false);\r\n    const [priceList, setPriceList] = useState('');\r\n\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n\r\n    const { PostAPIResponse,\r\n        priceListByPartyType,\r\n        deleteAPIResponse,\r\n        PartyTypes,\r\n        PriceList,\r\n        RoleAccessModifiedinSingleArray\r\n    } = useSelector((state) => ({\r\n        PostAPIResponse: state.PriceListReducer.postMsg,\r\n        deleteAPIResponse: state.PriceListReducer.deleteMsg,\r\n        PartyTypes: state.PartyMasterReducer.PartyTypes,\r\n        PriceList: state.ItemMastersReducer.PriceList,\r\n        priceListByPartyType: state.PriceListReducer.priceListByPartyType,\r\n        RoleAccessModifiedinSingleArray: state.Login.RoleAccessUpdateData,\r\n    }));\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = undefined;\r\n        if (editDataGatingFromList === undefined) {\r\n            let locationPath = history.location.pathname;\r\n            userAcc = RoleAccessModifiedinSingleArray.find((inx) => {\r\n                return `/${inx.ActualPagePath}` === locationPath;\r\n            });\r\n        } else if (!(editDataGatingFromList === undefined)) {\r\n            let relatatedPage = props.relatatedPage;\r\n            userAcc = RoleAccessModifiedinSingleArray.find((inx) => {\r\n                return `/${inx.ActualPagePath}` === relatatedPage;\r\n            });\r\n        }\r\n        if (!(userAcc === undefined)) {\r\n            setUserPageAccessState(userAcc);\r\n        }\r\n    }, [RoleAccessModifiedinSingleArray]);\r\n\r\n    useEffect(() => {\r\n        dispatch(getPartyTypes());\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if ((PostAPIResponse.Status === true) && (PostAPIResponse.StatusCode === 200)) {\r\n            // setpartyType_dropdown_Select('')\r\n            dispatch(postPriceListDataSuccess({ Status: false }))\r\n            dispatch(getPriceListData(partyType_dropdown_Select.value))\r\n            setDropOpen(false)\r\n            dispatch(AlertState({\r\n                Type: 1,\r\n                Status: true,\r\n                Message: PostAPIResponse.Message,\r\n                RedirectPath: '',\r\n            }))\r\n        }\r\n\r\n    }, [PostAPIResponse])\r\n\r\n    useEffect(() => {\r\n        if ((deleteAPIResponse.Status === true) && (deleteAPIResponse.StatusCode === 200)) {\r\n            // setpartyType_dropdown_Select('')\r\n            dispatch(delete_PriceListSuccess({ Status: false }))\r\n            dispatch(getPriceListData(partyType_dropdown_Select.value))\r\n            // setDropOpen(!dropOpen)\r\n            dispatch(AlertState({\r\n                Type: 1,\r\n                Status: true,\r\n                Message: deleteAPIResponse.Message,\r\n                RedirectPath: '',\r\n\r\n            }))\r\n\r\n        }\r\n\r\n    }, [deleteAPIResponse])\r\n\r\n    const PartyTypeDropdown_Options = PartyTypes.map((Data) => ({\r\n        value: Data.id,\r\n        label: Data.Name\r\n    }));\r\n\r\n    const PriceList_DropdownOptions = PriceList.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }));\r\n\r\n    function goButtonHandler() {\r\n        if (!(partyType_dropdown_Select === '')) {\r\n            dispatch(getPriceListData(partyType_dropdown_Select.value))\r\n            setHasPartySelect(true)\r\n        }\r\n    }\r\n\r\n    function PartyType_Dropdown_OnChange_Handller(e) {\r\n        setPartyType_dropdown_Select(e)\r\n\r\n    }\r\n    const dropOpen_ONClickHandler = price => {\r\n        price[\"mode\"] = \"save\"\r\n        setCurrentPrice(price)\r\n        setDropOpen(true)\r\n\r\n        // if(price.id==0){\r\n        //     sub_Price_Add_Handler()\r\n        // }\r\n    }\r\n    // Edit handler\r\n    const dropOpen_EditHandler = price => {\r\n        price[\"mode\"] = \"edit\"\r\n\r\n        setCurrentPrice(price)\r\n        setDropOpen(true)\r\n\r\n\r\n    }\r\n    const delete_PriceList_Handler = price => {\r\n        dispatch(AlertState({\r\n            Type: 5, Status: true,\r\n            Message: `Are you sure you want to delete this Price : \"${price.label}\"`,\r\n            RedirectPath: false,\r\n            PermissionAction: delete_PriceList,\r\n            ID: price.value\r\n        }));\r\n    }\r\n    function sub_Price_Add_Handler() {\r\n        debugger\r\n        var textInp1 = document.getElementById(\"txtsubprice\")\r\n        if (textInp1.value === \"\") {\r\n            alert(\"please enter value\")\r\n        } else {\r\n            var mkup = document.getElementById(`mkupMkdown`).checked\r\n            const jsonBody = JSON.stringify({\r\n                Name: textInp1.value,\r\n                BasePriceListID: currentPrice.value,\r\n                PLPartyType: partyType_dropdown_Select.value,\r\n                MkUpMkDn: mkup,\r\n                PriceList:PriceList.value,\r\n                Company: 1,\r\n                CreatedBy: 1,\r\n                CreatedOn: \"2022-07-18T00:00:00\",\r\n                UpdatedBy: 1,\r\n                UpdatedOn: \"2022-07-18T00:00:00\"\r\n            });\r\n            dispatch(postPriceListData(jsonBody));\r\n        }\r\n\r\n    }\r\n    // // edit price handler\r\n    function sub_Price_edit_Handler() {\r\n        debugger\r\n        var textInp1 = document.getElementById(\"txtsubprice\")\r\n        if (textInp1.value === \"\") {\r\n            alert(\"please enter value\")\r\n        } else {\r\n            var mkup = document.getElementById(`mkupMkdown`).checked\r\n            const jsonBody = JSON.stringify({\r\n                Name: textInp1.value,\r\n                BasePriceListID: currentPrice.value,\r\n                PLPartyType: partyType_dropdown_Select.value,\r\n                MkUpMkDn: mkup,\r\n                PriceList:PriceList.value,\r\n                Company: 1,\r\n                CreatedBy: 1,\r\n                CreatedOn: \"2022-07-18T00:00:00\",\r\n                UpdatedBy: 1,\r\n                UpdatedOn: \"2022-07-18T00:00:00\",\r\n                \r\n            });\r\n            dispatch(updatePriceList(jsonBody));\r\n        }\r\n\r\n    }\r\n\r\n    // drop down tree\r\n    const test1 = () => {\r\n        return (\r\n            <>\r\n                <Modal\r\n                    isOpen={dropOpen2}\r\n                    toggle={() => { setDropOpen2(!dropOpen2) }}\r\n                    size=\"sm\"\r\n                    centered={true}\r\n                // backdrop={'static'}\r\n                >\r\n                    <div>\r\n                        <div className=\"text-center mt-2\">\r\n                            {/* <Label className=\"text-primary text-center \"> {priceList.label}</Label> */}\r\n                            <Input type=\"button\" className=\"btn btn-light text-primary\"\r\n\r\n                                onClick={() => {\r\n                                    // sub_Price_Add_Handler()\r\n                                }}\r\n                                value={PriceList_dropdown_Select.label}\r\n                            />\r\n\r\n\r\n                        </div>\r\n                        <Tree data={priceListByPartyType} priceList={PriceList_dropdown_Select}\r\n                            func1={setPriceList_dropdown_Select} func2={setDropOpen2} />\r\n                    </div>\r\n\r\n                </Modal>\r\n\r\n            </>\r\n        )\r\n    }\r\n\r\n    const toggle = () => {\r\n        setMenu('');\r\n    }\r\n\r\n    function fun1(data1) {\r\n        return (\r\n            <div>\r\n                {\r\n                    data1.map(tree => fun2(tree))\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function fun2(node) {\r\n\r\n        return (\r\n            <div style={{ paddingLeft: \"50px\" }} className={\"pricelistclass\"} >\r\n                <div className='row justify-content-center mt-n4'>\r\n                    {/* <div className='row-justify-content'> */}\r\n\r\n                    <div className=' col-10'>\r\n                        <Input\r\n                            type=\"text\"\r\n                            disabled={true}\r\n                            defaultValue={node.label} >\r\n                        </Input>\r\n                    </div>\r\n                    {/* <div className=' col-1 al-end'> */}\r\n                    <div className=' col-1 al-end'>\r\n\r\n                        <Input\r\n                            type=\"checkbox\"\r\n                            id={`mkUp${node.value}`}\r\n                            defaultChecked={node.MkUpMkDn}\r\n                            disabled={true}\r\n                        />\r\n\r\n                    </div>\r\n                    <div className=' col-1 '>\r\n                        <i className=\"mdi mdi-pencil font-size-12\"\r\n                            onClick={e => setMenu(node.value)}  ></i>\r\n                        <Dropdown\r\n                            isOpen={menu === node.value}\r\n                            toggle={toggle}\r\n                            className=\"d-inline-block\">\r\n                            <DropdownToggle className=\"btn header-item \" tag=\"button\">\r\n\r\n                            </DropdownToggle>\r\n                            {/* <DropdownMenu className=\"language-switch dropdown-menu-end\" > */}\r\n                            <DropdownMenu className=\"dropdown_menu dropdown-menu-end\" id=\"drop-downcss\" >\r\n\r\n\r\n                                <DropdownItem\r\n                                    key={node.value}\r\n                                    onClick={(e) => { dropOpen_ONClickHandler(node) }}\r\n                                    de\r\n                                >\r\n\r\n                                    <span className=\"align-middle text-black\" >{\"Add Sub-List\"}</span>\r\n                                </DropdownItem>\r\n\r\n                                <DropdownItem\r\n                                    key={node.value}\r\n                                    onClick={(e) => { dropOpen_EditHandler(node) }}\r\n                                >\r\n                                    <span className=\"align-middle text-black\" >{\"Edit\"}</span>\r\n                                </DropdownItem>\r\n\r\n                                <DropdownItem\r\n                                    // key={node.value}\r\n                                    onClick={() => delete_PriceList_Handler(node)}\r\n                                >\r\n                                    <span className=\"align-middle text-danger\"> {\"Delete\"} </span>\r\n                                </DropdownItem>\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                    </div>\r\n\r\n                    {node.children ? fun1(node.children) : null}\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n\r\n    }\r\n\r\n  \r\n    \r\n\r\n\r\n\r\n\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((pageMode === \"edit\") || (pageMode === \"copy\") || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"page-content\" style={{ marginTop: IsEditMode_Css,marginBottom:\"5cm\" }} >\r\n                <MetaTags>\r\n                    <title>PartyType| FoodERP-React FrontEnd</title>\r\n                </MetaTags>\r\n                <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n                <Container fluid>\r\n                    <Card className=\"text-black\">\r\n                        <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                            <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                            <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                        </CardHeader>\r\n\r\n                        {/* <DropdownTreeSelect\r\n                            texts={{ placeholder: ' search price list', }}\r\n                            data={data} onChange={onChange}\r\n                            onAction={onAction}\r\n                            onNodeToggle={onNodeToggle}\r\n                        /> */}\r\n                        {/* <DropdownTreeSelect\r\n                            data={data}\r\n                            onChange={onChange}\r\n                            className=\"bootstrap-demo\"\r\n                        /> */}\r\n                        <CardBody className=\" vh-10 0 text-black\" >\r\n                            <Row className=\"\">\r\n                                <Col md={12}>\r\n                                    <Card style={{ backgroundColor: \"whitesmoke\" }}>\r\n\r\n\r\n                                        <CardHeader className=\"card-header   text-black \" style={{ backgroundColor: \"#e9e9ef\" }} >\r\n                                            <Row className=\"mt-3\">\r\n                                                <Col md=\"4\">\r\n\r\n                                                    <FormGroup className=\"mb-3 row \">\r\n                                                        <Label className=\"col-sm-3 p-2 ml-n4 \">Party Type</Label>\r\n                                                        <Col md=\"9\" style={{}}>\r\n                                                        \r\n                                                           \r\n                                                            <Select \r\n                                                                value={partyType_dropdown_Select}\r\n                                                                options={PartyTypeDropdown_Options}\r\n                                                                className=\"rounded-bottom\"\r\n                                                                placeholder=\"select\"\r\n                                                                onChange={(e) => { PartyType_Dropdown_OnChange_Handller(e)}}\r\n                                                                classNamePrefix=\"select2-selection\"  \r\n                                                                \r\n                                                            />\r\n                                                                \r\n                                                            \r\n                                                        </Col>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"3\" className=\"mt- \">\r\n                                                    <Button type=\"button\" color=\"primary\" onClick={(e) => { goButtonHandler() }}>Go</Button>\r\n                                                </Col>\r\n\r\n                                            </Row>\r\n                                        </CardHeader>\r\n                                        {hasPartySelect ?\r\n                                            <div className={\" row mt-4\"}>\r\n\r\n                                                <Modal\r\n                                                    //    onAfterOpen={dropOpen_ONClickHandler}\r\n                                                    isOpen={dropOpen}\r\n                                                    toggle={() => { setDropOpen(!dropOpen) }}\r\n                                                    size=\"sm\"\r\n                                                    centered={true}\r\n                                                // backdrop={'static'}\r\n                                                >\r\n                                                    <div className=\"modal-header\">\r\n                                                        {currentPrice.mode === \"save\" ?\r\n                                                            <h5 className=\"modal-title mt-0\">{currentPrice.id === 0 ? \"Add Main Price\" : \"Add sub-Price\"}</h5> :\r\n                                                            <h5 className=\"modal-title mt-0\">{currentPrice.id === 0 ? \"Add Main Price\" : \"Edit sub-Price\"}</h5>}\r\n                                                        <button\r\n                                                            type=\"button\"\r\n                                                            onClick={() => {\r\n                                                                setDropOpen(!dropOpen)\r\n                                                            }}\r\n                                                            className=\"close\"\r\n                                                            data-dismiss=\"modal\"\r\n                                                            aria-label=\"Close\"\r\n                                                        >\r\n                                                            <span aria-hidden=\"true\">&times;</span>\r\n                                                        </button>\r\n                                                    </div>\r\n\r\n                                                    <div className=\"modal-body\">\r\n                                                        {currentPrice.mode === \"edit\" ?\r\n                                                            <Row className=\"justify-content-md-left\">\r\n                                                                <Label className=\"col-4 col-form-label\" >Price List</Label>\r\n                                                                <Col className=\"col\">\r\n                                                                    {/* <Select\r\n                                                                    id={`dropPriceList-${0}`}\r\n                                                                    value={priceList}\r\n                                                                    options={PriceList_DropdownOptions}\r\n                                                                    onChange={(e) => setPriceList(e)}\r\n                                                                /> */}\r\n\r\n                                                               {/* <label>id={currentPrice.value} </label> */}\r\n                                                                    <Input\r\n                                                                        value={PriceList_dropdown_Select.label}\r\n                                                                        placeholder=\"Enter Name\"\r\n                                                                        id=\"txtsubprice\"\r\n\r\n                                                                        // onClick={(e) =>setDropOpen(!dropOpen)}\r\n                                                                        onClick={(e) => setDropOpen2(!dropOpen2)}\r\n                                                                    >\r\n                                                                    </Input>\r\n\r\n\r\n                                                                    {test1()}\r\n\r\n\r\n\r\n\r\n                                                                </Col>\r\n\r\n                                                            </Row>\r\n                                                            : null}\r\n\r\n                                                        {currentPrice.mode === \"edit\" ?\r\n\r\n\r\n                                                            <Row className=\"mt-2\">\r\n                                                                <span className=\"form-label text-primary text-center\">{currentPrice.Name}</span>\r\n                                                                <Label htmlFor=\"horizontal-firstname-input\"\r\n                                                                    className=\"col-4 col-form-label\" > {currentPrice.id === 0 ? \"Main Price\" : \"sub-Price\"} </Label>\r\n                                                                <Col style={{ marginTop: '9px' }} >\r\n                                                                    <Input type=\"text\" id='txtsubprice'\r\n                                                                        defaultValue={currentPrice.label}\r\n                                                                    />\r\n\r\n\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                            : <Row className=\"mt-2\">\r\n                                                                <span className=\"form-label text-primary text-center\">{currentPrice.Name}</span>\r\n                                                                <Label htmlFor=\"horizontal-firstname-input\"\r\n                                                                    className=\"col-4 col-form-label\" > {currentPrice.id === 0 ? \"Main Price\" : \"sub-Price\"} </Label>\r\n                                                                <Col style={{ marginTop: '9px' }} >\r\n                                                                    <Input type=\"text\" id='txtsubprice'\r\n\r\n                                                                    />\r\n\r\n\r\n                                                                </Col>\r\n                                                            </Row>}\r\n\r\n                                                        <Row className=\"mt-2\">\r\n                                                            <Label className=\"col-4 col-form-label\" >MkUp </Label>\r\n                                                            <Col className=\"mt-2\">\r\n                                                                <Input type={\"checkbox\"} id='mkupMkdown'\r\n                                                                    defaultChecked={currentPrice.MkUpMkDn} />\r\n                                                            </Col>\r\n                                                        </Row>\r\n\r\n                                                    </div>\r\n\r\n                                                    <div className=\"modal-footer\">\r\n                                                        <button type=\"button\" className=\"btn btn-light\" onClick={() => {\r\n                                                            setDropOpen(!dropOpen)\r\n                                                        }}>Close</button>\r\n                                                        {currentPrice.mode === \"save\" ?\r\n\r\n                                                            <button type=\"button\" className=\"btn btn-primary\"\r\n                                                                onClick={() => { sub_Price_Add_Handler() }}\r\n\r\n                                                            >Add</button>\r\n                                                            :\r\n                                                            <button type=\"button\" className=\"btn btn-success w-md\"\r\n                                                                onClick={() => { sub_Price_edit_Handler() }} >\r\n\r\n                                                                <i class=\"fas fa-edit me-2\"></i>\r\n                                                                update</button>\r\n                                                        }\r\n\r\n                                                    </div>\r\n\r\n                                                </Modal>\r\n                                                <Col md={1} ></Col>\r\n                                                <Col md={5} >\r\n                                                    <div className=\"row\"> <h4 className={'text-center text-primary'}>Price List</h4></div>\r\n                                                    <Card>\r\n                                                        <CardBody className=\"mt-3\">\r\n\r\n                                                            {fun1(priceListByPartyType)}\r\n\r\n                                                            {((priceListByPartyType.length === 0)) ?\r\n                                                                <div className='row justify-content-center mt-n4 '>\r\n                                                                    <div className=' col-10'>\r\n                                                                        <Input type=\"text\" disabled={true}\r\n                                                                            value={'Base Price  Not Exist'} >\r\n                                                                        </Input>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                                : null\r\n                                                            }\r\n                                                        </CardBody>\r\n                                                        <CardFooter >\r\n                                                            <Row>\r\n                                                                <Col >\r\n                                                                    <Button type=\"button\" color=\"primary\" onClick={(e) => { dropOpen_ONClickHandler({ value: 0, }) }}>\r\n                                                                        <i className=\"dripicons-plus\"></i> Add Sub-Rate</Button>\r\n\r\n\r\n                                                                </Col>\r\n                                                                <Col className=\"col col-4\">\r\n\r\n\r\n                                                                    {/* <button type=\"button\" className=\"btn btn-light\"\r\n                                                                        onClick={() => {\r\n                                                                            // sub_Price_Add_Handler()\r\n                                                                        }} >change party Type</button> */}\r\n\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </CardFooter>\r\n\r\n                                                    </Card>\r\n                                                </Col>\r\n\r\n                                            </div>\r\n                                            : null\r\n                                        }\r\n\r\n                                    </Card>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                        </CardBody>\r\n                    </Card>\r\n\r\n                </Container>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default PriceMaster\r\n\r\n\r\n\r\n\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\MRPMaster\\MRPMaster.js",["1526","1527","1528","1529","1530","1531"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Flatpickr from \"react-flatpickr\"\r\nimport { AlertState } from \"../../../store/actions\";\r\nimport paginationFactory, {\r\n    PaginationListStandalone,\r\n    PaginationProvider,\r\n} from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\r\nimport {\r\n    get_Division_ForDropDown,\r\n    get_Party_ForDropDown\r\n} from \"../../../store/Administrator/ItemsRedux/action\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { AvForm } from \"availity-reactstrap-validation\";\r\nimport {\r\n    deleteID_In_MasterPage,\r\n    deleteID_In_MasterPageSuccess,\r\n    getMRPListPage,\r\n    postGoButtonForMRP_Master,\r\n    postGoButtonForMRP_MasterSuccess,\r\n    postMRPMasterData, postMRPMasterDataSuccess\r\n} from \"../../../store/Administrator/MRPMasterRedux/action\";\r\nimport { MRP_lIST } from \"../../../routes/route_url\";\r\n\r\n\r\nconst MRPMaster = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const formRef = useRef(null);\r\n    let editMode = history.location.pageMode;\r\n\r\n    const [pageMode, setPageMode] = useState(\"save\");\r\n    const [userPageAccessState, setUserPageAccessState] = useState(\"\");\r\n\r\n    const [party_dropdown_Select, setParty_dropdown_Select] = useState(\"\");\r\n    const [division_dropdown_Select, setDivision_dropdown_Select] = useState(\"\");\r\n    const [effectiveDate, setEffectiveDate] = useState('');\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        deleteMessage,\r\n        TableData,\r\n        Party,\r\n        Division,\r\n        userAccess,\r\n    } = useSelector((state) => ({\r\n        postMsg: state.MRPMasterReducer.postMsg,\r\n        deleteMessage: state.MRPMasterReducer.deleteIdForMRPMaster,\r\n        TableData: state.MRPMasterReducer.MRPGoButton,\r\n        Party: state.ItemMastersReducer.Party,\r\n        Division: state.ItemMastersReducer.Division,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n    }));\r\n    console.log(\"Go button List Data\", TableData)\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserPageAccessState(userAcc)\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        dispatch(get_Party_ForDropDown());\r\n        dispatch(get_Division_ForDropDown());\r\n        dispatch(postGoButtonForMRP_MasterSuccess([]));\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        const editDataGatingFromList = history.location.editValue\r\n\r\n        const locationPath = history.location.pathname\r\n        let userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (!(editDataGatingFromList === undefined)) {\r\n\r\n            var divisionid = editDataGatingFromList.Division_id\r\n            var divisionName = editDataGatingFromList.DivisionName\r\n            var partyId = editDataGatingFromList.Party_id\r\n            var partyName = editDataGatingFromList.PartyName\r\n            var effectiveDate = editDataGatingFromList.EffectiveDate\r\n\r\n            const jsonBody = JSON.stringify({\r\n                Division: divisionid,\r\n                Party: partyId,\r\n                EffectiveDate: effectiveDate\r\n            });\r\n            dispatch(postGoButtonForMRP_Master(jsonBody))\r\n            setDivision_dropdown_Select({ label: divisionName, value: divisionid })\r\n            setParty_dropdown_Select({ label: partyName, value: partyId })\r\n            setEffectiveDate(effectiveDate)\r\n\r\n        }\r\n        if (!(userAcc === undefined)) {\r\n            setUserPageAccessState(userAcc)\r\n        }\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200) && !(pageMode === \"dropdownAdd\")) {\r\n            dispatch(postMRPMasterDataSuccess({ Status: false }))\r\n            formRef.current.reset();\r\n            setDivision_dropdown_Select('')\r\n            setEffectiveDate('')\r\n            setParty_dropdown_Select('')\r\n\r\n            if (pageMode === \"dropdownAdd\") {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                }))\r\n            }\r\n            else {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                    RedirectPath: MRP_lIST,\r\n                }))\r\n            }\r\n        }\r\n\r\n        else if (postMsg.Status === true) {\r\n            dispatch(postMRPMasterDataSuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(postMsg.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (deleteMessage.Status === true && deleteMessage.StatusCode === 200) {\r\n            dispatch(deleteID_In_MasterPageSuccess({ Status: false }));\r\n            dispatch(postGoButtonForMRP_MasterSuccess([]))\r\n            GoButton_Handler()\r\n            dispatch(\r\n                AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: deleteMessage.Message,\r\n                    AfterResponseAction: getMRPListPage,\r\n                })\r\n            );\r\n        } else if (deleteMessage.Status === true) {\r\n            dispatch(deleteID_In_MasterPageSuccess({ Status: false }));\r\n            dispatch(\r\n                AlertState({\r\n                    Type: 3,\r\n                    Status: true,\r\n                    Message: JSON.stringify(deleteMessage.Message),\r\n                })\r\n            );\r\n        }\r\n    }, [deleteMessage]);\r\n\r\n    const PartyDropdown_Options = Party.map((Data) => ({\r\n        value: Data.id,\r\n        label: Data.Name\r\n    }));\r\n\r\n    const Division_DropdownOptions = Division.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }));\r\n\r\n    function PartyType_Dropdown_OnChange_Handller(e) {\r\n        setParty_dropdown_Select(e)\r\n    }\r\n\r\n    function Division_Dropdown_OnChange_Handller(e) {\r\n        setDivision_dropdown_Select(e)\r\n    }\r\n\r\n    const EffectiveDateHandler = (e, date) => {\r\n        setEffectiveDate(date)\r\n    }\r\n\r\n    const MRPHandler = (e, cellContent, user, abd) => {\r\n\r\n        user[\"MRP\"] = e.target.value\r\n    }\r\n\r\n    const CurrentMRPHandler = (e, cellContent, user, key) => {\r\n        user[\"CurrentMRP\"] = e.target.value\r\n    }\r\n\r\n    //select id for delete row\r\n    const deleteHandeler = (id, name) => {\r\n        dispatch(\r\n            AlertState({\r\n                Type: 5,\r\n                Status: true,\r\n                Message: `Are you sure you want to delete this Item : \"${name}\"`,\r\n                RedirectPath: false,\r\n                PermissionAction: deleteID_In_MasterPage,\r\n                ID: id,\r\n            })\r\n        );\r\n    };\r\n\r\n    const GoButton_Handler = (event, values) => {\r\n\r\n        let division = { ...division_dropdown_Select }\r\n        let party = { ...party_dropdown_Select }\r\n\r\n        const jsonBody = JSON.stringify({\r\n            Division: division.value ? division.value : \" \",\r\n            Party: party.value ? party.value : 0,\r\n            EffectiveDate: effectiveDate\r\n        });\r\n\r\n        if (!(effectiveDate)) {\r\n            alert(\"EffectiveDate not select\")\r\n        }\r\n        dispatch(postGoButtonForMRP_Master(jsonBody))\r\n        console.log(\"Go button Post Json\", jsonBody)\r\n    };\r\n\r\n    const pageOptions = {\r\n        sizePerPage: 10,\r\n        totalSize: TableData.length,\r\n        custom: true,\r\n    };\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Item Name\",\r\n            dataField: \"Name\",\r\n            sort: true,\r\n        },\r\n        {\r\n            text: \"Current MRP\",\r\n            dataField: \"CurrentMRP\",\r\n            sort: true,\r\n            formatter: (cellContent, user, key) => (\r\n                <>\r\n                    <div style={{ justifyContent: 'center' }} >\r\n\r\n                        <Col>\r\n                            <FormGroup className=\" col col-sm-4 \">\r\n                                <Input\r\n                                    id=\"\"\r\n                                    type=\"text\"\r\n                                    disabled={true}\r\n                                    defaultValue={TableData[key].CurrentMRP}\r\n                                    className=\"col col-sm text-center\"\r\n                                    onChange={(e) => CurrentMRPHandler(e, cellContent, user, key)}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n                </>\r\n            ),\r\n        },\r\n        {\r\n\r\n            text: \"Effective from \",\r\n            dataField: \"CurrentDate\",\r\n            sort: true,\r\n            formatter: (cellContent, user, key) => (\r\n                <>\r\n                    <div style={{ justifyContent: 'center' }} >\r\n                        <Col>\r\n                            <FormGroup className=\" col col-sm-6 \">\r\n                                <Label style={{ color: \"#B0290B\" }}>{TableData[key].CurrentDate}</Label>\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n                </>\r\n            ),\r\n        },\r\n        {\r\n\r\n            text: \"MRP \",\r\n            dataField: \"MRP\",\r\n            sort: true,\r\n            formatter: (cellContent, user, key) => (\r\n                <>\r\n                    <div style={{ justifyContent: 'center' }} >\r\n                        <Col>\r\n                            <FormGroup className=\" col col-sm-4 \">\r\n                                <Input\r\n                                    id=\"MRPid\"\r\n                                    type=\"text\"\r\n                                    defaultValue={TableData[key].MRP}\r\n                                    disabled={!(user.MRP === '') ? true : false}\r\n                                    className=\"col col-sm text-center\"\r\n                                    onChange={(e) => MRPHandler(e, cellContent, user, key)}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n                </>\r\n            ),\r\n        },\r\n        {\r\n            text: \"Action \",\r\n            dataField: \"\",\r\n            formatter: (cellContent, user) => (\r\n\r\n                <>\r\n                    <div style={{ justifyContent: 'center' }} >\r\n                        <Col>\r\n                            <FormGroup className=\" col col-sm-4 \">\r\n                                {!(user.id === '') ?\r\n                                    <Button\r\n                                        id={\"deleteid\"}\r\n                                        type=\"button\"\r\n                                        className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n                                        data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title='Delete MRP'\r\n                                        onClick={() => { deleteHandeler(user.id, user.Name); }}\r\n                                    >\r\n                                        <i className=\"mdi mdi-delete font-size-18\"></i>\r\n                                    </Button> : <></>}\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                    </div>\r\n                </>\r\n\r\n            ),\r\n        },\r\n    ]\r\n\r\n    //'Save' And 'Update' Button Handller\r\n    const handleValidSubmit = (event, values) => {\r\n\r\n        var ItemData = TableData.map((index) => ({\r\n            Division: division_dropdown_Select.value,\r\n            Party: party_dropdown_Select.value,\r\n            EffectiveDate: effectiveDate,\r\n            Company: 1,\r\n            CreatedBy: 1,\r\n            UpdatedBy: 1,\r\n            IsDeleted: 0,\r\n            IsAdd: true,\r\n            Item: index.Item,\r\n            MRP: index.MRP,\r\n            id: index.id\r\n\r\n        }))\r\n\r\n        const Find = ItemData.filter((index) => {\r\n            return (!(index.MRP === '') && (index.id === ''))\r\n        })\r\n\r\n        const jsonBody = JSON.stringify(Find)\r\n        dispatch(postMRPMasterData(jsonBody));\r\n        console.log(\"post Data\", jsonBody)\r\n\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((pageMode === \"edit\") || (pageMode === \"copy\") || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"page-content\" style={{ marginTop: IsEditMode_Css ,marginBottom:\"3cm\" }}>\r\n                <MetaTags>\r\n                    <title>PartyType| FoodERP-React FrontEnd</title>\r\n                </MetaTags>\r\n                <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n                <Container fluid>\r\n                    <AvForm\r\n                        onValidSubmit={(e, v) => {\r\n                            handleValidSubmit(e, v);\r\n                        }}\r\n                        ref={formRef}\r\n                    >\r\n\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody>\r\n\r\n                                <Row >\r\n                                    <Col md={12}>\r\n                                        <Card style={{ backgroundColor: \"whitesmoke\"}}>\r\n\r\n\r\n                                            <CardHeader className=\"card-header   text-black \" style={{ backgroundColor: \"#e9e9ef\",width:\"\" }} >\r\n                                                <Row className=\"mt-3 \" >\r\n                                                    <Col md=\"3\">\r\n                                                        <FormGroup className=\"mb-3 row \">\r\n                                                            <Label className=\"col-sm-3 p-2 ml-n4\">Division</Label>\r\n                                                            <Col md=\"9\">\r\n                                                                <Select\r\n                                                                    value={division_dropdown_Select}\r\n                                                                    options={Division_DropdownOptions}\r\n                                                                    isDisabled={editMode === \"edit\" ? true : false}\r\n                                                                    className=\"divisionName\"\r\n                                                                    placeholder=\"select\"\r\n                                                                    onChange={(e) =>{ Division_Dropdown_OnChange_Handller(e) }}\r\n                                                                    classNamePrefix=\"select2-selection\"\r\n                                                                />\r\n                                                            </Col>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n\r\n                                                    <Col lg=\"3\" >\r\n                                                        <FormGroup className=\"mb-3 row \">\r\n                                                            <Label className=\"col-sm-3 p-2 ml-n4 \">Party Name</Label>\r\n                                                            <Col md=\"9\" style={{}}>\r\n                                                                <Select\r\n                                                                    value={party_dropdown_Select}\r\n                                                                    options={PartyDropdown_Options}\r\n                                                                    isDisabled={editMode === \"edit\" ? true : false}\r\n                                                                    className=\"rounded-bottom\"\r\n                                                                    placeholder=\"select\"\r\n                                                                    onChange={(e) => { PartyType_Dropdown_OnChange_Handller(e) }}\r\n                                                                    classNamePrefix=\"select2-selection\"\r\n                                                                />\r\n                                                            </Col>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n\r\n                                                    <Col md=\"3\">\r\n                                                        <FormGroup className=\"mb-3 row col-lm-4 \">\r\n                                                            <Label className=\"col-sm-3 ml-n5\">EffectiveDate</Label>\r\n                                                            <Col md=\"9\">\r\n                                                                <Flatpickr\r\n                                                                    id=\"EffectiveDateid\"\r\n                                                                    name=\"effectiveDate\"\r\n                                                                    value={effectiveDate}\r\n                                                                    isDisabled={editMode === \"edit\" ? true : false}\r\n                                                                    className=\"form-control d-block p-2 bg-white text-dark\"\r\n                                                                    placeholder=\" Please Enter FSSAI Exipry\"\r\n                                                                    options={{\r\n                                                                        altInput: true,\r\n                                                                        altFormat: \"F j, Y\",\r\n                                                                        dateFormat: \"Y-m-d\"\r\n                                                                    }}\r\n                                                                    onChange={EffectiveDateHandler}\r\n                                                                />\r\n                                                            </Col>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                    <Col md=\"2\"style={{margin:\"0.1cm\"}} >\r\n                                                        <Button type=\"button\" color=\"btn btn-outline-success border-2 font-size-12\"  onClick={() => { GoButton_Handler() }} >Go</Button>\r\n                                                    </Col>\r\n                                                </Row>\r\n\r\n                                            </CardHeader>\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n                                {TableData.length > 0 ?\r\n                                    <PaginationProvider pagination={paginationFactory(pageOptions)}>\r\n                                        {({ paginationProps, paginationTableProps }) => (\r\n                                            <ToolkitProvider\r\n                                                keyField=\"id\"\r\n                                                data={TableData}\r\n                                                columns={pagesListColumns}\r\n                                                search\r\n                                            >\r\n                                                {(toolkitProps) => (\r\n                                                    <React.Fragment>\r\n                                                        <Row>\r\n                                                            <Col xl=\"12\">\r\n                                                                <div className=\"table-responsive\">\r\n                                                                    <BootstrapTable\r\n                                                                        keyField={\"id\"}\r\n                                                                        responsive\r\n                                                                        bordered={false}\r\n                                                                        striped={false}\r\n                                                                        // defaultSorted={defaultSorted}\r\n                                                                        classes={\"table  table-bordered\"}\r\n                                                                        // noDataIndication={<div className=\"text-danger text-center \">Items Not available</div>}\r\n                                                                        {...toolkitProps.baseProps}\r\n                                                                        {...paginationTableProps}\r\n                                                                    />\r\n                                                                </div>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                        <Row className=\"align-items-md-center mt-30\">\r\n                                                            <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n                                                                <PaginationListStandalone {...paginationProps} />\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </React.Fragment>\r\n                                                )}\r\n                                            </ToolkitProvider>\r\n                                        )}\r\n\r\n                                    </PaginationProvider>\r\n                                    : null}\r\n                                {TableData.length > 0 ?\r\n                                    <div>\r\n                                        {\r\n                                            (editMode) ?\r\n                                                <button\r\n                                                    type=\"submit\"\r\n                                                    data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Update Party Type\"\r\n                                                    className=\"btn btn-success w-md mt-3\"\r\n                                                >\r\n                                                    <i class=\"fas fa-edit me-2\"></i>Update\r\n                                                </button>\r\n                                                : <button\r\n                                                    type=\"submit\"\r\n                                                    data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Save Party Type\"\r\n                                                    className=\"btn btn-primary w-md mt-3 \"\r\n                                                > <i className=\"fas fa-save me-2\"></i> Save\r\n                                                </button>\r\n                                        }\r\n                                    </div>\r\n                                    : null}\r\n\r\n                            </CardBody>\r\n                        </Card>\r\n                    </AvForm>\r\n                </Container>\r\n            </div>\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\n\r\nexport default MRPMaster\r\n\r\n\r\n\r\n\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\MRPMaster\\MRPList.js",["1532","1533","1534","1535"],"import React, { useEffect, useState } from \"react\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb3\"\r\nimport { Button, Col, Row } from \"reactstrap\";\r\nimport paginationFactory, {\r\n  PaginationListStandalone,\r\n  PaginationProvider,\r\n} from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { AlertState } from \"../../../store/actions\";\r\nimport \"../../../assets/scss/CustomTable2/datatables.scss\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  delete_MRPList,\r\n  delete_MRPListSuccess,\r\n  getMRPListPage,\r\n} from \"../../../store/Administrator/MRPMasterRedux/action\";\r\nimport { countlabelFunc } from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport { mySearchProps } from \"../../../components/Common/CmponentRelatedCommonFile/SearchBox/MySearch\";\r\nconst MRPList = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory()\r\n  const [userAccState, setUserAccState] = useState('');\r\n\r\n\r\n  // get Access redux data\r\n  const {\r\n    tableList,\r\n    deleteMsg,\r\n    userAccess, } = useSelector(\r\n      (state) => ({\r\n        tableList: state.MRPMasterReducer.MRPList,\r\n        deleteMsg: state.MRPMasterReducer.deleteMsg,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        postMsg: state.MRPMasterReducer.postMsg,\r\n        pageField: state.CommonPageFieldReducer.pageFieldList\r\n      })\r\n    );\r\n\r\n  useEffect(() => {\r\n    const locationPath = history.location.pathname\r\n    let userAcc = userAccess.find((inx) => {\r\n      return (`/${inx.ActualPagePath}` === locationPath)\r\n    })\r\n    if (!(userAcc === undefined)) {\r\n      setUserAccState(userAcc)\r\n    }\r\n  }, [userAccess])\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    dispatch(getMRPListPage());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    debugger\r\n    if ((deleteMsg.Status === true) && (deleteMsg.StatusCode === 200)) {\r\n      dispatch(delete_MRPListSuccess({ Status: false }));\r\n      dispatch(\r\n        AlertState({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: deleteMsg.Message,\r\n          AfterResponseAction: getMRPListPage,\r\n        })\r\n      );\r\n    } else if (deleteMsg.Status === true) {\r\n      dispatch(delete_MRPListSuccess({ Status: false }));\r\n      dispatch(\r\n        AlertState({\r\n          Type: 3,\r\n          Status: true,\r\n          Message: JSON.stringify(deleteMsg.Message),\r\n        })\r\n      );\r\n    }\r\n  }, [deleteMsg.Status]);\r\n\r\n  //select id for delete row\r\n  const deleteHandeler = (CommonID) => {\r\n    debugger\r\n    dispatch(\r\n      AlertState({\r\n        Type: 5,\r\n        Status: true,\r\n        Message: `Are you sure you want to delete this MRP List `,\r\n        RedirectPath: false,\r\n        PermissionAction: delete_MRPList,\r\n        ID: CommonID,\r\n      })\r\n    );\r\n  };\r\n\r\n  const EditPageHandler = (rowData) => {\r\n    let RelatedPageID = userAccState.RelatedPageID\r\n\r\n    const found = userAccess.find((element) => {\r\n      return element.id === RelatedPageID\r\n    })\r\n\r\n    if (!(found === undefined)) {\r\n      history.push({\r\n        pathname: `/${found.ActualPagePath}`,\r\n        editValue: rowData,\r\n        pageMode: 'edit'\r\n      })\r\n    }\r\n  }\r\n\r\n  const pageOptions = {\r\n    sizePerPage: 10,\r\n    totalSize: tableList.length,\r\n    custom: true,\r\n  };\r\n\r\n  const pagesListColumns = [\r\n    {\r\n      text: \"EffectiveDate\",\r\n      dataField: \"EffectiveDate\",\r\n      sort: true,\r\n    },\r\n    {\r\n      text: \"DivisionName\",\r\n      dataField: \"DivisionName\",\r\n      sort: true,\r\n    },\r\n    {\r\n      text: \"PartyName\",\r\n      dataField: \"PartyName\",\r\n      sort: true,\r\n    },\r\n    {\r\n      text: \"Action\",\r\n      hidden: (\r\n        !(userAccState.RoleAccess_IsEdit)\r\n        && !(userAccState.RoleAccess_IsView)\r\n        && !(userAccState.RoleAccess_IsDelete)) ? true : false,\r\n\r\n      formatter: (cellContent, Role) => (\r\n        <div className=\"d-flex gap-3\" style={{ display: 'flex', justifyContent: 'center' }} >\r\n          {((userAccState.RoleAccess_IsEdit) && (Role.CommonID > 0)) ?\r\n            <Button\r\n              type=\"button\"\r\n              data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Edit Effective Date\"\r\n              onClick={() => { EditPageHandler(Role); }}\r\n              className=\"badge badge-soft-success font-size-12 btn btn-success waves-effect waves-light w-xxs border border-light\"\r\n            >\r\n              <i className=\"mdi mdi-pencil font-size-18\" id=\"edittooltip\"></i>\r\n            </Button>\r\n            :\r\n            null}\r\n\r\n          {(!(userAccState.RoleAccess_IsEdit) && (Role.CommonID > 0) && (userAccState.RoleAccess_IsView)) ?\r\n            <Button\r\n              type=\"button\"\r\n              data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"View Effective Date\"\r\n              onClick={() => { EditPageHandler(Role); }}\r\n              className=\"badge badge-soft-primary font-size-12 btn btn-primary waves-effect waves-light w-xxs border border-light\"\r\n\r\n            >\r\n              <i className=\"bx bxs-show font-size-18 \"></i>\r\n            </Button> : null}\r\n\r\n          {((userAccState.RoleAccess_IsDelete) && (Role.CommonID > 0))\r\n            ?\r\n            <Button\r\n              className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n              data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Delete Effective Date\"\r\n              onClick={() => { deleteHandeler(Role.CommonID) }}\r\n            >\r\n              <i className=\"mdi mdi-delete font-size-18\"></i>\r\n            </Button>\r\n            : null\r\n          }\r\n\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  if (!(userAccState === '')) {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"page-content\">\r\n          <MetaTags>\r\n            <title>MRP List| FoodERP-React FrontEnd</title>\r\n          </MetaTags>\r\n          <Breadcrumb\r\n            pageHeading={userAccState.PageHeading}\r\n            newBtnView={(userAccState.RoleAccess_IsSave) ? true : false}\r\n            showCount={true}\r\n            excelBtnView={true}\r\n            excelData={tableList}\r\n          />\r\n          <PaginationProvider\r\n            pagination={paginationFactory(pageOptions)}\r\n          >\r\n            {({ paginationProps, paginationTableProps }) => (\r\n              <ToolkitProvider\r\n                keyField='id'\r\n                columns={pagesListColumns}\r\n                data={tableList}\r\n                search\r\n              >\r\n                {toolkitProps => (\r\n                  <React.Fragment>\r\n                        <div className=\"table-responsive\">\r\n                          <BootstrapTable\r\n                            keyField={\"id\"}\r\n                            responsive\r\n                            bordered={true}\r\n                            striped={false}\r\n                            noDataIndication={<div className=\"text-danger text-center \">Items Not available</div>}\r\n                            classes={\"table align-middle table-nowrap table-hover\"}\r\n                            headerWrapperClasses={\"thead-light\"}\r\n\r\n                            {...toolkitProps.baseProps}\r\n                            {...paginationTableProps}\r\n                          />\r\n                          {countlabelFunc(toolkitProps, paginationProps, dispatch, \"MRP\")}\r\n                          {mySearchProps(toolkitProps.searchProps)}\r\n                        </div>\r\n\r\n                    <Row className=\"align-items-md-center mt-30\">\r\n                      <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n                        <PaginationListStandalone\r\n                          {...paginationProps}\r\n\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                  </React.Fragment>\r\n                )\r\n                }\r\n              </ToolkitProvider>\r\n            )\r\n            }\r\n\r\n          </PaginationProvider>\r\n        </div>\r\n\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <React.Fragment></React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MRPList;\r\n\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\MarginMaster\\MarginMaster.js",["1536","1537","1538","1539","1540","1541"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Flatpickr from \"react-flatpickr\"\r\nimport { AlertState } from \"../../../store/actions\";\r\nimport paginationFactory, {\r\n    PaginationListStandalone,\r\n    PaginationProvider,\r\n} from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\r\nimport { get_Party_ForDropDown, get_PriceList_ForDropDown } from \"../../../store/Administrator/ItemsRedux/action\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport {\r\n    deleteID_In_Margin_MasterPage,\r\n    deleteID_In_Margin_MasterPageSuccess,\r\n    getMarginListPage,\r\n    postGoButtonForMargin_Master,\r\n    postGoButtonForMargin_Master_Success,\r\n    postMarginMasterData,\r\n    postMarginMasterDataSuccess\r\n} from \"../../../store/Administrator/MarginMasterRedux/action\";\r\nimport { AvForm } from \"availity-reactstrap-validation\";\r\n\r\nconst MarginMaster = (props) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const formRef = useRef(null);\r\n\r\n    //*** \"isEditdata get all data from ModuleID for Binding  Form controls\r\n    let editMode = history.location.pageMode;\r\n\r\n    //SetState  Edit data Geting From Modules List component\r\n    const [pageMode, setPageMode] = useState(\"save\");\r\n    const [userPageAccessState, setUserPageAccessState] = useState(\"\");\r\n    const [partyName_dropdown_Select, setPartyName_dropdown_Select] = useState(\"\");\r\n    const [priceList_dropdown_Select, setpriceList_dropdown_Select] = useState(\"\");\r\n    const [effectiveDate, setEffectiveDate] = useState('');\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { PostAPIResponse,\r\n        TableData,\r\n        deleteMessage,\r\n        Party,\r\n        PriceList,\r\n        userAccess\r\n    } = useSelector((state) => ({\r\n        TableData: state.MarginMasterReducer.MarginGoButton,\r\n        deleteMessage: state.MarginMasterReducer.deleteId_For_MarginMaster,\r\n        PostAPIResponse: state.MarginMasterReducer.PostData,\r\n        Party: state.ItemMastersReducer.Party,\r\n        PriceList: state.ItemMastersReducer.PriceList,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n    }));\r\n\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserPageAccessState(userAcc)\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n\r\n        const editDataGatingFromList = history.location.editValue\r\n\r\n        const locationPath = history.location.pathname\r\n        let userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (!(editDataGatingFromList === undefined)) {\r\n            var PriceListid = editDataGatingFromList.PriceList_id\r\n            var priceListName = editDataGatingFromList.PriceListName\r\n            var partyId = editDataGatingFromList.Party_id\r\n            var partyName = editDataGatingFromList.PartyName\r\n            var effectiveDate = editDataGatingFromList.EffectiveDate\r\n\r\n            const jsonBody = JSON.stringify({\r\n                PriceList: PriceListid,\r\n                Party: partyId,\r\n                EffectiveDate: effectiveDate\r\n            });\r\n            dispatch(postGoButtonForMargin_Master(jsonBody))\r\n            setPartyName_dropdown_Select({ label: partyName, value: partyId })\r\n            setpriceList_dropdown_Select({ label: priceListName, value: PriceListid })\r\n            setEffectiveDate(effectiveDate)\r\n\r\n        }\r\n        if (!(userAcc === undefined)) {\r\n            setUserPageAccessState(userAcc)\r\n        }\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        dispatch(get_PriceList_ForDropDown());\r\n        dispatch(get_Party_ForDropDown());\r\n        dispatch(postGoButtonForMargin_Master_Success([]));\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (deleteMessage.Status === true && deleteMessage.StatusCode === 200) {\r\n            dispatch(deleteID_In_Margin_MasterPageSuccess({ Status: false }));\r\n            dispatch(postGoButtonForMargin_Master_Success([]))\r\n            GoButton_Handler()\r\n            dispatch(\r\n                AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: deleteMessage.Message,\r\n                    AfterResponseAction: getMarginListPage,\r\n                })\r\n            );\r\n        } else if (deleteMessage.Status === true) {\r\n            dispatch(deleteID_In_Margin_MasterPageSuccess({ Status: false }));\r\n            dispatch(\r\n                AlertState({\r\n                    Type: 3,\r\n                    Status: true,\r\n                    Message: JSON.stringify(deleteMessage.Message),\r\n                })\r\n            );\r\n        }\r\n    }, [deleteMessage]);\r\n\r\n    const PartyTypeDropdown_Options = Party.map((Data) => ({\r\n        value: Data.id,\r\n        label: Data.Name\r\n    }));\r\n\r\n    const PriceList_DropdownOptions = PriceList.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }));\r\n\r\n    function PartyType_Dropdown_OnChange_Handller(e) {\r\n        setPartyName_dropdown_Select(e)\r\n    }\r\n\r\n    function PriceList_Dropdown_OnChange_Handller(e) {\r\n        setpriceList_dropdown_Select(e)\r\n    }\r\n\r\n    const EffectiveDateHandler = (e, date) => {\r\n        setEffectiveDate(date)\r\n    }\r\n\r\n    const MRPHandler = (e, cellContent, user, key) => {\r\n        user[\"Margin\"] = e.target.value\r\n    }\r\n\r\n    const CurrentMRPHandler = (e, cellContent, user, key) => {\r\n        user[\"CurrentMRP\"] = e.target.value\r\n    }\r\n\r\n    const GoButton_Handler = (event, values) => {\r\n\r\n        let priceList = { ...priceList_dropdown_Select }\r\n        let party = { ...partyName_dropdown_Select }\r\n\r\n        const jsonBody = JSON.stringify({\r\n            PriceList: priceList.value ? priceList.value : \" \",\r\n            Party: party.value ? party.value : 0,\r\n            EffectiveDate: effectiveDate\r\n        });\r\n        if (!(priceList.value)) {\r\n            alert(\"PriceList not select\")\r\n        }\r\n        else if (!(effectiveDate)) {\r\n            alert(\"EffectiveDate not select\")\r\n        }\r\n        dispatch(postGoButtonForMargin_Master(jsonBody))\r\n        console.log(\"Go Button Post Json\", jsonBody)\r\n    };\r\n\r\n    //select id for delete row\r\n    const deleteHandeler = (id, name) => {\r\n        dispatch(\r\n            AlertState({\r\n                Type: 5,\r\n                Status: true,\r\n                Message: `Are you sure you want to delete this Item : \"${name}\"`,\r\n                RedirectPath: false,\r\n                PermissionAction: deleteID_In_Margin_MasterPage,\r\n                ID: id,\r\n            })\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        if ((PostAPIResponse.Status === true) && (PostAPIResponse.StatusCode === 200) && !(pageMode === \"dropdownAdd\")) {\r\n            dispatch(postMarginMasterDataSuccess({ Status: false }))\r\n            formRef.current.reset();\r\n            setPartyName_dropdown_Select('')\r\n            setEffectiveDate('')\r\n            setpriceList_dropdown_Select('')\r\n\r\n            if (pageMode === \"dropdownAdd\") {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: PostAPIResponse.Message,\r\n                }))\r\n            }\r\n            else {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: PostAPIResponse.Message,\r\n                    RedirectPath: '/MarginList',\r\n                }))\r\n            }\r\n        }\r\n\r\n        else if (PostAPIResponse.Status === true) {\r\n            dispatch(postMarginMasterDataSuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(PostAPIResponse.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [PostAPIResponse])\r\n\r\n    const pageOptions = {\r\n        sizePerPage: 10,\r\n        totalSize: TableData.length,\r\n        custom: true,\r\n    };\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Item Name\",\r\n            dataField: \"Name\",\r\n            sort: true,\r\n        },\r\n        {\r\n            text: \"Current Margin\",\r\n            dataField: \"\",\r\n            sort: true,\r\n            formatter: (cellContent, user, key) => (\r\n                <>\r\n                    <div style={{ justifyContent: 'center' }} >\r\n                        <Col>\r\n                            <FormGroup className=\" col col-sm-4 \">\r\n                                <Input\r\n                                    id=\"\"\r\n                                    type=\"text\"\r\n                                    disabled={true}\r\n                                    defaultValue={TableData[key].CurrentMargin}\r\n                                    className=\"col col-sm text-center\"\r\n                                    onChange={(e) => CurrentMRPHandler(e, cellContent, user, key)}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                    </div>\r\n                </>\r\n            ),\r\n        },\r\n        {\r\n            text: \"Effective from \",\r\n            dataField: \"CurrentDate\",\r\n            sort: true,\r\n            formatter: (cellContent, user, key) => (\r\n                <>\r\n                    <div style={{ justifyContent: 'center' }} >\r\n                        <Col>\r\n                            <FormGroup className=\" col col-sm-6 \">\r\n                                <Label style={{ color: \"#B0290B\" }}>{TableData[key].CurrentDate}</Label>\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n                </>\r\n            ),\r\n        },\r\n        {\r\n\r\n            text: \"Margin \",\r\n            dataField: \"\",\r\n            sort: true,\r\n            formatter: (cellContent, user, key) => (\r\n                <>\r\n                    <div style={{ justifyContent: 'center' }} >\r\n                        <Col>\r\n                            <FormGroup className=\" col col-sm-4 \">\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    defaultValue={TableData[key].Margin}\r\n                                    disabled={!(user.Margin === '') ? true : false}\r\n                                    className=\"col col-sm text-center\"\r\n                                    onChange={(e) => MRPHandler(e, cellContent, user, key)}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n                </>\r\n            ),\r\n        },\r\n        {\r\n            text: \"Action \",\r\n            dataField: \"\",\r\n            formatter: (cellContent, user) => (\r\n\r\n                <>\r\n                    <div style={{ justifyContent: 'center' }} >\r\n                        <Col>\r\n                            <FormGroup className=\" col col-sm-4 \">\r\n                                {!(user.id === '') ?\r\n                                    <Button\r\n                                        id={\"deleteid\"}\r\n                                        type=\"button\"\r\n                                        className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n                                        data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title='Delete MRP'\r\n                                        onClick={() => { deleteHandeler(user.id, user.Name); }}\r\n                                    >\r\n                                        <i className=\"mdi mdi-delete font-size-18\"></i>\r\n                                    </Button> : <></>}\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n                </>\r\n            ),\r\n        },\r\n    ]\r\n\r\n    //'Save' And 'Update' Button Handller\r\n    const handleValidSubmit = (event, values) => {\r\n        debugger\r\n        var ItemData = TableData.map((index) => ({\r\n            PriceList: priceList_dropdown_Select.value,\r\n            Party: partyName_dropdown_Select.value,\r\n            EffectiveDate: effectiveDate,\r\n            Company: 1,\r\n            CreatedBy: 1,\r\n            UpdatedBy: 1,\r\n            IsDeleted: 0,\r\n            Item: index.Item,\r\n            Margin: index.Margin,\r\n            id:index.id\r\n        }))\r\n\r\n        const Find = ItemData.filter((index) => {\r\n            return (!(index.Margin === '') && (index.id === ''))\r\n        })\r\n\r\n        const jsonBody = JSON.stringify(Find)\r\n\r\n        dispatch(postMarginMasterData(jsonBody));\r\n        console.log(\"jsonBody\", jsonBody)\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((pageMode === \"edit\") || (pageMode === \"copy\") || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                <MetaTags>\r\n                    <title>PartyType| FoodERP-React FrontEnd</title>\r\n                </MetaTags>\r\n                <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n                <Container fluid>\r\n                    <AvForm\r\n                        onValidSubmit={(e, v) => {\r\n                            handleValidSubmit(e, v);\r\n                        }}\r\n                        ref={formRef}\r\n                    >\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\"  >\r\n                                <Row className=\"\">\r\n                                    <Col md={12}>\r\n                                        <Card style={{ backgroundColor: \"whitesmoke\" }}>\r\n\r\n\r\n                                            <CardHeader className=\"card-header   text-black \" style={{ backgroundColor: \"#e9e9ef\" }} >\r\n                                                <Row className=\"mt-3\">\r\n                                                    <Col md=\"3\">\r\n                                                        <FormGroup className=\"mb-3 row \">\r\n                                                            <Label className=\"col-sm-3 p-2 ml-n4 \">PriceList</Label>\r\n                                                            <Col md=\"9\">\r\n                                                                <Select\r\n                                                                    value={priceList_dropdown_Select}\r\n                                                                    options={PriceList_DropdownOptions}\r\n                                                                    isDisabled={editMode === \"edit\" ? true : false}\r\n                                                                    className=\"rounded-bottom\"\r\n                                                                    placeholder=\"select\"\r\n                                                                    onChange={(e) => { PriceList_Dropdown_OnChange_Handller(e) }}\r\n                                                                    classNamePrefix=\"select2-selection\"\r\n\r\n                                                                />\r\n                                                            </Col>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n\r\n                                                    <Col md=\"3\">\r\n                                                        <FormGroup className=\"mb-3 row \">\r\n                                                            <Label className=\"col-sm-3 p-2 ml-n4 \">Party Name</Label>\r\n                                                            <Col md=\"9\"  style={{height:\"3.5cm\"}}>\r\n                                                                <Select\r\n                                                                    value={partyName_dropdown_Select}\r\n                                                                    options={PartyTypeDropdown_Options}\r\n                                                                    isDisabled={editMode === \"edit\" ? true : false}\r\n                                                                    className=\"rounded-bottom\"\r\n                                                                    placeholder=\"select\"\r\n                                                                    onChange={(e) => { PartyType_Dropdown_OnChange_Handller(e) }}\r\n                                                                    classNamePrefix=\"select2-selection\"\r\n\r\n                                                                />\r\n                                                            </Col>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n\r\n                                                    <Col md=\"3\">\r\n                                                        <FormGroup className=\"mb-3 row \">\r\n                                                            <Label className=\"col-sm-3 p-2 ml-n4 \">EffectiveDate</Label>\r\n                                                            <Col md=\"9\">\r\n                                                                <Flatpickr\r\n                                                                    id=\"EffectiveDateid\"\r\n                                                                    name=\"effectiveDate\"\r\n                                                                    value={effectiveDate}\r\n                                                                    isDisabled={editMode === \"edit\" ? true : false}\r\n                                                                    className=\"form-control d-block p-2 bg-white text-dark\"\r\n                                                                    placeholder=\" Please Enter FSSAI Exipry\"\r\n                                                                    options={{\r\n                                                                        altInput: true,\r\n                                                                        altFormat: \"F j, Y\",\r\n                                                                        dateFormat: \"Y-m-d\"\r\n                                                                    }}\r\n                                                                    onChange={EffectiveDateHandler}\r\n                                                                />\r\n                                                            </Col>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                    <Col md=\"3\" >\r\n                                                        <Button type=\"button\" color=\"btn btn-outline-success border-2 font-size-12 \" onClick={() => { GoButton_Handler() }} >Go</Button>\r\n                                                    </Col>\r\n\r\n                                                </Row>\r\n                                            </CardHeader>\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n                                {TableData.length > 0 ?\r\n                                    <PaginationProvider pagination={paginationFactory(pageOptions)}>\r\n                                        {({ paginationProps, paginationTableProps }) => (\r\n                                            <ToolkitProvider\r\n                                                keyField=\"id\"\r\n                                                data={TableData}\r\n                                                columns={pagesListColumns}\r\n                                                search\r\n                                            >\r\n                                                {(toolkitProps) => (\r\n                                                    <React.Fragment>\r\n                                                        <Row>\r\n                                                            <Col xl=\"12\">\r\n                                                                <div className=\"table-responsive\">\r\n                                                                    <BootstrapTable\r\n                                                                        keyField={\"id\"}\r\n                                                                        responsive\r\n                                                                        bordered={false}\r\n                                                                        striped={false}\r\n                                                                        classes={\"table  table-bordered\"}\r\n                                                                        noDataIndication={<div className=\"text-danger text-center \">Items Not available</div>}\r\n                                                                        {...toolkitProps.baseProps}\r\n                                                                        {...paginationTableProps}\r\n                                                                    />\r\n                                                                </div>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                        <Row className=\"align-items-md-center mt-30\">\r\n                                                            <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n                                                                <PaginationListStandalone {...paginationProps} />\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </React.Fragment>\r\n                                                )}\r\n                                            </ToolkitProvider>\r\n                                        )}\r\n                                    </PaginationProvider>\r\n                                    : null}\r\n                                {TableData.length > 0 ?\r\n                                    <div>\r\n                                        {\r\n                                            (editMode) ?\r\n                                                <button\r\n                                                    type=\"submit\"\r\n                                                    data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Update Party Type\"\r\n                                                    className=\"btn btn-success w-md mt-3\"\r\n                                                >\r\n                                                    <i class=\"fas fa-edit me-2\"></i>Update\r\n                                                </button>\r\n                                                : <button\r\n                                                    type=\"submit\"\r\n                                                    data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Save Party Type\"\r\n                                                    className=\"btn btn-primary w-md mt-3 \"\r\n                                                > <i className=\"fas fa-save me-2\"></i> Save\r\n                                                </button>\r\n                                        }\r\n                                    </div>\r\n                                    : null}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </AvForm>\r\n                </Container>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default MarginMaster\r\n\r\n\r\n\r\n\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\MarginMaster\\MarginList.js",["1542","1543","1544","1545"],"import React, { useEffect, useState } from \"react\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb3\"\r\nimport { Button, Col, Row } from \"reactstrap\";\r\nimport paginationFactory, {\r\n  PaginationListStandalone,\r\n  PaginationProvider,\r\n} from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { AlertState } from \"../../../store/actions\";\r\nimport \"../../../assets/scss/CustomTable2/datatables.scss\"\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  delete_MarginList,\r\n  delete_MarginListSuccess,\r\n  getMarginListPage,\r\n} from \"../../../store/Administrator/MarginMasterRedux/action\";\r\nimport { countlabelFunc } from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport { mySearchProps } from \"../../../components/Common/CmponentRelatedCommonFile/SearchBox/MySearch\";\r\nconst MarginList = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory()\r\n  const [userAccState, setUserAccState] = useState('');\r\n\r\n\r\n\r\n  // get Access redux data\r\n  const {\r\n    TableListData,\r\n    deleteMessage,\r\n    RoleAccessModifiedinSingleArray,\r\n  } = useSelector(\r\n    (state) => ({\r\n      TableListData: state.MarginMasterReducer.MarginList,\r\n      deleteMessage: state.MarginMasterReducer.deleteMsg,\r\n      RoleAccessModifiedinSingleArray: state.Login.RoleAccessUpdateData,\r\n    })\r\n  );\r\n\r\n  useEffect(() => {\r\n    const locationPath = history.location.pathname\r\n    let userAcc = RoleAccessModifiedinSingleArray.find((inx) => {\r\n      return (`/${inx.ActualPagePath}` === locationPath)\r\n    })\r\n    if (!(userAcc === undefined)) {\r\n      setUserAccState(userAcc)\r\n    }\r\n  }, [RoleAccessModifiedinSingleArray])\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    dispatch(getMarginListPage());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n\r\n    if (deleteMessage.Status === true && deleteMessage.StatusCode === 200) {\r\n      dispatch(delete_MarginListSuccess({ Status: false }));\r\n      dispatch(\r\n        AlertState({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: deleteMessage.Message,\r\n          AfterResponseAction: getMarginListPage,\r\n        })\r\n      );\r\n    } else if (deleteMessage.Status === true) {\r\n      dispatch(delete_MarginListSuccess({ Status: false }));\r\n      dispatch(\r\n        AlertState({\r\n          Type: 3,\r\n          Status: true,\r\n          Message: JSON.stringify(deleteMessage.Message),\r\n        })\r\n      );\r\n    }\r\n  }, [deleteMessage]);\r\n\r\n  //select id for delete row\r\n  const deleteHandeler = (CommonID) => {\r\n    dispatch(\r\n      AlertState({\r\n        Type: 5,\r\n        Status: true,\r\n        Message: `Are you sure you want to delete this Margin List `,\r\n        RedirectPath: false,\r\n        PermissionAction: delete_MarginList,\r\n        ID: CommonID,\r\n      })\r\n    );\r\n  };\r\n\r\n  const EditPageHandler = (rowData) => {\r\n\r\n    let RelatedPageID = userAccState.RelatedPageID\r\n\r\n    const found = RoleAccessModifiedinSingleArray.find((element) => {\r\n      return element.id === RelatedPageID\r\n    })\r\n\r\n    if (!(found === undefined)) {\r\n      history.push({\r\n        pathname: `/${found.ActualPagePath}`,\r\n        editValue: rowData,\r\n        pageMode: 'edit'\r\n      })\r\n    }\r\n  }\r\n\r\n  const pageOptions = {\r\n    sizePerPage: 10,\r\n    totalSize: TableListData.length,\r\n    custom: true,\r\n  };\r\n\r\n  const pagesListColumns = [\r\n    {\r\n      text: \"EffectiveDate\",\r\n      dataField: \"EffectiveDate\",\r\n      sort: true,\r\n    },\r\n    {\r\n      text: \"PriceListName\",\r\n      dataField: \"PriceListName\",\r\n      sort: true,\r\n    },\r\n    {\r\n      text: \"PartyName\",\r\n      dataField: \"PartyName\",\r\n      sort: true,\r\n    },\r\n    {\r\n      text: \"Action\",\r\n      hidden: (\r\n        !(userAccState.RoleAccess_IsEdit)\r\n        && !(userAccState.RoleAccess_IsView)\r\n        && !(userAccState.RoleAccess_IsDelete)) ? true : false,\r\n\r\n      formatter: (cellContent, Role) => (\r\n        <div className=\"d-flex gap-3\" style={{ display: 'flex', justifyContent: 'center' }} >\r\n          {((userAccState.RoleAccess_IsEdit) && (Role.CommonID > 0)) ?\r\n            <Button\r\n              type=\"button\"\r\n              data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Edit Effective Date\"\r\n              onClick={() => { EditPageHandler(Role); }}\r\n              className=\"badge badge-soft-success font-size-12 btn btn-success waves-effect waves-light w-xxs border border-light\"\r\n            >\r\n              <i className=\"mdi mdi-pencil font-size-18\" id=\"edittooltip\"></i>\r\n            </Button>\r\n            :\r\n            null}\r\n\r\n          {(!(userAccState.RoleAccess_IsEdit) && (Role.CommonID > 0) && (userAccState.RoleAccess_IsView)) ?\r\n            <Button\r\n              type=\"button\"\r\n              data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"View Effective Date\"\r\n              onClick={() => { EditPageHandler(Role); }}\r\n              className=\"badge badge-soft-primary font-size-12 btn btn-primary waves-effect waves-light w-xxs border border-light\"\r\n\r\n            >\r\n              <i className=\"bx bxs-show font-size-18 \"></i>\r\n            </Button> : null}\r\n\r\n          {((userAccState.RoleAccess_IsDelete) && (Role.CommonID > 0))\r\n            ?\r\n            <Button\r\n              className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n              data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Delete Effective Date\"\r\n              onClick={() => { deleteHandeler(Role.CommonID) }}\r\n            >\r\n              <i className=\"mdi mdi-delete font-size-18\"></i>\r\n            </Button>\r\n            : null\r\n          }\r\n\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  if (!(userAccState === '')) {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"page-content\">\r\n          <MetaTags>\r\n            <title>MarginList| FoodERP-React FrontEnd</title>\r\n          </MetaTags>\r\n          <Breadcrumb\r\n            pageHeading={userAccState.PageHeading}\r\n            newBtnView={(userAccState.RoleAccess_IsSave) ? true : false}\r\n            showCount={true}\r\n            excelBtnView={true}\r\n            excelData={TableListData}\r\n          />\r\n          <PaginationProvider\r\n            pagination={paginationFactory(pageOptions)}\r\n          >\r\n            {({ paginationProps, paginationTableProps }) => (\r\n              <ToolkitProvider\r\n                keyField='id'\r\n                columns={pagesListColumns}\r\n                data={TableListData}\r\n                search\r\n              >\r\n                {toolkitProps => (\r\n                  <React.Fragment>\r\n                        <div className=\"table-responsive\">\r\n                          <BootstrapTable\r\n                            keyField={\"id\"}\r\n                            responsive\r\n                            bordered={true}\r\n                            striped={false}\r\n                            classes={\"table align-middle table-nowrap table-hover\"}\r\n                            noDataIndication={<div className=\"text-danger text-center \">Items Not available</div>}\r\n                            headerWrapperClasses={\"thead-light\"}\r\n                            {...toolkitProps.baseProps}\r\n                            {...paginationTableProps}\r\n                          />\r\n                          {countlabelFunc(toolkitProps, paginationProps, dispatch, \"Margin\")}\r\n                          {mySearchProps(toolkitProps.searchProps)}\r\n                        </div>\r\n                    \r\n                    <Row className=\"align-items-md-center mt-30\">\r\n                      <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n                        <PaginationListStandalone\r\n                          {...paginationProps}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                  </React.Fragment>\r\n                )\r\n                }\r\n              </ToolkitProvider>\r\n            )\r\n            }\r\n          </PaginationProvider>\r\n        </div>\r\n\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <React.Fragment></React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MarginList;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\TermsAndCondtions\\TermsAndCondtionsMaster.js",["1546","1547","1548","1549"],"import React, { useEffect, useRef, useState, } from \"react\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport { AvField, AvForm, } from \"availity-reactstrap-validation\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { AlertState } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { Breadcrumb_inputName } from \"../../../store/Utilites/Breadcrumb/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n   \r\n    postTermAndCondition,\r\n    postTermAndConditionSuccess,\r\n    \r\n    EditTermsAndCondtions,\r\n  \r\n} from \"../../../store/Administrator/TermsAndCondtionsRedux/actions\";\r\n\r\nconst TermsAndCondtionsMaster = (props) => {\r\n    const formRef = useRef(null);\r\n    const [EditData, setEditData] = useState([]);\r\n    const [pageMode, setPageMode] = useState(\"\");\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n    const [userPageAccessState, setUserPageAccessState] = useState(123);\r\n\r\n    //*** \"isEditdata get all data from ModuleID for Binding  Form controls\r\n    let editDataGatingFromList = props.state;\r\n    let pageModeProps=props.pageMode;\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { PostAPIResponse, RoleAccessModifiedinSingleArray } = useSelector((state) => ({\r\n        \r\n        PostAPIResponse: state.TermsAndCondtionsReducer.PostData,\r\n        \r\n        RoleAccessModifiedinSingleArray: state.Login.RoleAccessUpdateData,\r\n    }));\r\n\r\n\r\n    //userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = undefined\r\n        if ((editDataGatingFromList === undefined)) {\r\n\r\n            let locationPath = history.location.pathname\r\n            userAcc = RoleAccessModifiedinSingleArray.find((inx) => {\r\n                return (`/${inx.ActualPagePath}` === locationPath)\r\n            })\r\n        }\r\n        else if (!(editDataGatingFromList === undefined)) {\r\n            let relatatedPage = props.relatatedPage\r\n            userAcc = RoleAccessModifiedinSingleArray.find((inx) => {\r\n                return (`/${inx.ActualPagePath}` === relatatedPage)\r\n            })\r\n\r\n        }\r\n        if (!(userAcc === undefined)) {\r\n            setUserPageAccessState(userAcc)\r\n        }\r\n\r\n    }, [RoleAccessModifiedinSingleArray])\r\n\r\n\r\n    //This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n        if (!(userPageAccessState === '')) { document.getElementById(\"txtName\").focus(); }\r\n        if (!(editDataGatingFromList === undefined)) {\r\n           // setEditData(editDataGatingFromList);\r\n            setPageMode(pageModeProps);\r\n            //dispatch(editCategoryTypeIDSuccess({ Status: false }))\r\n            dispatch(Breadcrumb_inputName(editDataGatingFromList.Name))\r\n            return\r\n        }\r\n    }, [editDataGatingFromList])\r\n\r\n    useEffect(() => {\r\n\r\n        if ((PostAPIResponse.Status === true) && (PostAPIResponse.StatusCode === 200)) {\r\n            dispatch(postTermAndConditionSuccess({ Status: false }))\r\n\r\n\r\n            if (pageMode === \"other\") {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: PostAPIResponse.Message,\r\n                }))\r\n            }\r\n\r\n            else {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: PostAPIResponse.Message,\r\n                    RedirectPath: '/TermsAndCondtionsMaster',\r\n                }))\r\n            }\r\n        }\r\n        else if (PostAPIResponse.Status === true) {\r\n            dispatch(postTermAndConditionSuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(postMessage.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [PostAPIResponse])\r\n\r\n\r\n\r\n    const FormSubmitButton_Handler = (event, values) => {\r\n        alert(\"aaaa\")\r\n        const jsonBody = JSON.stringify({\r\n            \r\n            Name: values.Name,\r\n\r\n        });\r\n       \r\n        if (pageMode === \"edit\") {\r\n            dispatch(EditTermsAndCondtions(jsonBody, EditData.id));\r\n        }\r\n        else {\r\n            alert(jsonBody)\r\n            dispatch(postTermAndCondition(jsonBody))\r\n        }\r\n\r\n    };\r\n\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((pageMode === \"edit\")||(pageMode===\"copy\")||(pageMode===\"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n                        <MetaTags>\r\n                            <title>CategoryTypeMaster| FoodERP-React FrontEnd</title>\r\n                        </MetaTags>\r\n                        <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <AvForm onValidSubmit={(e, v) => { FormSubmitButton_Handler(e, v) }}\r\n                                    ref={formRef}\r\n                                >\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">Name </Label>\r\n                                                            <AvField\r\n                                                                name=\"Name\"\r\n                                                                id=\"txtName\"\r\n                                                                value={EditData.Name}\r\n                                                                type=\"text\"\r\n                                                                placeholder=\"Please Enter Name\"\r\n                                                                autoComplete='off'\r\n                                                                validate={{\r\n                                                                    required: { value: true, errorMessage: 'Please Enter Name' },\r\n                                                                }}\r\n                                                                onChange={(e) => { dispatch(Breadcrumb_inputName(e.target.value)) }}\r\n                                                            />\r\n\r\n                                                        </FormGroup>\r\n\r\n                                                        <FormGroup>\r\n                                                            <Row>\r\n                                                                <Col sm={2}>\r\n                                                                    <div>\r\n                                                                        {\r\n                                                                            pageMode === \"edit\" ?\r\n                                                                                userPageAccessState.RoleAccess_IsEdit ?\r\n                                                                                    <button\r\n                                                                                        type=\"submit\"\r\n                                                                                        data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Update Party Type\"\r\n                                                                                        className=\"btn btn-success w-md\"\r\n                                                                                    >\r\n                                                                                        <i class=\"fas fa-edit me-2\"></i>Update\r\n                                                                                    </button>\r\n                                                                                    :\r\n                                                                                    <></>\r\n                                                                                : (\r\n                                                                                    userPageAccessState.RoleAccess_IsSave ?\r\n                                                                                        <button\r\n                                                                                            type=\"submit\"\r\n                                                                                            data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Save ProductCategory Type\"\r\n                                                                                            className=\"btn btn-primary w-sm\">\r\n                                                                                            <i className=\"fas fa-save me-2\"></i>\r\n                                                                                            Save\r\n\r\n                                                                                        </button>\r\n                                                                                        :\r\n                                                                                        <></>\r\n                                                                                )\r\n                                                                        }\r\n                                                                    </div>\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </FormGroup>\r\n\r\n                                                    </Row>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </AvForm>\r\n                            </CardBody>\r\n\r\n\r\n\r\n                        </Card>\r\n\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default TermsAndCondtionsMaster\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\GroupPage\\GroupMaster.js",["1550","1551","1552","1553","1554","1555","1556","1557","1558","1559","1560","1561"],"import React, { useEffect, useRef, useState, } from \"react\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport {\r\n    Breadcrumb_inputName,\r\n    commonPageField,\r\n    commonPageFieldSuccess,\r\n    editGroupIDSuccess,\r\n    getGroupList,\r\n    getGroupListSuccess,\r\n    postGroupList,\r\n    postGroupSuccess,\r\n    updateGroupID,\r\n    updategroupIDSuccess\r\n} from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AlertState } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    onChangeText,\r\n\r\n} from \"../../../components/Common/CmponentRelatedCommonFile/validationFunction\";\r\nimport { getGroupTypeslist } from \"../../../store/Administrator/GroupTypeRedux/action\";\r\nimport { GROUP_lIST } from \"../../../routes/route_url\";\r\nimport SaveButton from \"../../../components/Common/CommonSaveButton\";\r\n\r\nconst GroupMaster = (props) => {\r\n\r\n    const formRef = useRef(null);\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n\r\n    const [EditData, setEditData] = useState({});\r\n    const [pageMode, setPageMode] = useState(\"\");\r\n    const [modalCss, setModalCss] = useState(false);\r\n\r\n    const [GroupTypes_dropdown_Select, setGroupTypes_dropdown_Select] = useState(\"\");\r\n    const [userPageAccessState, setUserPageAccessState] = useState('');\r\n\r\n\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        GroupTypeAPI,\r\n        updateMsg,\r\n        pageField,\r\n        userAccess } = useSelector((state) => ({\r\n            postMsg: state.GroupReducer.postMsg,\r\n            updateMsg: state.CategoryReducer.updateMessage,\r\n            GroupTypeAPI: state.GroupTypeReducer.GroupType,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        }));\r\n\r\n\r\n    {/** Dyanamic Page access state and OnChange function */ }\r\n    {/*start */ }\r\n\r\n    const initialFiled = {\r\n        id: \"\",\r\n        Name: \"\",\r\n        GroupType: \"\",\r\n        GroupTypeName: \"\"\r\n    }\r\n\r\n    const [state, setState] = useState(initialFiledFunc(initialFiled))\r\n    debugger\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n\r\n    {/*End */ }\r\n\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(119))\r\n        dispatch(getGroupTypeslist())\r\n    }, []);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(\"editValue\")\r\n    const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserPageAccessState(userAcc)\r\n        };\r\n    }, [userAccess])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        // if (!(userPageAccessState === '')) { document.getElementById(\"txtName\").focus(); }\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n                setEditData(hasEditVal)\r\n\r\n                const { id, Name, GroupType, GroupTypeName } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n                values.Name = Name;\r\n                values.id = id\r\n                values.GroupType = GroupType;\r\n                // values.GroupTypeName =GroupTypeName\r\n                values.GroupType = { label: GroupTypeName, value: GroupType };\r\n\r\n                hasValid.Name.valid = true;\r\n                hasValid.GroupType.valid = true;\r\n\r\n                values.id = id\r\n                values.Name = Name;\r\n                values.GroupType = GroupType;\r\n                // values.GroupTypeName =GroupTypeName\r\n                values.GroupType = { label: GroupTypeName, value: GroupType };\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n\r\n            }\r\n            dispatch(editGroupIDSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            setGroupTypes_dropdown_Select('')\r\n            dispatch(postGroupSuccess({ Status: false }))\r\n            formRef.current.reset();\r\n            if (pageMode === \"other\") {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                }))\r\n            }\r\n            else {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                    RedirectPath: false,\r\n                }))\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(getGroupListSuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(postMessage.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            history.push({\r\n                pathname: GROUP_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updategroupIDSuccess({ Status: false }));\r\n            dispatch(\r\n                AlertState({\r\n                    Type: 3,\r\n                    Status: true,\r\n                    Message: JSON.stringify(updateMsg.Message),\r\n                })\r\n            );\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n       debugger\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })// new change\r\n        }\r\n    }, [pageField])\r\n\r\n\r\n    // get method for dropdown\r\n    useEffect(() => {\r\n        dispatch(getGroupList());\r\n    }, [dispatch]);\r\n\r\n\r\n    function handllerDivision(e) {\r\n        setGroupTypes_dropdown_Select(e)\r\n    }\r\n\r\n    const GroupTypesValues = GroupTypeAPI.map((Data) => ({\r\n        value: Data.id,\r\n        label: Data.Name\r\n    }));\r\n\r\n    const formSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        if (formValid(state, setState)) {\r\n            debugger\r\n            const jsonBody = JSON.stringify({\r\n                Name: values.Name,\r\n                GroupType: values.GroupType.value,\r\n                CreatedBy: 1,\r\n                CreatedOn: \"0002-10-03T12:48:14.910491\",\r\n                UpdatedBy: 1,\r\n                UpdatedOn: \"0002-10-03T12:48:14.910491\"\r\n            });\r\n\r\n            if (pageMode === \"edit\") {\r\n\r\n                dispatch(updateGroupID(jsonBody, values.id));\r\n\r\n\r\n            }\r\n            else {\r\n                dispatch(postGroupList(jsonBody));\r\n                // console.log(\"jsonBody\", jsonBody)\r\n\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n                        <MetaTags>\r\n                            <title>{userPageAccessState.PageHeading} | FoodERP-React FrontEnd</title>\r\n                        </MetaTags>\r\n                        <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form onSubmit={formSubmitHandler} ref={formRef} noValidate>\r\n                                    <Row className=\"\">\r\n                                        <Col md={12} style={{ height: \"9cm\" }}>\r\n                                            <Card>\r\n                                                <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                                                    <Row>\r\n\r\n                                                        <Col md=\"4\">\r\n                                                            <FormGroup className=\"mb-3\">\r\n                                                                <Label htmlFor=\"validationCustom01\">{fieldLabel.Name} </Label>\r\n\r\n                                                                <Col sm={12}>\r\n                                                                    <Input\r\n                                                                        name=\"Name\"\r\n                                                                        id=\"txtName\"\r\n                                                                        value={values.Name}\r\n                                                                        type=\"text\"\r\n                                                                        className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                        placeholder=\"Please Enter Name\"\r\n                                                                        autoComplete='off'\r\n                                                                        autoFocus={true}\r\n                                                                        onChange={(event) => {\r\n                                                                            onChangeText({ event, state, setState })\r\n                                                                            dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                        }}\r\n\r\n                                                                    />\r\n                                                                    {isError.Name.length > 0 && (\r\n                                                                        <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                                    )}\r\n\r\n\r\n                                                                </Col>\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n\r\n\r\n                                                        <Row>\r\n                                                            <FormGroup className=\"mb-2 col col-sm-4\">\r\n\r\n                                                                <Label htmlFor=\"validationCustom01\"> {fieldLabel.GroupType} </Label>\r\n\r\n\r\n                                                                <Select\r\n                                                                    name=\"GroupType\"\r\n                                                                    // defaultValue={EmployeeType_DropdownOptions[0]}\r\n                                                                    value={values.GroupType}\r\n                                                                    isSearchable={false}\r\n                                                                    className=\"react-dropdown\"\r\n                                                                    options={GroupTypesValues}\r\n                                                                    onChange={(hasSelect, evn) => onChangeSelect({ hasSelect, evn, state, setState, })}\r\n                                                                    classNamePrefix=\"dropdown\"\r\n                                                                />\r\n                                                                {isError.GroupType.length > 0 && (\r\n                                                                    <span className=\"text-danger f-8\"><small>{isError.GroupType}</small></span>\r\n                                                                )}\r\n\r\n\r\n                                                               \r\n                                                            </FormGroup>\r\n\r\n                                                        </Row>\r\n\r\n                                                        <FormGroup>\r\n                                                            <Row>\r\n                                                                <Col sm={2}>\r\n                                                                    <SaveButton pageMode={pageMode} userAcc={userPageAccessState}\r\n                                                                        module={\"GroupMaster\"}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </FormGroup >\r\n                                                    </Row>\r\n\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n\r\n                        </Card>\r\n\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default GroupMaster\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\GroupPage\\GroupList.js",["1562"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CommonListPage from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport {\r\n  commonPageFieldList,\r\n  commonPageFieldListSuccess,\r\n} from \"../../../store/actions\";\r\nimport { GROUP } from \"../../../routes/route_url\";\r\nimport GroupMaster from \"./GroupMaster\";\r\nimport { deleteGrouplistSuccess, delete_GroupList_ID, editGroupID, getGroupList, postGroupSuccess, updategroupIDSuccess } from \"../../../store/Administrator/GroupRedux/action\";\r\n\r\nconst GroupList = (props) => {\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      tableList: state.GroupReducer.groupList,\r\n      editData: state.GroupReducer.editData,\r\n      updateMsg: state.GroupReducer.updateMsg,\r\n      deleteMsg: state.GroupReducer.deleteMsg,\r\n      postMsg: state.GroupReducer.postMsg,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList:getGroupList,\r\n    editId: editGroupID,\r\n    deleteId: delete_GroupList_ID,\r\n    postSucc: postGroupSuccess,\r\n    updateSucc: updategroupIDSuccess,\r\n    deleteSucc: deleteGrouplistSuccess\r\n\r\n  }\r\n  useEffect(() => {\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(120))\r\n    dispatch(getGroupList());\r\n    \r\n    \r\n\r\n  }, []);\r\n\r\n  const { pageField } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        (pageField) ?\r\n          <CommonListPage\r\n            action={action}\r\n            reducers={reducers}\r\n            MasterModal={GroupMaster}\r\n            masterPath={GROUP}\r\n            ButtonMsgLable={\"Group\"}\r\n            deleteName={\"Name\"}\r\n          \r\n          />\r\n          : null\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default GroupList;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\TermsAndCondtions\\TermsAndCondtionsList.js",["1563"],"import React, { useEffect } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport TermsAndCondtionsMaster from \"./TermsAndCondtionsMaster\";\r\nimport CommonListPage from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport { postTermAndConditionSuccess,getTermAndCondition,EditTermsAndCondtions,DeleteTermsAndCondtions,DeleteTermsAndCondtions_Success ,UpdateTermsAndCondtions_Success} from \"../../../store/Administrator/TermsAndCondtionsRedux/actions\";\r\n\r\nconst TermsAndCondtionsList = (props) => {\r\n  \r\n\r\n  const dispatch = useDispatch();\r\n  //useSelector is used to access the redux store in function component\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      tableList: state.TermsAndCondtionsReducer.TermsAndCondtionsList,\r\n      postMsg: state.TermsAndCondtionsReducer.PostData,\r\n      editData: state.TermsAndCondtionsReducer.TermsAndCondtionseditData,\r\n      updateMsg: state.TermsAndCondtionsReducer.TermsAndCondtionsupdateMessage,\r\n      deleteMsg: state.TermsAndCondtionsReducer.TermsAndCondtionsdeleteMessage,\r\n      \r\n      \r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n\r\n  const action = {\r\n    getList: getTermAndCondition,\r\n    editId: EditTermsAndCondtions,\r\n    deleteId: DeleteTermsAndCondtions,\r\n    postSucc: postTermAndConditionSuccess,\r\n    updateSucc: UpdateTermsAndCondtions_Success,\r\n    deleteSucc: DeleteTermsAndCondtions_Success\r\n\r\n  }\r\n  \r\n  //useEffect : used for fetching data\r\n  useEffect(() => {\r\n    \r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(101))\r\n    dispatch(getTermAndCondition())\r\n\r\n  }, []);\r\n\r\n  const { pageField } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        (pageField) ?\r\n          <CommonListPage\r\n            action={action}\r\n            reducers={reducers}\r\n            MasterModal={TermsAndCondtionsMaster}\r\n            masterPath={\"/TermsAndCondtionsMaster\"}\r\n\r\n          />\r\n          : null\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default TermsAndCondtionsList;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\GroupTypePage\\GroupTypeList.js",["1564"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CommonListPage from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport { GROUPTYPE } from \"../../../routes/route_url\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport {\r\n  deleteGroupType_ID,\r\n  deleteGroupType_IDSuccess,\r\n  editGroupTypeId,\r\n  getGroupTypeslist,\r\n  PostGroupTypeSubmitSuccess,\r\n  updateGroupTypeIDSuccess\r\n} from \"../../../store/Administrator/GroupTypeRedux/action\";\r\nimport GroupTypeMaster from \"./GroupTypeMaster\";\r\n\r\nconst GroupTypeList = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      tableList: state.GroupTypeReducer.GroupType,\r\n      editData: state.GroupTypeReducer.editData,\r\n      updateMsg: state.GroupTypeReducer.updateMessage,\r\n      deleteMsg: state.GroupTypeReducer.deleteMessage,\r\n      postMsg: state.GroupTypeReducer.PostData,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n\r\n  const action = {\r\n    getList: getGroupTypeslist,\r\n    editId: editGroupTypeId,\r\n    deleteId: deleteGroupType_ID,\r\n    postSucc: PostGroupTypeSubmitSuccess,\r\n    updateSucc: updateGroupTypeIDSuccess,\r\n    deleteSucc: deleteGroupType_IDSuccess\r\n\r\n  }\r\n  useEffect(() => {\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(107))\r\n    dispatch(getGroupTypeslist())\r\n\r\n  }, []);\r\n\r\n  const { pageField } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        (pageField) ?\r\n          <CommonListPage\r\n            action={action}\r\n            reducers={reducers}\r\n            MasterModal={GroupTypeMaster}\r\n            masterPath={GROUPTYPE}\r\n            ButtonMsgLable={\"GroupType\"}\r\n            deleteName={\"Name\"}\r\n\r\n          />\r\n          : null\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default GroupTypeList;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\GroupTypePage\\GroupTypeMaster.js",["1565","1566","1567","1568","1569","1570"],"import React, { useEffect, useRef, useState, } from \"react\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { Breadcrumb_inputName, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AlertState, commonPageField } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeText,\r\n} from \"../../../components/Common/CmponentRelatedCommonFile/validationFunction\";\r\nimport {\r\n    editGroupTypeIdSuccess,\r\n    getGroupTypeslistSuccess,\r\n    PostGroupTypeSubmit,\r\n    PostGroupTypeSubmitSuccess,\r\n    updateGroupTypeID,\r\n    updateGroupTypeIDSuccess\r\n} from \"../../../store/Administrator/GroupTypeRedux/action\";\r\nimport { GROUPTYPE_lIST } from \"../../../routes/route_url\";\r\nimport SaveButton from \"../../../components/Common/CommonSaveButton\";\r\n\r\nconst GroupTypeMaster = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    const formRef = useRef(null);\r\n    const [EditData, setEditData] = useState({});\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(\"save\");\r\n    const [userPageAccessState, setUserPageAccessState] = useState('');\r\n\r\n    const initialFiled = {\r\n        id: \"\",\r\n        Name: \"\",\r\n        IsReserved: \"\"\r\n    }\r\n\r\n    const [state, setState] = useState(initialFiledFunc(initialFiled))\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        updateMsg,\r\n        pageField,\r\n        userAccess\r\n    } = useSelector((state) => ({\r\n        postMsg: state.GroupTypeReducer.PostData,\r\n        updateMsg: state.GroupTypeReducer.updateMessage,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField\r\n    }));\r\n\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(105))\r\n    }, []);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(\"editValue\")\r\n    const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserPageAccessState(userAcc)\r\n        };\r\n    }, [userAccess])\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n                setEditData(hasEditVal);\r\n                const { id, Name, IsReserved } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n                hasValid.Name.valid = true;\r\n                hasValid.IsReserved.valid = true;\r\n\r\n                values.id = id\r\n                values.Name = Name;\r\n                values.IsReserved = IsReserved;\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(editGroupTypeIdSuccess({ Status: false }))\r\n                dispatch(Breadcrumb_inputName(hasEditVal.GroupTypeMaster))\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(PostGroupTypeSubmitSuccess({ Status: false }))\r\n            formRef.current.reset();\r\n            if (pageMode === \"dropdownAdd\") {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                }))\r\n            }\r\n            else {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                    RedirectPath: GROUPTYPE_lIST,\r\n                }))\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(getGroupTypeslistSuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(postMessage.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            history.push({\r\n                pathname: GROUPTYPE_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateGroupTypeIDSuccess({ Status: false }));\r\n            dispatch(\r\n                AlertState({\r\n                    Type: 3,\r\n                    Status: true,\r\n                    Message: JSON.stringify(updateMsg.Message),\r\n                })\r\n            );\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })// new change\r\n        }\r\n    }, [pageField])\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const formSubmitHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n        if (formValid(state, setState)) {\r\n            debugger\r\n            const jsonBody = JSON.stringify({\r\n                Name: values.Name,\r\n                IsReserved: values.IsReserved,\r\n                CreatedBy: 1,\r\n                CreatedOn: \"0002-10-03T12:48:14.910491\",\r\n                UpdatedBy: 1,\r\n                UpdatedOn: \"0002-10-03T12:48:14.910491\"\r\n\r\n            });\r\n\r\n            if (pageMode === 'edit') {\r\n                dispatch(updateGroupTypeID(jsonBody, EditData.id));\r\n            }\r\n            else {\r\n                dispatch(PostGroupTypeSubmit(jsonBody));\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n                        <MetaTags>\r\n                            <title>GroupTypeMaster | FoodERP-React FrontEnd</title>\r\n                        </MetaTags>\r\n                        <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n\r\n                                <form onSubmit={formSubmitHandler} ref={formRef} noValidate>\r\n\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Name} </Label>\r\n                                                            <Input\r\n                                                                id=\"txtName\"\r\n                                                                name=\"Name\"\r\n                                                                type=\"text\"\r\n                                                                value={values.Name}\r\n                                                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                placeholder=\"Please Enter Name\"\r\n                                                                autoFocus={true}\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n\r\n                                                            />\r\n                                                            {isError.Name.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n\r\n                                                        <Row>\r\n                                                            <FormGroup className=\"mb-2 col col-sm-3\">\r\n                                                                <Row className=\"justify-content-md-left\">\r\n                                                                    <Label className=\"col-sm-6 col-form-label\" >{fieldLabel.IsReserved}</Label>\r\n                                                                    <Col md={2} style={{ marginTop: '9px' }} >\r\n\r\n                                                                        <div className=\"form-check form-switch form-switch-md mb-3\" >\r\n                                                                            <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                                checked={values.IsReserved}\r\n                                                                                name=\"IsReserved\"\r\n                                                                                onChange={(event) => onChangeText({ event, state, setState })}\r\n                                                                            />\r\n                                                                        </div>\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                            </FormGroup>\r\n                                                        </Row>\r\n\r\n                                                        <FormGroup>\r\n                                                            <Row>\r\n                                                                <Col sm={2}>\r\n                                                                    <SaveButton pageMode={pageMode} userAcc={userPageAccessState}\r\n                                                                        module={\"GroupTypeMaster\"}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </FormGroup >\r\n\r\n                                                    </Row>\r\n\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default GroupTypeMaster\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PartySubPartyPages\\partysubPartyList.js",["1571","1572","1573","1574","1575","1576"],"import React, { useEffect } from \"react\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport CommonListPage from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport {\r\n  deletePartySubParty,\r\n  deletePartySubPartySuccess,\r\n  editPartySubParty,\r\n  getPartySubPartylist,\r\n  postPartySubPartySuccess,\r\n  updatePartySubPartySuccess\r\n} from \"../../../store/Administrator/PartySubPartyRedux/action\";\r\nimport { PARTY_SUB_PARTY } from \"../../../helpers/url_helper\";\r\nimport PartySubParty from \"./PartySubParty\";\r\n\r\nconst PartySubPartyList = () => {\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      tableList: state.PartySubPartyReducer.listData,\r\n      postMsg: state.PartySubPartyReducer.postMsg,\r\n      editData: state.PartySubPartyReducer.editData,\r\n      updateMsg: state.PartySubPartyReducer.updateMsg,\r\n      deleteMsg: state.PartySubPartyReducer.deleteMsg,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\ndebugger\r\n  const action = {\r\n    getList: getPartySubPartylist,\r\n    editId: editPartySubParty,\r\n    deleteId: deletePartySubParty,\r\n    postSucc: postPartySubPartySuccess,\r\n    updateSucc: updatePartySubPartySuccess,\r\n    deleteSucc: deletePartySubPartySuccess\r\n  }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(122))\r\n    dispatch(getPartySubPartylist());\r\n  }, []);\r\n\r\n  const { pageField } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* {\r\n        (pageField) ?\r\n          <CommonListPage\r\n            action={action}\r\n            reducers={reducers}\r\n            MasterModal={PartySubParty}\r\n            masterPath={PARTY_SUB_PARTY}\r\n            ButtonMsgLable={\"PartySubParty\"}\r\n            deleteName={\"PartySubParty\"}\r\n          />\r\n          : null\r\n      } */}\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default PartySubPartyList;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PartySubPartyPages\\PartySubParty.js",["1577","1578","1579","1580","1581","1582","1583","1584","1585","1586","1587","1588"],"import React, { useEffect, useRef, useState, } from \"react\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Label,\r\n    Row,\r\n    Table,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    postPartySubParty,\r\n    postPartySubPartySuccess\r\n} from \"../../../store/Administrator/PartySubPartyRedux/action\";\r\nimport { AlertState } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    get_Division_ForDropDown,\r\n    get_Party_ForDropDown\r\n} from \"../../../store/Administrator/ItemsRedux/action\";\r\nimport { Tbody, Thead } from \"react-super-responsive-table\";\r\nimport SaveButton from \"../../../components/Common/CommonSaveButton\";\r\n\r\nconst PartySubParty = (props) => {\r\n\r\n    const [EditData, setEditData] = useState([]);\r\n    const [pageMode, setPageMode] = useState(\"save\");\r\n    const [PartyData, setPartyData] = useState([]);\r\n    const [Division_dropdown_Select, setDivision_dropdown_Select] = useState(\"\");\r\n    const dispatch = useDispatch();\r\n    const [userPageAccessState, setUserPageAccessState] = useState(123);\r\n    const [Party_dropdown_Select, setParty_dropdown_Select] = useState(\"\");\r\n    const history = useHistory()\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { postMsg,\r\n        Divisions,\r\n        Party,\r\n        userAccess } = useSelector((state) => ({\r\n            postMsg: state.PartySubPartyReducer.postMsg,\r\n            Divisions: state.ItemMastersReducer.Division,\r\n            Party: state.ItemMastersReducer.Party,\r\n            // pageField: state.CommonPageFieldReducer.pageField,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n        }));\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(commonPageField(121))\r\n    // }, []);\r\n\r\n\r\n    {/*start */ }\r\n    const [state, setState] = useState({\r\n        values: {\r\n            Division: \"\",\r\n            Party: \"\"\r\n        },\r\n        fieldLabel: {\r\n            Division: \"\",\r\n            Party: \"\"\r\n        },\r\n\r\n        isError: {\r\n            Division: \"\",\r\n            Party: \"\"\r\n        },\r\n        hasValid: {\r\n            Division: {\r\n                regExp: '',\r\n                inValidMsg: \"\",\r\n                valid: false\r\n            },\r\n\r\n            Party: {\r\n                regExp: '',\r\n                inValidMsg: \"\",\r\n                valid: false\r\n            },\r\n\r\n        },\r\n        required: {\r\n\r\n        }\r\n    })\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(\"editValue\")\r\n    const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserPageAccessState(userAcc)\r\n        };\r\n    }, [userAccess])\r\n    useEffect(() => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200) && !(pageMode === \"dropdownAdd\")) {\r\n            // setDivision_dropdown_Select('')\r\n            // setParty_dropdown_Select('')\r\n            dispatch(postPartySubPartySuccess({ Status: false }))\r\n            if (pageMode === \"dropdownAdd\") {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                }))\r\n            }\r\n            else {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                    RedirectPath: false,\r\n                }))\r\n            }\r\n        }\r\n        else if ((postMsg.Status === true) && !(pageMode === \"dropdownAdd\")) {\r\n            dispatch(postPartySubPartySuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(postMessage.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [postMsg])\r\n\r\n\r\n\r\n    //get method for dropdown\r\n    useEffect(() => {\r\n        dispatch(get_Division_ForDropDown());\r\n        dispatch(get_Party_ForDropDown());\r\n    }, [dispatch]);\r\n\r\n\r\n    function handllerDivision(e) {\r\n        setDivision_dropdown_Select(e)\r\n    }\r\n\r\n    const DivisionValues = Divisions.map((Data) => ({\r\n        value: Data.id,\r\n        label: Data.Name\r\n    }));\r\n\r\n    function handllerParty(e) {\r\n        setParty_dropdown_Select(e)\r\n    }\r\n\r\n    const PartyValues = Party.map((Data) => ({\r\n        value: Data.id,\r\n        label: Data.Name\r\n    }));\r\n\r\n    const formSubmitHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n        // if (formValid(state, setState)) {\r\n        //     const arr = PartyData.map(i => ({\r\n        //         Party: Division_dropdown_Select.value,\r\n        //         SubParty: i.value,\r\n        //         CreatedBy: 1,\r\n        //         UpdatedBy: 1,\r\n\r\n        //     }))\r\n        //     const jsonBody = JSON.stringify(arr);\r\n        //     console.log(\" jsonBody\", jsonBody)\r\n        //     if (pageMode === \"edit\") {\r\n        //         // dispatch(updateCategoryID(jsonBody, EditData.id));\r\n        //     }\r\n        //     else {\r\n        //         dispatch(PostMethodForPartySubParty(jsonBody));\r\n        //     }\r\n        // }\r\n\r\n        const arr = PartyData.map(i => ({\r\n            Party: Division_dropdown_Select.value,\r\n            SubParty: i.value,\r\n            CreatedBy: 1,\r\n            UpdatedBy: 1,\r\n\r\n        }))\r\n        const jsonBody = JSON.stringify(arr);\r\n        console.log(\" jsonBody\", jsonBody)\r\n        dispatch(postPartySubParty(jsonBody));\r\n    };\r\n\r\n\r\n    /// Role Table Validation\r\n    function AddPartyHandler() {\r\n        debugger\r\n        const find = PartyData.find((element) => {\r\n            return element.value === Party_dropdown_Select.value\r\n        });\r\n\r\n        if (Party_dropdown_Select.length <= 0) {\r\n            dispatch(AlertState({\r\n                Type: 3, Status: true,\r\n                Message: \"Select One Role\",\r\n            }));\r\n        }\r\n        else if (find === undefined) {\r\n            setPartyData([...PartyData, Party_dropdown_Select]);\r\n        }\r\n        else {\r\n            dispatch(AlertState({\r\n                Type: 4, Status: true,\r\n                Message: \"Party already Exists \",\r\n            }));\r\n        }\r\n    }\r\n\r\n\r\n    // For Delete Button in table\r\n    function UserRoles_DeleteButton_Handller(tableValue) {\r\n        setPartyData(PartyData.filter(\r\n            (item) => !(item.value === tableValue)\r\n        )\r\n        )\r\n    }\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((pageMode === \"edit\") || (pageMode === \"copy\") || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n                        <MetaTags>\r\n                            <title>PartySubPartyMaster | FoodERP-React FrontEnd</title>\r\n                        </MetaTags>\r\n                        <Breadcrumb breadcrumbItem={\"PartySubPartyMaster\"} />\r\n\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form onSubmit={formSubmitHandler} noValidate>\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2  \">\r\n                                                            <Row>\r\n                                                                <Col md=\"4\">\r\n                                                                    <FormGroup className=\"mb-3\">\r\n                                                                        <Label htmlFor=\"validationCustom01\"> Division </Label>\r\n                                                                        <Col sm={12}>\r\n                                                                            <Select\r\n                                                                                value={Division_dropdown_Select}\r\n                                                                                options={DivisionValues}\r\n                                                                                onChange={(e) => { handllerDivision(e) }}\r\n                                                                            />\r\n                                                                        </Col>\r\n                                                                    </FormGroup>\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </FormGroup>\r\n\r\n                                                        <Row>\r\n                                                            <Col md=\"4\">\r\n                                                                <FormGroup className=\"mb-3\">\r\n                                                                    <Label htmlFor=\"validationCustom01\"> Party</Label>\r\n                                                                    <Select\r\n                                                                        value={Party_dropdown_Select}\r\n                                                                        options={PartyValues}\r\n                                                                        onChange={(e) => { handllerParty(e) }}\r\n\r\n                                                                    />\r\n\r\n                                                                </FormGroup>\r\n\r\n                                                            </Col>\r\n                                                            <Col sm={2} style={{ marginTop: '28px' }} >\r\n                                                                <Button\r\n                                                                    type=\"button\"\r\n                                                                    className=\"btn btn-sm mt-1 mb-0 btn-light  btn-outline-primary text-center\"\r\n                                                                    onClick={() =>\r\n                                                                        AddPartyHandler()\r\n                                                                    }\r\n                                                                >\r\n                                                                    <i className=\"dripicons-plus \"></i>\r\n                                                                </Button>\r\n                                                            </Col>\r\n\r\n                                                        </Row>\r\n                                                        <Row>\r\n                                                            <Col sm={3} style={{ marginTop: '28px' }}>\r\n                                                                {PartyData.length > 0 ? (\r\n\r\n                                                                    <div className=\"table\">\r\n                                                                        <Table className=\"table table-bordered  text-center\">\r\n                                                                            <Thead>\r\n                                                                                <tr>\r\n                                                                                    <th>Party</th>\r\n\r\n                                                                                    <th>Action</th>\r\n                                                                                </tr>\r\n                                                                            </Thead>\r\n                                                                            <Tbody>\r\n                                                                                {PartyData.map((TableValue) => (\r\n                                                                                    <tr>\r\n                                                                                        <td>\r\n                                                                                            {TableValue.label}\r\n                                                                                        </td>\r\n                                                                                        <td>\r\n                                                                                            <i className=\"mdi mdi-trash-can d-block text-danger font-size-20\" onClick={() => {\r\n                                                                                                UserRoles_DeleteButton_Handller(TableValue.value)\r\n                                                                                            }} >\r\n                                                                                            </i>\r\n                                                                                        </td>\r\n                                                                                    </tr>\r\n                                                                                ))}\r\n                                                                            </Tbody>\r\n                                                                        </Table>\r\n                                                                    </div>\r\n                                                                ) : (\r\n                                                                    <>\r\n                                                                    </>\r\n                                                                )}\r\n                                                            </Col>\r\n\r\n                                                        </Row>\r\n\r\n                                                        <FormGroup>\r\n                                                            <Row>\r\n                                                                <Col sm={2}>\r\n                                                                    <SaveButton pageMode={pageMode} userAcc={userPageAccessState}\r\n                                                                        module={\"PartySubParty\"}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </FormGroup >\r\n                                                    </Row>\r\n\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n\r\n                        </Card>\r\n\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default PartySubParty\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PartyItemPage\\PartyItems.js",["1589","1590","1591","1592","1593","1594","1595","1596","1597","1598","1599","1600","1601","1602","1603","1604","1605","1606","1607","1608","1609","1610","1611","1612","1613","1614","1615"],"import React, { useEffect, useRef, useState, } from \"react\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n    Table,\r\n} from \"reactstrap\";\r\nimport { AvField, AvForm, } from \"availity-reactstrap-validation\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\n\r\nimport { Breadcrumb_inputName, commonPageField, commonPageFieldSuccess, getItemList, getItemListSuccess, } from \"../../../store/actions\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AlertState } from \"../../../store/actions\";\r\nimport { CommonGetRoleAccessFunction } from \"../../../components/Common/CommonGetRoleAccessFunction\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    onChangeText,\r\n\r\n} from \"../../../components/Common/CmponentRelatedCommonFile/validationFunction\";\r\nimport { getpartyItemList, getPartyItemListSuccess, getSupplier, PostPartyItems, PostPartyItemsSuccess } from \"../../../store/Administrator/PartyItemsRedux/action\";\r\nimport paginationFactory, { PaginationListStandalone, PaginationProvider } from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { mySearchProps } from \"../../../components/Common/CmponentRelatedCommonFile/SearchBox/MySearch\";\r\nimport SaveButton from \"../../../components/Common/CommonSaveButton\";\r\nimport { Td, Th, Tr } from \"react-super-responsive-table\";\r\n\r\n\r\n\r\nconst PartyItems = (props) => {\r\n\r\n    const formRef = useRef(null);\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n    let editMode = history.location.pageMode;\r\n    const [pageMode, setPageMode] = useState(\"\");\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [isChecked, Setcheckbox] = useState([false])\r\n\r\n    const [supplierSelect, setSupplierSelect] = useState('');\r\n    const [userAccState, setUserPageAccessState] = useState(\"\");\r\n    // get method for dropdown\r\n    useEffect(() => {\r\n        dispatch(getSupplier());\r\n    }, [dispatch]);\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        supplier,\r\n        partyItem,\r\n\r\n        pageField,\r\n        userAccess } = useSelector((state) => ({\r\n\r\n            postMsg: state.PartyItemsReducer.postMsg,\r\n            partyItem: state.PartyItemsReducer.partyItem,\r\n            supplier: state.PartyItemsReducer.supplier,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        }));\r\n\r\n    useEffect(() => {\r\n\r\n        const locationPath = history.location.pathname\r\n        let userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (!(userAcc === undefined)) {\r\n            setUserPageAccessState(userAcc)\r\n        }\r\n    }, [userAccess])\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n\r\n\r\n    useEffect(() => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(PostPartyItemsSuccess({ Status: false }))\r\n            dispatch(getPartyItemListSuccess([]))\r\n            dispatch(AlertState({\r\n                Type: 1,\r\n                Status: true,\r\n                Message: postMsg.Message,\r\n                RedirectPath: false,\r\n            }))\r\n\r\n        } else if\r\n            (postMsg.Status === true) {\r\n            dispatch(PostPartyItemsSuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 1,\r\n                Status: true,\r\n                Message: postMsg.Message,\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [postMsg])\r\n\r\n\r\n    const supplierOptions = supplier.map((i) => ({\r\n        value: i.id,\r\n        label: i.Supplier,\r\n    }));\r\n\r\n\r\n\r\n\r\n    const GoButton_Handler = () => {\r\n        let supplier = supplierSelect.value\r\n\r\n        if (!supplier > 0) {\r\n            alert(\"Please Select Supplier\")\r\n            return\r\n        }\r\n\r\n        if (partyItem.length > 0) {\r\n            if (window.confirm(\"Refresh  Item...!\")) {\r\n                dispatch(getPartyItemListSuccess([]))\r\n            } else {\r\n                return\r\n            }\r\n        }\r\n        dispatch(getpartyItemList(supplier))\r\n        // dispatch(getItemList(ItemList))\r\n    };\r\n\r\n\r\n    const saveHandeller = (event, values) => {\r\n        const Find = partyItem.filter((index) => {\r\n            return (index.itemCheck === true)\r\n        })\r\n\r\n        var PartyData = Find.map((index) => ({\r\n            Item: index.id,\r\n            Party: supplierSelect.value\r\n\r\n        }))\r\n        const jsonBody = JSON.stringify(Find, PartyData)\r\n        dispatch(PostPartyItems(PartyData));\r\n        console.log(\"post Data\", jsonBody)\r\n\r\n    };\r\n\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userAccState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n                        <MetaTags>\r\n                            <title>{userAccState.PageHeading} | FoodERP-React FrontEnd</title>\r\n                        </MetaTags>\r\n                        <Breadcrumb breadcrumbItem={userAccState.PageHeading} />\r\n\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                                <h4 className=\"card-title text-black\">{userAccState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userAccState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n\r\n                                <Row className=\"\">\r\n                                    <Col md={12}>\r\n                                        <Card>\r\n                                            <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                                                <Row>\r\n                                                    <Row>\r\n                                                        <Col md=\"3\">\r\n                                                            <FormGroup className=\"mb-3\">\r\n                                                                <Label htmlFor=\"validationCustom01\"> SupplierName </Label>\r\n                                                                <Col md=\"12\">\r\n                                                                    <Select\r\n                                                                        value={supplierSelect}\r\n                                                                        classNamePrefix=\"select2-Supplier\"\r\n                                                                        isDisabled={editMode === \"edit\" ? true : false}\r\n                                                                        options={supplierOptions}\r\n                                                                        onChange={(e) => { setSupplierSelect(e) }}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n                                                        <Col md=\"3\" className=\"mt-4\">\r\n                                                            <Button type=\"button\" color=\"btn btn-outline-success border-2 font-size-12 \"\r\n                                                                onClick={GoButton_Handler}\r\n                                                            >Go</Button>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Row>\r\n\r\n                                            </CardBody>\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Table className=\"table table-bordered text-black \"  >\r\n\r\n                                    <Tr >\r\n                                        <Th className=\"col-sm-1 text-center\" style={{ height: \"1cm\" }}>Id</Th>\r\n                                        <Th className=\"col-sm-5 text-center\">ItemName</Th>\r\n                                        <Th className=\"col-sm-1 text-center\">Select All</Th>\r\n                                    </Tr>\r\n\r\n                                    {partyItem.map((i, k) => {\r\n                                        return (\r\n                                            <Tr style={{ height: \"20px\" }}>\r\n                                                <Td className=\"col-sm-1 text-center\" id=\"td\">{i.id}</Td>\r\n                                                <Td className=\"col-sm-5 text-center\">{i.Name}</Td>\r\n                                                <Td className=\"col-sm-1 text-center\">\r\n                                                    <Input\r\n                                                        className=\"form-check-input\"\r\n                                                        type=\"checkbox\"\r\n                                                        id=\"myCheck\"\r\n                                                        // checked={isChecked}\r\n                                                        defaultChecked={i.itemCheck}\r\n                                                        onChange={e => {\r\n                                                            i.itemCheck = e.target.checked\r\n                                                        }}\r\n\r\n                                                    />\r\n                                                </Td>\r\n                                            </Tr>)\r\n                                    })}\r\n                                </Table>\r\n                                {(supplier.length > 0) ? <div className=\"row save1\" style={{ paddingBottom: 'center' }}>\r\n                                    <SaveButton pageMode={pageMode} userAcc={userAccState}\r\n                                        module={\"supplier\"} onClick={saveHandeller}\r\n                                    />\r\n                                </div>\r\n                                    : <div className=\"row save1\"></div>}\r\n\r\n                            </CardBody>\r\n\r\n                        </Card>\r\n\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n\r\n};\r\nexport default PartyItems\r\n\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\GSTPages\\GSTList.js",["1616","1617","1618","1619","1620"],"import React, { useEffect, useState } from \"react\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb3\"\r\nimport { Button, Col, Modal, Row } from \"reactstrap\";\r\nimport paginationFactory, {\r\n    PaginationListStandalone,\r\n    PaginationProvider,\r\n} from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { AlertState } from \"../../../store/actions\";\r\nimport \"../../../assets/scss/CustomTable2/datatables.scss\"\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    deleteGSTListPage,\r\n    deleteGSTListPageSuccess,\r\n    getGSTListPage\r\n} from \"../../../store/Administrator/GSTRedux/action\";\r\nimport { mySearchProps } from \"../../../components/Common/CmponentRelatedCommonFile/SearchBox/MySearch\";\r\nimport { countlabelFunc } from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\";\r\n\r\nconst GSTList = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    const [userAccState, setUserAccState] = useState('');\r\n\r\n    // get Access redux data\r\n    const {\r\n        tableList,\r\n        deleteMsg,\r\n        userAccess, } = useSelector(\r\n            (state) => ({\r\n                tableList: state.GSTReducer.GSTList,\r\n                deleteMsg: state.GSTReducer.deleteMsgForListPage,\r\n                userAccess: state.Login.RoleAccessUpdateData,\r\n                pageField: state.CommonPageFieldReducer.pageFieldList\r\n            })\r\n        );\r\n\r\n    useEffect(() => {\r\n        const locationPath = history.location.pathname\r\n        let userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (!(userAcc === undefined)) {\r\n            setUserAccState(userAcc)\r\n        }\r\n    }, [userAccess])\r\n\r\n    //  This UseEffect => Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        dispatch(getGSTListPage());\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        if ((deleteMsg.Status === true) && (deleteMsg.StatusCode === 200)) {\r\n            dispatch(deleteGSTListPageSuccess({ Status: false }));\r\n            dispatch(\r\n                AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: deleteMsg.Message,\r\n                    AfterResponseAction: getGSTListPage,\r\n                })\r\n            );\r\n        } else if (deleteMsg.Status === true) {\r\n            dispatch(deleteGSTListPageSuccess({ Status: false }));\r\n            dispatch(\r\n                AlertState({\r\n                    Type: 3,\r\n                    Status: true,\r\n                    Message: JSON.stringify(deleteMsg.Message),\r\n                })\r\n            );\r\n        }\r\n    }, [deleteMsg]);\r\n\r\n    //select id for delete row\r\n    const deleteHandeler = (CommonID) => {\r\n        debugger\r\n        dispatch(\r\n            AlertState({\r\n                Type: 5,\r\n                Status: true,\r\n                Message: `Are you sure you want to delete this MRP List `,\r\n                RedirectPath: false,\r\n                PermissionAction: deleteGSTListPage,\r\n                ID: CommonID,\r\n            })\r\n        );\r\n    };\r\n\r\n    const EditPageHandler = (rowData) => {\r\n        let RelatedPageID = userAccState.RelatedPageID\r\n\r\n        const found = userAccess.find((element) => {\r\n            return element.id === RelatedPageID\r\n        })\r\n\r\n        if (!(found === undefined)) {\r\n            history.push({\r\n                pathname: `/${found.ActualPagePath}`,\r\n                editValue: rowData,\r\n                pageMode: 'edit'\r\n            })\r\n        }\r\n    }\r\n\r\n    const pageOptions = {\r\n        sizePerPage: 10,\r\n        // totalSize: tableList.length,\r\n        custom: true,\r\n    };\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"EffectiveDate\",\r\n            dataField: \"EffectiveDate\",\r\n            sort: true,\r\n        },\r\n        {\r\n            text: \"Action\",\r\n            hidden: (\r\n                !(userAccState.RoleAccess_IsEdit)\r\n                && !(userAccState.RoleAccess_IsView)\r\n                && !(userAccState.RoleAccess_IsDelete)) ? true : false,\r\n\r\n            formatter: (cellContent, Role) => (\r\n                <div className=\"d-flex gap-3\" style={{ display: 'flex', justifyContent: 'center' }} >\r\n                    {((userAccState.RoleAccess_IsEdit) && (Role.CommonID > 0)) ?\r\n                        <Button\r\n                            type=\"button\"\r\n                            data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Edit MRP List\"\r\n                            onClick={() => { EditPageHandler(Role); }}\r\n                            className=\"badge badge-soft-success font-size-12 btn btn-success waves-effect waves-light w-xxs border border-light\"\r\n                        >\r\n                            <i className=\"mdi mdi-pencil font-size-18\" id=\"edittooltip\"></i>\r\n                        </Button>\r\n                        :\r\n                        null}\r\n\r\n                    {(!(userAccState.RoleAccess_IsEdit) && (Role.CommonID > 0) && (userAccState.RoleAccess_IsView)) ?\r\n                        <Button\r\n                            type=\"button\"\r\n                            data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"View MRP List\"\r\n                            onClick={() => { EditPageHandler(Role); }}\r\n                            className=\"badge badge-soft-primary font-size-12 btn btn-primary waves-effect waves-light w-xxs border border-light\"\r\n\r\n                        >\r\n                            <i className=\"bx bxs-show font-size-18 \"></i>\r\n                        </Button> : null}\r\n\r\n                    {((userAccState.RoleAccess_IsDelete) && (Role.CommonID > 0))\r\n                        ?\r\n                        <Button\r\n                            className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n                            data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Delete MRP List\"\r\n                            onClick={() => { deleteHandeler(Role.CommonID) }}\r\n                        >\r\n                            <i className=\"mdi mdi-delete font-size-18\"></i>\r\n                        </Button>\r\n                        : null\r\n                    }\r\n\r\n                </div>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    if (!(userAccState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\">\r\n                    <MetaTags>\r\n                        <title>GST List| FoodERP-React FrontEnd</title>\r\n                    </MetaTags>\r\n\r\n                    <Breadcrumb\r\n                        pageHeading={userAccState.PageHeading}\r\n                        newBtnView={(userAccState.RoleAccess_IsSave) ? true : false}\r\n                        showCount={true}\r\n                        excelBtnView={true}\r\n                        excelData={tableList}\r\n                    />\r\n                    <PaginationProvider\r\n                        pagination={paginationFactory(pageOptions)}\r\n                    >\r\n                        {({ paginationProps, paginationTableProps }) => (\r\n                            <ToolkitProvider\r\n                                keyField='id'\r\n                                columns={pagesListColumns}\r\n                                data={tableList}\r\n                                search\r\n                            >\r\n                                {toolkitProps => (\r\n                                    <React.Fragment>\r\n                                        <div className=\"table-responsive\">\r\n                                            <BootstrapTable\r\n                                                keyField={\"id\"}\r\n                                                responsive\r\n                                                bordered={true}\r\n                                                striped={false}\r\n                                                classes={\"table align-middle table-nowrap table-hover\"}\r\n                                                noDataIndication={<div className=\"text-danger text-center \">Items Not available</div>}\r\n                                                headerWrapperClasses={\"thead-light\"}\r\n                                                {...toolkitProps.baseProps}\r\n                                                {...paginationTableProps}\r\n                                            />\r\n\r\n                                            {countlabelFunc(toolkitProps, paginationProps, dispatch, \"GST\")}\r\n                                            {mySearchProps(toolkitProps.searchProps)}\r\n                                        </div>\r\n\r\n\r\n                                        <Row className=\"align-items-md-center mt-30\">\r\n                                            <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n                                                <PaginationListStandalone\r\n                                                    {...paginationProps}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </React.Fragment>\r\n                                )\r\n                                }\r\n                            </ToolkitProvider>\r\n                        )\r\n                        }\r\n\r\n                    </PaginationProvider>\r\n\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GSTList;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\DriverPage\\DriverMaster.js",["1621","1622","1623","1624","1625","1626","1627","1628","1629","1630"],"import React, { useEffect, useRef, useState, } from \"react\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { Breadcrumb_inputName, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AlertState, commonPageField } from \"../../../store/actions\";\r\nimport {\r\n    PostMethodForDriverMaster,\r\n    PostMethod_ForDriverMasterSuccess,\r\n    getMethod_ForDriverListSuccess,\r\n    editDriverTypeSuccess,\r\n    updateDriverTypeID,\r\n    updateDriverTypeIDSuccess,\r\n} from \"../../../store/Administrator/DriverRedux/action\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Flatpickr from \"react-flatpickr\"\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    onChangeText,\r\n    onChangeDate,\r\n    initialFiledFunc\r\n} from \"../../../components/Common/CmponentRelatedCommonFile/validationFunction\";\r\nimport { DRIVER_lIST } from \"../../../routes/route_url\";\r\nimport SaveButton from \"../../../components/Common/CommonSaveButton\";\r\n\r\nconst DriverMaster = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    const formRef = useRef(null);\r\n    const [pageMode, setPageMode] = useState(\"\");\r\n    const [userPageAccessState, setUserPageAccessState] = useState(\"\");\r\n    const [modalCss, setModalCss] = useState(false);// new change\r\n\r\n    const initialFiled = {\r\n        id: \"\",\r\n        Name: \"\",\r\n        Address: \"\",\r\n        UID: \"\",\r\n        DOB: ''\r\n    }\r\n\r\n    const [state, setState] = useState(initialFiledFunc(initialFiled))\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        updateMsg,\r\n        pageField,\r\n        userAccess,\r\n    } = useSelector((state) => ({\r\n        postMsg: state.DriverReducer.PostDataMessage,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        updateMsg: state.DriverReducer.updateMessage,\r\n        pageField: state.CommonPageFieldReducer.pageField\r\n    }));\r\n\r\n    // new change\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(\"editValue\")\r\n    const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldSuccess(null));// new change\r\n        dispatch(commonPageField(91))\r\n    }, []);\r\n\r\n    // new change\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserPageAccessState(userAcc)\r\n        };\r\n    }, [userAccess])\r\n\r\n    // new change\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n                const { id, Name, DOB, UID, Address } = hasEditVal// new change\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n                hasValid.Name.valid = true;\r\n                hasValid.DOB.valid = true;\r\n                hasValid.UID.valid = true;\r\n                hasValid.Address.valid = true;\r\n\r\n                values.Name = Name;\r\n                values.DOB = DOB;\r\n                values.UID = UID;\r\n                values.Address = Address;\r\n                values.id = id\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.DriverMaster))\r\n            }\r\n            dispatch(editDriverTypeSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(PostMethod_ForDriverMasterSuccess({ Status: false }))\r\n            formRef.current.reset();\r\n            if (pageMode === \"dropdownAdd\") {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                }))\r\n            }\r\n            else {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                    RedirectPath: DRIVER_lIST,\r\n                }))\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(getMethod_ForDriverListSuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(postMessage.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            history.push({\r\n                pathname: DRIVER_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateDriverTypeIDSuccess({ Status: false }));\r\n            dispatch(\r\n                AlertState({\r\n                    Type: 3,\r\n                    Status: true,\r\n                    Message: JSON.stringify(updateMsg.Message),\r\n                })\r\n            );\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    // new change\r\n    // ////////////////////////////////////////////////////////////\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })// new change\r\n        }\r\n    }, [pageField])\r\n\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n\r\n\r\n    const formSubmitHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n        if (formValid(state, setState)) {\r\n\r\n            const jsonBody = JSON.stringify({\r\n                Name: values.Name,\r\n                Address: values.Address,\r\n                DOB: values.DOB,\r\n                UID: values.UID\r\n            });\r\n\r\n            if (pageMode === 'edit') {\r\n                dispatch(updateDriverTypeID(jsonBody, values.id));// new change\r\n            }\r\n\r\n            else {\r\n                dispatch(PostMethodForDriverMaster(jsonBody));\r\n            }\r\n        }\r\n\r\n\r\n    };\r\n\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };// new change\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n                        <MetaTags>\r\n                            <title>DriverMaster | FoodERP-React FrontEnd</title>\r\n                        </MetaTags>\r\n                        <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n\r\n                                <form onSubmit={formSubmitHandler} ref={formRef} noValidate>\r\n\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Name} </Label>\r\n                                                            <Input\r\n                                                                id=\"txtName\"\r\n                                                                name=\"Name\"\r\n                                                                type=\"text\"\r\n                                                                value={values.Name}\r\n                                                                autoFocus={true}\r\n                                                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                placeholder=\"Please Enter Name\"\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n\r\n                                                            />\r\n                                                            {isError.Name.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n                                                        <Row>\r\n                                                            <Col md=\"4\">\r\n                                                                <FormGroup className=\"mb-3\">\r\n                                                                    <Label>Date of Birth</Label>\r\n                                                                    <Flatpickr\r\n                                                                        name=\"DOB\"\r\n                                                                        value={values.DOB}\r\n                                                                        className=\"form-control d-block p-2 bg-white text-dark\"\r\n                                                                        placeholder=\"YYYY-MM-DD\"\r\n                                                                        autoComplete=\"0,''\"\r\n                                                                        options={{\r\n                                                                            altInput: true,\r\n                                                                            altFormat: \"F j, Y\",\r\n                                                                            dateFormat: \"Y-m-d\",\r\n                                                                            minDate: new Date().fp_incr(\"n\"),\r\n                                                                            maxDate: new Date().fp_incr(0) // 14 days from now\"0,''\"\r\n                                                                        }}\r\n                                                                        onChange={(y, v, e) => { onChangeDate({ e, v, state, setState }) }}\r\n                                                                    />\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                        {/* <Row>\r\n                                                            <Col md=\"4\">\r\n                                                                <FormGroup className=\"mb-3\">\r\n                                                                    <Label htmlFor=\"validationCustom01\">{fieldLabel.Address} </Label>\r\n                                                                    <Select\r\n                                                                        defaultValue={options[0]}\r\n                                                                        isSearchable={false}\r\n                                                                        className=\"react-dropdown\"\r\n                                                                        onChange={(v, e) => onChangeSelect({ e, v, state, setState })}\r\n                                                                        classNamePrefix=\"dropdown\"\r\n                                                                        options={options}\r\n                                                                        name=\"Address\"\r\n                                                                        styles={{\r\n                                                                            control: base => ({\r\n                                                                                ...base,\r\n                                                                                border: isError.Address.length > 0 ? '1px solid red' : '',\r\n\r\n                                                                            })\r\n                                                                        }}\r\n                                                                    />\r\n                                                                     {isError.Name.length > 0 && (\r\n                                                                <span className=\"tex\">{isError.Name}</span>\r\n                                                            )}\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                        </Row> */}\r\n\r\n\r\n\r\n\r\n                                                        <Row>\r\n                                                            <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                                <Label htmlFor=\"validationCustom01\">{fieldLabel.Address} </Label>\r\n                                                                <Input\r\n                                                                    name=\"Address\"\r\n                                                                    value={values.Address}\r\n                                                                    type=\"text\"\r\n                                                                    className={isError.Address.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                    placeholder=\"Please Enter Address\"\r\n                                                                    autoComplete='off'\r\n                                                                    onChange={(event) => onChangeText({ event, state, setState })}\r\n                                                                />\r\n                                                                {isError.Address.length > 0 && (\r\n                                                                    <span className=\"invalid-feedback\">{isError.Address}</span>\r\n                                                                )}\r\n                                                            </FormGroup>\r\n                                                        </Row>\r\n\r\n                                                        <Row>\r\n                                                            <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                                <Label htmlFor=\"validationCustom01\">{fieldLabel.UID}</Label>\r\n                                                                <Input\r\n                                                                    name=\"UID\"\r\n                                                                    value={values.UID}\r\n                                                                    type=\"text\"\r\n                                                                    placeholder=\"Please Enter UID\"\r\n                                                                    autoComplete='off'\r\n                                                                    className={isError.UID.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                    onChange={(event) => onChangeText({ event, state, setState })}\r\n                                                                />\r\n                                                                {isError.UID.length > 0 && (\r\n                                                                    <span className=\"invalid-feedback\">{isError.UID}</span>\r\n                                                                )}\r\n                                                            </FormGroup>\r\n\r\n                                                        </Row>\r\n                                                        <FormGroup className=\"mt-2\">\r\n                                                            <Row>\r\n                                                                <Col sm={2}>\r\n                                                                    <SaveButton pageMode={pageMode} userAcc={userPageAccessState}\r\n                                                                        module={\"DriverMaster\"}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </FormGroup >\r\n                                                    </Row>\r\n\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default DriverMaster\r\n\r\n\r\n\r\n\r\nconst Email = RegExp(\r\n    /^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/\r\n)\r\n\r\nconst Mobile = RegExp(\r\n    /^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/\r\n)\r\nconst NotNull = RegExp(\r\n    /^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/\r\n)","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\GSTPages\\GSTMaster.js",["1631","1632","1633","1634","1635","1636","1637","1638","1639","1640","1641","1642","1643"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Flatpickr from \"react-flatpickr\"\r\nimport { AlertState } from \"../../../store/actions\";\r\nimport paginationFactory, {\r\n    PaginationListStandalone,\r\n    PaginationProvider,\r\n} from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { AvField, AvForm } from \"availity-reactstrap-validation\";\r\nimport { deleteGSTForMasterPage, deleteGSTForMasterPageSuccess, getGSTListPage, postGoButtonForGST_Master, postGoButtonForGST_Master_Success, postGSTMasterData, postGSTMasterDataSuccess } from \"../../../store/Administrator/GSTRedux/action\";\r\n\r\nconst GSTMaster = (props) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const formRef = useRef(null);\r\n    //*** \"isEditdata get all data from ModuleID for Binding  Form controls\r\n    let editMode = history.location.pageMode;\r\n\r\n    //SetState  Edit data Geting From Modules List component\r\n    const [pageMode, setPageMode] = useState(\"save\");\r\n    const [userPageAccessState, setUserPageAccessState] = useState(\"\");\r\n    const [effectiveDate, setEffectiveDate] = useState('');\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        deleteMessage,\r\n        TableData,\r\n        userAccess,\r\n    } = useSelector((state) => ({\r\n        postMsg: state.GSTReducer.postMsg,\r\n        deleteMessage: state.GSTReducer.deleteMsg,\r\n        TableData: state.GSTReducer.GSTGoButton,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n    }));\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(\"editValue\")\r\n    const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserPageAccessState(userAcc)\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n\r\n        const editDataGatingFromList = history.location.editValue\r\n\r\n        const locationPath = history.location.pathname\r\n        let userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (!(editDataGatingFromList === undefined)) {\r\n            document.getElementById(\"EffectiveDateid\").disabled = true;\r\n\r\n            var effectiveDate = editDataGatingFromList.EffectiveDate\r\n\r\n            const jsonBody = JSON.stringify({\r\n                EffectiveDate: effectiveDate,\r\n            });\r\n            dispatch(postGoButtonForGST_Master(jsonBody));\r\n            setEffectiveDate(effectiveDate)\r\n        }\r\n        if (!(userAcc === undefined)) {\r\n            setUserPageAccessState(userAcc)\r\n        }\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        dispatch(postGoButtonForGST_Master_Success([]));\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200) && !(pageMode === \"dropdownAdd\")) {\r\n            dispatch(postGSTMasterDataSuccess({ Status: false }))\r\n            formRef.current.reset();\r\n            setEffectiveDate('')\r\n            if (pageMode === \"dropdownAdd\") {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                }))\r\n            }\r\n            else {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                    RedirectPath: \"/GSTList\",\r\n                }))\r\n            }\r\n        }\r\n\r\n        else if (postMsg.Status === true) {\r\n            dispatch(postGSTMasterDataSuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(postMsg.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (deleteMessage.Status === true && deleteMessage.StatusCode === 200) {\r\n            dispatch(deleteGSTForMasterPageSuccess({ Status: false }));\r\n            dispatch(postGoButtonForGST_Master_Success([]))\r\n            GoButton_Handler()\r\n            dispatch(\r\n                AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: deleteMessage.Message,\r\n                    AfterResponseAction: getGSTListPage,\r\n                })\r\n            );\r\n        } else if (deleteMessage.Status === true) {\r\n            dispatch(deleteGSTForMasterPageSuccess({ Status: false }));\r\n            dispatch(\r\n                AlertState({\r\n                    Type: 3,\r\n                    Status: true,\r\n                    Message: JSON.stringify(deleteMessage.Message),\r\n                })\r\n            );\r\n        }\r\n    }, [deleteMessage]);\r\n\r\n    const EffectiveDateHandler = (e, date) => {\r\n        setEffectiveDate(date)\r\n    }\r\n\r\n    const GSTPercentageHandler = (e, cellContent, user, abd) => {\r\n        user[\"GSTPercentage\"] = e.target.value\r\n    }\r\n\r\n    const CurrentGSTPercentageHandler = (e, cellContent, user, key) => {\r\n        user[\"CurrentGSTPercentage\"] = e.target.value\r\n    }\r\n\r\n    const CurrentHSNCodeHandler = (e, cellContent, user, abd) => {\r\n        user[\"GSTPercentage\"] = e.target.value\r\n    }\r\n\r\n    const HSNCodeHandler = (e, cellContent, user, key) => {\r\n        user[\"HSNCode\"] = e.target.value\r\n    }\r\n    //select id for delete row\r\n    const deleteHandeler = (id, name) => {\r\n        dispatch(\r\n            AlertState({\r\n                Type: 5,\r\n                Status: true,\r\n                Message: `Are you sure you want to delete this Item : \"${name}\"`,\r\n                RedirectPath: false,\r\n                PermissionAction: deleteGSTForMasterPage,\r\n                ID: id,\r\n            })\r\n        );\r\n    };\r\n\r\n    const GoButton_Handler = (event, values) => {\r\n\r\n        const jsonBody = JSON.stringify({\r\n            EffectiveDate: effectiveDate,\r\n\r\n        });\r\n        if (!(effectiveDate)) {\r\n            alert(\"EffectiveDate not select\")\r\n        }\r\n        dispatch(postGoButtonForGST_Master(jsonBody))\r\n        console.log(\"Go button Post Json\", jsonBody)\r\n    };\r\n\r\n    const pageOptions = {\r\n        sizePerPage: 10,\r\n        totalSize: TableData.length,\r\n        custom: true,\r\n    };\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Item Name\",\r\n            dataField: \"Name\",\r\n            sort: true,\r\n        },\r\n        {\r\n            text: \"Current GSTPercentage\",\r\n            dataField: \"CurrentGSTPercentage\",\r\n            sort: true,\r\n            formatter: (cellContent, user, key) => (\r\n                <>\r\n                    <div style={{ justifyContent: 'center' }} >\r\n\r\n                        <Col>\r\n                            <FormGroup className=\" col col-sm-4 \">\r\n                                <Input\r\n                                    id=\"\"\r\n                                    type=\"text\"\r\n                                    disabled={true}\r\n                                    defaultValue={TableData[key].CurrentGSTPercentage}\r\n                                    className=\"col col-sm text-center\"\r\n                                    onChange={(e) => CurrentGSTPercentageHandler(e, cellContent, user, key)}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n                </>\r\n            ),\r\n        },\r\n        {\r\n\r\n            text: \"GSTPercentage \",\r\n            dataField: \"GSTPercentage\",\r\n            sort: true,\r\n            formatter: (cellContent, user, key) => {\r\n                if (((cellContent > 0) && (user[\"GSTPerDis\"] === undefined) || user.GSTPerDis)) {\r\n                    user[\"GSTPerDis\"] = true\r\n                } else {\r\n                    user[\"GSTPerDis\"] = false\r\n                }\r\n                return (\r\n\r\n                    <div style={{ justifyContent: 'center' }} >\r\n                        <Col>\r\n                            <FormGroup className=\" col col-sm-4 \">\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    defaultValue={TableData[key].GSTPercentage}\r\n                                    disabled={user.GSTPerDis}\r\n                                    className=\"col col-sm text-center\"\r\n                                    onChange={(e) => GSTPercentageHandler(e, cellContent, user, key)}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n\r\n                )\r\n            },\r\n        },\r\n        {\r\n            text: \"Current HSNCode\",\r\n            dataField: \"CurrentHSNCode\",\r\n            sort: true,\r\n            formatter: (cellContent, user, key) => (\r\n                <>\r\n                    <div style={{ justifyContent: 'center' }} >\r\n\r\n                        <Col>\r\n                            <FormGroup className=\" col col-sm-4 \">\r\n                                <Input\r\n                                    id=\"\"\r\n                                    type=\"text\"\r\n                                    disabled={true}\r\n                                    defaultValue={TableData[key].CurrentHSNCode}\r\n                                    className=\"col col-sm text-center\"\r\n                                    onChange={(e) => CurrentHSNCodeHandler(e, cellContent, user, key)}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n                </>\r\n            ),\r\n        },\r\n        {\r\n\r\n            text: \"HSNCode \",\r\n            dataField: \"HSNCode\",\r\n            sort: true,\r\n            formatter: (cellContent, user, key) => {\r\n                if (((cellContent > 0) && (user[\"hsncodeDis\"] === undefined) || user.hsncodeDis)) {\r\n                    user[\"hsncodeDis\"] = true\r\n                } else {\r\n                    user[\"hsncodeDis\"] = false\r\n                }\r\n                return (\r\n\r\n                    <div style={{ justifyContent: 'center' }} >\r\n                        <Col>\r\n                            <FormGroup className=\" col col-sm-4 \">\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    defaultValue={cellContent}\r\n                                    disabled={user.hsncodeDis}\r\n                                    className=\"col col-sm text-center\"\r\n                                    onChange={(e) => HSNCodeHandler(e, cellContent, user, key)}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n\r\n                )\r\n            },\r\n        },\r\n        {\r\n            text: \"Action \",\r\n            dataField: \"\",\r\n            formatter: (cellContent, user) => (\r\n\r\n                <>\r\n                    <div style={{ justifyContent: 'center' }} >\r\n                        <Col>\r\n                            <FormGroup className=\" col col-sm-4 \">\r\n                                {!(user.id === '') ?\r\n                                    <Button\r\n                                        id={\"deleteid\"}\r\n                                        type=\"button\"\r\n                                        className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n                                        data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title='Delete MRP'\r\n                                        onClick={() => { deleteHandeler(user.id, user.Name); }}\r\n                                    >\r\n                                        <i className=\"mdi mdi-delete font-size-18\"></i>\r\n                                    </Button> : <></>}\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                    </div>\r\n                </>\r\n\r\n            ),\r\n        },\r\n    ]\r\n\r\n\r\n    //'Save' And 'Update' Button Handller\r\n    const handleValidSubmit = (event, values) => {\r\n        debugger\r\n        var ItemData = TableData.map((index) => ({\r\n            EffectiveDate: effectiveDate,\r\n            Company: 1,\r\n            CreatedBy: 1,\r\n            IsDeleted: 0,\r\n            UpdatedBy: 1,\r\n            Item: index.Item,\r\n            GSTPercentage: index.GSTPercentage,\r\n            HSNCode: index.HSNCode,\r\n            id: index.id\r\n        }))\r\n\r\n\r\n        const Find = ItemData.filter((index) => {\r\n            return (!(index.GSTPercentage === '') && !(index.HSNCode === '') && (index.id === ''))\r\n        })\r\n\r\n\r\n        const jsonBody = JSON.stringify(Find)\r\n\r\n        if (!(Find.length > 0) && !(editMode)) {\r\n            // dispatch(AlertState({\r\n            //     Type: 4, Status: true,\r\n            //     Message: \"At Least one MRP add\",\r\n            //     RedirectPath: false,\r\n            //     PermissionAction: false,\r\n            // }));\r\n            alert(\"At Least one MRP add\")\r\n        }\r\n\r\n        else {\r\n            dispatch(postGSTMasterData(jsonBody));\r\n            console.log(\"jsonBody\", jsonBody)\r\n        }\r\n\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((pageMode === \"edit\") || (pageMode === \"copy\") || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                <MetaTags>\r\n                    <title>PartyType| FoodERP-React FrontEnd</title>\r\n                </MetaTags>\r\n                <Breadcrumb breadcrumbItem={userPageAccessState.PageHeading} />\r\n                <Container fluid>\r\n                    <AvForm\r\n                        onValidSubmit={(e, v) => {\r\n                            handleValidSubmit(e, v);\r\n                        }}\r\n                        ref={formRef}\r\n                    >\r\n\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody>\r\n\r\n                                <Row className=\"\">\r\n                                    <Col md={12}>\r\n                                        <Card style={{ backgroundColor: \"whitesmoke\" }}>\r\n\r\n                                            <CardHeader className=\"card-header   text-black \" style={{ backgroundColor: \"#e9e9ef\" }} >\r\n                                                <Row className=\"mt-2\">\r\n                                                    <Col md=\"6\">\r\n                                                        <FormGroup className=\"mb-4 row\">\r\n                                                            <Label className=\"col-md-4\">EffectiveDate</Label>\r\n                                                            <Col md=\"8\">\r\n                                                                <Flatpickr\r\n\r\n                                                                    id=\"EffectiveDateid\"\r\n                                                                    name=\"effectiveDate\"\r\n                                                                    value={effectiveDate}\r\n                                                                    className=\"form-control  bg-white text-dark mt-n2\"\r\n                                                                    placeholder=\" Please Enter FSSAI Exipry\"\r\n                                                                    options={{\r\n                                                                        altInput: true,\r\n                                                                        altFormat: \"F j, Y\",\r\n                                                                        dateFormat: \"Y-m-d\"\r\n                                                                    }}\r\n                                                                    onChange={EffectiveDateHandler}\r\n                                                                />\r\n                                                            </Col>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n\r\n                                                    <Col md=\"2\">\r\n                                                        <Button type=\"button\" color=\"btn btn-outline-success border-2 font-size-12  \"\r\n                                                            className=\"mt-n2\"\r\n                                                            onClick={() => { GoButton_Handler() }} >Go</Button>\r\n\r\n                                                    </Col>\r\n\r\n                                                </Row>\r\n\r\n                                            </CardHeader>\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n                                {TableData.length > 0 ?\r\n                                    <PaginationProvider pagination={paginationFactory(pageOptions)}>\r\n                                        {({ paginationProps, paginationTableProps }) => (\r\n                                            <ToolkitProvider\r\n                                                keyField=\"Item\"\r\n                                                data={TableData}\r\n                                                columns={pagesListColumns}\r\n                                                search\r\n                                            >\r\n                                                {(toolkitProps) => (\r\n                                                    <React.Fragment>\r\n                                                        <Row>\r\n                                                            <Col xl=\"12\">\r\n                                                                <div className=\"table-responsive\">\r\n                                                                    <BootstrapTable\r\n                                                                        keyField={\"Item\"}\r\n                                                                        responsive\r\n                                                                        bordered={false}\r\n                                                                        striped={false}\r\n                                                                        // defaultSorted={defaultSorted}\r\n                                                                        classes={\"table  table-bordered\"}\r\n                                                                        noDataIndication={<div className=\"text-danger text-center \">Items Not available</div>}\r\n                                                                        {...toolkitProps.baseProps}\r\n                                                                        {...paginationTableProps}\r\n                                                                    />\r\n                                                                </div>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                        <Row className=\"align-items-md-center mt-30\">\r\n                                                            <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n                                                                <PaginationListStandalone {...paginationProps} />\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </React.Fragment>\r\n                                                )}\r\n                                            </ToolkitProvider>\r\n                                        )}\r\n\r\n                                    </PaginationProvider>\r\n                                    : null}\r\n                                {TableData.length > 0 ?\r\n                                    <div>\r\n                                        {\r\n                                            (editMode) ?\r\n                                                <button\r\n                                                    type=\"submit\"\r\n                                                    data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Update Party Type\"\r\n                                                    className=\"btn btn-success w-md mt-3\"\r\n                                                >\r\n                                                    <i class=\"fas fa-edit me-2\"></i>Update\r\n                                                </button>\r\n                                                : <button\r\n                                                    type=\"submit\"\r\n                                                    data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Save Party Type\"\r\n                                                    className=\"btn btn-primary w-md mt-3 \"\r\n                                                > <i className=\"fas fa-save me-2\"></i> Save\r\n                                                </button>\r\n                                        }\r\n                                    </div>\r\n                                    : null}\r\n\r\n                            </CardBody>\r\n                        </Card>\r\n                    </AvForm>\r\n                </Container>\r\n            </div>\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\n\r\nexport default GSTMaster\r\n\r\n\r\n\r\n\r\n\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Purchase\\Order\\OrderList.js",["1644","1645","1646"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    deleteOrderId,\r\n    deleteOrderIdSuccess,\r\n    editOrderIdSuccess,\r\n    editOrderId,\r\n    getOrderListPage,\r\n    updateOrderIdSuccess,\r\n    // getOrderList\r\n} from \"../../../store/Purchase/OrderPageRedux/actions\";\r\nimport {  commonPageFieldList, commonPageFieldListSuccess, } from \"../../../store/actions\";\r\nimport CommonListPage from \"../../../components/Common/CmponentRelatedCommonFile/commonListPage\"\r\nimport Order from \"./Order\";\r\nimport { ORDER } from \"../../../routes/route_url\";\r\n\r\nconst OrderList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            tableList: state.OrderReducer.orderList,\r\n            deleteMsg: state.OrderReducer.deleteMsg,\r\n            updateMsg:state.OrderReducer.updateMsg,\r\n            postMsg: state.OrderReducer.postMsg,\r\n            editData: state.OrderReducer.editData,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList,\r\n        })\r\n    );\r\n  \r\n    const action = {\r\n        getList: getOrderListPage,\r\n        editId: editOrderId,\r\n        deleteId: deleteOrderId,\r\n        postSucc: postMessage,\r\n        updateSucc: updateOrderIdSuccess,\r\n        deleteSucc: deleteOrderIdSuccess\r\n    }\r\n\r\n\r\n    // Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(124))\r\n        dispatch(getOrderListPage());\r\n    }, []);\r\n\r\n    const { pageField } = reducers;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                (pageField) ?\r\n                    <CommonListPage\r\n                        action={action}\r\n                        reducers={reducers}\r\n                        MasterModal={Order}\r\n                        masterPath={ORDER}\r\n                        ButtonMsgLable={\"Order\"}\r\n                        deleteName={\"Name\"}\r\n                    />\r\n                    : null\r\n            }\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default OrderList;","D:\\GitProjects\\Manthan\\src\\pages\\Purchase\\Order\\Order.js",["1647","1648","1649","1650","1651","1652","1653","1654","1655","1656","1657","1658","1659"],"import {\r\n    Button,\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport Flatpickr from \"react-flatpickr\";\r\nimport Select from \"react-select\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"flatpickr/dist/themes/material_blue.css\"\r\n\r\n\r\nimport React, { useEffect, useState, useRf, useRef } from \"react\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\n\r\nimport ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory, { PaginationListStandalone, PaginationProvider } from \"react-bootstrap-table2-paginator\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    editOrderIdSuccess,\r\n    goButton,\r\n    goButtonSuccess,\r\n    postOrder,\r\n    postOrderSuccess,\r\n    updateOrderId,\r\n    updateOrderIdSuccess\r\n} from \"../../../store/Purchase/OrderPageRedux/actions\";\r\nimport { getSupplier, getSupplierAddress } from \"../../../store/CommonAPI/SupplierRedux/actions\"\r\nimport { mySearchProps } from \"../../../components/Common/CmponentRelatedCommonFile/SearchBox/MySearch\";\r\nimport { AlertState, BreadcrumbFilterSize } from \"../../../store/actions\";\r\nimport { basicAmount, GstAmount, handleKeyDown, totalAmount } from \"./OrderPageCalulation\";\r\nimport '../../Order/div.css'\r\n\r\nimport { ORDER_lIST } from \"../../../routes/route_url\";\r\nimport SaveButton from \"../../../components/Common/CommonSaveButton\";\r\n\r\nimport { getTermAndCondition } from \"../../../store/Administrator/TermsAndCondtionsRedux/actions\";\r\n\r\nimport OrderPageTemsTable from \"./OrderPageTemsTable\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb3\";\r\n\r\nlet description = ''\r\nlet editVal = {}\r\n\r\nconst Order = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(\"save\");\r\n    const [userAccState, setUserPageAccessState] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n\r\n    const [podate, setpoDate] = useState(\"today\");\r\n    const [deliverydate, setdeliverydate] = useState(\"today\")\r\n    const [billAddr, setbillAddr] = useState('')\r\n    const [shippAddr, setshippAddr] = useState('')\r\n\r\n    const [supplierSelect, setsupplierSelect] = useState('');\r\n    const [orderAmount, setOrderAmount] = useState(0);\r\n    const [termsAndConTable, setTermsAndConTable] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getSupplier())\r\n        dispatch(getSupplierAddress())\r\n        dispatch(getTermAndCondition())\r\n\r\n    }, [])\r\n\r\n    const {\r\n        items,\r\n        postMsg,\r\n        supplier,\r\n        userAccess,\r\n        updateMsg,\r\n        supplierAddress,\r\n        termsAndCondtions,\r\n        pageField\r\n    } = useSelector((state) => ({\r\n        items: state.OrderReducer.orderItem,\r\n        supplier: state.SupplierReducer.supplier,\r\n        supplierAddress: state.SupplierReducer.supplierAddress,\r\n        postMsg: state.OrderReducer.postMsg,\r\n        updateMsg: state.OrderReducer.updateMsg,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageFieldList,\r\n        termsAndCondtions: state.TermsAndCondtionsReducer.TermsAndCondtionsList,\r\n    }));\r\n\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) { locationPath = props.masterPath; };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserPageAccessState(userAcc)\r\n        };\r\n    }, [userAccess])\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(\"editValue\")\r\n    const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n    useEffect(() => {\r\n        dispatch(BreadcrumbFilterSize(`${\"Order Amount\"} :${orderAmount}`))\r\n        dispatch(goButtonSuccess([]))\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    Supplier: hasEditVal.Supplier,\r\n                    EffectiveDate: hasEditVal.OrderDate\r\n                }\r\n                );\r\n                dispatch(goButton(jsonBody, hasEditVal))\r\n                dispatch(BreadcrumbFilterSize(`${\"Order Amount\"} :${hasEditVal.OrderAmount}`))\r\n\r\n                setsupplierSelect({ label: hasEditVal.SupplierName, value: hasEditVal.Supplier })\r\n                setpoDate(hasEditVal.OrderDate)\r\n                setdeliverydate(hasEditVal.DeliveryDate)\r\n                setshippAddr({ label: hasEditVal.ShippingAddress, value: hasEditVal.ShippingAddressID })\r\n                setbillAddr({ label: hasEditVal.BillingAddress, value: hasEditVal.BillingAddressID });\r\n                description = hasEditVal.Description\r\n                editVal = hasEditVal\r\n                setOrderAmount(hasEditVal.OrderAmount)\r\n                const termsAndCondition = hasEditVal.OrderTermsAndCondition.map(i => ({\r\n                    value: i.id,\r\n                    label: i.TermsAndCondition\r\n                }))\r\n                setTermsAndConTable(termsAndCondition)\r\n            }\r\n            dispatch(editOrderIdSuccess({ Status: false }))\r\n        }\r\n\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if ((supplierAddress.length > 0) && (!((hasShowloction || hasShowModal)))) {\r\n            setbillAddr(supplierAddress[0]);\r\n            setshippAddr(supplierAddress[0]);\r\n        }\r\n    }, [supplierAddress])\r\n\r\n    useEffect(() => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(postOrderSuccess({ Status: false }))\r\n            dispatch(goButtonSuccess([]))\r\n            setTermsAndConTable([])\r\n            dispatch(AlertState({\r\n                Type: 1,\r\n                Status: true,\r\n                Message: postMsg.Message,\r\n                RedirectPath: ORDER_lIST,\r\n            }))\r\n\r\n        } else if (postMsg.Status === true) {\r\n            dispatch(postOrderSuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: \"error Message\",\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [postMsg])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            history.push({\r\n                pathname: ORDER_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateOrderIdSuccess({ Status: false }));\r\n            dispatch(\r\n                AlertState({\r\n                    Type: 3,\r\n                    Status: true,\r\n                    Message: JSON.stringify(updateMsg.Message),\r\n                })\r\n            );\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n\r\n    function val_onChange(val, row, type) {\r\n\r\n        if (type === \"qty\") {\r\n            row[\"inpQty\"] = val;\r\n        }\r\n        else {\r\n            row[\"inpRate\"] = val\r\n        }\r\n        row[\"totalAmount\"] = totalAmount(row)\r\n\r\n        let sum = 0\r\n        items.forEach(ind => {\r\n            sum = sum + parseFloat(ind.totalAmount)\r\n        });\r\n        setOrderAmount(sum.toFixed(2))\r\n        dispatch(BreadcrumbFilterSize(`${\"Order Amount\"} :${sum.toFixed(2)}`))\r\n    }\r\n\r\n    const supplierOptions = supplier.map((i) => ({\r\n        value: i.id,\r\n        label: i.Supplier,\r\n    }));\r\n\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Item Name\",\r\n            dataField: \"Name\",\r\n            sort: true,\r\n        },\r\n        {\r\n            text: \"Rate\",\r\n            dataField: \"Rate\",\r\n            sort: true,\r\n            formatter: (value, row, k) => {\r\n                if (row.inpRate === undefined) { row[\"inpRate\"] = 0 }\r\n                if (row.totalAmount === undefined) { row[\"totalAmount\"] = 0 }\r\n                return (\r\n                    <span className=\"text-right\" >\r\n                        <Input\r\n                            type=\"text\"\r\n                            id={`inpRatey${k}`}\r\n                            defaultValue={row.inpRate}\r\n                            disabled={(row.GST === '') ? true : false}\r\n                            onChange={e => {\r\n                                row[\"inpRate\"] = e.target.value;\r\n                                const qty = document.getElementById(`inpQty${k}`)\r\n                                const val = e.target.value\r\n                                if (val > 0) {\r\n\r\n                                    val_onChange(val, row, \"rate\")\r\n                                    qty.disabled = false\r\n                                } else {\r\n                                    qty.value = ''\r\n                                    row[\"inpQty\"] = 0;\r\n                                    val_onChange(0, row, \"rate\")\r\n                                    qty.disabled = true\r\n                                }\r\n                            }}\r\n                            onKeyDown={(e) => handleKeyDown(e, items)}\r\n                        />\r\n                    </span>\r\n                )\r\n            },\r\n\r\n            headerStyle: (colum, colIndex) => {\r\n                return { width: '140px', textAlign: 'center' };\r\n            }\r\n        },\r\n        {\r\n            text: \"GST %\",\r\n            dataField: \"GST\",\r\n            sort: true,\r\n            formatter: (value, row) => (\r\n\r\n                <span >\r\n                    {value}\r\n                </span>\r\n\r\n            ),\r\n            headerStyle: (colum, colIndex) => {\r\n                return { width: '130px', textAlign: 'center', text: \"left\" };\r\n            }\r\n\r\n        },\r\n        {\r\n            text: \"Quntity\",\r\n            dataField: \"\",\r\n            sort: true,\r\n            formatter: (value, row, k) => (\r\n\r\n                <span >\r\n                    <Input type=\"text\"\r\n                        id={`inpQty${k}`}\r\n                        defaultValue={row.inpQty}\r\n                        disabled={((row.inpRate === 0) || row.GST === '') ? true : false}\r\n                        onChange={(e) => {\r\n                            val_onChange(e.target.value, row, \"qty\")\r\n                        }}\r\n                        autoComplete=\"off\"\r\n                        onKeyDown={(e) => handleKeyDown(e, items)} />\r\n                </span>\r\n\r\n            ),\r\n            headerStyle: (colum, colIndex) => {\r\n                return { width: '140px', textAlign: 'center' };\r\n            }\r\n\r\n\r\n        },\r\n        {\r\n            text: \"UOM\",\r\n            dataField: \"\",\r\n            sort: true,\r\n            formatter: (value, row, key) => {\r\n                if (row.UOMLabel === undefined) {\r\n                    row[\"UOM\"] = row.UnitDetails[0].UnitID\r\n                    row[\"UOMLabel\"] = row.UnitDetails[0].UnitName\r\n                    row[\"inpBaseUnitQty\"] = row.UnitDetails[0].BaseUnitQuantity\r\n                }\r\n                return (\r\n                    <Select\r\n                        classNamePrefix=\"select2-selection\"\r\n                        id={\"ddlUnit\"}\r\n                        defaultValue={{ value: row.UOM, label: row.UOMLabel }}\r\n                        // value={{value:row.UOM,label:row.UOMLabel}}\r\n                        options={\r\n                            row.UnitDetails.map(i => ({\r\n                                label: i.UnitName,\r\n                                value: i.UnitID,\r\n                                baseUnitQty: i.BaseUnitQuantity\r\n                            }))\r\n                        }\r\n                        onChange={e => {\r\n                            row[\"UOM\"] = e.value;\r\n                            row[\"UOMLabel\"] = e.label\r\n                            row[\"inpBaseUnitQty\"] = e.baseUnitQty\r\n                        }}\r\n                    >\r\n                    </Select >\r\n                )\r\n            },\r\n            headerStyle: (colum, colIndex) => {\r\n                return { width: '150px', textAlign: 'center' };\r\n            }\r\n\r\n        },\r\n\r\n    ];\r\n\r\n    const defaultSorted = [\r\n        {\r\n            dataField: \"PriceList\", // if dataField is not match to any column you defined, it will be ignored.\r\n            order: \"asc\", // desc or asc\r\n        },\r\n    ];\r\n\r\n    const pageOptions = {\r\n        sizePerPage: (items.length + 2),\r\n        totalSize: 0,\r\n        custom: true,\r\n    };\r\n\r\n\r\n    const GoButton_Handler = () => {\r\n        let supplier = supplierSelect.value\r\n\r\n        if (!supplier > 0) {\r\n            alert(\"Please Select Customer\")\r\n            return\r\n        }\r\n\r\n        if (items.length > 0) {\r\n            if (window.confirm(\"Refresh Order Item...!\")) {\r\n                dispatch(goButtonSuccess([]))\r\n            } else {\r\n                return\r\n            }\r\n        }\r\n\r\n        let division = 0\r\n        try {\r\n            division = JSON.parse(localStorage.getItem(\"roleId\")).Party_id\r\n        } catch (e) {\r\n            alert(e)\r\n        }\r\n        const jsonBody = JSON.stringify({\r\n            Supplier: supplier,\r\n            EffectiveDate: podate\r\n        }\r\n        );\r\n\r\n        dispatch(goButton(jsonBody))\r\n        console.log(\"jsonBody\", jsonBody)\r\n    };\r\n\r\n    const saveHandeller = () => {\r\n        let division = 0\r\n        let date = ''\r\n        const supplier = supplierSelect.value\r\n\r\n        try {\r\n            division = JSON.parse(localStorage.getItem(\"roleId\")).Party_id\r\n        } catch (e) {\r\n            alert(e)\r\n            return\r\n        }\r\n\r\n        const itemArr = []\r\n        items.forEach(i => {\r\n            if ((i.inpQty > 0)) {\r\n                const basicAmt = parseFloat(basicAmount(i))\r\n                const cgstAmt = (GstAmount(i))\r\n\r\n                const arr = {\r\n                    Item: i.id,\r\n                    Quantity: i.inpQty,\r\n                    MRP: i.MRP,\r\n                    Rate: i.inpRate,\r\n                    Unit: i.UOM,\r\n                    BaseUnitQuantity: i.inpBaseUnitQty,\r\n                    Margin: \"\",\r\n                    BasicAmount: basicAmt.toFixed(2),\r\n                    GSTAmount: cgstAmt.toFixed(2),\r\n                    GST: i.Gstid,\r\n                    CGST: (cgstAmt / 2).toFixed(2),\r\n                    SGST: (cgstAmt / 2).toFixed(2),\r\n                    IGST: 0,\r\n                    CGSTPercentage: (i.GST / 2),\r\n                    SGSTPercentage: (i.GST / 2),\r\n                    IGSTPercentage: 0,\r\n                    Amount: i.totalAmount,\r\n                }\r\n\r\n                itemArr.push(arr)\r\n            };\r\n        })\r\n        const termsAndCondition = termsAndConTable.map(i => ({ TermsAndCondition: i.value }))\r\n\r\n        if (itemArr.length === 0) {\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: \"Please Enter One Item Quantity\",\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n            return\r\n        }\r\n        if (termsAndCondition.length === 0) {\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: \"Please Enter One Terms And Condition\",\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n\r\n            return\r\n        }\r\n        const jsonBody = JSON.stringify({\r\n            OrderDate: podate,\r\n            DeliveryDate: deliverydate,\r\n            Customer: division,\r\n            Supplier: supplier,\r\n            OrderAmount: orderAmount,\r\n            Description: description,\r\n            BillingAddress: billAddr.value,\r\n            ShippingAddress: shippAddr.value,\r\n            OrderNo: 1,\r\n            FullOrderNumber: \"PO0001\",\r\n            OrderType: 1,\r\n            POType: 1,\r\n            Division: division,\r\n            CreatedBy: 1,\r\n            UpdatedBy: 1,\r\n            OrderItem: itemArr,\r\n            OrderTermsAndConditions: termsAndCondition\r\n        });\r\n\r\n        if (pageMode === \"edit\") {\r\n            dispatch(updateOrderId(jsonBody, editVal.id))\r\n            console.log(\"orderEdit\", jsonBody)\r\n\r\n        } else {\r\n\r\n            dispatch(postOrder(jsonBody))\r\n            console.log(\"ordersave\", jsonBody)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    if (!(userAccState === \"\")) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>\r\n                    <title>{userAccState.PageHeading}| FoodERP-React FrontEnd</title>\r\n                </MetaTags>\r\n                <div className=\"page-content\">\r\n                    <Breadcrumb\r\n                        pageHeading={userAccState.PageHeading}\r\n                        showCount={true}\r\n                    />\r\n                    <div className=\"px-2 mb-1 mt-n1\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                        <div className=\" mt-1 row\">\r\n                            <Col md=\"3\" className=\"\">\r\n                                <FormGroup className=\"mb- row mt-3 \" >\r\n                                    <Label className=\"col-sm-5 p-2\"\r\n                                        style={{ width: \"100px\" }}>Order Date</Label>\r\n                                    <Col md=\"7\">\r\n                                        <Flatpickr\r\n                                            id=\"orderdate\"\r\n                                            name=\"orderdate\"\r\n                                            value={podate}\r\n                                            className=\"form-control d-block p-2 bg-white text-dark\"\r\n                                            placeholder=\"Select...\"\r\n                                            options={{\r\n                                                altInput: true,\r\n                                                altFormat: \"d-m-Y\",\r\n                                                dateFormat: \"Y-m-d\",\r\n                                                minDate: pageMode === \"edit\" ? podate : \"today\",\r\n                                                // maxDate: pageMode === \"edit\" ? podate : \"\",\r\n                                                // defaultDate: pageMode === \"edit\" ? \"\" : \"today\"\r\n                                            }}\r\n                                            onChange={(e, date) => { setpoDate(date) }}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n\r\n                            <Col md=\"3\">\r\n                                <FormGroup className=\"mb-2 row mt-3 \" >\r\n                                    <Label className=\"col-md-4 p-2\"\r\n                                        style={{ width: \"130px\" }}>Supplier Name</Label>\r\n                                    <Col md=\"7\">\r\n                                        <Select\r\n                                            value={supplierSelect}\r\n                                            classNamePrefix=\"select2-Customer\"\r\n                                            isDisabled={pageMode === \"edit\" ? true : false}\r\n                                            options={supplierOptions}\r\n                                            onChange={(e) => { setsupplierSelect(e) }}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col >\r\n\r\n                            <Col md=\"1\" className=\"mt-3 \">\r\n                                <Button type=\"button\" color=\"btn btn-outline-success border-2 font-size-12 \"\r\n                                    onClick={GoButton_Handler}>Go</Button>\r\n                            </Col>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"px-2  mb-1\" style={{ backgroundColor: \"#dddddd\" }} >\r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"col col-6\">\r\n                                <FormGroup className=\" row mt-3 mt-3\" >\r\n                                    <Label className=\"  col col-3 mt-2\"\r\n                                        style={{ width: \"130px\" }}>Description</Label>\r\n                                    <div className=\" col \">\r\n                                        <Input type=\"text\"\r\n                                            defaultValue={description}\r\n                                            onChange={e => description = e.target.value}\r\n                                            style={{ backgroundColor: \"#dddddd\" }} />\r\n                                    </div>\r\n\r\n                                </FormGroup>\r\n                            </div >\r\n                            <div className=\"col col-6\">\r\n                                <FormGroup className=\" row mt-3 \" >\r\n                                    <Label className=\" col col-3  p-2\"\r\n                                        style={{ width: \"130px\" }}>Delivery Date</Label>\r\n                                    <div className=\"col col-6\">\r\n                                        <Flatpickr\r\n                                            // id=\"orderdate\"\r\n                                            name=\"deliverydate\"\r\n                                            value={deliverydate}\r\n                                            className=\"form-control d-block p-2 bg-white text-dark\"\r\n                                            placeholder=\"Select...\"\r\n                                            options={{\r\n                                                altInput: true,\r\n                                                altFormat: \"d-m-Y\",\r\n                                                dateFormat: \"Y-m-d\",\r\n                                                minDate: pageMode === \"edit\" ? podate : \"today\",\r\n\r\n                                            }}\r\n                                            onChange={(e, date) => { setdeliverydate(date) }}\r\n                                        />\r\n                                    </div>\r\n\r\n                                </FormGroup>\r\n                            </div >\r\n                        </div>\r\n                        <div className=\"row  \">\r\n                            <div className=\"col col-6\">\r\n                                <FormGroup className=\"mb-2 row  \" >\r\n                                    <Label className=\" p-2\"\r\n                                        style={{ width: \"130px\" }}>Billing Address</Label>\r\n                                    <Select\r\n                                        value={billAddr}\r\n                                        classNamePrefix=\"select2-Customer\"\r\n                                        // isDisabled={pageMode === \"edit\" ? true : false}\r\n                                        options={supplierAddress}\r\n                                        styles={{\r\n                                            control: base => ({\r\n                                                ...base,\r\n                                                border: 'non',\r\n                                                backgroundColor: \"\"\r\n\r\n                                            })\r\n                                        }}\r\n                                        onChange={(e) => { setbillAddr(e) }}\r\n                                    />\r\n                                </FormGroup>\r\n                            </div >\r\n                            <div className=\"col col-6\">\r\n                                <FormGroup className=\"mb-2 row \" >\r\n                                    <Label className=\" p-2\"\r\n                                        style={{ width: \"130px\" }}>Shipping Address</Label>\r\n                                    <Select\r\n                                        value={shippAddr}\r\n                                        classNamePrefix=\"select2-Customer\"\r\n                                        // isDisabled={pageMode === \"edit\" ? true : false}\r\n                                        styles={{\r\n                                            control: base => ({\r\n                                                ...base,\r\n                                                border: 'non',\r\n                                                backgroundColor: \"\"\r\n\r\n                                            })\r\n                                        }}\r\n                                        options={supplierAddress}\r\n                                        onChange={(e) => { setshippAddr(e) }}\r\n                                    />\r\n                                </FormGroup>\r\n                            </div >\r\n                        </div>\r\n\r\n                    </div>\r\n                    <PaginationProvider pagination={paginationFactory(pageOptions)}>\r\n                        {({ paginationProps, paginationTableProps }) => (\r\n                            <ToolkitProvider\r\n                                keyField=\"id\"\r\n                                defaultSorted={defaultSorted}\r\n                                data={items}\r\n                                columns={pagesListColumns}\r\n                                search\r\n                            >\r\n                                {(toolkitProps,) => (\r\n                                    <React.Fragment>\r\n                                        <Row>\r\n                                            <Col xl=\"12\">\r\n                                                <div className=\"table table-Rresponsive\">\r\n                                                    <BootstrapTable\r\n                                                        keyField={\"id\"}\r\n                                                        responsive\r\n                                                        bordered={false}\r\n                                                        striped={false}\r\n                                                        classes={\"table  table-bordered table-hover\"}\r\n                                                        noDataIndication={\r\n                                                            <div className=\"text-danger text-center \">\r\n                                                                Items Not available\r\n                                                            </div>\r\n                                                        }\r\n                                                        {...toolkitProps.baseProps}\r\n                                                        {...paginationTableProps}\r\n                                                    />\r\n                                                    {mySearchProps(toolkitProps.searchProps)}\r\n                                                </div>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row className=\"align-items-md-center mt-30\">\r\n                                            <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n                                                <PaginationListStandalone {...paginationProps} />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </React.Fragment>\r\n                                )}\r\n                            </ToolkitProvider>\r\n                        )}\r\n\r\n                    </PaginationProvider>\r\n\r\n                    {\r\n                        items.length > 0 ?\r\n                            <OrderPageTemsTable tableList={termsAndConTable} setfunc={setTermsAndConTable} />\r\n                            : null\r\n                    }\r\n\r\n                    {\r\n                        (items.length > 0) ? <div className=\"row save1\" style={{ paddingBottom: 'center' }}>\r\n                            <SaveButton pageMode={pageMode} userAcc={userAccState}\r\n                                module={\"Order\"} onClick={saveHandeller}\r\n                            />\r\n                        </div>\r\n                            : <div className=\"row save1\"></div>\r\n                    }\r\n                </div >\r\n                {/* </div> */}\r\n\r\n            </React.Fragment >\r\n        )\r\n    } else {\r\n        return null\r\n    }\r\n\r\n}\r\nexport default Order\r\n\r\n","D:\\GitProjects\\Manthan\\src\\components\\VerticalLayout\\Footer.js",[],"D:\\GitProjects\\Manthan\\src\\components\\Common\\Spinner.js",["1660"],"import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Modal, } from \"reactstrap\";\r\nimport { hasError500 } from '../../store/Utilites/CommonError/actions'\r\n\r\nconst Spinner = () => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    //redux Spinner State\r\n    const { SpinnerState, error500 } = useSelector((state) => ({\r\n        SpinnerState: state.SpinnerReducer.SpinnerState,\r\n        error500: state.CommonError.error500,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        if (error500) {\r\n            dispatch(hasError500(null))\r\n            history.push({\r\n                pathname: \"/auth-500\",\r\n                state: error500\r\n            })\r\n        }\r\n    }, [error500])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Modal\r\n                isOpen={SpinnerState}\r\n                centered={true}\r\n                scrollable={true}\r\n                size=\"sm\"\r\n            >\r\n                <button className=\"btn btn-primary\" type=\"button\" disabled>\r\n                    <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                    Loading...\r\n                </button>\r\n            </Modal>\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default Spinner","D:\\GitProjects\\Manthan\\src\\components\\Common\\CustomAlert.js",["1661"],"import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Modal, UncontrolledAlert, } from \"reactstrap\";\r\nimport { AlertShow } from '../../store/Utilites/CustomAlertRedux/actions';\r\n\r\nconst CustomAlert = () => {\r\n\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  //redux Spinner State\r\n  const { AlertData } = useSelector((state) => ({\r\n    AlertData: state.AlertReducer.AlertState,\r\n  }))\r\n\r\n  //  Alert Modal Show and Hide Controller\r\n  function tog_standard() {\r\n    dispatch(AlertShow({ Status: false }));\r\n    removeBodyCss()\r\n    if (!AlertData.AfterResponseAction === false) {\r\n      let Action = AlertData.AfterResponseAction;\r\n      dispatch(Action());\r\n    };\r\n  }\r\n  // console.log(\"test1\",AlertData)\r\n  // console.log(\"test1\",AlertData.hasOwnProperty('myProperty'))\r\n\r\n  //remove Css when modul hide Mode \r\n  function removeBodyCss() {\r\n    // document.body.classList.add(\"no_padding\")\r\n  }\r\n\r\n  // Success Alert Ok button Hnadller\r\n  function Success_Ok_Button_Handeler() {\r\n    dispatch(AlertShow({ Status: false }));\r\n    removeBodyCss()\r\n    if (!AlertData.AfterResponseAction === false) {\r\n      let Action = AlertData.AfterResponseAction;\r\n      dispatch(Action());\r\n    };\r\n    if (!AlertData.RedirectPath === false) {\r\n    \r\n      history.push({\r\n        pathname: AlertData.RedirectPath,\r\n        state: history.location.state\r\n      });\r\n    }\r\n  }\r\n\r\n  function Ok_handeler() {\r\n    dispatch(AlertShow({ Status: false }));\r\n    removeBodyCss()\r\n  }\r\n\r\n  //Permission Alert Ok button handller\r\n  function Permission_Ok_handeler() {\r\n    dispatch(AlertShow({ Status: false }));\r\n    if (!AlertData.PermissionAction === false) {\r\n      let DeleteId = AlertData.ID\r\n      dispatch(AlertData.PermissionAction(DeleteId))\r\n    };\r\n  }\r\n\r\n  // All alert Cancel Button handler\r\n  function cancel_handeler() {\r\n    tog_standard();\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Modal\r\n        isOpen={AlertData.Status}\r\n        toggle={() => { tog_standard() }}\r\n        // scrollable={true}\r\n      // centered={true} \r\n      // size={\"sm\"}\r\n      >\r\n        {(AlertData.Type === 1) &&\r\n          <UncontrolledAlert color=\"success\" className=\"px-6 mb-0 text-center\">\r\n            <i className=\"mdi mdi-check-all d-block display-6 mt-2 mb-3  text-success\"></i>\r\n            <p> <h5 className=\"text-success\">{AlertData.Message}</h5></p>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary \"\r\n              onClick={() => {\r\n                Success_Ok_Button_Handeler()\r\n              }}\r\n            >\r\n              OK\r\n            </button>\r\n          </UncontrolledAlert>\r\n        }\r\n\r\n        {(AlertData.Type === 2) &&\r\n          <UncontrolledAlert color=\"danger\" className=\"px-4 mb-0 text-center\">\r\n            <i className=\"mdi mdi-block-helper d-block display-4 mt-2 mb-3  text-danger\"></i>\r\n            <p> <h5 className=\"text-danger\">{AlertData.Message}</h5></p>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary \"\r\n              onClick={() => {\r\n                Ok_handeler()\r\n              }}\r\n            >\r\n              OK\r\n            </button>\r\n          </UncontrolledAlert>\r\n        }\r\n        {(AlertData.Type === 3) &&\r\n          <UncontrolledAlert color=\"info\" className=\"px-4 mb-0 text-center\">\r\n            <i className=\"mdi mdi-alert-circle-outline d-block display-4 mt-2 mb-3 text-info\"></i>\r\n            <p> <h5 className=\"text-\">{AlertData.Message}</h5></p>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary \"\r\n              onClick={() => {\r\n                Ok_handeler()\r\n              }}\r\n            >\r\n              OK\r\n            </button>\r\n          </UncontrolledAlert>\r\n        }\r\n        {(AlertData.Type === 4) &&\r\n          <UncontrolledAlert color=\"warning\" className=\"px-4 mb-0 text-center\">\r\n            <i className=\"mdi mdi-alert-outline  d-block display-4 mt-2 mb-3 text-warning\"></i>\r\n            <p> <h5 className=\"text-\">{AlertData.Message}</h5></p>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary \"\r\n              onClick={() => {\r\n                Ok_handeler()\r\n              }}\r\n            >\r\n              OK\r\n            </button>\r\n          </UncontrolledAlert>\r\n        }\r\n        {(AlertData.Type === 5) &&\r\n          <UncontrolledAlert color=\"info\" className=\"px-4 mb-0 text-center\">\r\n            <i className=\"mdi mdi-alert-circle-outline d-block display-6 mt-2 mb-3 text-info\"></i>\r\n            <p>\r\n              <h5>{AlertData.Message}</h5></p>\r\n            <div className=\"d-flex flex-wrap gap-2 \" style={{ float: \"right\" }}>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-success\"\r\n                onClick={() => {\r\n                  Permission_Ok_handeler()\r\n                }}\r\n              >\r\n                Yes\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-danger w-xm waves-effect waves-light\"\r\n                onClick={() => {\r\n                  cancel_handeler()\r\n                }}\r\n              >\r\n                No\r\n              </button>\r\n            </div>\r\n          </UncontrolledAlert>\r\n        }\r\n      </Modal>\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default CustomAlert\r\n","D:\\GitProjects\\Manthan\\src\\store\\CommonAPI\\SupplierRedux\\saga.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyItemsRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GSTRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartySubPartyRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GroupRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GSTRedux\\action.js",[],"D:\\GitProjects\\Manthan\\src\\components\\Common\\Breadcrumb.js",["1662","1663","1664","1665","1666","1667"],"import React, { useEffect, useState } from \"react\"\r\nimport PropTypes from 'prop-types'\r\nimport { Row, Col, Modal, Table, Button, } from \"reactstrap\"\r\nimport { Redirect, useHistory } from \"react-router-dom\";\r\nimport { Search } from \"react-bootstrap-table2-toolkit\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Breadcrumb_inputName } from \"../../store/Utilites/Breadcrumb/actions\";\r\nimport { AvForm, AvInput } from \"availity-reactstrap-validation\";\r\nimport * as XLSX from 'xlsx';\r\n\r\nconst Breadcrumb = props => {\r\n\r\n  const { SearchBar } = Search;\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const { showCount = false } = props\r\n\r\n\r\n  // for Excel Download\r\n  const [modal_scroll, setmodal_scroll] = useState(false);\r\n  const [downListKey, setDownListKey] = useState([]);\r\n\r\n  // const breadcrumbItem = props.userAcc.PageHeading;\r\n  // const IsButtonVissible = (props.userAcc.RoleAccess_IsSave) ? true : false;\r\n  // const userAcc = props.userAcc;\r\n  // const pageField = props.pageField;\r\n\r\n\r\n  const {\r\n    bredcrumbName = '',\r\n    filterSize,\r\n    RoleAccessModifiedinSingleArray\r\n  } = useSelector((state) => ({\r\n    bredcrumbName: state.BreadcrumbReducer.bredcrumbName,\r\n    filterSize: state.BreadcrumbReducer.filterSize,\r\n    RoleAccessModifiedinSingleArray: state.Login.RoleAccessUpdateData,\r\n\r\n  }));\r\n\r\n  function tog_scroll() {\r\n    setmodal_scroll(!modal_scroll);\r\n    removeBodyCss();\r\n  }\r\n\r\n  function removeBodyCss() {\r\n    document.body.classList.add(\"no_padding\");\r\n  }\r\n\r\n\r\n  const [IsRedirectNewButton, setIsRedirectNewButton] = useState(false);\r\n\r\n  // New Button Handller\r\n  const NewButtonHandeller = () => {\r\n\r\n    let pathName = history.location.pathname\r\n\r\n    let userAcc = RoleAccessModifiedinSingleArray.find((inx) => {\r\n      return (`/${inx.ActualPagePath}` === pathName)\r\n    })\r\n    let listPagePath = RoleAccessModifiedinSingleArray.find((inx) => {\r\n      return (inx.id === userAcc.RelatedPageID)\r\n    })\r\n    if (listPagePath === undefined) {\r\n      return\r\n    }\r\n    //  if (listPagePath.RoleAccess_IsShowOnMenu) {\r\n    history.push({\r\n      pathname: `/${listPagePath.ActualPagePath}`,\r\n    })\r\n    // }else{\r\n    //   setIsRedirectNewButton(true)\r\n    // }\r\n\r\n\r\n  }\r\n\r\n  // Onfocus Search Box\r\n  useEffect(() => {\r\n    // document.getElementById(\"search-bar-0\").focus();\r\n\r\n    if (!(props.IsSearchVissible === undefined)) {\r\n    }\r\n    history.listen(location => dispatch(Breadcrumb_inputName('')));\r\n  }, [history])\r\n\r\n\r\n  useEffect(() => {\r\n    if (!(props.ExcelData === undefined)) {\r\n      if ((props.ExcelData.length > 0)) {\r\n        // object to array conversion\r\n        const propertyNames = Object.keys(props.ExcelData[0]);\r\n        setDownListKey(propertyNames)\r\n      }\r\n    }\r\n  }, [props.ExcelData])\r\n\r\n  const DownloadInExcelButtonHanler = (event, values) => {\r\n    debugger\r\n    var list = []\r\n    var object1 = {}\r\n    var selectedValues = Object.keys(values);\r\n    var filteredValues = selectedValues.filter(function (selectedValues) {\r\n      return values[selectedValues]\r\n    });\r\n\r\n    props.ExcelData.map((index1) => {\r\n      filteredValues.map((index2) => {\r\n        if (index1.hasOwnProperty(index2)) {\r\n          object1[index2] = index1[index2]\r\n        }\r\n      })\r\n      list.push(object1)\r\n      object1 = {}\r\n    })\r\n    const worksheet = XLSX.utils.json_to_sheet(list);\r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\r\n    XLSX.writeFile(workbook, \"Excel File.xlsx\");\r\n  }\r\n\r\n\r\n  const excelChekOnChange = (e) => {\r\n    // e.preventDefault();\r\n    const check=e.target\r\n    // var chek = document.getElementById(\"checkAll\").checked\r\n    debugger\r\n    if (check.id===\"checkAll\") {\r\n      if(check.checked){\r\n        for (var i = 0; i < downListKey.length; i++) {\r\n          const a=document.getElementById(`chckbox${i}`)\r\n          if(a){\r\n            a.checked = true\r\n            // props.ExcelData[0][`$defSelect${downListKey[i]}`]=true\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        for (var i = 0; i < downListKey.length; i++) {\r\n          const a=document.getElementById(`chckbox${i}`)\r\n          if(a){\r\n            a.checked = false\r\n            // props.ExcelData[0][`$defSelect${downListKey[i]}`]=false\r\n\r\n          }\r\n        }\r\n      }\r\n    }\r\n    else{\r\n      // document.getElementById(check.id).checked=check.value;\r\n    // var chek = document.getElementById(\"checkAll\").checked\r\n\r\n    }\r\n    \r\n  };\r\n\r\n  function funcSelect() {\r\n    const arrDiv = []\r\n    downListKey.forEach((index, key) => {\r\n      \r\n      const match = index.slice(0, 1);\r\n      if (!(match === \"$\")) {\r\n        arrDiv.push(\r\n          <>\r\n            <div className=\"row\" >\r\n              <div className=\"col col-12\"  >\r\n                <Row>\r\n                  <div className=\"col col-12 \" >\r\n                    <AvInput\r\n                      className=\" text-black checkbox-border-red\"\r\n                      type=\"checkbox\"\r\n                      id={`chckbox${key}`}\r\n                      name={index}\r\n                      // defaultChecked={true}\r\n                      defaultValue={(props.ExcelData[0][`$defSelect${index}`])?true:false}\r\n                      // onChange={ excelChekOnChange}\r\n                    />&nbsp;&nbsp;&nbsp;\r\n                    <label className=\"form-label text-black\"> {index} </label>\r\n                  </div>\r\n                </Row>\r\n              </div>\r\n            </div>\r\n          </>\r\n        )\r\n      }\r\n    })\r\n    return arrDiv\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <Modal\r\n        isOpen={modal_scroll}\r\n        toggle={() => {\r\n          tog_scroll();\r\n        }}\r\n        scrollable={true}\r\n      >\r\n        <div className=\"modal-header\">\r\n          <h5 className=\"modal-title mt-0\">List</h5>\r\n\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => setmodal_scroll(false)}\r\n            className=\"close\"\r\n            data-dismiss=\"modal\"\r\n            aria-label=\"Close\"\r\n          >\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n          <AvForm onValidSubmit={(e, v) => { DownloadInExcelButtonHanler(e, v); }}>\r\n            <div className=\"form-check\">\r\n              <input\r\n                id=\"checkAll\"\r\n                type=\"checkbox\"\r\n                className=\"form-check-input\"\r\n                onChange={excelChekOnChange}\r\n              />\r\n              <label className=\"form-label text-black\">All Select</label>\r\n            </div>\r\n            {funcSelect()}\r\n\r\n\r\n            <div className=\"modal-body\">\r\n              <div className=\"modal-footer\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-secondary\"\r\n                  onClick={() => setmodal_scroll(false)}\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button type=\"submit\" className=\"btn btn-primary\">\r\n                  Download in Excel\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </AvForm>\r\n        </div>\r\n      </Modal>\r\n\r\n      <Row style={{ Color: \"F7F8F4\", marginTop: \"-5px\", marginBottom: \"7px\" }}>\r\n        <Col md={6}>\r\n          <div className=\"mb-1 text-left\">\r\n            {\r\n              props.IsButtonVissible ?\r\n                <Row>\r\n                  <Col md={12}>\r\n                    <button type=\"button\" className=\"btn btn-success\"\r\n                      data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Create New\"\r\n                      onClick={() => { NewButtonHandeller() }}>\r\n                      New\r\n                    </button>\r\n\r\n                    <label className=\"font-size-18 form-label text-black \" style={{ paddingLeft: \"7px\" }} >{props.breadcrumbItem}</label>\r\n                    {/* {bredcrumbName.length > 0 ? <label className=\"font-size-24 form-label  text-secondary\" style={{ paddingLeft: \"7px\" }}>&nbsp;/&nbsp;{bredcrumbName}</label>\r\n                    : <></>} */}\r\n                  </Col>\r\n                </Row>\r\n                :\r\n                <Row>\r\n                  <Col md={12}>\r\n                    <label className=\"font-size-20  col-ls-6 col-form-label text-black\" style={{ marginLeft: \"6px\" }}>{props.breadcrumbItem}</label>\r\n                    {/* {bredcrumbName.length > 0 ? <label className=\"font-size-24 form-label  text-nowrap bd-highlight text-secondary\" style={{ paddingLeft: \"7px\" }} >&nbsp;/ <kbd className=\"bg-light text-secondary\">{bredcrumbName}</kbd></label>\r\n                    : <></>} */}\r\n\r\n\r\n                    {(bredcrumbName.length > 0) ?\r\n                      <label className=\"font-size-24 form-label  text-nowrap bd-highlight text-primary\"\r\n                        style={{ paddingLeft: \"7px\", color: \"#5156be\" }} >&nbsp;/&nbsp;{bredcrumbName}</label>\r\n                      : <></>\r\n                    }\r\n                  </Col>\r\n                </Row>\r\n            }\r\n          </div>\r\n        </Col>\r\n\r\n        <Col md={filterSize.length < 10 ? 3 : filterSize.length < 25 ? 2 : 1}\r\n          className='text-end'>\r\n\r\n          {props.isExcelButtonVisible === true ?\r\n            <>\r\n              <div>\r\n                <Button\r\n                  type=\"button\"\r\n                  title=\"Download List\"\r\n                  color=\"btn btn-sm btn-outline-primary mt-1\"\r\n                  onClick={() => {\r\n                    tog_scroll();\r\n                  }}\r\n                  data-toggle=\"modal\"\r\n                >\r\n                  <i className=\"bx bx-download font-size-14\" ></i>\r\n                </Button>\r\n              </div>\r\n            </> : <></>}\r\n        </Col>\r\n\r\n        <Col sm={2}>\r\n          <div className=\"search-box d-inline-block\">\r\n            <div className=\"position-relative\">\r\n              {\r\n\r\n                (props.IsSearchVissible)\r\n                  ?\r\n                  <React.Fragment><SearchBar {...props.SearchProps} />\r\n                    <i className=\"bx bx-search-alt search-icon-search\" />\r\n                  </React.Fragment>\r\n                  :\r\n                  <React.Fragment></React.Fragment>\r\n              }\r\n            </div>\r\n          </div>\r\n        </Col>\r\n\r\n\r\n        <Col md={filterSize.length < 10 ? 1 : filterSize.length < 25 ? 2 : 3} className=\"text-right col-md-2 px-0 justify-content-end\">\r\n\r\n          {\r\n            (showCount)\r\n              ?\r\n              <div className=\"bg-dark text-center text-light external-event  col-form-label  border border-Success rounded-2\" style={{ width: \"100%\" }}>\r\n                {filterSize}\r\n              </div>\r\n              :\r\n              <React.Fragment></React.Fragment>\r\n          }\r\n        </Col>\r\n        {/* Redirct To master Component  */}\r\n        {(IsRedirectNewButton) ? <Redirect to={{ pathname: props.RedirctPath, state: { fromDashboardAccess: true, label: props.userPageAccess } }} /> : null}\r\n      </Row>\r\n    </React.Fragment>\r\n  )\r\n}\r\nBreadcrumb.propTypes = {\r\n  breadcrumbItem: PropTypes.string,\r\n  title: PropTypes.string\r\n}\r\nexport default Breadcrumb;\r\n","D:\\GitProjects\\Manthan\\src\\components\\Common\\CommonSaveButton.js",[],"D:\\GitProjects\\Manthan\\src\\components\\Common\\Breadcrumb3.js",["1668","1669","1670","1671","1672","1673","1674"],"import React, { useEffect, useState } from \"react\"\r\nimport PropTypes from 'prop-types'\r\nimport { Row, Col, Modal, Button, } from \"reactstrap\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Breadcrumb_inputName } from \"../../store/Utilites/Breadcrumb/actions\";\r\nimport { AvForm, AvInput } from \"availity-reactstrap-validation\";\r\nimport * as XLSX from 'xlsx';\r\n\r\nconst Breadcrumb = props => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    // for Excel Download\r\n    const [modal_scroll, setmodal_scroll] = useState(false);\r\n    const [downListKey, setDownListKey] = useState([]);\r\n\r\n    const {\r\n        newBtnView = false,\r\n        excelBtnView = false,\r\n        pageHeading = '',\r\n        showCount = false,\r\n        excelData = [],\r\n        userAcc = {},\r\n        pageField = {}\r\n    } = props;\r\n\r\n    const {\r\n        bredcrumbName = '',\r\n        filterSize,\r\n        userAccess\r\n    } = useSelector((state) => ({\r\n        bredcrumbName: state.BreadcrumbReducer.bredcrumbName,\r\n        filterSize: state.BreadcrumbReducer.filterSize,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n    }));\r\n\r\n    function tog_scroll() {\r\n        setmodal_scroll(!modal_scroll);\r\n        removeBodyCss();\r\n    }\r\n\r\n    function removeBodyCss() {\r\n        document.body.classList.add(\"no_padding\");\r\n    }\r\n\r\n    // New Button Handller\r\n    const NewButtonHandeller = () => {\r\n\r\n        let pathName = history.location.pathname\r\n        let userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === pathName)\r\n        })\r\n        let listPagePath = userAccess.find((inx) => {\r\n            return (inx.id === userAcc.RelatedPageID)\r\n        })\r\n        if (listPagePath === undefined) {\r\n            return\r\n        }\r\n        history.push({\r\n            pathname: `/${listPagePath.ActualPagePath}`,\r\n        })\r\n\r\n\r\n    }\r\n\r\n    // Onfocus Search Box\r\n    useEffect(() => {\r\n        // document.getElementById(\"search-bar-0\").focus();\r\n        if (!(props.IsSearchVissible === undefined)) {\r\n        }\r\n        history.listen(location => dispatch(Breadcrumb_inputName('')));\r\n    }, [history])\r\n\r\n    useEffect(() => {\r\n        if (!(excelData === undefined)) {\r\n            if ((excelData.length > 0)) {\r\n                // object to array conversion\r\n                const propertyNames = Object.keys(excelData[0]);\r\n                setDownListKey(propertyNames)\r\n            }\r\n        }\r\n    }, [excelData])\r\n\r\n    const DownloadInExcelButtonHanler = (event, values) => {\r\n        debugger\r\n        var list = []\r\n        var object1 = {}\r\n        var selectedValues = Object.keys(values);\r\n        var filteredValues = selectedValues.filter(function (selectedValues) {\r\n            return values[selectedValues]\r\n        });\r\n\r\n        excelData.map((index1) => {\r\n            filteredValues.map((index2) => {\r\n                if (index1.hasOwnProperty(index2)) {\r\n                    object1[index2] = index1[index2]\r\n                }\r\n            })\r\n            list.push(object1)\r\n            object1 = {}\r\n        })\r\n        const worksheet = XLSX.utils.json_to_sheet(list);\r\n        const workbook = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\r\n        XLSX.writeFile(workbook, \"Excel File.xlsx\");\r\n    }\r\n\r\n    const excelChekOnChange = (e) => {\r\n        // e.preventDefault();\r\n        const check = e.target\r\n        // var chek = document.getElementById(\"checkAll\").checked\r\n        debugger\r\n        if (check.id === \"checkAll\") {\r\n            if (check.checked) {\r\n                for (var i = 0; i < downListKey.length; i++) {\r\n                    const a = document.getElementById(`chckbox${i}`)\r\n                    if (a) {\r\n                        a.checked = true\r\n                        // excelData[0][`$defSelect${downListKey[i]}`]=true\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                for (var i = 0; i < downListKey.length; i++) {\r\n                    const a = document.getElementById(`chckbox${i}`)\r\n                    if (a) {\r\n                        a.checked = false\r\n                        // excelData[0][`$defSelect${downListKey[i]}`]=false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    function ExcelCheckBox() {\r\n        const arrDiv = []\r\n        downListKey.forEach((index, key) => {\r\n\r\n            const match = index.slice(0, 1);\r\n            if (!(match === \"$\")) {\r\n                arrDiv.push(\r\n                    <div className=\"row\" >\r\n                        <div className=\"col col-12\"  >\r\n                            <Row>\r\n                                <div className=\"col col-12 \" >\r\n                                    <AvInput\r\n                                        className=\" text-black checkbox-border-red\"\r\n                                        type=\"checkbox\"\r\n                                        id={`chckbox${key}`}\r\n                                        name={index}\r\n                                        defaultValue={(excelData[0][`$defSelect${index}`]) ? true : false}\r\n                                    />&nbsp;&nbsp;&nbsp;\r\n                                    <label className=\"form-label text-black\"> {index} </label>\r\n                                </div>\r\n                            </Row>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        })\r\n        return arrDiv\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n\r\n            <div className=\"mb-3 \" style={{ Color: \"F7F8F4\", }}>\r\n                <div className=\" d-flex  justify-content-between\">\r\n                    <div className=\"mb-1 \">\r\n                        <div className=\"d-flex  justify-content-start\">\r\n                            {\r\n                                newBtnView ?\r\n                                    <div>\r\n                                        <button type=\"button\" className=\"btn btn-success\"\r\n                                            data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Create New\"\r\n                                            onClick={NewButtonHandeller}>\r\n                                            New\r\n                                        </button>\r\n                                        <label className=\"font-size-18 form-label text-black \" style={{ paddingLeft: \"7px\" }} >{pageHeading}</label>\r\n\r\n                                    </div>\r\n                                    :\r\n                                    <div>\r\n                                        <label className=\"font-size-20  col-ls-6 col-form-label text-black\" style={{ marginLeft: \"6px\" }}>{pageHeading}</label>\r\n                                        {(bredcrumbName.length > 0) ?\r\n                                            <label className=\"font-size-24 form-label  text-nowrap bd-highlight text-primary\"\r\n                                                style={{ paddingLeft: \"7px\", color: \"#5156be\" }} >&nbsp;/&nbsp;{bredcrumbName}</label>\r\n                                            : null\r\n                                        }\r\n\r\n                                    </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n\r\n\r\n                    <div >\r\n                        <div className=\" d-flex  justify-content-end\">\r\n                            {excelBtnView ?\r\n                                <div className=\"px-2 \" style={{ marginTop: \"7px\" }}>\r\n                                    <Button\r\n                                        type=\"button\"\r\n                                        title=\"Download List\"\r\n                                        color=\"btn btn-sm btn-outline-primary \"\r\n                                        onClick={() => { tog_scroll(); }}\r\n                                        data-toggle=\"modal\"\r\n                                    >\r\n                                        <i className=\"bx bx-download font-size-14\" ></i>\r\n                                    </Button>\r\n                                </div>\r\n                                : null}\r\n                            {\r\n                                (showCount) ?\r\n                                    <div className=\"bg-dark text-center text-light external-event col-form-label  border border-Success rounded-2\"\r\n                                        style={{ width: \"100%\" }}>\r\n                                        <samp className=\"px-2 \">{filterSize}</samp>\r\n                                    </div>\r\n                                    :\r\n                                    null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <Modal\r\n                    isOpen={modal_scroll}\r\n                    toggle={() => {\r\n                        tog_scroll();\r\n                    }}\r\n                    scrollable={true}\r\n                >\r\n                    <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title mt-0\">List</h5>\r\n\r\n                        <button\r\n                            type=\"button\"\r\n                            onClick={() => setmodal_scroll(false)}\r\n                            className=\"close\"\r\n                            data-dismiss=\"modal\"\r\n                            aria-label=\"Close\"\r\n                        >\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <AvForm onValidSubmit={(e, v) => { DownloadInExcelButtonHanler(e, v); }}>\r\n                            <div className=\"form-check\">\r\n                                <input\r\n                                    id=\"checkAll\"\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-check-input\"\r\n                                    onChange={excelChekOnChange}\r\n                                />\r\n                                <label className=\"form-label text-black\">All Select</label>\r\n                            </div>\r\n\r\n                            <ExcelCheckBox />\r\n                            <div className=\"modal-body\">\r\n                                <div className=\"modal-footer\">\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        className=\"btn btn-secondary\"\r\n                                        onClick={() => setmodal_scroll(false)}\r\n                                    >\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button type=\"submit\" className=\"btn btn-primary\">\r\n                                        Download in Excel\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </AvForm>\r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\nBreadcrumb.propTypes = {\r\n    breadcrumbItem: PropTypes.string,\r\n    title: PropTypes.string\r\n}\r\nexport default Breadcrumb;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Purchase\\Order\\OrderPageTemsTable.js",[],"D:\\GitProjects\\Manthan\\src\\pages\\Purchase\\Order\\OrderPageCalulation.js",[],"D:\\GitProjects\\Manthan\\src\\store\\CommonAPI\\SupplierRedux\\actions.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyItemsRedux\\action.js",[],"D:\\GitProjects\\Manthan\\src\\components\\Common\\CommonGetRoleAccessFunction.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\ItemsRedux\\action.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartySubPartyRedux\\action.js",[],"D:\\GitProjects\\Manthan\\src\\components\\Common\\CmponentRelatedCommonFile\\validationFunction.js",[],"D:\\GitProjects\\Manthan\\src\\components\\Common\\CmponentRelatedCommonFile\\commonListPage.js",["1675","1676","1677","1678","1679","1680","1681","1682"],"\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Breadcrumb from \"../../../components/Common/Breadcrumb3\";\r\nimport { Col, Modal, Row } from \"reactstrap\";\r\nimport paginationFactory, {\r\n  PaginationListStandalone,\r\n  PaginationProvider,\r\n} from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { AlertState, BreadcrumbFilterSize } from \"../../../store/actions\";\r\nimport { listPageCommonButtonFunction }\r\n  from \"../../../components/Common/CmponentRelatedCommonFile/listPageCommonButtons\";\r\nimport { mySearchProps } from \"./SearchBox/MySearch\";\r\n\r\nlet sortType = \"asc\"\r\nlet searchCount = 0\r\nlet downList = []\r\nlet listObj = {}\r\n\r\nlet searchProps = {\r\n  onClear: function onClear() { },\r\n  onSearch: function onSearch() { },\r\n  searchText: \"\"\r\n}\r\n\r\nexport const countlabelFunc = (toolkitProps, paginationProps, dispatch, ButtonMsgLable) => {\r\n\r\n  let iscall = 0\r\n  if (paginationProps.dataSize) {\r\n    iscall = paginationProps.dataSize\r\n  }\r\n\r\n  if (!(iscall === searchCount)) {\r\n    dispatch(BreadcrumbFilterSize(`${ButtonMsgLable} Count :${iscall}`))\r\n    searchCount = paginationProps.dataSize\r\n  }\r\n  searchProps = toolkitProps.searchProps\r\n}\r\n\r\nconst CommonListPage = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory()\r\n\r\n  const [userAccState, setUserAccState] = useState('');\r\n  const [modal_edit, setmodal_edit] = useState(false);\r\n\r\n  const {\r\n    tableList,\r\n    editData,\r\n    updateMsg,\r\n    deleteMsg,\r\n    userAccess,\r\n    postMsg,\r\n    pageField\r\n\r\n  } = props.reducers;\r\n\r\n  const {\r\n    getList,\r\n    editId,\r\n    deleteId,\r\n    postSucc,\r\n    updateSucc,\r\n    deleteSucc\r\n\r\n  } = props.action\r\n\r\n  const {\r\n    MasterModal,\r\n    masterPath,\r\n    ButtonMsgLable,\r\n    deleteName\r\n  } = props;\r\n\r\n  const fileds = pageField.PageFieldMaster;\r\n\r\n  useEffect(() => {\r\n\r\n    const locationPath = history.location.pathname\r\n    let userAcc = userAccess.find((inx) => {\r\n      return (`/${inx.ActualPagePath}` === locationPath)\r\n    })\r\n    if (!(userAcc === undefined)) {\r\n      setUserAccState(userAcc)\r\n    }\r\n  }, [userAccess])\r\n\r\n  useEffect(() => {\r\n    downList = []\r\n    listObj = {}\r\n\r\n    tableList.forEach((index1) => {\r\n      fileds.forEach((index2) => {\r\n        if (index2.ShowInDownload) {\r\n          listObj[`$defSelect${index2.ControlID}`] = index2.ShownloadDefaultSelect\r\n          listObj[index2.ControlID] = index1[index2.ControlID]\r\n        }\r\n      })\r\n      downList.push(listObj)\r\n      listObj = {}\r\n    })\r\n\r\n  }, [tableList])\r\n\r\n\r\n  // This UseEffect => UpadateModal Success/Unsucces  Show and Hide Control Alert_modal\r\n  useEffect(() => {\r\n\r\n    if (updateMsg.Status === true && updateMsg.StatusCode === 200) {\r\n      dispatch(updateSucc({ Status: false }));\r\n      dispatch(\r\n        AlertState({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: updateMsg.Message,\r\n          AfterResponseAction: getList,\r\n        })\r\n      );\r\n      tog_center();\r\n    } else if (updateMsg.Status === true) {\r\n      dispatch(updateSucc({ Status: false }));\r\n      dispatch(\r\n        AlertState({\r\n          Type: 3,\r\n          Status: true,\r\n          Message: JSON.stringify(updateMsg.Message),\r\n        })\r\n      );\r\n    }\r\n  }, [updateMsg]);\r\n\r\n  useEffect(() => {\r\n    if (deleteMsg.Status === true && deleteMsg.StatusCode === 200) {\r\n      dispatch(deleteSucc({ Status: false }));\r\n      dispatch(\r\n        AlertState({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: deleteMsg.Message,\r\n          AfterResponseAction: getList,\r\n        })\r\n      );\r\n    } else if (deleteMsg.Status === true) {\r\n      dispatch(deleteSucc({ Status: false }));\r\n      dispatch(\r\n        AlertState({\r\n          Type: 3,\r\n          Status: true,\r\n          Message: JSON.stringify(deleteMsg.Message),\r\n        })\r\n      );\r\n    }\r\n  }, [deleteMsg]);\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n      dispatch(postSucc({ Status: false }))\r\n      tog_center();\r\n      dispatch(getList());\r\n      dispatch(AlertState({\r\n        Type: 1,\r\n        Status: true,\r\n        Message: postMsg.Message,\r\n      }))\r\n    }\r\n\r\n    else if ((postMsg.Status === true)) {\r\n      dispatch(postSucc({ Status: false }))\r\n      dispatch(AlertState({\r\n        Type: 4,\r\n        Status: true,\r\n        Message: JSON.stringify(postMsg.Message),\r\n        RedirectPath: false,\r\n        AfterResponseAction: false\r\n      }));\r\n    }\r\n\r\n\r\n  }, [postMsg])\r\n\r\n  // Edit Modal Show When Edit Data is true\r\n  useEffect(() => {\r\n    if (editData.Status === true) {\r\n      if (pageField.IsEditPopuporComponent) {\r\n        history.push({\r\n          pathname: masterPath,\r\n          editValue: editData.Data,\r\n          pageMode: editData.pageMode,\r\n\r\n        })\r\n      }\r\n      else {\r\n        tog_center();\r\n      }\r\n    }\r\n  }, [editData]);\r\n\r\n  function tog_center() {\r\n    setmodal_edit(!modal_edit); //when edit mode show in pop up that modal view controle\r\n  }\r\n\r\n  fileds.sort(function (a, b) {  //sort function is  sort list page coloumn by asending order by listpage sequense\r\n    return a.ListPageSeq - b.ListPageSeq\r\n  });\r\n\r\n  let sortLabel = \"\"\r\n  const columns = []\r\n\r\n  fileds.forEach((i, k) => {\r\n    if (i.ShowInListPage) {\r\n      columns.push({\r\n        text: i.FieldLabel,\r\n        dataField: i.ControlID,\r\n        sort: true,\r\n      })\r\n\r\n      if (i.DefaultSort === 1) {\r\n        sortLabel = i.ControlID\r\n        sortType = \"asc\"\r\n      } else if (i.DefaultSort === 2) {\r\n        sortLabel = i.ControlID;\r\n        sortType = \"desc\"\r\n      }\r\n    }\r\n    if (fileds.length - 1 === k) {\r\n      columns.push(listPageCommonButtonFunction({\r\n        dispatchHook: dispatch,\r\n        ButtonMsgLable: ButtonMsgLable,\r\n        deleteName: deleteName,\r\n        userAccState: userAccState,\r\n        editActionFun: editId,\r\n        deleteActionFun: deleteId\r\n      })\r\n      )\r\n    }\r\n  })\r\n\r\n  const defaultSorted = [\r\n    {\r\n      dataField: sortLabel, // if dataField is not match to any column you defined, it will be ignored.\r\n      order: sortType, // desc or asc\r\n    },\r\n  ];\r\n\r\n  const pageOptions = {\r\n    sizePerPage: 15,\r\n    // totalSize: tableList.length,\r\n    custom: true,\r\n  };\r\n  // const handleDataChange = ({ dataSize }) => {\r\n  //   dispatch(BreadcrumbFilterSize(`${ButtonMsgLable} count :${dataSize}`))\r\n  // }\r\n  if (!(userAccState === '')) {\r\n    return (\r\n      <React.Fragment>\r\n        <MetaTags>\r\n          <title>{userAccState.PageHeading}| FoodERP-React FrontEnd</title>\r\n        </MetaTags>\r\n        <div className=\"page-content\">\r\n          <Breadcrumb\r\n            pageHeading={userAccState.PageHeading}\r\n            newBtnView={(userAccState.RoleAccess_IsSave) ? true : false}\r\n            showCount={true}\r\n            excelBtnView={true}\r\n            // handleDataChange={}\r\n            excelData={downList}\r\n          />\r\n          <PaginationProvider pagination={paginationFactory(pageOptions)}>\r\n            {({ paginationProps, paginationTableProps }) => (\r\n              <ToolkitProvider\r\n                keyField=\"id\"\r\n                data={tableList}\r\n                columns={columns}\r\n                search\r\n              >\r\n                {(toolkitProps, a) => (\r\n                  <React.Fragment>\r\n                    <Row>\r\n                      <Col xl=\"12\">\r\n                        <div className=\"table-responsive\">\r\n                          <BootstrapTable\r\n                            keyField={\"id\"}\r\n                            responsive\r\n                            bordered={false}\r\n                            defaultSorted={defaultSorted}\r\n                            // onDataSizeChange={handleDataChange}\r\n                            striped={true}\r\n                            classes={\"table  table-bordered table-hover\"}\r\n                            {...toolkitProps.baseProps}\r\n                            {...paginationTableProps}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n\r\n                      {countlabelFunc(toolkitProps, paginationProps, dispatch, ButtonMsgLable)}\r\n                      {mySearchProps(toolkitProps.searchProps)}\r\n                    </Row>\r\n                    <Row className=\"align-items-md-center mt-30\">\r\n                      <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n                        <PaginationListStandalone {...paginationProps} />\r\n                      </Col>\r\n                    </Row>\r\n                  </React.Fragment>\r\n                )}\r\n              </ToolkitProvider>\r\n            )}\r\n          </PaginationProvider>\r\n          <Modal\r\n            isOpen={modal_edit}\r\n            toggle={() => {\r\n              tog_center();\r\n            }}\r\n            size=\"xl\"\r\n          >\r\n\r\n            <MasterModal editValue={editData.Data} masterPath={masterPath} pageMode={editData.pageMode} />\r\n          </Modal>\r\n        </div>\r\n        {/* {(isRedirect) ? <Redirect to={{\r\n          pathname: masterPath,\r\n          state: editData.Data, relatatedPage: masterPath, pageMode: editData.pageMode\r\n        }} /> : null} */}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <React.Fragment></React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CommonListPage;\r\n","D:\\GitProjects\\Manthan\\src\\components\\Common\\CmponentRelatedCommonFile\\SearchBox\\MySearch.js",["1683","1684"],"import { useEffect } from \"react\";\r\n\r\n\r\nlet props1 = { onSearch: function onSearch() { } }\r\n\r\nexport const mySearchProps = (props) => {\r\n    props1 = props;\r\n};\r\nlet priviousSerach = null\r\nexport const MySearch = () => {\r\n\r\n    // useEffect(() => {\r\n    //     debugger\r\n    //     if (priviousSerach) {\r\n    //         props1.onSearch(len);\r\n    //         priviousSerach = null\r\n    //     }\r\n    // }, [props1])\r\n\r\n    let input;\r\n    const handleClick = () => {\r\n        var len = input.value\r\n        priviousSerach = len\r\n        if (!(len[0] === \"/\")) {\r\n            // const str = len.substring(1);\r\n            props1.onSearch(len);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"app-search d-none d-lg-block \" style={{ marginTop: \"-3px\" }} autocomplete=\"off\">\r\n            <div className=\"position-relative\">\r\n                <input\r\n                    id=\"myInput\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Search...\"\r\n                    ref={n => input = n}\r\n                    type=\"text\"\r\n                    onChange={handleClick}\r\n                    name=\"myCountry\"\r\n                />\r\n                <button className=\"btn btn-primary\"\r\n                    type=\"butten\">\r\n                    <i className=\"bx bx-search-alt align-middle\" />\r\n                </button>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\DriverRedux\\action.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\TermsAndCondtionsRedux\\actions.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Purchase\\OrderPageRedux\\actions.js",[],"D:\\GitProjects\\Manthan\\src\\helpers\\url_helper.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyItemsRedux\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GSTRedux\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartySubPartyRedux\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\store\\CommonAPI\\SupplierRedux\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\helpers\\backend_helper.js",["1685"],"import axios from \"axios\"\r\nimport { del, get, put, post, postForget, } from \"./api_helper\"\r\nimport * as url from \"./url_helper\"\r\n\r\n// Gets the logged in user data from local session\r\nconst getLoggedInUser = () => {\r\n  const user = localStorage.getItem(\"user\")\r\n  if (user) return JSON.parse(user)\r\n  return null\r\n}\r\n\r\n//is user is logged in\r\nconst isUserAuthenticated = () => {\r\n  return getLoggedInUser() !== null\r\n}\r\n\r\n// Register Method\r\nconst postFakeRegister = data => {\r\n  return axios\r\n    .post(url.POST_FAKE_REGISTER, data)\r\n    .then(response => {\r\n      if (response.status >= 200 || response.status <= 299) return response.data\r\n      throw response.data\r\n    })\r\n    .catch(err => {\r\n      let message\r\n      if (err.response && err.response.status) {\r\n        switch (err.response.status) {\r\n          case 404:\r\n            message = \"Sorry! the page you are looking for could not be found\"\r\n            break\r\n          case 500:\r\n            message =\r\n              \"Sorry! something went wrong, please contact our support team\"\r\n            break\r\n          case 401:\r\n            message = \"Invalid credentials\"\r\n            break\r\n          default:\r\n            message = err[1]\r\n            break\r\n        }\r\n      }\r\n      throw message\r\n    })\r\n}\r\n\r\n// Login Method\r\nconst postFakeLogin = data => post(url.POST_FAKE_LOGIN, data)\r\n\r\n// postForgetPwd\r\nconst postFakeForgetPwd = data => post(url.POST_FAKE_PASSWORD_FORGET, data)\r\n\r\n// Edit profile\r\nconst postJwtProfile = data => post(url.POST_EDIT_JWT_PROFILE, data)\r\n\r\nconst postFakeProfile = data => post(url.POST_EDIT_PROFILE, data)\r\n\r\n// Register Method\r\nconst postJwtRegister = (url, data) => {\r\n  return axios\r\n    .post(url, data)\r\n    .then(response => {\r\n      if (response.status >= 200 || response.status <= 299) return response.data\r\n      throw response.data\r\n    })\r\n    .catch(err => {\r\n      var message\r\n      if (err.response && err.response.status) {\r\n        switch (err.response.status) {\r\n          case 404:\r\n            message = \"Sorry! the page you are looking for could not be found\"\r\n            break\r\n          case 500:\r\n            message =\r\n              \"Sorry! something went wrong, please contact our support team\"\r\n            break\r\n          case 401:\r\n            message = \"Invalid credentials\"\r\n            break\r\n          default:\r\n            message = err[1]\r\n            break\r\n        }\r\n      }\r\n      throw message\r\n    })\r\n}\r\n\r\nexport const Python_FoodERP_postJwtLogin = data => post(url.FOOD_ERP_POST_JWT_LOGIN, data)\r\nexport const getUserDetails_afterLogin_ApiCall = data => post(url.FOOD_ERP_POST_USER_DETAILS_AFTER_LOGIN, data)\r\nexport const divisionDropdown_Forlogin_ChangeDivisionPage_ApiCall = (id1) => get(`${url.DIVIDION_DROPDOWN_FOR_LOGIN_CHANGE_DIVSION_PAGE}/${id1}`)\r\n\r\n// postForgetPwd\r\nexport const Python_FoodERP_postJwtForgetPwd_Verify_OTP = data => postForget(url.FOOD_ERP_POST_JWT_PASSWORD_FORGET_VERIFY_OTP, data)\r\nexport const Python_FoodERP_postJwtForgetPwd_SendOTP = data => postForget(url.FOOD_ERP_POST_JWT_PASSWORD_FORGET_SEND_OTP, data)\r\n\r\n// postSocialLogin\r\nexport const postSocialLogin = data => post(url.SOCIAL_LOGIN, data)\r\n\r\nexport const RoleAccessApi_url = (id1, id2,) => get(`${url.ROLE_ACCESS}/${id1}/${id2}`)\r\nexport const post_SuperAdmin = (data) => post(url.SUPER_ADMIN_API, data) //save And Update\r\n\r\n//  common pages get data for page filed and validation\r\nexport const commonPageFiled_API = (pageId) => get(`${url.PAGE_FIELD}/${pageId}`)\r\n\r\n\r\n// Employees  Component All Api \r\n\r\nexport const getDesignationID_For_Dropdown = () => get(url.GET_DESIGNATIONID)\r\nexport const getEmployeeType_For_Dropdown = () => get(url.GET_EMPLOYEE_TYPE)\r\nexport const getState_For_Dropdown = () => get(url.GET_STATE)\r\nexport const getComapny_For_Dropdown = () => get(url.COMPANY_API_URL)\r\nexport const post_EmployeeData = (data) => post(url.EMPLOYEE_API_URL, data) //save And Update\r\nexport const get_EmployeelistApi = () => get(url.EMPLOYEE_API_URL) // get api\r\nexport const detelet_EmployeeID = (id) => del(`${url.EMPLOYEE_API_URL}/${id}`) // delete api\r\nexport const edit_EmployeeAPI = (id) => get(`${url.EMPLOYEE_API_URL}/${id}`) // edit api\r\nexport const update_EmployeeAPI = (data, id) => put(`${url.EMPLOYEE_API_URL}/${id}`, data)// update \r\nexport const Get_CompanyBy_EmployeeType_For_Dropdown = (id) => get(`${url.GET_COMPANY_BY_EMPLOYEETYPES_ID}/${id}`)//  GetCompanyByDivisionTypeID DropDown API\r\n\r\n//User Registration  All APIs \r\nexport const getEmployee_Dropdown_For_UserRegistration_API = () => get(url.EMPLOYEE_LIST_FOR_DROPDOWN_API_URL)//get api for Dropdown_list data \r\nexport const RolesListDropdown_For_UserRegistration_API = () => get(url.ROLE_API_URL)\r\nexport const User_Component_PostMethod_API = (data) => post(url.REGISTRATION_API_URL, data)//post for (save and update) User_Component\r\nexport const User_Component_GetMethod_API = () => get(url.USER_API_URL) //Get User_Component\r\nexport const User_Component_Delete_Method_API = (id) => del(`${url.USER_API_URL}/${id}`) // delete api\r\nexport const User_Component_EditById_API = (id) => get(`${url.USER_API_URL}/${id}`) // edit api\r\nexport const User_Component_Update_API = (data, id) => put(`${url.USER_API_URL}/${id}`, data) // update api\r\nexport const UserPartiesForUserMaster_API = (id) => get(`${url.USER_PARTIES_FOR_USER_MASTER}/${id}`) // delete api\r\n\r\n\r\n\r\n// Role Master\r\nexport const Role_Master_Get_API = () => get(url.ROLE_MASTER_API)//get api\r\nexport const Role_Master_Post_API = (data) => post(url.ROLE_MASTER_API, data)// post api\r\nexport const Role_Master_Delete_API = (id) => del(`${url.ROLE_MASTER_API}/${id}`)// delete api\r\nexport const Role_Master_Edit_API = (id) => get(`${url.ROLE_MASTER_API}/${id}`)// edit api\r\nexport const Role_Master_Update_API = (data, id) => put(`${url.ROLE_MASTER_API}/${id}`, data)// update api\r\n\r\n// Order Page api  \r\n\r\nexport const OrderPage_GoButton_API = (data) => post(url.GET_ITEM_FOR_ORDER,data)//get api\r\nexport const OrderPage_Post_API = (data) => post(url.ORDER_PAGE_API,data)//get api\r\nexport const OrderPage_get_API = (id) => get(`${url.ORDER_PAGE_API}/${id}`)//get api\r\n\r\nexport const deleteOrderID_forOrderPage_ApiCall = (id) => del(`${url.ORDER_PAGE_API}/${id}`)//Delete Order\r\nexport const editOrderID_forOrderPage_ApiCall = (id) => get(`${url.ORDER_PAGE_API}/${id}`)//Edit Order\r\nexport const UpdateOrder_ID_ApiCall = (data, id) => put(`${url.ORDER_PAGE_API}/${id}`, data)// update api\r\nexport const getOrderList_forOrderPage_ApiCall = (data) => get(url.ORDER_PAGE_API)\r\nexport const getDivisionOrders = () => get(`${url.ORDER_PAGE_API}?FromDate=2022-01-25&ToDate=2022-01-25&CustomerID=0&DivisionID=3`)\r\nexport const getOrderList_For_Listpage = () => get(url.ORDER_PAGE_API)// Get subModule For H_pages\r\n\r\n//Administrator   Modules submit  \r\nexport const postSubmitModules = (data) => post(url.H_MODULES_API_URL, data)\r\nexport const Fetch_ModulesList = () => get(url.H_MODULES_API_URL,)//module-list get API method\r\nexport const delete_ModuleID = (id) => del(`${url.H_MODULES_API_URL}/${id}`)// Delete_Modules_By-ID\r\nexport const edit_ModuleID = (id) => get(`${url.H_MODULES_API_URL}/${id}`)// Edit_Modules- by_ID\r\nexport const updateModule_ID = (data, id) => put(`${url.H_MODULES_API_URL}/${id}`, data)// Update_Modules- by_ID\r\n\r\n//Fetch Company LIst\r\nexport const fetch_CompanyList = () => get(url.COMPANY_API_URL,)\r\nexport const edit_CompanyID = (id) => get(`${url.COMPANY_API_URL}/${id}`)// Edit_Company- by_ID\r\nexport const delete_CompanyID = (id) => del(`${url.COMPANY_API_URL}/${id}`)// Delete_Company_By-ID\r\nexport const postSubmit_Company = (data) => post(url.COMPANY_API_URL, data)// Company_Modules submit \r\nexport const updateCompany_ID = (data, id) => put(`${url.COMPANY_API_URL}/${id}`, data)// Update_Company- by_ID\r\nexport const getCompanyGroup = () => get(url.GET_COMPANYGROUP)// CompanyGroup DropDown API\r\n\r\n//PageList And PageMaster\r\nexport const showPagesListOnPageType_DropDown_List = () => get(url.SHOW_PAGESLIST_ON_PAGE_TYPE_FOR_DROPDOWN)\r\nexport const showPagesListOnPageAccess_DropDown_List = (id) => get(url.SHOW_PAGESLIST_ON_PAGEACCESS_FOR_DROPDOWN)\r\nexport const ControlTypes_DropDown_Api = () => get(url.GET_CONTROLTYPES_DROPDOWN_API)\r\n\r\n//H_pages\r\nexport const get_Module_HPages = () => get(url.H_MODULES_API_URL)// Get subModule For H_pages\r\nexport const Fetch_HPagesListApi = () => get(url.H_PAGES_API_URL)//get H_Pages List \r\nexport const GetFieldValidationOnControlType_DropDown_API = (id) => get(`${url.GET_FIELD_VALIDATIONS_DROPDOWN_API}/${id}`)//  GetFieldValidationOnControlType DropDown API\r\nexport const edit_HPageID = (id) => get(`${url.H_PAGES_API_URL}/${id}`)// get edit H_Pages ID Data \r\nexport const updateHPages = (Data, id) => put(`${url.H_PAGES_API_URL}/${id}`, Data) // Upadate H_Page api\r\nexport const saveHPagesAPI = (Data) => post(url.H_PAGES_API_URL, Data)\r\nexport const deletHPagesUsingID_API = (id) => del(`${url.H_PAGES_API_URL}/${id}`)\r\n\r\n// M_Items\r\nexport const Items_Group_Get_API = () => get(url.ITEMS_GROUP_API)//get api\r\nexport const Items_Master_Get_API = () => get(url.Items_MASTER_API)//get api\r\nexport const Items_Master_Post_API = (data) => post(url.Items_MASTER_API, data)// post api\r\nexport const Items_Master_Delete_API = (id) => del(`${url.Items_MASTER_API}/${id}`)// delete api\r\nexport const Items_Master_Edit_API = (id) => get(`${url.Items_MASTER_API}/${id}`)// edit api\r\nexport const Items_Master_Update_API = (data, id) => put(`${url.Items_MASTER_API}/${id}`, data)// update api\r\n\r\nexport const BaseUnit_Get_DropDown_API = () => get(url.BASEUNIT_DROPDOWN_API)// BaseUnit DropDown api\r\nexport const CategoryType_Get_DropDown_API = () => get(url.CATEGORY_TYPES_API)// CategoryType DropDown api\r\nexport const ImageType_Get_DropDown_API = () => get(url.IMAGETYPE_DROPDOWN_API)// ImageType DropDown api\r\nexport const MRPType_Get_DropDown_API = () => get(url.MRP_TYPE_DROPDOWN_API)// MRP Type DropDown api\r\nexport const Division_Get_DropDown_API = (id) => get(`${url.DIVISION_DROPDOWN_API}/${id}`)// Division DropDown api\r\nexport const Party_Get_DropDown_API = (id) => get(`${url.DIVISION_DROPDOWN_API}/${id}`)// Division DropDown api\r\nexport const PriceList_Get_DropDown_API = () => get(url.PRICE_LIST)// PriceList DropDown api\r\nexport const Category_By_CategoryTypes_DropDown_API = (id) => get(`${url.CATEGORY_DROPDOWN_API}/${id}`)//  GetCategoryByCategoryTypeID DropDown API\r\nexport const SubCategory_By_CategoryTypes_DropDown_API = (id) => get(`${url.SUBCATEGORY_DROPDOWN_API}/${id}`)//  GetSubCategoryByCategoryID DropDown API\r\nexport const Group_By_GroupTypes_DropDown_API = (id) => get(`${url.GET_GROUP_BY_GROUPTYPES_ID}/${id}`)//  GetGroupByGroupTypeID DropDown API\r\nexport const SubGroup_By_Group_DropDown_API = (id) => get(`${url.GET_SUBGROUP_BY_GROUP_ID}/${id}`)// GetSubGroupByGroupID DropDown API\r\n\r\n// Party Master\r\nexport const Party_Master_Get_API = () => get(url.PARTY_MASTER_API)//get api\r\nexport const Party_Master_Post_API = (data) => post(url.PARTY_MASTER_API, data)// post api\r\nexport const Party_Master_Delete_API = (id) => del(`${url.PARTY_MASTER_API}/${id}`)// delete api\r\nexport const Party_Master_Edit_API = (id) => get(`${url.PARTY_MASTER_API}/${id}`)// edit api\r\nexport const Party_Master_Update_API = (data, id) => put(`${url.PARTY_MASTER_API}/${id}`, data)// update api\r\nexport const GetDistrictOnState_For_Dropdown = (id) => get(`${url.GetDistrictOnState}/${id}`)//  GetDistrictOnState DropDown API\r\nexport const GetPriceList_For_Dropdown = () => get(url.PRICELIST)//  get priceList\r\nexport const GetAddressTypes_For_Dropdown = () => get(url.ADDRESSTYPES)//  get addresstypes\r\nexport const GetPartyTypes_For_Dropdown = () => get(url.PARTYTYPES)//  get partytypes\r\nexport const GetCompany_For_Dropdown = () => get(url.COMPANY)//  get company\r\nexport const GetPartyTypeByDivisionTypeID_For_Dropdown = (id) => get(`${url.GET_PARTYTYPE_BY_DIVISIONTYPES_ID}/${id}`)//  GetDistrictOnState DropDown API\r\nexport const GetCompanyByDivisionTypeID_For_Dropdown = (id) => get(`${url.GET_COMPANY_BY_DIVISIONTYPES_ID}/${id}`)//  GetCompanyByDivisionTypeID DropDown API\r\n\r\n//RoleAccess\r\n\r\nexport const PageDropdownForRoleAccessList_Api = (id1, id2) => get(`${url.PAGE_DROPDOWN_FOR_ROLE_ACCESS_ADD_PAGE}/${id1}/${id2}`)//get api Pages\r\nexport const GetRoleListForRoleAccessList_Page_Api = (id1, id2) => get(`${url.GET_ROLE_ACCESS_LIST_FOR_ROLE_ACCESS_PAGE}/${id1}/${id2}`) //get api role List \r\nexport const GO_Button_HandlerForRoleAccessList_Api = (id1, id2) => get(`${url.GO_BUTTON_HANDLER_FOR_ROLE_ACCESS_PAGE}/${id1}/${id2}`) //get api role List \r\nexport const AddPageHandlerForRoleAccessList_Api = (id1) => get(`${url.ADD_PAGE_BUTTON_HANDLER_FOR_ROLE_ACCESS_PAGE}/${id1}`) //get api role List \r\nexport const PostMethod_HandlerForRoleAccessList_Api = (data) => post(url.ROLE_ACCESS, data) //post api role Access List \r\nexport const Get_RoleAccess_List_Page_Api = () => get(url.GET_ROLEACCESS_LIST_PAGE_API)//get RoleAccess List Page API\r\nexport const Post_CopyRoleAccess_for_RoleAccess_Api = (data) => post(url.POST_COPY_ROLE_ACCESS_API, data)//POST COPY  RoleAccess API\r\n\r\n// Employee Type API\r\nexport const Employee_Type_API = (data) => post(url.EMPLOYEE_TYPE_API, data)// post api\r\nexport const get_EmployeeType_List_Api = () => get(url.EMPLOYEE_TYPE_API) // get api\r\nexport const detelet_EmployeeType_List_Api = (id) => del(`${url.EMPLOYEE_TYPE_API}/${id}`) // delete api\r\nexport const edit_EmployeeType_List_Api = (id) => get(`${url.EMPLOYEE_TYPE_API}/${id}`) // edit api\r\nexport const update_EmployeeType_List_Api = (data, id) => put(`${url.EMPLOYEE_TYPE_API}/${id}`, data)// update \r\n\r\n// Party Type API\r\nexport const Post_Party_Type_API = (data) => post(url.PARTYTYPES_API, data)// post api\r\nexport const get_PartyType_List_Api = () => get(url.PARTYTYPES_API) // get api\r\nexport const detelet_PartyType_List_Api = (id) => del(`${url.PARTYTYPES_API}/${id}`) // delete api\r\nexport const edit_PartyType_List_Api = (id) => get(`${url.PARTYTYPES_API}/${id}`) // edit api\r\nexport const update_PartyType_List_Api = (data, id) => put(`${url.PARTYTYPES_API}/${id}`, data)// update \r\n\r\n// Division Types API\r\nexport const Post_Division_Type_API = (data) => post(url.DIVISION_TYPES_API, data)// post api\r\nexport const get_DivisionType_List_Api = () => get(url.DIVISION_TYPES_API) // get api\r\nexport const detelet_DivisionType_List_Api = (id) => del(`${url.DIVISION_TYPES_API}/${id}`) // delete api\r\nexport const edit_DivisionType_List_Api = (id) => get(`${url.DIVISION_TYPES_API}/${id}`) // edit api\r\nexport const update_DivisionType_List_Api = (data, id) => put(`${url.DIVISION_TYPES_API}/${id}`, data)// update \r\n\r\n// Cateogory Types API\r\nexport const Post_Category_Type_Master_API = (data) => post(url.CATEGORY_TYPES_API, data)// post api\r\nexport const get_CategoryType_List_Api = () => get(url.CATEGORY_TYPES_API) // get api\r\nexport const detelet_CategoryType_List_Api = (id) => del(`${url.CATEGORY_TYPES_API}/${id}`) // delete api\r\nexport const edit_CategoryType_List_Api = (id) => get(`${url.CATEGORY_TYPES_API}/${id}`) // edit api\r\nexport const update_CategoryType_List_Api = (data, id) => put(`${url.CATEGORY_TYPES_API}/${id}`, data)// update\r\n\r\n//Category API\r\nexport const Post_Category_API = (data) => post(url.CATEGORY_API, data)// post api\r\n// export const get_Category_Master_API = () => get(url. CATEGORY_TYPES_API)// Product Category DropDown Api api\r\nexport const get_Category_List_Api = () => get(url.CATEGORY_API) // get api\r\nexport const detelet_Category_List_Api = (id) => del(`${url.CATEGORY_API}/${id}`) // delete api\r\nexport const edit_Category_List_Api = (id) => get(`${url.CATEGORY_API}/${id}`) // edit api\r\nexport const update_Category_List_Api = (data, id) => put(`${url.CATEGORY_API}/${id}`, data)// update\r\n\r\n//Sub-Category API\r\nexport const Post_SubCategory_API = (data) => post(url.SUB_CATEGORY_API, data)// post api\r\nexport const get_SubCategory_API = () => get(url.CATEGORY_API)// Product Category DropDown Api api\r\nexport const get_SubCategory_List_Api = () => get(url.SUB_CATEGORY_API) // get api\r\nexport const detelet_SubCategory_List_Api = (id) => del(`${url.SUB_CATEGORY_API}/${id}`) // delete api\r\nexport const edit_SubCategory_List_Api = (id) => get(`${url.SUB_CATEGORY_API}/${id}`) // edit api\r\nexport const update_SubCategory_List_Api = (data, id) => put(`${url.SUB_CATEGORY_API}/${id}`, data)// update\r\n\r\n//Vehicle API\r\nexport const Post_Vehicle_API = (data) => post(url.VEHICLE_API, data)// post api\r\nexport const get_Vehicle_API = () => get(url.VEHICLE_API)//  get Api \r\nexport const get_VehicleTypes_API = () => get(url.VEHICLETYPES_DROPDOWN)//dropDown\r\nexport const get_DriverListAPI = () => get(url.DRIVERLIST_DROPDOWN)//dropDown\r\nexport const detelet_VehicleType_List_Api = (id) => del(`${url.VEHICLE_API}/${id}`) // delete api\r\nexport const edit_VehicleType_List_Api = (id) => get(`${url.VEHICLE_API}/${id}`) // edit api\r\nexport const update_VehicleType_List_Api = (data, id) => put(`${url.VEHICLE_API}/${id}`, data)// update\r\n\r\n\r\n//CompanyGroup API\r\nexport const Post_CompanyGroup_API = (data) => post(url.COMPANYGROUP_API, data)// post api\r\nexport const get_CompanyGroupList_API = () => get(url.COMPANYGROUP_API)//  get Api \r\nexport const detelet_CompanyGroupType_List_Api = (id) => del(`${url.COMPANYGROUP_API}/${id}`) // delete api\r\nexport const edit_CompanyGroupType_List_Api = (id) => get(`${url.COMPANYGROUP_API}/${id}`) // edit api\r\nexport const update_CompanyGroupType_List_Api = (data, id) => put(`${url.COMPANYGROUP_API}/${id}`, data)// update\r\n\r\n//Driver api\r\nexport const Post_Driver_API = (data) => post(url.DRIVER_API, data)// post api\r\nexport const get_DriverList_API = () => get(url.DRIVER_API)//  get Api \r\nexport const detelet_DriverType_List_Api = (id) => del(`${url.DRIVER_API}/${id}`) // delete api\r\nexport const edit_DriverType_List_Api = (id) => get(`${url.DRIVER_API}/${id}`) // edit api\r\nexport const update_DriverType_List_Api = (data, id) => put(`${url.DRIVER_API}/${id}`, data)// update\r\n\r\n//PriceList api\r\nexport const Post_PriceList_API = (data) => post(url.PRICE_LIST, data)// post api\r\nexport const get_PriceListByPartyType_API = (partyType) => get(`${url.PRICE_LIST}/${partyType}`)// post api\r\nexport const GetPriceList_For_Listpage = () => get(url.PRICELIST)//  get priceList\r\nexport const delete_PriceList_API = (id) => del(`${url.PRICE_LIST}/${id}`)// delete api\r\nexport const edit_PriceList = (id) => get(`${url.PRICE_LIST}/${id}`) // edit api\r\nexport const update_PriceList = (data, id) => put(`${url.PRICE_LIST}/${id}`, data)// update\r\n\r\n// MRP Master \r\nexport const Post_MRPMaster_API = (data) => post(url.MRP_MASTER_LIST, data)// post api\r\nexport const GetMRPList_For_Listpage = () => get(url.MRP_MASTER_LIST)// getapi\r\nexport const update_MRPList = (data, id) => put(`${url.MRP_MASTER_LIST}/${id}`, data)// update_MRPList\r\nexport const edit_MRPList = (id) => get(`${url.MRP_MASTER_LIST}/${id}`)// edit api\r\nexport const delete_MRPList_API = (CommonID) => del(`${url.DELETE_API_FOR_MRP_LIST_PAGE}/${CommonID}`)// delete api\r\nexport const GoButton_Post_API = (data) => post(url.GO_BUTTON_POST_API_FOR_MRP_MASTER, data)// go button postapi\r\nexport const MRP_MasterPage_delete_API = (id) => del(`${url.MRP_MASTER_LIST}/${id}`)// delete api MRP Master Page\r\n\r\n// Margin Master\r\nexport const Post_MarginMaster_API = (data) => post(url.MARGIN_MASTER_LIST, data)// post api\r\nexport const GetMarginList_For_Listpage = () => get(url.MARGIN_MASTER_LIST)//  get List\r\nexport const delete_MarginList_API = (CommonID) => del(`${url.DELETE_API_FOR_LIST_MARGIN_PAGE}/${CommonID}`)// post api\r\nexport const edit_MarginList = (id) => get(`${url.MARGIN_MASTER_LIST}/${id}`) // edit api\r\nexport const update_MarginList = (data, id) => put(`${url.MARGIN_MASTER_LIST}/${id}`, data)// update\r\nexport const GoButton_Post_API_For_MarginMaster = (data) => post(url.GO_BUTTON_POST_API_FOR_MARGIN_MASTER, data)// go button postapi\r\nexport const Margin_MasterPage_delete_API = (id) => del(`${url.MARGIN_MASTER_LIST}/${id}`)// delete api Margin Master Page\r\n\r\n// GroupTypes API\r\nexport const GroupTypes_API = () => get(url.GROUP_TYPE_API)\r\nexport const GroupTypes_Post_API = (data) => post(url.GROUP_TYPE_API, data)// post api\r\nexport const GroupTypes_Delete_API = (id) => del(`${url.GROUP_TYPE_API}/${id}`)// delete api\r\nexport const GroupTypes_Edit_API = (id) => get(`${url.GROUP_TYPE_API}/${id}`)// edit api\r\nexport const GroupTypes_Update_API = (data, id) => put(`${url.GROUP_TYPE_API}/${id}`, data)// update api\r\n\r\n// GroupMaster\r\n\r\nexport const get_Group_List_Api = () => get(url.GROUP_API)// get api\r\nexport const Post_GroupList_API = (data) => post(url.GROUP_API, data)// post api\r\nexport const del_Group_List_API = (id) => del(`${url.GROUP_API}/${id}`)// delete api\r\nexport const edit_Group_List_Api = (id) => get(`${url. GROUP_API}/${id}`)// edit api\r\nexport const update_Group_List_Api = (data,id) => put(`${url.GROUP_API}/${id}`,data)// update api\r\n\r\n\r\n\r\n// TermsAndCondtions API\r\nexport const Post_TermsAndCondtions_Master_API = (data) => post(url.TERMSANDCONDITIONS_API, data)// post api\r\n\r\nexport const get_TermsAndCondtionsList_API = (data) => get(url.TERMSANDCONDITIONS_API)// get api\r\n\r\n// GST API\r\nexport const Post_GSTMaster_API = (data) => post(url.GST_LIST_API, data)// post api\r\nexport const GetGSTList_For_Listpage = () => get(url.GST_LIST_API)//  get List\r\nexport const delete_GSTList_API = (CommonID) => del(`${url.DELETE_API_FOR_LIST_GST_PAGE}/${CommonID}`)// Delete api\r\nexport const GoButton_Post_API_For_GSTMaster = (data) => post(url.GO_BUTTON_POST_API_FOR_GST_MASTER, data)// go button postapi\r\nexport const GST_MasterPage_delete_API = (id) => del(`${url.GST_LIST_API}/${id}`)// delete api\r\n\r\n\r\n// PartySubParty API\r\nexport const PartySubParty_Get_API = () => get(`${url.PARTY_SUB_PARTY}`)// get list api\r\nexport const PartySubParty_Post_API = (data) => post(url.PARTY_SUB_PARTY, data)// post api\r\nexport const PartySubParty_Delete_API = (id) => del(`${url.PARTY_SUB_PARTY}/${id}`)// delete api\r\nexport const PartySubParty_Edit_API = (id) => get(`${url.PARTY_SUB_PARTY}/${id}`)// edit api\r\nexport const PartySubParty_Update_API = (data, id) => put(`${url.PARTY_SUB_PARTY}/${id}`, data)// update api\r\n\r\n//PartyItems API\r\n\r\nexport const GoButton_API = (data) => post(url.PARTYITEMS,data)//get api\r\n\r\nexport const Party_Items = (data) => post(url.PARTYITEMS, data)// post api\r\nexport const get_Party_Item_List = (party_id) => get(`${url.PARTYITEMS}/${party_id}`)//get api\r\n\r\n//suppiler \r\nexport const GetSupplier_API = (perty_id) => get(`${url.SUPPLIER}/${perty_id}`)//get api\r\n\r\nexport {  \r\n  getLoggedInUser,\r\n  isUserAuthenticated,\r\n  postFakeRegister,\r\n  postFakeLogin,\r\n  postFakeProfile,\r\n  postFakeForgetPwd,\r\n  postJwtRegister,\r\n  postJwtProfile,\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GroupRedux\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Utilites\\CustomAlertRedux\\actions.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\ItemsRedux\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\TermsAndCondtionsRedux\\actionTypes.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\DriverRedux\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Utilites\\Breadcrumb\\actions.js",[],"D:\\GitProjects\\Manthan\\src\\components\\Common\\CmponentRelatedCommonFile\\listPageCommonButtons.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Purchase\\OrderPageRedux\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GroupRedux\\action.js",[],"D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PartyPages\\Tree.js",["1686","1687","1688","1689","1690","1691","1692","1693","1694","1695","1696","1697","1698","1699","1700"],"import React, { useEffect, useState } from 'react'\r\nimport { Card, CardBody, CardHeader, Col, Dropdown, DropdownItem, DropdownMenu, DropdownToggle, Input, Label, Modal, Row, UncontrolledDropdown } from 'reactstrap';\r\nimport './Tree.scss'\r\n\r\n\r\n\r\nexport default function Tree(props) {\r\n    // const data = props.data\r\n    const TreeNode = (node) => {\r\n        \r\n        // const node = props.node\r\n        // const [childVisible, setchildVisible] = useState(false);\r\n        // const haschild = node.children ? true : false;\r\n\r\n        return (\r\n            <li >\r\n                <div\r\n                    //  className='d-flex'\r\n                    // className=\"mt-1\"\r\n                    className=\"classmt\"\r\n\r\n\r\n                //  onClick={e => {\r\n                //     // setTreeValue(node.Name)\r\n                //     setchildVisible(v => !v)}}\r\n                >\r\n                    {/* {haschild && (\r\n                        <div className={`d-inline d-tree-toggler ${childVisible ? \"active\" : ''}`}>\r\n                            <i class=\" fa-edit me-2\"></i>\r\n                        </div>\r\n                    )} */}\r\n                    <div >\r\n                        {/* <i className={`mr-1${\"fa fa-file\"}`}/> */}\r\n\r\n                    </div>\r\n                    {/* <DropdownItem\r\n                        key={node.value}\r\n                        onClick={(e) => { props.func1(node) }\r\n                        }\r\n                    > */}\r\n                     <span className=\"align-middle text-black list-group-ite  form-control\" \r\n                     \r\n                 /* <span className=\"treeclass\"  */\r\n\r\n                        onClick={(e) => {\r\n                            props.func1(node);\r\n                            props.func2(false)\r\n                        }\r\n                        }>{node.label}</span>\r\n                    {/* </DropdownItem> */}\r\n                </div>\r\n                {/* {\r\n                    haschild && childVisible && \r\n    \r\n                } */}\r\n                <div >\r\n                    <ul >\r\n                        {/* <Tree data={node.children} func1={props.func1} /> */}\r\n                        {tree(node.children)}\r\n                    </ul>\r\n                </div>\r\n            </li>\r\n        )\r\n\r\n    }\r\n\r\n    const tree = (tree1) => {\r\n        \r\n        return (\r\n            <ul className='list-group'>\r\n                {tree1.map((tree) => (\r\n                    // <TreeNode node={tree} func1={props.func1} />\r\n                    TreeNode(tree)\r\n                ))}\r\n\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    \r\n    return (\r\n        <><ul className='treestructure'>\r\n            {tree(props.data)}\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Declare a new state variable, which we'll call \"menu\"\r\n\r\n// export default function TreeInput({ data = [] }) {\r\n\r\n//     const [menu, setMenu] = useState(false);\r\n//     const [dropOpen, setDropOpen] = useState(false);\r\n//     const [currentPrice, setCurrentPrice] = useState({ Name: '' });\r\n\r\n//     const dropOpen_ONClickHandler = price => {\r\n//         setCurrentPrice(price)\r\n//         setDropOpen(true)\r\n//     }\r\n//     const delete_PriceList = price => {\r\n\r\n//     }\r\n//     function sub_Price_Add_Handler() {\r\n//         var price = document.getElementById(\"txtsubprice\")\r\n//         if (price.value === \"\") {\r\n//             alert(\"please enter value\")\r\n//         } else {\r\n\r\n//         }\r\n//     }\r\n//     const toggle = () => {\r\n//         setMenu('');\r\n//     }\r\n\r\n//     function fun1(data1) {\r\n//         return (\r\n//             <div>\r\n//                 {\r\n//                     data1.map(tree => fun2(tree))\r\n//                 }\r\n//             </div>\r\n//         )\r\n//     }\r\n\r\n//     function fun2(data2) {\r\n//         // debugger\r\n//         return (\r\n//             // <li >\r\n//             <div style={{ paddingLeft: \"20px\" }} className={\"\"} >\r\n//                 <div className='row justify-content-center mt-n4 '>\r\n//                     <div className=' col-10'>\r\n//                         <Input type=\"text\" defaultValue={data2.Name} ></Input>\r\n\r\n//                     </div>\r\n//                     <div className=' col-1 al-end'> <input type=\"checkBox\" ></input></div>\r\n//                     <div className=' col-1 '>\r\n//                         <i className=\"mdi mdi-pencil font-size-12\"\r\n//                             onClick={e => setMenu(data2.id)}\r\n//                         ></i>\r\n//                         <Dropdown isOpen={menu === data2.id} toggle={toggle} className=\"d-inline-block\">\r\n//                             <DropdownToggle className=\"btn header-item \" tag=\"button\">\r\n\r\n//                             </DropdownToggle>\r\n//                             <DropdownMenu className=\"language-switch dropdown-menu-end\">\r\n\r\n//                                 <DropdownItem\r\n//                                     key={data2.id}\r\n//                                     onClick={(e) => { dropOpen_ONClickHandler(data2) }}\r\n//                                 // // className={`notify-item ${selectedLang === key ? \"active\" : \"none\"\r\n//                                 //     }`}\r\n//                                 >\r\n//                                     <span className=\"align-middle text-black\"\r\n//                                     >\r\n//                                         {\"Add Sub-Rate\"}\r\n//                                     </span>\r\n//                                 </DropdownItem>\r\n\r\n//                                 <DropdownItem\r\n//                                     key={data2.id}\r\n//                                     onClick={() => delete_PriceList(data2.id)}\r\n//                                 // // className={`notify-item ${selectedLang === key ? \"active\" : \"none\"\r\n//                                 //     }`}\r\n//                                 >\r\n//                                     <span className=\"align-middle text-danger\">\r\n//                                         {\"Delete\"}\r\n//                                     </span>\r\n//                                 </DropdownItem>\r\n\r\n//                             </DropdownMenu>\r\n\r\n//                         </Dropdown>\r\n//                     </div>\r\n\r\n//                     {data2.childern ? fun1(data2.childern) : null}\r\n//                 </div>\r\n//             </div>\r\n\r\n//         )\r\n\r\n//     }\r\n\r\n\r\n\r\n//     return (\r\n\r\n//         <div className={\"mt-3\"}>\r\n//             <Modal\r\n//                 isOpen={dropOpen}\r\n//                 toggle={() => { setDropOpen(!dropOpen) }}\r\n//                 size=\"sm\"\r\n//                 centered={true}\r\n//                 backdrop={'static'}\r\n//             >\r\n//                 <div className=\"modal-header\">\r\n//                     <h5 className=\"modal-title mt-0\">Add sub-Price </h5>\r\n//                     <button\r\n//                         type=\"button\"\r\n//                         onClick={() => {\r\n//                             setDropOpen(!dropOpen)\r\n//                         }}\r\n//                         className=\"close\"\r\n//                         data-dismiss=\"modal\"\r\n//                         aria-label=\"Close\"\r\n//                     >\r\n//                         <span aria-hidden=\"true\">&times;</span>\r\n//                     </button>\r\n//                 </div>\r\n//                 <div className=\"modal-body\">\r\n//                     <Row className=\"justify-content-md-left\">\r\n\r\n//                         <span >{currentPrice.Name}</span>\r\n\r\n//                         <Label htmlFor=\"horizontal-firstname-input\" className=\"col-4 col-form-label\" >IsDivision </Label>\r\n//                         <Col style={{ marginTop: '9px' }} >\r\n//                             <Input type=\"text\" id='txtsubprice' />\r\n//                         </Col>\r\n//                     </Row>\r\n//                 </div>\r\n//                 <div className=\"modal-footer\">\r\n//                     <button type=\"button\" className=\"btn btn-light\" onClick={() => {\r\n//                         setDropOpen(!dropOpen)\r\n//                     }}>Close</button>\r\n//                     <button type=\"button\" className=\"btn btn-primary\" onClick={() => { sub_Price_Add_Handler() }} >Add</button>\r\n//                 </div>\r\n\r\n//             </Modal>\r\n//             {fun1(data)}\r\n\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\CommonError\\actions.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GroupTypeRedux\\action.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\MarginMasterRedux\\action.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\MRPMasterRedux\\action.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyRedux\\action.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PriceList\\action.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CategoryRedux\\action.js",["1701","1702"],"\r\nimport {\r\n  GET_METHOD_HANDLER_FOR_CATEGORY,\r\n  GET_METHOD_HANDLER_FOR_CATEGORY_SUCCESS,\r\n  POST_METHOD_HANDLER_FOR_CATEGORY_API,\r\n  POST_METHOD_HANDLER_FOR_CATEGORY_API_SUCCESS,\r\n  DELETE_CATEGORY_ID,\r\n  DELETE_CATEGORY_ID_SUCCESS,\r\n  EDIT_CATEGORY_ID,\r\n  EDIT_CATEGORY_ID_SUCCESS,\r\n  GET_CATEGORY_LIST,\r\n  GET_CATEGORY_LIST_SUCCESS,\r\n  UPDATE_CATEGORY_ID,\r\n  UPDATE_CATEGORY_ID_SUCCESS,\r\n  \r\n} from \"./actionTypes\";\r\n\r\nexport const PostMethodForCategory = (data) => ({\r\n  type: POST_METHOD_HANDLER_FOR_CATEGORY_API,\r\n  data,\r\n});\r\n\r\nexport const PostMethod_ForCategoryAPISuccess = (data) => ({\r\n  type: POST_METHOD_HANDLER_FOR_CATEGORY_API_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\n/// get Product Category Type list \r\nexport const getCategorylist = () => ({\r\n  type: GET_CATEGORY_LIST,\r\n});\r\n\r\nexport const getCategorylistSuccess = (pages) => ({\r\n  type: GET_CATEGORY_LIST_SUCCESS,\r\n  payload: pages,\r\n});\r\n\r\n////delete api\r\nexport const delete_Category_ID = (id) => ({\r\n  type: DELETE_CATEGORY_ID,\r\n  id,\r\n\r\n});\r\nexport const deleteCategoryIDSuccess = (deleteMessage) => ({\r\n  type: DELETE_CATEGORY_ID_SUCCESS,\r\n  payload: deleteMessage\r\n}); \r\n\r\n// edit api\r\n\r\nexport const editCategoryID = (id,pageMode) => ({\r\n  type: EDIT_CATEGORY_ID,\r\n  id,pageMode\r\n})\r\n\r\nexport const editCategoryIDSuccess = (editData) => ({\r\n  type: EDIT_CATEGORY_ID_SUCCESS,\r\n  payload: editData,\r\n})\r\n// update api\r\nexport const updateCategoryID = (updateData, ID) => ({\r\n  type: UPDATE_CATEGORY_ID,\r\n  updateData, ID,\r\n})\r\nexport const updateCategoryIDSuccess = (updateMessage) => ({\r\n  type: UPDATE_CATEGORY_ID_SUCCESS,\r\n  payload: updateMessage,\r\n})\r\n\r\n","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CompanyGroupRedux\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CompanyGroupRedux\\action.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\VehicleRedux\\action.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\SubCategoryRedux\\action.js",["1703"],"\r\nimport SubCategoryMaster from \"../../../pages/Adminisrator/SubCategoryPages/SubCategoryMaster\";\r\nimport {\r\n    GET_METHOD_HANDLER_FOR_SUBCATEGORY_API,\r\n    GET_METHOD_HANDLER_FOR_SUBCATEGORY_API_SUCCESS,\r\n    POST_METHOD_HANDLER_FOR_SUBCATEGORY_API,\r\n    POST_METHOD_HANDLER_FOR_SUBCATEGORY_API_SUCCESS,\r\n    DELETE_SUBCATEGORY_ID,\r\n    DELETE_SUBCATEGORY_ID_SUCCESS,\r\n    EDIT_SUBCATEGORY_ID,\r\n    EDIT_SUBCATEGORY_ID_SUCCESS,\r\n    GET_SUBCATEGORY_LIST,\r\n    GET_SUBCATEGORY_LIST_SUCCESS,\r\n    UPDATE_SUBCATEGORY_ID,\r\n    UPDATE_SUBCATEGORY_ID_SUCCESS\r\n  } from \"./actionTypes\";\r\n  \r\n  export const PostMethodForSubCategory = (data) => ({\r\n    type: POST_METHOD_HANDLER_FOR_SUBCATEGORY_API,\r\n    data,\r\n  });\r\n \r\n  export const PostMethod_ForSubCategoryAPISuccess = (data) => ({\r\n    type: POST_METHOD_HANDLER_FOR_SUBCATEGORY_API_SUCCESS,\r\n    payload: data,\r\n  });\r\n  \r\n  export const getMethodForSubCategory = () => ({\r\n    type: GET_METHOD_HANDLER_FOR_SUBCATEGORY_API,\r\n    \r\n  });\r\n  \r\n  export const getMethod_ForSubCategoryAPISuccess = (SubCategoryMaster) => ({\r\n    type: GET_METHOD_HANDLER_FOR_SUBCATEGORY_API_SUCCESS,\r\n    payload: SubCategoryMaster,\r\n  });\r\n  \r\n  /// get SubCategory list \r\n  export const getSubCategorylist = () => ({\r\n    type: GET_SUBCATEGORY_LIST,\r\n  });\r\n  \r\n  export const getSubCategorylistSuccess = (pages) => ({\r\n    type: GET_SUBCATEGORY_LIST_SUCCESS,\r\n    payload: pages,\r\n  });\r\n  \r\n  ////delete api\r\n  export const delete_SubCategory_ID = (id) => ({\r\n    type: DELETE_SUBCATEGORY_ID,\r\n    id,\r\n  \r\n  });\r\n  export const deleteSubCategoryIDSuccess = (deleteMessage) => ({\r\n    type: DELETE_SUBCATEGORY_ID_SUCCESS,\r\n    payload: deleteMessage\r\n  }); \r\n  \r\n  // edit api\r\n  \r\n  export const editSubCategoryID = (id,pageMode) => ({\r\n    type: EDIT_SUBCATEGORY_ID,\r\n    id,pageMode\r\n  })\r\n  \r\n  export const editSubCategoryIDSuccess = (editData) => ({\r\n    type: EDIT_SUBCATEGORY_ID_SUCCESS,\r\n    payload: editData,\r\n  })\r\n  // update api\r\n  export const updateSubCategoryID = (updateData, ID) => ({\r\n    type: UPDATE_SUBCATEGORY_ID,\r\n    updateData, ID,\r\n  })\r\n  export const updateSubCategoryIDSuccess = (updateMessage) => ({\r\n    type: UPDATE_SUBCATEGORY_ID_SUCCESS,\r\n    payload: updateMessage,\r\n  })\r\n\r\n\r\n\r\n  \r\n\r\n  ","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\M_EmployeeRedux\\action.js",["1704","1705"],"import {\r\n    GET_DESIGNATIONID , GET_DESIGNATIONID_SUCCESS,\r\n    GET_EMPLOYEETYPE, GET_EMPLOYEETYPE_SUCCESS,\r\n    GET_STATE, GET_STATE_SUCCESS,\r\n    POST_EMPLOYEE_SUCCESS, POST_EMPLOYEE,\r\n    GET_EMPLOYEE_LIST,GET_EMPLOYEE_LIST_SUCCESS,\r\n    DELETE_EMPLOYEE_ID, DELETE_EMPLOYEE_ID_SUCCESS,\r\n    EDIT_EMPLOYEE_ID, EDIT_EMPLOYEE_ID_SUCCESS,\r\n    UPDATE_EMPLOYEE_ID, UPDATE_EMPLOYEE_ID_SUCCESS,GET_COMPANYNAME_BY_EMPLOYEETYPES_ID, GET_COMPANYNAME_BY_EMPLOYEETYPES_ID_SUCCESS, GET_PARTYNAME_BY_DIVISIONTYPES_ID, GET_PARTYNAME_BY_DIVISIONTYPES_ID_SUCCESS\r\n} from \"./actionTypes\"\r\n\r\n\r\n///DesignationID  dropdown\r\nexport const getDesignationID = () => ({\r\n    type: GET_DESIGNATIONID,\r\n   \r\n  });\r\n  export const getDesignationIDSuccess = (DesignationID) => ({\r\n    type: GET_DESIGNATIONID_SUCCESS,\r\n    payload:DesignationID,\r\n  });\r\n\r\n  ///EmployeeType  dropdown\r\nexport const getEmployeeType = () => ({\r\n    type: GET_EMPLOYEETYPE,\r\n   \r\n  });\r\n  export const getEmployeeTypeESuccess = (EmployeeType) => ({\r\n    type: GET_EMPLOYEETYPE_SUCCESS,\r\n    payload:EmployeeType,\r\n  });\r\n\r\n   ///State  dropdown\r\nexport const getState = () => ({\r\n    type: GET_STATE,\r\n   \r\n  });\r\n  export const getStateESuccess = (State) => ({\r\n    type: GET_STATE_SUCCESS,\r\n    payload:State,\r\n  });\r\n\r\n\r\n  ///post api\r\n  export const postEmployee = (Data,id) => ({\r\n    type: POST_EMPLOYEE,\r\n    Data,id\r\n  });\r\n  \r\n  export const PostEmployeeSuccess = (AddUserMessage) => ({\r\n    type: POST_EMPLOYEE_SUCCESS,\r\n    payload: AddUserMessage,\r\n  });\r\n  \r\n/// get Empoyee list \r\n  export const getEmployeelist = () => ({\r\n    type: GET_EMPLOYEE_LIST,\r\n});\r\n\r\nexport const getEmployeelistSuccess = (pages) => ({\r\n    type: GET_EMPLOYEE_LIST_SUCCESS,\r\n    payload:pages,\r\n});\r\n\r\n////delete api\r\nexport const delete_Employee_ID = (id) => ({\r\n    type: DELETE_EMPLOYEE_ID,\r\n    id ,\r\n    \r\n  } );\r\n  export const deleteEmployeeIDSuccess = (deleteMessage) => ({\r\n    type: DELETE_EMPLOYEE_ID_SUCCESS,\r\n    payload:deleteMessage\r\n  });\r\n  \r\n  // edit api\r\n  export const editEmployeeeId =(id,pageMode)=>({\r\n    type:EDIT_EMPLOYEE_ID,\r\n  id,pageMode\r\n  })\r\n  export const editEmployeeSuccess =(editData)=>({\r\n    type:EDIT_EMPLOYEE_ID_SUCCESS,\r\n   payload:editData,\r\n  })\r\n\r\n  // update api\r\n  export const updateEmployeeID=(updateData,ID)=>({\r\n    type:UPDATE_EMPLOYEE_ID,\r\n    updateData,ID,\r\n  })\r\n  export const updateEmployeeIDSuccess =(updateMessage)=>({\r\n    type:UPDATE_EMPLOYEE_ID_SUCCESS,\r\n   payload:updateMessage,\r\n  })\r\n\r\n\r\n// Company Name API dependent on Employee Types api\r\nexport const Get_CompanyName_By_EmployeeTypeID = (id) => ({\r\n  type: GET_COMPANYNAME_BY_EMPLOYEETYPES_ID,\r\n  id,\r\n \r\n});\r\nexport const Get_CompanyName_By_EmployeeTypeID_Success = (data) => ({\r\n  type: GET_COMPANYNAME_BY_EMPLOYEETYPES_ID_SUCCESS,\r\n  payload:data,\r\n});\r\n\r\n ","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CategoryTypeRedux\\actions.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyTypeRedux\\action.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\EmployeeTypeRedux\\action.js",[],"D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\MarginTab\\index.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CompanyRedux\\actions.js",[],"D:\\GitProjects\\Manthan\\src\\helpers\\api_helper.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Utilites\\CustomAlertRedux\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Utilites\\Breadcrumb\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Division_Tab\\index.js",["1706"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    Col,\r\n    FormGroup,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    get_Division_ForDropDown,\r\n} from \"../../../../../store/Administrator/ItemsRedux/action\";\r\nimport { AlertState } from \"../../../../../store/actions\";\r\nimport DivisionTable from \"./Table\";\r\n\r\nfunction DivisionTab(props) {\r\n    const dispatch = useDispatch();\r\n    const [divisionDropdownSelect, setDivisionDropdownSelect] = useState(\"\");\r\n\r\n    const { DivisionName } = useSelector((state) => ({\r\n        DivisionName: state.ItemMastersReducer.Division,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        dispatch(get_Division_ForDropDown());\r\n    }, [dispatch]);\r\n\r\n    const Division_DropdownOptions = DivisionName.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name,\r\n    }));\r\n\r\n\r\n    const Division_Handler = (event) => {\r\n        setDivisionDropdownSelect(event);\r\n    };\r\n\r\n    const addRowsHandler = (e) => {\r\n\r\n        const val = {\r\n            Division: divisionDropdownSelect === \"\" ? \"\" : divisionDropdownSelect.value,\r\n            DivisionName: divisionDropdownSelect.label,\r\n        };\r\n\r\n            if (!(divisionDropdownSelect === \"\")) {\r\n                const totalTableData = props.tableData.length;\r\n                val.id = totalTableData + 1;\r\n                const updatedTableData = [...props.tableData];\r\n                updatedTableData.push(val);\r\n                props.func(updatedTableData);\r\n                clearState();\r\n            }\r\n            else {\r\n                alert(\"Please select value\");\r\n            }\r\n        };\r\n    \r\n    const clearState = () => {\r\n        setDivisionDropdownSelect(\"\");\r\n\r\n    };\r\n\r\n    return (\r\n        <Row>\r\n            <Col md={12}>\r\n                <Card className=\"text-black\">\r\n                    <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                        <Row className=\"mt-3\">\r\n\r\n                            <Row>\r\n                                <FormGroup className=\"mb-3 col col-sm-4 \">\r\n                                    <Label>Division</Label>\r\n                                    <Select\r\n                                        id={`dropDivision-${0}`}\r\n                                        value={divisionDropdownSelect}\r\n                                        options={Division_DropdownOptions}\r\n                                        onChange={Division_Handler}\r\n                                    />\r\n                                </FormGroup>\r\n\r\n                                <Col md={1}>\r\n                                    <Row className=\" mt-3\">\r\n                                        <Col >\r\n                                            <Button\r\n                                                className=\"btn btn-sm mt-1 mt-3 btn-light  btn-outline-primary  \"\r\n                                                type=\"button\"\r\n                                                onClick={addRowsHandler}\r\n                                            >\r\n                                                <i className=\"dripicons-plus mt-3\"> </i> Add\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n                <Row>\r\n                    <DivisionTable tableData={props.tableData} func={props.func} />\r\n                </Row>\r\n            </Col>\r\n\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default DivisionTab;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PartyPages\\index.js",["1707","1708","1709","1710","1711","1712"],"import React, { useEffect, useState } from 'react';\r\nimport { Button, Card, CardBody, Col, FormGroup, Input, Label, Row } from 'reactstrap';\r\nimport Flatpickr from \"react-flatpickr\"\r\nimport Select from \"react-select\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getAddressTypes } from '../../../store/Administrator/PartyRedux/action';\r\nimport AddressDetailsTable from './Table';\r\nimport { AvField, AvInput } from 'availity-reactstrap-validation';\r\n\r\nfunction AddressDetails_Tab(props) {\r\n\r\n    const [address, setAddress] = useState('');\r\n    const [FSSAINo, setFSSAINo] = useState('');\r\n    const [FSSAIExipry, setFSSAIExipry] = useState('');\r\n    const [PIN, setPIN] = useState('');\r\n    const [IsDefault, setIsDefault] = useState(false);\r\n\r\n    const FSSAIExipryHandler = (e, date) => {\r\n        setFSSAIExipry(date)\r\n    }\r\n\r\n    const FSSAINoHandler = (event) => {\r\n        setFSSAINo(event.target.value)\r\n    }\r\n\r\n    const AddressHandler = (event) => {\r\n        setAddress(event.target.value)\r\n    }\r\n\r\n    const PINHandler = (event) => {\r\n        setPIN(event.target.value)\r\n    }\r\n\r\n    const IsDefaultHandler = (event) => {\r\n        setIsDefault(event.target.checked)\r\n\r\n    }\r\n\r\n    const addRowsHandler = (data) => {\r\n\r\n        const val = {\r\n            Address: address,\r\n            FSSAINo: FSSAINo,\r\n            FSSAIExipry: FSSAIExipry,\r\n            PIN: PIN,\r\n            IsDefault: IsDefault\r\n        };\r\n\r\n        if (!(address === \"\")\r\n            && !(FSSAINo === \"\")\r\n            && !(FSSAIExipry === \"\")\r\n            && !(PIN === \"\")\r\n            && !(IsDefault === \"\")\r\n        ) {\r\n            if (IsDefault) {\r\n                props.tableData.forEach(ele => {\r\n                    ele.IsDefault = false\r\n                });\r\n            }\r\n            const tableleth = props.tableData.length;\r\n            val.id = tableleth + 1;\r\n            const updatedTableData = [...props.tableData];\r\n            updatedTableData.push(val);\r\n            props.func(updatedTableData)\r\n            clearState();\r\n        }\r\n        else (alert(\"Please Enter value\"))\r\n    }\r\n\r\n    const clearState = () => {\r\n        setAddress('');\r\n        setFSSAIExipry('');\r\n        setFSSAINo('');\r\n        setIsDefault(false);\r\n        setPIN('');\r\n    };\r\n\r\n    return (\r\n        <Row>\r\n            <Col md={12}  >\r\n                <Card className=\"text-black\">\r\n                    <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                        <Row className=\"mt-3\">\r\n                            <Col md=\"9\" >\r\n                                <FormGroup className=\"mb-3\">\r\n                                    <Label htmlFor=\"validationCustom01\">Address </Label>\r\n                                    <AvField name=\"Address\" value={address} type=\"text\"\r\n                                        placeholder=\" Please Enter Address \"\r\n                                        // validate={{\r\n                                        //     required: { value: true, errorMessage: 'Please Enter your Address' },\r\n                                        // }}\r\n                                        onChange={AddressHandler}\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n\r\n\r\n                            <Col md=\"1\" style={{ marginTop: '9px' }}>\r\n                                <Button className=\"btn btn-sm btn-light mt-4   align-items-sm-end\"\r\n                                    type=\"button\"\r\n                                    onClick={addRowsHandler}\r\n                                >\r\n                                    <i className=\"dripicons-plus\"></i>\r\n                                </Button>\r\n                            </Col>\r\n\r\n                        </Row>\r\n                        <Row>\r\n                            {/* <Col md=\"4\"></Col> */}\r\n                            <Col md=\"4\">\r\n                                <FormGroup className=\"mb-3\">\r\n                                    <Label htmlFor=\"validationCustom01\">\r\n                                        FSSAI No </Label>\r\n                                    <AvField\r\n                                        name=\"FSSAINo\"\r\n                                        value={FSSAINo}\r\n                                        placeholder=\"Please Enter FSSAINo\"\r\n                                        type=\"text\"\r\n\r\n                                        errorMessage=\"Please Enter FSSAI Number.\"\r\n                                        className=\"form-control\"\r\n                                        // validate={{\r\n                                        //     required: { value: true },\r\n                                        //     tel: {\r\n                                        //         pattern: /^(?:\\d[- ]*){14}$/,\r\n                                        //         errorMessage: 'FSSAINo Should be Fourteen Digit Only.'\r\n                                        //     }\r\n                                        // }}\r\n                                        onChange={FSSAINoHandler}\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md=\"1\"></Col>\r\n                            <Col md=\"4\">\r\n                                <FormGroup className=\"mb-3\">\r\n                                    <Label htmlFor=\"validationCustom01\">FSSAI Exipry </Label>\r\n                                    <Flatpickr\r\n                                        id=\"FSSAIExipry\"\r\n                                        name=\"FSSAIExipry\"\r\n                                        value={FSSAIExipry}\r\n                                        className=\"form-control d-block p-2 bg-white text-dark\"\r\n                                        placeholder=\" Please Enter FSSAI Exipry\"\r\n                                        options={{\r\n                                            altInput: true,\r\n                                            altFormat: \"F j, Y\",\r\n                                            dateFormat: \"Y-m-d\"\r\n                                        }}\r\n                                        onChange={FSSAIExipryHandler}\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col>\r\n\r\n                            {/* <Col md=\"1\">  </Col> */}\r\n                            <Row className='col col-12'>\r\n                                {/* <Col md=\"4\"> */}\r\n                                <FormGroup className=\"mb-2 col-4\">\r\n                                    <Label htmlFor=\"validationCustom01\"> PIN </Label>\r\n                                    <AvField name=\"PIN\" type=\"text\"\r\n                                        value={PIN}\r\n                                        placeholder=\" PIN No. \"\r\n                                        // validate={{\r\n                                        //     required: { value: true, errorMessage: 'Please Enter your PIN No.' },\r\n                                        //     tel: {\r\n                                        //         pattern: \"^[1-9][0-9]{5}$\",\r\n                                        //         errorMessage: 'PIN Should be Six Digit Only.'\r\n                                        //     }\r\n                                        // }\r\n                                        // }\r\n                                        onChange={PINHandler}\r\n                                    />\r\n                                </FormGroup>\r\n                                {/* </Col> */}\r\n                                <Col md=\"1\">  </Col>\r\n                                {/* <Col md=\"9\"> */}\r\n                                <FormGroup className=\"mb-2 col col-sm-5 mt-4\">\r\n                                    <Row className=\"justify-content-md-left\">\r\n                                        <Label htmlFor=\"horizontal-firstname-input\" className=\"col-sm-4 col-form-label\" >IsDefault </Label>\r\n                                        <Col md={3} style={{ marginTop: '9px' }} >\r\n                                            <div className=\"form-check form-switch form-switch-md mb-3\" dir=\"ltr\">\r\n                                                <AvInput type=\"checkbox\"\r\n                                                    id=\"IsDefault\"\r\n                                                    className=\"form-check-input\"\r\n                                                    checked={IsDefault}\r\n                                                    name=\"IsDefault\"\r\n                                                    onChange={IsDefaultHandler}\r\n                                                // defaultChecked\r\n                                                />\r\n                                                <label className=\"form-check-label\" htmlFor=\"customSwitchsizemd\"></label>\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </FormGroup>\r\n                                {/* </Col> */}\r\n                            </Row>\r\n                        </Row>\r\n\r\n                    </CardBody>\r\n                </Card>\r\n                <Row>\r\n                    <AddressDetailsTable tableData={props.tableData} func={props.func} />\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default AddressDetails_Tab;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Category_Tab\\index.js",["1713","1714"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    Col,\r\n    FormGroup,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    get_Category_By_CategoryType_ForDropDownAPI,\r\n} from \"../../../../../store/Administrator/ItemsRedux/action\";\r\nimport { AlertState, getCategoryTypelist } from \"../../../../../store/actions\";\r\nimport CategoryTable from \"./Table\";\r\n\r\nfunction CategoryTab(props) {\r\n    const dispatch = useDispatch();\r\n    const [CategoryTypeDropdownSelect, setCategoryTypeDropdownSelect] = useState(\"\");\r\n    const [categoryDropdownSelect, setcategoryDropdownSelect] = useState(\"\");\r\n    const [categoryTableData, setCategoryTableData] = useState([]);\r\n\r\n    const { CategoryType, Category } = useSelector((state) => ({\r\n        CategoryType: state.categoryTypeReducer.categoryTypeListData,\r\n        Category: state.ItemMastersReducer.Category,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        dispatch(getCategoryTypelist());\r\n        dispatch(get_Category_By_CategoryType_ForDropDownAPI());\r\n\r\n    }, [dispatch]);\r\n\r\n    const CategoryType_DropdownOptions = CategoryType.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name,\r\n    }));\r\n\r\n    const Category_DropdownOptions = Category.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name,\r\n    }));\r\n\r\n\r\n    const CategoryType_Handler = (event) => {\r\n        setCategoryTypeDropdownSelect(event);\r\n        dispatch(get_Category_By_CategoryType_ForDropDownAPI(event.value))\r\n    };\r\n\r\n    const Category_Handler = (event) => {\r\n        setcategoryDropdownSelect(event);\r\n\r\n    };\r\n\r\n    const addRowsHandler = (e) => {\r\n\r\n        const find =  props.tableData.find((element) => {\r\n            return element.value === categoryDropdownSelect.value\r\n        });\r\n\r\n        if (!(find === undefined)) {\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: \"Category alredy Select\",\r\n            }))\r\n            return\r\n        }\r\n        const val = {\r\n            CategoryType: CategoryTypeDropdownSelect === \"\" ? \"\" : CategoryTypeDropdownSelect.value,\r\n            CategoryTypeName: CategoryTypeDropdownSelect.label,\r\n            Category: categoryDropdownSelect === \"\" ? \"\" : categoryDropdownSelect.value,\r\n            CategoryName: categoryDropdownSelect.label,\r\n\r\n        };\r\n      \r\n            const totalTableData = props.tableData.length;\r\n            val.id = totalTableData + 1;\r\n            const updatedTableData = [...props.tableData];\r\n            updatedTableData.push(val);\r\n            props.func(updatedTableData);\r\n            clearState();\r\n    \r\n\r\n       \r\n        // else {\r\n        //     alert(\"Please select value\");\r\n        // }\r\n    };\r\n    const clearState = () => {\r\n        setCategoryTypeDropdownSelect(\"\");\r\n        setcategoryDropdownSelect(\"\");\r\n\r\n    };\r\n\r\n    return (\r\n        <Row>\r\n            <Col md={12}>\r\n                <Card className=\"text-black\">\r\n                    <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                        <Row className=\"mt-3\">\r\n\r\n                            <Row>\r\n                                <FormGroup className=\"mb-3 col col-sm-4 \">\r\n                                    <Label>Category Type</Label>\r\n                                    <Select\r\n                                        id={`dropCategoryType-${0}`}\r\n                                        value={CategoryTypeDropdownSelect}\r\n                                        options={CategoryType_DropdownOptions}\r\n                                        onChange={CategoryType_Handler}\r\n                                    />\r\n                                </FormGroup>\r\n\r\n                                <FormGroup className=\"mb-3 col col-sm-4 \">\r\n                                    <Label>Category</Label>\r\n                                    <Select\r\n                                        id={`dropCategory-${0}`}\r\n                                        value={categoryDropdownSelect}\r\n                                        options={Category_DropdownOptions}\r\n                                        onChange={Category_Handler}\r\n                                    />\r\n                                </FormGroup>\r\n\r\n                                <Col md={1}>\r\n                                    <Row className=\" mt-3\">\r\n                                        <Col >\r\n                                            <Button\r\n                                                className=\"btn btn-sm mt-1 mt-3 btn-light  btn-outline-primary  \"\r\n                                                type=\"button\"\r\n                                                onClick={addRowsHandler}\r\n                                            >\r\n                                                <i className=\"dripicons-plus mt-3\"> </i> Add\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Row>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n                <Row>\r\n                    <CategoryTable tableData={props.tableData} func={props.func} />\r\n                </Row>\r\n            </Col>\r\n\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default CategoryTab;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Group_Tab\\index.js",["1715","1716","1717","1718","1719"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    Col,\r\n    FormGroup,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getGroupTypeslist } from \"../../../../../store/Administrator/GroupTypeRedux/action\";\r\nimport GroupTable from \"./Table\";\r\nimport {\r\n    get_Group_By_GroupType_ForDropDown,\r\n    get_Sub_Group_By_Group_ForDropDown,\r\n    get_Sub_Group_By_Group_ForDropDown_Success\r\n} from \"../../../../../store/Administrator/ItemsRedux/action\";\r\n\r\nfunction GroupTab(props) {\r\n    const dispatch = useDispatch();\r\n    const [groupTypeDropdownSelect, setGroupTypeDropdownSelect] = useState(\"\");\r\n    const [groupDropdownSelect, setGroupDropdownSelect] = useState(\"\");\r\n    const [subGroupDropdownSelect, setSubGroupDropdownSelect] = useState(\"\");\r\n\r\n    const { GroupType, GroupList, SubGroupList } = useSelector((state) => ({\r\n        GroupType: state.GroupTypeReducer.GroupType,\r\n        GroupList: state.ItemMastersReducer.GroupList,\r\n        SubGroupList: state.ItemMastersReducer.SubGroupList,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        dispatch(getGroupTypeslist());\r\n        dispatch(get_Group_By_GroupType_ForDropDown());\r\n        dispatch(get_Sub_Group_By_Group_ForDropDown());\r\n    }, [dispatch]);\r\n\r\n\r\n    const GroupType_DropdownOptions = GroupType.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n        IsReserved: index.IsReserved\r\n    }));\r\n\r\n    const Group_DropdownOptions = GroupList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    const SubGroup_DropdownOptions = SubGroupList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    const GroupType_Handler = (event) => {\r\n        const found = props.tableData.find(element => {\r\n            return element.GroupType == event.value\r\n        });\r\n        if (found == undefined) {\r\n            setGroupTypeDropdownSelect(event);\r\n            dispatch(get_Group_By_GroupType_ForDropDown(event.value))\r\n            dispatch(get_Sub_Group_By_Group_ForDropDown_Success([]))\r\n            setGroupDropdownSelect([]);\r\n            setSubGroupDropdownSelect([]);\r\n\r\n        }\r\n        else {\r\n            alert(`${event.label} Is Already Selected...!`)\r\n        }\r\n    };\r\n\r\n    const Group_Handler = (event) => {\r\n        const found = props.tableData.find(element => {\r\n            return element.Group == event.value\r\n        });\r\n        if (found == undefined) {\r\n            setGroupDropdownSelect(event);\r\n            dispatch(get_Sub_Group_By_Group_ForDropDown(event.value))\r\n            setSubGroupDropdownSelect([]);\r\n        }\r\n        else {\r\n            alert(`${event.label} Is Already Selected...!`)\r\n        }\r\n    };\r\n\r\n    const SubGroup_Handler = (event) => {\r\n        setSubGroupDropdownSelect(event);\r\n    };\r\n\r\n    const addRowsHandler = (e) => {\r\n\r\n        const val = {\r\n            GroupType: groupTypeDropdownSelect.value,\r\n            GroupTypeName: groupTypeDropdownSelect.label,\r\n            Group: groupDropdownSelect === \"\" ? \"\" : groupDropdownSelect.value,\r\n            GroupName: groupDropdownSelect.label,\r\n            SubGroup: subGroupDropdownSelect === \"\" ? \"\" : subGroupDropdownSelect.value,\r\n            SubGroupName: subGroupDropdownSelect.label,\r\n        };\r\n        if (val.Group == '') {\r\n            alert(\"Please Select GroupType or Group value...!\")\r\n        }\r\n        else {\r\n            const totalTableData = props.tableData.length;\r\n            val.id = totalTableData + 1;\r\n            const updatedTableData = [...props.tableData];\r\n            updatedTableData.push(val);\r\n            props.func(updatedTableData);\r\n            clearState();\r\n        }\r\n\r\n    };\r\n\r\n    const clearState = () => {\r\n        setGroupTypeDropdownSelect(\"\");\r\n        setGroupDropdownSelect(\"\");\r\n        setSubGroupDropdownSelect(\"\");\r\n    };\r\n\r\n    return (\r\n        <Row>\r\n            <Col md={12}>\r\n                <Card className=\"text-black\">\r\n                    <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                        <Row className=\"mt-3\">\r\n                            <Col className=\" col col-11 \">\r\n                                <Row>\r\n                                    <FormGroup className=\" col col-sm-4 \">\r\n                                        <Label>Group Type</Label>\r\n                                        <Select\r\n                                            // id={`dropGroupType-${0}`}\r\n                                            value={groupTypeDropdownSelect}\r\n                                            options={GroupType_DropdownOptions}\r\n                                            onChange={GroupType_Handler}\r\n                                        />\r\n                                    </FormGroup>\r\n\r\n                                    <FormGroup className=\"mb-3 col col-sm-4 \">\r\n                                        <Label>Group</Label>\r\n                                        <Select\r\n                                            // id={`dropGroup-${0}`}\r\n                                            value={groupDropdownSelect}\r\n                                            options={Group_DropdownOptions}\r\n                                            onChange={Group_Handler}\r\n                                        />\r\n                                    </FormGroup>\r\n\r\n                                    <FormGroup className=\"mb-3 col col-sm-4 \">\r\n                                        <Label>Sub Group</Label>\r\n                                        <Select\r\n                                            // id={`dropSubGroup-${0}`}\r\n                                            value={subGroupDropdownSelect}\r\n                                            options={SubGroup_DropdownOptions}\r\n                                            onChange={SubGroup_Handler}\r\n                                        />\r\n                                    </FormGroup>\r\n\r\n                                </Row>\r\n                            </Col>\r\n                            <Col md={1}>\r\n\r\n                                <Row className=\" mt-3\">\r\n                                    <Col >\r\n                                        <Button\r\n                                            className=\"btn btn-sm mt-1 mt-3 btn-light  btn-outline-primary  \"\r\n                                            type=\"button\"\r\n                                            onClick={addRowsHandler}\r\n                                        >\r\n                                            <i className=\"dripicons-plus mt-3\"> </i> Add\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n                <Row>\r\n                    <GroupTable tableData={props.tableData} func={props.func} />\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default GroupTab;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\MRP_Tab\\index.js",[],"D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\GST_Tab\\index.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Utilites\\CommonError\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GroupTypeRedux\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\MarginMasterRedux\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\MRPMasterRedux\\actionTypes.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyRedux\\actionTypes.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PriceList\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CategoryRedux\\actionTypes.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\VehicleRedux\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\SubCategoryRedux\\actionTypes.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\M_EmployeeRedux\\actionTypes.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CategoryTypeRedux\\actionTypes.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyTypeRedux\\actionTypes.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\EmployeeTypeRedux\\actionTypes.js",[],"D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\MarginTab\\Table.js",["1720","1721","1722","1723"],"import React, { useEffect, useState } from 'react';\r\nimport { Button, Table, } from 'reactstrap';\r\nimport { Tbody, Thead } from 'react-super-responsive-table';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { deleteID_In_MasterPage, deleteID_In_MasterPageSuccess } from '../../../../../store/Administrator/MRPMasterRedux/action';\r\nimport { AlertState } from '../../../../../store/actions';\r\nimport { deleteID_In_Margin_MasterPage, deleteID_In_Margin_MasterPageSuccess } from '../../../../../store/Administrator/MarginMasterRedux/action';\r\n\r\nfunction MarginTable(props) {\r\n    const dispatch = useDispatch();\r\n\r\n    const {\r\n      deleteMsg,\r\n    } = useSelector((state) => ({\r\n      deleteMsg: state.MarginMasterReducer.deleteId_For_MarginMaster,\r\n    }));\r\n  \r\n   const onDeleteHandeler = (info) => {\r\n      if (info.IsAdd) {\r\n        var fil = props.tableData.filter((i) => {\r\n          return !(i.id === info.id);\r\n        });\r\n        props.func(fil);\r\n      }\r\n      else {\r\n        dispatch(\r\n          AlertState({\r\n            Type: 5,\r\n            Status: true,\r\n            Message: `Are you sure you want to delete this Margin\"`,\r\n            RedirectPath: false,\r\n            PermissionAction: deleteID_In_Margin_MasterPage,\r\n            ID: info.id,\r\n          })\r\n        );\r\n      }\r\n    };\r\n  \r\n    useEffect(() => {\r\n      if (deleteMsg.Status === true && deleteMsg.StatusCode === 200) {\r\n        dispatch(deleteID_In_Margin_MasterPageSuccess({ Status: false }));\r\n  \r\n        var fil = props.tableData.filter((i) => {\r\n          return !(i.id === deleteMsg.deletedId);\r\n        });\r\n        props.func(fil);\r\n  \r\n        dispatch(\r\n          AlertState({\r\n            Type: 1,\r\n            Status: true,\r\n            Message: deleteMsg.Message,\r\n          })\r\n        );\r\n      } else if (deleteMsg.Status === true) {\r\n        dispatch(deleteID_In_Margin_MasterPageSuccess({ Status: false }));\r\n        dispatch(\r\n          AlertState({\r\n            Type: 3,\r\n            Status: true,\r\n            Message: JSON.stringify(deleteMsg.Message),\r\n          })\r\n        );\r\n      }\r\n    }, [deleteMsg]);\r\n\r\n    const tableRows = props.tableData.map((info) => {\r\n        \r\n        return (\r\n            <tr>\r\n                {/* <td>{info.id}</td> */}\r\n                <td>{info.PriceListName}</td>\r\n                <td>{info.PartyName}</td>\r\n                <td>{info.EffectiveDate}</td>\r\n                <td>{info.Margin}</td>\r\n                <td>\r\n                    <Button\r\n                        className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n                        data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Delete Party Type\"\r\n                        onClick={(e) => {\r\n                            onDeleteHandeler(info);\r\n                        }}\r\n                    >\r\n                        <i className=\"mdi mdi-delete font-size-18\"></i>\r\n                    </Button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {props.tableData.length > 0 ?\r\n                    <Table className=\"table table-bordered table-hover\">\r\n                        <Thead>\r\n                            <tr>\r\n                                <th className=\"col col-sm-3\">Price List</th>\r\n                                <th className=\"col col-sm-3\">Party Name</th>\r\n                                <th className=\"col col-sm-3\">EffectiveDate</th>\r\n                                <th className=\"col col-sm-3\">Margin</th>\r\n                                <th className=\"col col-sm-3\">{\"Action\"}</th>\r\n                            </tr>\r\n                        </Thead>\r\n                        <Tbody>{tableRows}</Tbody>\r\n                    </Table>\r\n                    : null}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MarginTable;\r\n","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CompanyRedux\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\PartyPages\\Table.js",["1724"],"import React, { useState } from 'react';\r\nimport { Button, Input, Table, } from 'reactstrap';\r\nimport { Tbody, Thead } from 'react-super-responsive-table';\r\n\r\nfunction AddressDetailsTable(props) {\r\n\r\n    const ondeleteHandeler = (ele) => {\r\n\r\n        if (!(ele === 0)) {\r\n            var fil = props.tableData.filter((i) => {\r\n                return !(i.id === ele);\r\n            });\r\n            props.func(fil);\r\n        }\r\n    };\r\n\r\n    function defaultChangeHandler(key) {\r\n      \r\n        const newtableData = props.tableData.map((ele, k) => {\r\n            ele.IsDefault = false;\r\n            if (k === key) {\r\n                ele.IsDefault = true;\r\n            }\r\n            return ele\r\n        });\r\n        props.func(newtableData)\r\n    }\r\n    const tableRows = props.tableData.map((info, key) => {\r\n\r\n        return (\r\n            <tr>\r\n                <td>{info.Address}</td>\r\n                <td>{info.FSSAINo}</td>\r\n                <td>{info.FSSAIExipry}</td>\r\n                <td>{info.PIN}</td>\r\n                < td><Input type=\"radio\"\r\n                    name=\"btnradio\"\r\n                    id={`radioButton${key}`}\r\n                    defaultChecked={info.IsDefault ? true:false}\r\n                    onClick={(e) => defaultChangeHandler(key)} />\r\n                    {`${info.IsDefault}`}\r\n                </td>\r\n                <td>\r\n                    <Button\r\n                        className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n                        data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Delete Party Type\"\r\n                        onClick={(e) => {\r\n                            ondeleteHandeler(info.id);\r\n                        }}\r\n                    >\r\n                        <i className=\"mdi mdi-delete font-size-18\"></i>\r\n                    </Button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {props.tableData.length > 0 ?\r\n                    <Table className=\"table table-bordered table-hover\">\r\n                        <Thead>\r\n                            <tr>\r\n                                <th className=\"col col-sm-3\">Address</th>\r\n                                <th className=\"col col-sm-3\">FSSAINo</th>\r\n                                <th className=\"col col-sm-3\">FSSAIExipry</th>\r\n                                <th className=\"col col-sm-3\">PIN</th>\r\n                                <th className=\"col col-sm-3\">IsDefault</th>\r\n                                <th className=\"col col-sm-3\">{\"Action\"}</th>\r\n                            </tr>\r\n                        </Thead>\r\n                        <Tbody>{tableRows}</Tbody>\r\n                    </Table>\r\n                    : null}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AddressDetailsTable;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Group_Tab\\Table.js",[],"D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\MRP_Tab\\Table.js",["1725","1726"],"import React, { useEffect, useState } from \"react\";\r\nimport { Button, Table } from \"reactstrap\";\r\nimport { Tbody, Thead } from \"react-super-responsive-table\";\r\nimport { deleteID_In_MasterPage, deleteID_In_MasterPageSuccess } from \"../../../../../store/Administrator/MRPMasterRedux/action\";\r\nimport { AlertState } from \"../../../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nfunction MRPTable(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    deleteMsg,\r\n  } = useSelector((state) => ({\r\n    deleteMsg: state.MRPMasterReducer.deleteIdForMRPMaster,\r\n  }));\r\n\r\n\r\n  const onDeleteHandeler = (info) => {\r\n    if (info.IsAdd) {\r\n      var fil = props.tableData.filter((i) => {\r\n        return !(i.id === info.id);\r\n      });\r\n      props.func(fil);\r\n    }\r\n    else {\r\n    dispatch(\r\n      AlertState({\r\n        Type: 5,\r\n        Status: true,\r\n        Message: `Are you sure you want to delete this MRP\"`,\r\n        RedirectPath: false,\r\n        PermissionAction: deleteID_In_MasterPage,\r\n        ID: info.id,\r\n      })\r\n    );\r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    if (deleteMsg.Status === true && deleteMsg.StatusCode === 200) {\r\n      dispatch(deleteID_In_MasterPageSuccess({ Status: false }));\r\n\r\n      var fil = props.tableData.filter((i) => {\r\n        return !(i.id === deleteMsg.deletedId);\r\n      });\r\n      props.func(fil);\r\n\r\n      dispatch(\r\n        AlertState({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: deleteMsg.Message,\r\n        })\r\n      );\r\n    } else if (deleteMsg.Status === true) {\r\n      dispatch(deleteID_In_MasterPageSuccess({ Status: false }));\r\n      dispatch(\r\n        AlertState({\r\n          Type: 3,\r\n          Status: true,\r\n          Message: JSON.stringify(deleteMsg.Message),\r\n        })\r\n      );\r\n    }\r\n  }, [deleteMsg]);\r\n\r\n  const tableRows = props.tableData.map((info) => {\r\n    return (\r\n      <tr>\r\n        {/* <td>{info.id}</td> */}\r\n        <td>{info.DivisionName}</td>\r\n        <td>{info.PartyName}</td>\r\n        <td>{info.EffectiveDate}</td>\r\n        <td>{info.MRP}</td>\r\n        <td>\r\n          <Button\r\n            className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n            data-mdb-toggle=\"tooltip\"\r\n            data-mdb-placement=\"top\"\r\n            title=\"Delete Party Type\"\r\n            onClick={(e) => {\r\n              onDeleteHandeler(info);\r\n            }}\r\n          >\r\n            <i className=\"mdi mdi-delete font-size-18\"></i>\r\n          </Button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        {props.tableData.length > 0 ? (\r\n          <Table className=\"table table-bordered table-hover\">\r\n            <Thead>\r\n              <tr>\r\n                <th className=\"col col-sm-3\">Division</th>\r\n                <th className=\"col col-sm-3\">Party Name</th>\r\n                <th className=\"col col-sm-3\">Effective Date</th>\r\n                <th className=\"col col-sm-3\">MRP</th>\r\n                <th className=\"col col-sm-3\">{\"Action\"}</th>\r\n              </tr>\r\n            </Thead>\r\n            <Tbody>{tableRows}</Tbody>\r\n          </Table>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MRPTable;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\GST_Tab\\Table.js",["1727","1728"],"import React, { useEffect, useState } from 'react';\r\nimport { Button, Table, } from 'reactstrap';\r\nimport { Tbody, Thead } from 'react-super-responsive-table';\r\nimport { deleteGSTForMasterPage, deleteGSTForMasterPageSuccess } from '../../../../../store/Administrator/GSTRedux/action';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AlertState } from '../../../../../store/actions';\r\n\r\nfunction GSTTable(props) {\r\n  \r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    deleteMsg,\r\n  } = useSelector((state) => ({\r\n    deleteMsg: state.GSTReducer.deleteMsg,\r\n  }));\r\n\r\n  const onDeleteHandeler = (info) => {\r\n    if (info.IsAdd) {\r\n      var fil = props.tableData.filter((i) => {\r\n        return !(i.id === info.id);\r\n      });\r\n      props.func(fil);\r\n    }\r\n    else {\r\n      dispatch(\r\n        AlertState({\r\n          Type: 5,\r\n          Status: true,\r\n          Message: `Are you sure you want to delete this GST\"`,\r\n          RedirectPath: false,\r\n          PermissionAction: deleteGSTForMasterPage,\r\n          ID: info.id,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (deleteMsg.Status === true && deleteMsg.StatusCode === 200) {\r\n      dispatch(deleteGSTForMasterPageSuccess({ Status: false }));\r\n\r\n      var fil = props.tableData.filter((i) => {\r\n        return !(i.id === deleteMsg.deletedId);\r\n      });\r\n      props.func(fil);\r\n\r\n      dispatch(\r\n        AlertState({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: deleteMsg.Message,\r\n        })\r\n      );\r\n    } else if (deleteMsg.Status === true) {\r\n      dispatch(deleteGSTForMasterPageSuccess({ Status: false }));\r\n      dispatch(\r\n        AlertState({\r\n          Type: 3,\r\n          Status: true,\r\n          Message: JSON.stringify(deleteMsg.Message),\r\n        })\r\n      );\r\n    }\r\n  }, [deleteMsg]);\r\n\r\n\r\n  const tableRows = props.tableData.map((info) => {\r\n\r\n    return (\r\n      <tr>\r\n        {/* <td>{info.id}</td> */}\r\n        <td>{info.EffectiveDate}</td>\r\n        <td>{info.GSTPercentage}</td>\r\n        <td>{info.HSNCode}</td>\r\n        <td>\r\n          <Button\r\n            className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n            data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Delete Party Type\"\r\n            onClick={(e) => {\r\n              onDeleteHandeler(info);\r\n            }}\r\n          >\r\n            <i className=\"mdi mdi-delete font-size-18\"></i>\r\n          </Button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n  return (\r\n    <>\r\n      <div>\r\n        {props.tableData.length > 0 ?\r\n          <Table className=\"table table-bordered table-hover\">\r\n            <Thead>\r\n              <tr>\r\n                <th className=\"col col-sm-3\">Effective Date</th>\r\n                <th className=\"col col-sm-3\">GST</th>\r\n                <th className=\"col col-sm-3\">HSN Code</th>\r\n                <th className=\"col col-sm-3\">{\"Action\"}</th>\r\n              </tr>\r\n            </Thead>\r\n            <Tbody>{tableRows}</Tbody>\r\n          </Table>\r\n          : null}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GSTTable;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Category_Tab\\Table.js",["1729"],"import React, { useState } from \"react\";\r\nimport { Button, Table } from \"reactstrap\";\r\nimport { Tbody, Thead } from \"react-super-responsive-table\";\r\n\r\nfunction CategoryTable(props) {\r\n    \r\n  const ondeleteHandeler = (ele) => {\r\n    if (!(ele === 0)) {\r\n      var fil = props.tableData.filter((i) => {\r\n        return !(i.id === ele);\r\n      });\r\n      props.func(fil);\r\n    }\r\n  };\r\n\r\n  const tableRows = props.tableData.map((info) => {\r\n    return (\r\n      <tr>\r\n        {/* <td>{info.id}</td> */}\r\n        <td>{info.CategoryTypeName}</td>\r\n        <td>{info.CategoryName}</td>\r\n      \r\n        <td>\r\n          <Button\r\n            className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n            data-mdb-toggle=\"tooltip\"\r\n            data-mdb-placement=\"top\"\r\n            title=\"Delete Party Type\"\r\n            onClick={(e) => {\r\n              ondeleteHandeler(info.id);\r\n            }}\r\n          >\r\n            <i className=\"mdi mdi-delete font-size-18\"></i>\r\n          </Button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        {props.tableData.length > 0 ? (\r\n          <Table className=\"table table-bordered table-hover\">\r\n            <Thead>\r\n              <tr>\r\n                <th className=\"col col-sm-3\">Category Type</th>\r\n                <th className=\"col col-sm-3\">Category</th>\r\n                <th className=\"col col-sm-3\">{\"Action\"}</th>\r\n              </tr>\r\n            </Thead>\r\n            <Tbody>{tableRows}</Tbody>\r\n          </Table>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CategoryTable;\r\n","D:\\GitProjects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Division_Tab\\Table.js",["1730"],"import React, { useState } from \"react\";\r\nimport { Button, Table } from \"reactstrap\";\r\nimport { Tbody, Thead } from \"react-super-responsive-table\";\r\n\r\nfunction DivisionTable(props) {\r\n    \r\n  const ondeleteHandeler = (ele) => {\r\n    \r\n    if (!(ele === 0)) {\r\n      var fil = props.tableData.filter((i) => {\r\n        return !(i.id === ele);\r\n      });\r\n      props.func(fil);\r\n    }\r\n  };\r\n\r\n  const tableRows = props.tableData.map((info) => {\r\n    return (\r\n      <tr>\r\n        {/* <td>{info.id}</td> */}\r\n        <td>{info.DivisionName}</td>\r\n      \r\n        <td>\r\n          <Button\r\n            className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n            data-mdb-toggle=\"tooltip\"\r\n            data-mdb-placement=\"top\"\r\n            title=\"Delete Party Type\"\r\n            onClick={(e) => {\r\n              ondeleteHandeler(info.id);\r\n            }}\r\n          >\r\n            <i className=\"mdi mdi-delete font-size-18\"></i>\r\n          </Button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        {props.tableData.length > 0 ? (\r\n          <Table className=\"table table-bordered table-hover\">\r\n            <Thead>\r\n              <tr>\r\n                <th className=\"col col-sm-3\">Division Name</th>\r\n                <th className=\"col col-sm-3\">{\"Action\"}</th>\r\n              </tr>\r\n            </Thead>\r\n            <Tbody>{tableRows}</Tbody>\r\n          </Table>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DivisionTable;\r\n","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\RoleMasterRedux\\action.js",["1731"],"import { UPDATE_H_PAGES_SUCCESS } from \"../HPagesRedux/actionType\";\r\nimport {\r\n    POST_ROLE_MASTER,\r\n    POST_ROLE_MASTER_SUCCESS,\r\n    DELETE_ROLE_LIST_ID,\r\n    EDIT_ROLE_LIST_ID,\r\n    UPDATE_ROLE_LIST_ID,\r\n    GET_ROLE_LIST_API,\r\n    GET_ROLE_LIST_API_SUCCESS,\r\n    UPDATE_ROLE_LIST_ID_SUCCESS,\r\n    DELETE_ROLE_LIST_ID_SUCCESS,\r\n    EDIT_ROLE_LIST_ID_SUCCESS,\r\n} from \"./actionTypes\"\r\n\r\n// get api\r\nexport const getRole = () => ({\r\n    type: GET_ROLE_LIST_API,\r\n});\r\n\r\nexport const getRoleSuccess = (data) => ({\r\n    type: GET_ROLE_LIST_API_SUCCESS,\r\n    payload:data,\r\n});\r\n\r\n// post api\r\nexport const postRole = (Data,id) => ({\r\n    type: POST_ROLE_MASTER,\r\n    Data,id\r\n  });\r\n  \r\n  export const PostSuccess = (AddUserMessage) => ({\r\n    type: POST_ROLE_MASTER_SUCCESS,\r\n    payload: AddUserMessage,\r\n  });\r\n\r\n  // delete api\r\n  export const deleteRole = (id) => ({\r\n    type: DELETE_ROLE_LIST_ID,\r\n    id ,\r\n    \r\n  } );\r\n  export const deleteSuccess = (deleteMessage) => ({\r\n    type: DELETE_ROLE_LIST_ID_SUCCESS,\r\n    payload:deleteMessage\r\n  });\r\n  \r\n  // edit api\r\n  export const editRoleId =(id,pageMode)=>({\r\n    type:EDIT_ROLE_LIST_ID,\r\n    id,pageMode\r\n  })\r\n  export const editSuccess =(editData)=>({\r\n    type:EDIT_ROLE_LIST_ID_SUCCESS,\r\n   payload:editData,\r\n  })\r\n\r\n  // update api\r\n  export const updateID=(data,ID)=>({\r\n    type:UPDATE_ROLE_LIST_ID,\r\n    data,ID\r\n  })\r\n  export const updateSuccess =(updateMessage)=>({\r\n    type:UPDATE_ROLE_LIST_ID_SUCCESS,\r\n   payload:updateMessage,\r\n  })\r\n\r\n  ","D:\\GitProjects\\Manthan\\src\\pages\\Authentication\\CarouselPage.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\UserRegistrationRedux\\actions.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\HPagesRedux\\actions.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\ModulesRedux\\actions.js",[],"D:\\GitProjects\\Manthan\\src\\components\\CommonForBoth\\RightSidebar.js",[],"D:\\GitProjects\\Manthan\\src\\components\\CommonForBoth\\Menus\\LightDark.js",[],"D:\\GitProjects\\Manthan\\src\\components\\CommonForBoth\\TopbarDropdown\\ProfileMenu.js",[],"D:\\GitProjects\\Manthan\\src\\components\\CommonForBoth\\TopbarDropdown\\LanguageDropdown.js",[],"D:\\GitProjects\\Manthan\\src\\components\\CommonForBoth\\TopbarDropdown\\NotificationDropdown.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\RoleAccessRedux\\actions.js",["1732","1733"],"import {\r\n\r\n  ADD_PAGE_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE,\r\n  ADD_PAGE_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE_SUCCESS,\r\n  EDIT_ROLEACCESS_ID,\r\n  EDIT_ROLEACCESS_ID_SUCCESS,\r\n  GET_ROLEACCESS_LIST_PAGE,\r\n  GET_ROLEACCESS_LIST_PAGE_SUCCESS,\r\n  GET_ROLE_ACCESS_LIST_FOR_ROLE_ACCESS_lIST_PAGE,\r\n  GET_ROLE_ACCESS_LIST_FOR_ROLE_ACCESS_lIST_PAGE_SUCCESS,\r\n  GO_BUTTON_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE,\r\n  GO_BUTTON_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE_SUCCESS,\r\n  PAGE_DROPDOWN_FOR_ROLE_ACCESS_lIST,\r\n  PAGE_DROPDOWN_FOR_ROLE_ACCESS_lIST_SUCCESS,\r\n  POST_METHOD_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE,\r\n  POST_METHOD_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE_SUCCESS,\r\n  POST_METHOD_HANDLER_FOR_COPY_ROLE_ACCESS_FOR_ROLE_ACCESS,\r\n  POST_METHOD_HANDLER_FOR_COPY_ROLE_ACCESS_FOR_ROLE_SUCCESS,\r\n} from \"./actionType\";\r\n\r\n\r\nexport const GetRoleListForRoleAccessListPage = (id1,id2) => ({\r\n  type: GET_ROLE_ACCESS_LIST_FOR_ROLE_ACCESS_lIST_PAGE,\r\n  id1,id2,\r\n});\r\n\r\nexport const GetRoleListForRoleAccessListPage_Success = (data) => ({\r\n  type: GET_ROLE_ACCESS_LIST_FOR_ROLE_ACCESS_lIST_PAGE_SUCCESS,\r\n  payload:data,\r\n});\r\n\r\n\r\nexport const PageDropdownForRoleAccessList = (id1,id2) => ({\r\n  type: PAGE_DROPDOWN_FOR_ROLE_ACCESS_lIST,\r\n  id1,id2\r\n});\r\n\r\nexport const PageDropdownForRoleAccessList_Success = (data) => ({\r\n  type: PAGE_DROPDOWN_FOR_ROLE_ACCESS_lIST_SUCCESS,\r\n  payload:data,\r\n});\r\n\r\nexport const GO_Button_HandlerForRoleAccessListPage = (id1,id2) => ({\r\n  type: GO_BUTTON_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE,\r\n  id1,id2,\r\n});\r\n\r\nexport const GO_Button_HandlerForRoleAccessListPage_Success = (data) => ({\r\n  type: GO_BUTTON_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE_SUCCESS,\r\n  payload:data,\r\n});\r\n\r\nexport const AddPageHandlerForRoleAccessListPage = (id) => ({\r\n  type: ADD_PAGE_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE,\r\n  id,\r\n});\r\n\r\nexport const AddPageHandlerForRoleAccessListPage_Success = (data) => ({\r\n  type: ADD_PAGE_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE_SUCCESS,\r\n  payload:data,\r\n});\r\n\r\nexport const PostMethodForRoleAccessListPage = (data) => ({\r\n  type: POST_METHOD_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE,\r\n  data,\r\n});\r\n\r\nexport const PostMethod_ForRoleAccessListPage_Success = (data) => ({\r\n  type: POST_METHOD_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE_SUCCESS,\r\n  payload:data,\r\n});\r\n\r\n\r\n// For RoleAccess List Page\r\nexport const getRoleAccessListPage = () => ({\r\n  type: GET_ROLEACCESS_LIST_PAGE,\r\n});\r\n\r\nexport const getRoleAccessListPageSuccess = (data) => ({\r\n  type: GET_ROLEACCESS_LIST_PAGE_SUCCESS,\r\n  payload:data,\r\n});\r\n\r\n// Copy RoleAccess For RoleAccess\r\nexport const PostMethodForCopyRoleAccessForRoleAccess = (data) => ({\r\n  type: POST_METHOD_HANDLER_FOR_COPY_ROLE_ACCESS_FOR_ROLE_ACCESS,\r\n  data,\r\n});\r\n\r\nexport const PostMethod_ForCopyRoleAccessFor_Role_Success = (data) => ({\r\n  type: POST_METHOD_HANDLER_FOR_COPY_ROLE_ACCESS_FOR_ROLE_SUCCESS,\r\n  payload:data,\r\n});\r\n","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GroupTypeRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\TermsAndCondtionsRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Utilites\\Spinner\\actions.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Utilites\\PageFiled\\actions.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\MarginMasterRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\MRPMasterRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PriceList\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\DriverRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CompanyGroupRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\VehicleRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\SubCategoryRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CategoryRedux\\reducer.js",["1734"],"import {\r\n  POST_METHOD_HANDLER_FOR_CATEGORY_API_SUCCESS,\r\n  GET_METHOD_HANDLER_FOR_CATEGORY_SUCCESS,\r\n  UPDATE_CATEGORY_ID_SUCCESS,\r\n  DELETE_CATEGORY_ID_SUCCESS,\r\n  EDIT_CATEGORY_ID_SUCCESS,\r\n  GET_CATEGORY_LIST_SUCCESS\r\n} from \"./actionTypes\";\r\n\r\nconst INIT_STATE = {\r\n  PostDataMessage: { Status: false },\r\n  CategoryAPI: [],\r\n  CategoryListData: [],\r\n  deleteMessage: { Status: false },\r\n  editData: { Status: false },\r\n  updateMessage: { Status: false },\r\n}\r\n\r\nconst CategoryReducer = (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n\r\n    case POST_METHOD_HANDLER_FOR_CATEGORY_API_SUCCESS:\r\n      return {\r\n        ...state,\r\n        PostDataMessage: action.payload,\r\n      }\r\n\r\n    // get api\r\n    case GET_CATEGORY_LIST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        CategoryListData: action.payload,\r\n      }\r\n\r\n    case DELETE_CATEGORY_ID_SUCCESS:\r\n      return {\r\n        ...state,\r\n        deleteMessage: action.payload,\r\n      };\r\n\r\n    case EDIT_CATEGORY_ID_SUCCESS:\r\n      return {\r\n        ...state,\r\n        editData: action.payload,\r\n      };\r\n\r\n    // update api\r\n    case UPDATE_CATEGORY_ID_SUCCESS:\r\n      return {\r\n        ...state,\r\n        updateMessage: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default CategoryReducer","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CategoryTypeRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\layout\\actions.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\RoleMasterRedux\\actionTypes.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\HPagesRedux\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\EmployeeTypeRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyTypeRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\RoleAccessRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyRedux\\reducer.js",["1735"],"import { getAddressTypes } from \"./action\";\r\nimport {\r\n    DELETE_PARTY_ID_SUCCESS,\r\n    EDIT_PARTY_ID_SUCCESS,\r\n    GET_COMPANY_BY_DIVISIONTYPES_ID_SUCCESS,\r\n    GET_DISTRICT_ON_STATE_SUCCESS,\r\n    GET_PARTTYPE_BY_DIVISIONTYPES_ID_SUCCESS,\r\n    GET_PRICELIST_SUCCESS,\r\n    GET_PARTYTYPES_SUCCESS,\r\n    GET_COMPANY_SUCCESS,\r\n    GET_ADDRESSTYPES_SUCCESS,\r\n    GET_PARTY_LIST_API_SUCCESS,\r\n    POST_PARTY_DATA_SUCCESS,\r\n    UPDATE_PARTY_ID_SUCCESS\r\n} from \"./actionTypes\";\r\n\r\nconst INIT_STATE = {\r\n    partyList: [],\r\n    PartySaveSuccess: { Status: false },\r\n    deleteMessage: { Status: false },\r\n    editData: { Status: false },\r\n    updateMessage: { Status: false },\r\n    DistrictOnState:[],\r\n    PartyTypes:[],\r\n    Company:[],\r\n    AddressTypes:[]\r\n};\r\n\r\nconst PartyMasterReducer = (state = INIT_STATE, action) => {\r\n    switch (action.type) {\r\n        // get api\r\n        case GET_PARTY_LIST_API_SUCCESS:\r\n            return {\r\n                ...state,\r\n                partyList: action.payload,\r\n            }\r\n\r\n        // post api\r\n     \r\n        case POST_PARTY_DATA_SUCCESS:\r\n            return {\r\n                ...state,\r\n                PartySaveSuccess: action.payload,\r\n            };\r\n\r\n        // delete api\r\n        case DELETE_PARTY_ID_SUCCESS:\r\n            return {\r\n                ...state,\r\n                deleteMessage: action.payload,\r\n            };\r\n\r\n        // edit api\r\n        case EDIT_PARTY_ID_SUCCESS:\r\n            return {\r\n                ...state,\r\n                editData: action.payload,\r\n            };\r\n\r\n        // update api\r\n        case UPDATE_PARTY_ID_SUCCESS:\r\n            return {\r\n                ...state,\r\n                updateMessage: action.payload,\r\n            };\r\n\r\n       // GetDistrictOnState API\r\n        case GET_DISTRICT_ON_STATE_SUCCESS:\r\n            return {\r\n              ...state,\r\n              DistrictOnState: action.payload,\r\n            };\r\n  \r\n\r\n        //get PriceList\r\n        case GET_PRICELIST_SUCCESS:\r\n            return {\r\n              ...state,\r\n              PriceList: action.payload,\r\n            };\r\n  \r\n\r\n          //get addresstypes\r\n         case GET_ADDRESSTYPES_SUCCESS:\r\n            return {\r\n            ...state,\r\n            AddressTypes: action.payload,\r\n            };\r\n\r\n            //get partytypes\r\n            case GET_PARTYTYPES_SUCCESS:\r\n          return {\r\n               ...state,\r\n            PartyTypes: action.payload,\r\n               };\r\n\r\n\r\n        //get company\r\n        case GET_COMPANY_SUCCESS:\r\n         return {\r\n         ...state,\r\n        Company: action.payload,\r\n         };\r\n\r\n\r\n          // GetPartyTypeByDivisionTypeID API dependent on DivisionTypes api\r\n        case GET_PARTTYPE_BY_DIVISIONTYPES_ID_SUCCESS:\r\n            return {\r\n              ...state,\r\n              PartyTypes: action.payload,\r\n            };\r\n\r\n            // GetCompanyByDivisionTypeID/1 API dependent on DivisionTypes api\r\n        case GET_COMPANY_BY_DIVISIONTYPES_ID_SUCCESS:\r\n            return {\r\n              ...state,\r\n              CompanyName: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default PartyMasterReducer;\r\n","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\ItemsRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\auth\\login\\actions.js",[],"D:\\GitProjects\\Manthan\\src\\store\\auth\\profile\\actions.js",[],"D:\\GitProjects\\Manthan\\src\\store\\auth\\forgetpwd\\actions.js",["1736","1737","1738"],"import {\r\n  FORGET_PASSWORD,\r\n  FORGET_PASSWORD_SUCCESS,\r\n  FORGET_PASSWORD_ERROR,\r\n  SEND_OTP_FOR_FORGET_PASSWORD_SUCCESS,\r\n  SEND_OTP_FOR_FORGET_PASSWORD,\r\n  SEND_OTP_FOR_FORGET_PASSWORD_ERROR,\r\n  CHANGE_PASSWORD_FOR_FORGET_PASSWORD,\r\n  CHANGE_PASSWORD_FOR_FORGET_PASSWORD_SUCCESS,\r\n  CHANGE_PASSWORD_FOR_FORGET_PASSWORD_ERROR,\r\n} from \"./actionTypes\"\r\n\r\n// export const userForgetPassword = (user, history) => {\r\n//   return {\r\n//     type: FORGET_PASSWORD,\r\n//     payload: { user, history },\r\n//   }\r\n// }\r\n\r\n// export const userForgetPasswordSuccess = message => {\r\n//   return {\r\n//     type: FORGET_PASSWORD_SUCCESS,\r\n//     payload: message,\r\n//   }\r\n// }\r\n\r\n// export const userForgetPasswordError = message => {\r\n//   return {\r\n//     type: FORGET_PASSWORD_ERROR,\r\n//     payload: message,\r\n//   }\r\n// }\r\n\r\nexport const userForgetPassword_sendOTP = (user) => {\r\n  return {\r\n    type: SEND_OTP_FOR_FORGET_PASSWORD,\r\n    user,\r\n  }\r\n}\r\n\r\nexport const userForgetPassword_sendOTP_Success = (message) => {\r\n  return {\r\n    type: SEND_OTP_FOR_FORGET_PASSWORD_SUCCESS,\r\n    payload: message,\r\n  }\r\n}\r\n\r\nexport const userForgetPassword_sendOTP_Error = (message) => {\r\n  return {\r\n    type: SEND_OTP_FOR_FORGET_PASSWORD_ERROR,\r\n    payload: message,\r\n  }\r\n}\r\nexport const changePasswordForForgetPassword = (data) => {\r\n  return {\r\n    type: CHANGE_PASSWORD_FOR_FORGET_PASSWORD,\r\n    data,\r\n  }\r\n}\r\n\r\nexport const changePasswordForForgetPasswordSuccess = (message) => {\r\n  return {\r\n    type: CHANGE_PASSWORD_FOR_FORGET_PASSWORD_SUCCESS,\r\n    payload: message,\r\n  }\r\n}\r\n\r\nexport const changePasswordForForgetPasswordError = (message) => {\r\n  return {\r\n    type: CHANGE_PASSWORD_FOR_FORGET_PASSWORD_ERROR,\r\n    payload: message,\r\n  }\r\n}\r\n","D:\\GitProjects\\Manthan\\src\\store\\auth\\register\\actions.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\M_EmployeeRedux\\reducer.js",["1739","1740"],"import {\r\n  GET_DESIGNATIONID_SUCCESS,\r\n  GET_EMPLOYEETYPE_SUCCESS,\r\n  GET_STATE_SUCCESS,\r\n  POST_EMPLOYEE_SUCCESS,\r\n  GET_EMPLOYEE_LIST_SUCCESS,\r\n  DELETE_EMPLOYEE_ID_SUCCESS,\r\n  EDIT_EMPLOYEE_ID_SUCCESS,\r\n  UPDATE_EMPLOYEE_ID_SUCCESS,\r\n  GET_EMPLOYEE_TYPES_ID_SUCCESS,\r\n  GET_COMPANYNAME_BY_EMPLOYEETYPES_ID_SUCCESS,\r\n  GET_PARTYNAME_BY_DIVISIONTYPES_ID_SUCCESS\r\n} from \"./actionTypes\";\r\n\r\nconst INIT_STATE = {\r\n  designation: [],\r\n  employeeType: [],\r\n  State: [],\r\n  employeeList: [],\r\n  postMessage: { Status: false },\r\n  deleteMessage: { Status: false },\r\n  editData: { Status: false },\r\n  updateMessage: { Status: false },\r\n  EmployeeTypes:[],\r\n  CompanyNames:[],\r\n  PartyTypes:[]\r\n};\r\n\r\nconst M_EmployeesReducer = (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n\r\n    // DesignationID Dropdown api\r\n    case GET_DESIGNATIONID_SUCCESS:\r\n      return {\r\n        ...state,\r\n        designation: action.payload,\r\n      };\r\n\r\n    // EmployeeType Dropdown api\r\n    case GET_EMPLOYEETYPE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        employeeType: action.payload,\r\n      };\r\n\r\n    // State Dropdown api\r\n    case GET_STATE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        State: action.payload,\r\n      };\r\n\r\n    case POST_EMPLOYEE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        postMessage: action.payload,\r\n      };\r\n\r\n    // get api\r\n    case GET_EMPLOYEE_LIST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        employeeList: action.payload,\r\n      }\r\n\r\n\r\n    case DELETE_EMPLOYEE_ID_SUCCESS:\r\n      return {\r\n        ...state,\r\n        deleteMessage: action.payload,\r\n      };\r\n\r\n    case EDIT_EMPLOYEE_ID_SUCCESS:\r\n      return {\r\n        ...state,\r\n        editData: action.payload,\r\n      };\r\n\r\n    // update api\r\n    case UPDATE_EMPLOYEE_ID_SUCCESS:\r\n      return {\r\n        ...state,\r\n        updateMessage: action.payload,\r\n      };\r\n\r\n    // Company Name API dependent on Employee Types api\r\n    case GET_COMPANYNAME_BY_EMPLOYEETYPES_ID_SUCCESS:\r\n      return {\r\n        ...state,\r\n        CompanyNames: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default M_EmployeesReducer;\r\n","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\RoleMasterRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\UserRegistrationRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\CommonAPI\\SupplierRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\HPagesRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CompanyRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Purchase\\OrderPageRedux\\reducer.js",["1741","1742","1743","1744","1745","1746","1747","1748"],"import {\r\n  GET_ORDER_LIST_SUCCESS,\r\n  GET_ORDER_ITEMS_FOR_ORDER_PAGE_SUCCESS,\r\n  SUBMIT_ORDER_FROM_ORDER_PAGE_SUCCESS,\r\n  GET_DIVISIONORDER_LIST_SUCCESS,\r\n  GET_ORDER_LIST_MESSAGE,\r\n  EDIT_ORDER_SUCCESS,\r\n  UPDATE_ORDER_ID_FROM_ORDER_PAGE_SUCCESS,\r\n  EDIT_ORDER_FOR_ORDER_PAGE_SUCCESS,\r\n  DELETE_ORDER_FOR_ORDER_PAGE_SUCCESS,\r\n  GET_SUPPLIER_SUCCESS,\r\n  GO_BUTTON_FOR_ORDER_PAGE,\r\n  GO_BUTTON_FOR_ORDER_PAGE_SUCCESS,\r\n  POST_ORDER_FROM_ORDER_PAGE_SUCCESS,\r\n  GET_ORDER_LIST_PAGE_SUCCESS,\r\n} from \"./actionType\"\r\n\r\nconst INIT_STATE = {\r\n  orderItem: [],\r\n  postMsg: { Status: false },\r\n  editData: { Status: false, Items: [] },\r\n  updateMsg: { Status: false },\r\n  deleteMsg: { Status: false },\r\n  orderList: []\r\n\r\n\r\n}\r\n\r\nconst OrderReducer = (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n\r\n    case GO_BUTTON_FOR_ORDER_PAGE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        orderItem: action.payload,\r\n      }\r\n\r\n\r\n    case POST_ORDER_FROM_ORDER_PAGE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        postMsg: action.payload,\r\n      }\r\n\r\n\r\n    case EDIT_ORDER_FOR_ORDER_PAGE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        editData: action.payload,\r\n      }\r\n\r\n    case UPDATE_ORDER_ID_FROM_ORDER_PAGE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        updateMsg: action.payload,\r\n      }\r\n\r\n    case DELETE_ORDER_FOR_ORDER_PAGE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        deleteMsg: action.payload,\r\n      }\r\n\r\n    // Order List Page \r\n    case GET_ORDER_LIST_PAGE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        orderList: action.payload,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n\r\n}\r\n\r\nexport default OrderReducer","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\ModulesRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Utilites\\PageFiled\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Utilites\\Breadcrumb\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Utilites\\CommonError\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Utilites\\CustomAlertRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Utilites\\Spinner\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\auth\\forgetpwd\\reducer.js",["1749","1750","1751","1752"],"import {\r\n  FORGET_PASSWORD,\r\n  FORGET_PASSWORD_SUCCESS,\r\n  FORGET_PASSWORD_ERROR,\r\n  SEND_OTP_FOR_FORGET_PASSWORD_SUCCESS,\r\n  SEND_OTP_FOR_FORGET_PASSWORD_ERROR,\r\n  CHANGE_PASSWORD_FOR_FORGET_PASSWORD_ERROR,\r\n  CHANGE_PASSWORD_FOR_FORGET_PASSWORD_SUCCESS,\r\n} from \"./actionTypes\"\r\n\r\nconst initialState = {\r\n  forgetSuccessMsg: null,\r\n  forgetError: null,\r\n  sendOtpMegError:null,\r\n  sendOtpError:null,\r\n  sendPasswordMsg:null,\r\n  sendPasswordError:null,\r\n}\r\n\r\nconst forgetPassword = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    // case FORGET_PASSWORD:\r\n    //   state = {\r\n    //     ...state,\r\n    //     forgetSuccessMsg: null,\r\n    //     forgetError: null,\r\n   \r\n    //   }\r\n    //   break\r\n    // case FORGET_PASSWORD_SUCCESS:\r\n    //   state = {\r\n    //     ...state,\r\n    //     sendOtpMsg: action.payload,\r\n    //   }\r\n    //   break\r\n    // case FORGET_PASSWORD_ERROR:\r\n    //   state = { ...state,\r\n    //      forgetError: action.payload }\r\n    //   break\r\n\r\n    case SEND_OTP_FOR_FORGET_PASSWORD_SUCCESS:\r\n      state = {\r\n        ...state,\r\n        sendOTPSuccessMsg: action.payload,\r\n      }\r\n      break\r\n\r\n    case SEND_OTP_FOR_FORGET_PASSWORD_ERROR:\r\n      state = { ...state,\r\n        sendOtpMegError: action.payload }\r\n      break\r\n\r\n      case CHANGE_PASSWORD_FOR_FORGET_PASSWORD_SUCCESS:\r\n        state = {\r\n          ...state,\r\n          sendPasswordMsg: action.payload,\r\n          // sendOTPSuccessMsg: null,\r\n        }\r\n        break\r\n  \r\n      case CHANGE_PASSWORD_FOR_FORGET_PASSWORD_ERROR:\r\n        state = { ...state, \r\n          sendPasswordError: action.payload ,\r\n          // sendOTPSuccessMsg:'',\r\n          // sendOtpMegError:''\r\n        }\r\n          \r\n  \r\n\r\n    default:\r\n      state = { ...state }\r\n      break\r\n  }\r\n  return state\r\n}\r\n\r\nexport default forgetPassword\r\n","D:\\GitProjects\\Manthan\\src\\store\\auth\\profile\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\auth\\register\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\auth\\login\\reducer.js",["1753","1754","1755"],"import {\r\n  LOGIN_USER,\r\n  LOGIN_SUCCESS,\r\n  LOGOUT_USER,\r\n  LOGOUT_USER_SUCCESS,\r\n  API_ERROR,\r\n  ROLE_ACCESS_API_CALL_SUCCESS,\r\n  ROLE_ACCESS_API_UPDATE_SUCCESS,\r\n  GET_USER_DETAILS_AFTER_LOGIN_SUCCESS,\r\n  DESISION_DEROPDOWN_SUCCESS_AFTER_LOGIN,\r\n  GET_SUPER_ADMIN_API_SUCCESS\r\n} from \"./actionTypes\"\r\n\r\nconst initialState = {\r\n  loginError: null,\r\n  loading: false,\r\n  RoleData:[],\r\n  RoleAccessUpdateData:[],\r\n  afterLoginUserDetails:{},\r\n  divisionDropdown:[],\r\n  SuperAdmin:[]\r\n}\r\n\r\nconst Login = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case LOGIN_USER:\r\n      state = {\r\n        ...state,\r\n        loading: true,\r\n      }\r\n\r\n    case LOGIN_SUCCESS:\r\n      state = {\r\n        ...state,\r\n        loading: false,\r\n      }\r\n   \r\n    case LOGOUT_USER:\r\n      state = { ...state }\r\n      break\r\n    case LOGOUT_USER_SUCCESS:\r\n      state = { ...state }\r\n      \r\n    case API_ERROR:\r\n      state = { ...state, loginError: action.payload, loading: false }\r\n      break\r\n\r\n      case GET_USER_DETAILS_AFTER_LOGIN_SUCCESS:\r\n        return {\r\n          ...state,\r\n          afterLoginUserDetails: action.payload,\r\n        }\r\n        \r\n      case DESISION_DEROPDOWN_SUCCESS_AFTER_LOGIN:\r\n        return {\r\n          ...state,\r\n          divisionDropdown: action.payload,\r\n        }\r\n      case ROLE_ACCESS_API_CALL_SUCCESS:\r\n        return {\r\n          ...state,\r\n          RoleData: action.payload,\r\n        }\r\n\r\n        case ROLE_ACCESS_API_UPDATE_SUCCESS:\r\n          return {\r\n            ...state,\r\n            RoleAccessUpdateData: action.payload,\r\n          }\r\n\r\n          case GET_SUPER_ADMIN_API_SUCCESS:\r\n            return {\r\n              ...state,\r\n              SuperAdmin: action.payload,\r\n            }\r\n    default:\r\n      state = { ...state }\r\n      break\r\n  }\r\n  return state\r\n}\r\n\r\nexport default Login\r\n","D:\\GitProjects\\Manthan\\src\\store\\layout\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyItemsRedux\\saga.js",["1756"],"import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { Party_Items, GetSupplier_API, get_Item_List, get_Party_Item_List, Items_Master_Get_API, } from \"../../../helpers/backend_helper\";\r\nimport { AlertState } from \"../../Utilites/CustomAlertRedux/actions\";\r\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\r\nimport { PostPartyItemsSuccess, getSupplierSuccess, getPartyItemListSuccess, } from \"./action\";\r\nimport { POST_PARTYITEMS, GET_SUPPLIER, GET_PARTY_ITEM_LIST, } from \"./actionType\";\r\n\r\n// post api\r\nfunction* Post_PartyItems_GneratorFunction({ data }) {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(Party_Items, data);\r\n    yield put(SpinnerState(false))\r\n    yield put(PostPartyItemsSuccess(response));\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* getPartyItemGenFunc({ supplierId }) {\r\n\r\n\r\n  // yield put(SpinnerState(true))\r\n  try {\r\n    const itemList = yield call(Items_Master_Get_API);\r\n    const partyItem = yield call(get_Party_Item_List, supplierId);\r\n    const response = itemList.Data.map((item) => {\r\n      item[\"itemCheck\"] = false\r\n      partyItem.Data.forEach((ele) => {\r\n        if (item.id ===ele.Item) { item[\"itemCheck\"] = true }\r\n      });\r\n      return item\r\n    });\r\n    yield put(getPartyItemListSuccess(response));\r\n    // yield put(SpinnerState(false))\r\n  } catch (error) {\r\n    // yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* getSupplierGenFunc() {\r\n\r\n  const USER = JSON.parse(localStorage.getItem(\"roleId\"))\r\n  try {\r\n    const response = yield call(GetSupplier_API, USER.Party_id\r\n    );\r\n    yield put(getSupplierSuccess(response.Data));\r\n  } catch (error) {\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message for getSupplier \",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* PartyItemsSaga() {\r\n  yield takeEvery(POST_PARTYITEMS, Post_PartyItems_GneratorFunction)\r\n  yield takeEvery(GET_SUPPLIER, getSupplierGenFunc)\r\n  yield takeEvery(GET_PARTY_ITEM_LIST, getPartyItemGenFunc)\r\n}\r\n\r\nexport default PartyItemsSaga;","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartySubPartyRedux\\saga.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Utilites\\CustomSearchRedux\\reducer.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GroupRedux\\saga.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GSTRedux\\saga.js",["1757"],"import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { delete_GSTList_API, GetGSTList_For_Listpage, GoButton_Post_API_For_GSTMaster, GSTList_Delete_API, GST_MasterPage_delete_API, Post_GSTMaster_API } from \"../../../helpers/backend_helper\";\r\nimport { AlertState } from \"../../Utilites/CustomAlertRedux/actions\";\r\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\r\nimport {\r\n  deleteGSTForMasterPageSuccess,\r\n  deleteGSTListPageSuccess,\r\n  getGSTListPageSuccess,\r\n  postGoButtonForGST_Master_Success,\r\n  postGSTMasterDataSuccess\r\n} from \"./action\";\r\nimport {\r\n  DELETE_GST_FOR_MASTER_PAGE,\r\n  DELETE_GST_LIST_PAGE,\r\n  GET_GST_LIST_PAGE,\r\n  POST_GO_BUTTON_FOR_GST_MASTER,\r\n  POST_GST_MASTER_DATA\r\n} from \"./actionType\";\r\n\r\nfunction* Post_GSTMaster_GenratorFunction({ Data }) {\r\n\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(Post_GSTMaster_API, Data);\r\n    yield put(SpinnerState(false))\r\n    yield put(postGSTMasterDataSuccess(response));\r\n    console.log(\"response\", response)\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n\r\n//listpage\r\nfunction* get_GSTListPage_GenratorFunction() {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(GetGSTList_For_Listpage);\r\n    yield put(SpinnerState(false))\r\n    yield put(getGSTListPageSuccess(response.Data));\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n//delete\r\nfunction* delete_GSTListPage_GenratorFunction({ CommonID }) {\r\n  debugger\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(delete_GSTList_API, CommonID);\r\n    yield put(SpinnerState(false))\r\n    yield put(deleteGSTListPageSuccess(response));\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* GSTGoButton_post_GenratorFunction({ data }) {\r\n\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(GoButton_Post_API_For_GSTMaster, data);\r\n    yield put(SpinnerState(false))\r\n    yield put(postGoButtonForGST_Master_Success(response.Data));\r\n    console.log(\"response\",response)\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// delete api for GST Master\r\nfunction* deleteId_for_GSTMaster_GenratorFunction({ id }) {\r\n  try {\r\n    yield put(SpinnerState(true))\r\n    const response = yield call(GST_MasterPage_delete_API, id);\r\n    response[\"deletedId\"] = id\r\n    yield put(deleteGSTForMasterPageSuccess(response))\r\n    yield put(SpinnerState(false))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction* GSTSaga() {\r\n  yield takeEvery(POST_GST_MASTER_DATA, Post_GSTMaster_GenratorFunction);\r\n  yield takeEvery(GET_GST_LIST_PAGE, get_GSTListPage_GenratorFunction);\r\n  yield takeEvery(DELETE_GST_LIST_PAGE, delete_GSTListPage_GenratorFunction);\r\n  yield takeEvery(POST_GO_BUTTON_FOR_GST_MASTER, GSTGoButton_post_GenratorFunction);\r\n  yield takeEvery(DELETE_GST_FOR_MASTER_PAGE, deleteId_for_GSTMaster_GenratorFunction);\r\n\r\n}\r\n\r\nexport default GSTSaga;\r\n","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\GroupTypeRedux\\saga.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\TermsAndCondtionsRedux\\saga.js",["1758","1759","1760","1761"],"import { call, put, takeEvery } from \"redux-saga/effects\";\r\n\r\nimport { DeleteTermsAndCondtions_Success,postTermAndConditionSuccess, getTermAndCondition, getTermAndCondition_Success} from \"./actions\";\r\n\r\nimport {Post_TermsAndCondtions_Master_API,get_TermsAndCondtionsList_API,delete_TermsAndCondtions_API } from \"../../../helpers/backend_helper\";\r\n\r\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\r\n\r\nimport {  DELETE_METHOD_FOR_TERMSANDCONDITIONSLIST_API,POST_METHOD_HANDLER_FOR_TERMSANDCONDITIONS_MASTER_API,GET_METHOD_FOR_TERMSANDCONDITIONSLIST_API } from \"./actionTypes\";\r\n\r\nimport { AlertState } from \"../../actions\";\r\n\r\n\r\n// post api\r\nfunction* Post_Method_ForTermsAndCondtionsMaster_GenFun({ data }) {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(Post_TermsAndCondtions_Master_API, data);\r\n    yield put(SpinnerState(false))\r\n    yield put(postTermAndConditionSuccess(response));\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// Get List Page API\r\nfunction* Get_TermsAndCondtions_GenratorFunction() {\r\n  debugger\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(get_TermsAndCondtionsList_API);\r\n    \r\n    yield put(getTermAndCondition_Success(response.Data));\r\n    yield put(SpinnerState(false))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// delete List Page API\r\n// function* Delete_TermsAndCondtions_GenratorFunction({id}) {\r\n//   debugger\r\n//   yield put(SpinnerState(true))\r\n//   try {\r\n//     const response = yield call(delete_TermsAndCondtions_API,id);\r\n    \r\n//     yield put(DeleteTermsAndCondtions_Success(response));\r\n//     yield put(SpinnerState(false))\r\n//   } catch (error) {\r\n//     yield put(SpinnerState(false))\r\n//     yield put(AlertState({\r\n//       Type: 4,\r\n//       Status: true, Message: \"500 Error Message\",\r\n//     }));\r\n//   }\r\n// }\r\n\r\n\r\nfunction* TermsAndCondtionsSaga () {\r\n  yield takeEvery(POST_METHOD_HANDLER_FOR_TERMSANDCONDITIONS_MASTER_API, Post_Method_ForTermsAndCondtionsMaster_GenFun)\r\n  yield takeEvery(GET_METHOD_FOR_TERMSANDCONDITIONSLIST_API, Get_TermsAndCondtions_GenratorFunction)\r\n  // yield takeEvery(DELETE_METHOD_FOR_TERMSANDCONDITIONSLIST_API, Delete_TermsAndCondtions_GenratorFunction)\r\n\r\n}\r\n\r\nexport default TermsAndCondtionsSaga;","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\MarginMasterRedux\\saga.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\MRPMasterRedux\\saga.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CompanyGroupRedux\\saga.js",["1762"],"import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\r\n import { PostMethod_ForCompanyGroupMasterSuccess, getMethod_ForCompanyGroupListSuccess,  deleteCompanyGroupTypeIDSuccess, editCompanyGroupTypeSuccess, updateCompanyGroupTypeIDSuccess} from \"./action\";\r\nimport {\r\n   get_CompanyGroupList_API,\r\n   Post_CompanyGroup_API,\r\n   detelet_CompanyGroupType_List_Api,\r\n   edit_CompanyGroupType_List_Api,\r\n   update_CompanyGroupType_List_Api,\r\n} from \"../../../helpers/backend_helper\";\r\n\r\nimport { POST_METHOD_FOR_COMPANYGROUP_MASTER,\r\n  GET_METHOD_FOR_COMPANYGROUP_LIST,\r\n  DELETE_COMPANYGROUP_TYPE_ID,\r\n  EDIT_COMPANYGROUP_TYPE_ID,\r\n  UPDATE_COMPANYGROUP_TYPE_ID\r\n\r\n} from \"./actionType\";\r\nimport { AlertState } from \"../../actions\";\r\nimport { PaginationListStandalone } from \"react-bootstrap-table2-paginator\";\r\n\r\n// Get List Page API\r\nfunction* Get_CompanyGroup_GenratorFunction() {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(get_CompanyGroupList_API);\r\n    yield put(getMethod_ForCompanyGroupListSuccess(response.Data));\r\n    yield put(SpinnerState(false))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// post api\r\nfunction* Post_Method_For_CompanyGroup_GenFun({ data }) {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(Post_CompanyGroup_API, data);\r\n    yield put(SpinnerState(false))\r\n    yield put(PostMethod_ForCompanyGroupMasterSuccess(response));\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n// delete api \r\nfunction* Delete_CompanyGroupType_ID_GenratorFunction({ id }) {\r\n  try {\r\n    yield put(SpinnerState(true))\r\n    const response = yield call(detelet_CompanyGroupType_List_Api, id);\r\n    yield put(SpinnerState(false))\r\n    yield put(deleteCompanyGroupTypeIDSuccess(response))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// edit api\r\nfunction* Edit_CompanyGroupType_ID_GenratorFunction({ id ,pageMode}) {\r\n  try {\r\n    const response = yield call(edit_CompanyGroupType_List_Api, id);\r\n    response.pageMode=pageMode\r\n    yield put(editCompanyGroupTypeSuccess(response));\r\n    console.log(\"response in saga\", response)\r\n\r\n  } catch (error) {\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// update api\r\nfunction* Update_CompanyGroupType_ID_GenratorFunction({ updateData, ID }) {\r\n  try {\r\n    yield put(SpinnerState(true))\r\n    const response = yield call(update_CompanyGroupType_List_Api, updateData, ID);\r\n    yield put(SpinnerState(false))\r\n    yield put(updateCompanyGroupTypeIDSuccess(response))\r\n  }\r\n  catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction* CompanyGroupSaga() {\r\n  yield takeEvery(POST_METHOD_FOR_COMPANYGROUP_MASTER, Post_Method_For_CompanyGroup_GenFun)\r\n  yield takeEvery(GET_METHOD_FOR_COMPANYGROUP_LIST, Get_CompanyGroup_GenratorFunction)\r\n  yield takeEvery(DELETE_COMPANYGROUP_TYPE_ID, Delete_CompanyGroupType_ID_GenratorFunction)\r\n  yield takeEvery(EDIT_COMPANYGROUP_TYPE_ID, Edit_CompanyGroupType_ID_GenratorFunction)\r\n  yield takeEvery(UPDATE_COMPANYGROUP_TYPE_ID, Update_CompanyGroupType_ID_GenratorFunction)\r\n}\r\n\r\nexport default CompanyGroupSaga;","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PriceList\\saga.js",["1763","1764"],"import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { delete_PriceList_API, get_PriceListByPartyType_API, Post_PriceList_API,edit_PriceList,update_PriceList, GetPriceList_For_Listpage } from \"../../../helpers/backend_helper\";\r\nimport { AlertState } from \"../../Utilites/CustomAlertRedux/actions\";\r\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\r\nimport { getPriceListSuccess } from \"../PartyRedux/action\";\r\nimport { delete_PriceListSuccess, getPriceListDataSuccess, postPriceListDataSuccess,editPriceListSuccess,updatePriceListSuccess, getPriceListPageSuccess } from \"./action\";\r\nimport { DELETE_PRICE_LIST, GET_PRICE_LIST_DATA, POST_PRICE_LIST_DATA,EDIT_PRICE_LIST,UPDATE_PRICE_LIST, GET_PRICE_LIST, GET_PRICE_LIST_PAGE } from \"./actionType\";\r\n\r\n\r\nfunction* Post_PriceList_GenratorFunction({ Data }) {\r\n  debugger\r\n    yield put(SpinnerState(true))\r\n    try {\r\n      const response = yield call(Post_PriceList_API, Data);\r\n      yield put(SpinnerState(false))\r\n      yield put(postPriceListDataSuccess(response));\r\n    } catch (error) {\r\n      yield put(SpinnerState(false))\r\n      yield put(AlertState({ Type: 4, \r\n        Status: true, Message: \"500 Error Message\",\r\n      }));\r\n    }\r\n  }\r\n  \r\nfunction* get_PriceList_GenratorFunction({ partyType }) {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(get_PriceListByPartyType_API, partyType);\r\n    yield put(SpinnerState(false))\r\n    yield put(getPriceListDataSuccess(response.Data));\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({ Type: 4, \r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n\r\n//listpage\r\nfunction* get_PriceListPage_GenratorFunction() {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(GetPriceList_For_Listpage);\r\n    yield put(SpinnerState(false))\r\n    yield put(getPriceListPageSuccess(response.Data));\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({ Type: 4, \r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n//delete\r\nfunction* delete_PriceList_GenFun({ id }) {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(delete_PriceList_API, id);\r\n    yield put(SpinnerState(false))\r\n    yield put(delete_PriceListSuccess(response));\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({ Type: 4, \r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n\r\n\r\n// edit api\r\nfunction* Edit_PriceList__GenratorFunction({ id ,pageMode}) {\r\n  try {\r\n    const response = yield call(edit_PriceList, id);\r\n    response.pageMode=pageMode\r\n    yield put(editPriceListSuccess(response));\r\n    console.log(\"response in saga\", response)\r\n\r\n  } catch (error) {\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// update api\r\nfunction* Update_PriceList_GenratorFunction({ updateData, ID }) {\r\n  try {\r\n    yield put(SpinnerState(true))\r\n    const response = yield call(update_PriceList, updateData, ID);\r\n    yield put(SpinnerState(false))\r\n    yield put(updatePriceListSuccess(response))\r\n  }\r\n  catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n\r\n  function* PriceListSaga() {\r\n    yield takeEvery(POST_PRICE_LIST_DATA, Post_PriceList_GenratorFunction);\r\n    yield takeEvery(GET_PRICE_LIST_DATA, get_PriceList_GenratorFunction);\r\n    yield takeEvery(GET_PRICE_LIST_PAGE,    get_PriceListPage_GenratorFunction);                        \r\n    yield takeEvery(DELETE_PRICE_LIST, delete_PriceList_GenFun);\r\n    yield takeEvery(EDIT_PRICE_LIST, Edit_PriceList__GenratorFunction);\r\n    yield takeEvery(UPDATE_PRICE_LIST, Update_PriceList_GenratorFunction);\r\n  }\r\n  export default PriceListSaga;\r\n","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\DriverRedux\\saga.js",["1765"],"import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\r\n import { PostMethod_ForDriverMasterSuccess, getMethod_ForDriverListSuccess,  deleteDriverTypeIDSuccess, editDriverTypeSuccess, updateDriverTypeIDSuccess} from \"./action\";\r\nimport {\r\n   get_DriverList_API,\r\n   Post_Driver_API,\r\n   detelet_DriverType_List_Api,\r\n   edit_DriverType_List_Api,\r\n   update_DriverType_List_Api,\r\n} from \"../../../helpers/backend_helper\";\r\n\r\nimport { POST_METHOD_FOR_DRIVER_MASTER,\r\n  GET_METHOD_FOR_DRIVER_LIST,\r\n  DELETE_DRIVER_TYPE_ID,\r\n  EDIT_DRIVER_TYPE_ID,\r\n  UPDATE_DRIVER_TYPE_ID\r\n\r\n} from \"./actionType\";\r\nimport { AlertState } from \"../../actions\";\r\nimport { PaginationListStandalone } from \"react-bootstrap-table2-paginator\";\r\n\r\n// Get List Page API\r\nfunction* Get_Driver_GenratorFunction() {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(get_DriverList_API);\r\n    yield put(getMethod_ForDriverListSuccess(response.Data));\r\n    yield put(SpinnerState(false))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// post api\r\nfunction* Post_Method_For_Driver_GenFun({ data }) {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(Post_Driver_API, data);\r\n    yield put(SpinnerState(false))\r\n    yield put(PostMethod_ForDriverMasterSuccess(response));\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n// delete api \r\nfunction* Delete_DriverType_ID_GenratorFunction({ id }) {\r\n  try {\r\n    yield put(SpinnerState(true))\r\n    const response = yield call(detelet_DriverType_List_Api, id);\r\n    yield put(SpinnerState(false))\r\n    yield put(deleteDriverTypeIDSuccess(response))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// edit api\r\nfunction* Edit_DriverType_ID_GenratorFunction({ id ,pageMode}) {\r\n  try {\r\n    const response = yield call(edit_DriverType_List_Api, id);\r\n    response.pageMode=pageMode\r\n    yield put(editDriverTypeSuccess(response));\r\n    console.log(\"response in saga\", response)\r\n\r\n  } catch (error) {\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// update api\r\nfunction* Update_DriverType_ID_GenratorFunction({ updateData, ID }) {\r\n  try {\r\n    yield put(SpinnerState(true))\r\n    const response = yield call(update_DriverType_List_Api, updateData, ID);\r\n    yield put(SpinnerState(false))\r\n    yield put(updateDriverTypeIDSuccess(response))\r\n  }\r\n  catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction* DriverSaga() {\r\n  yield takeEvery(POST_METHOD_FOR_DRIVER_MASTER, Post_Method_For_Driver_GenFun)\r\n  yield takeEvery(GET_METHOD_FOR_DRIVER_LIST, Get_Driver_GenratorFunction)\r\n  yield takeEvery(DELETE_DRIVER_TYPE_ID, Delete_DriverType_ID_GenratorFunction)\r\n  yield takeEvery(EDIT_DRIVER_TYPE_ID, Edit_DriverType_ID_GenratorFunction)\r\n  yield takeEvery(UPDATE_DRIVER_TYPE_ID, Update_DriverType_ID_GenratorFunction)\r\n}\r\n\r\nexport default DriverSaga;","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\SubCategoryRedux\\saga.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\VehicleRedux\\saga.js",["1766"],"import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\r\nimport { PostMethod_ForVehicleMasterSuccess, getMethod_ForVehicleListSuccess,getMethod_DriverList_ForDropDown_Success, getMethod_VehicleTypes_ForDropDown_Success, deleteVehicleTypeIDSuccess, editVehicleTypeSuccess, updateVehicleTypeIDSuccess} from \"./action\";\r\nimport {\r\n  get_Vehicle_API,\r\n  Post_Vehicle_API,\r\n  get_VehicleTypes_API,\r\n  get_DriverListAPI,\r\n  detelet_VehicleType_List_Api,\r\n  edit_VehicleType_List_Api,\r\n  update_VehicleType_List_Api,\r\n} from \"../../../helpers/backend_helper\";\r\n\r\nimport { POST_METHOD_FOR_VEHICLE_MASTER,\r\n  GET_METHOD_FOR_VEHICLE_LIST,\r\n  GET_METHOD_DRIVERLIST_FOR_DROPDOWN,\r\n  GET_METHOD_VEHICLETYPES_FOR_DROPDOWN,\r\n  DELETE_VEHICLE_TYPE_ID,\r\n  EDIT_VEHICLE_TYPE_ID,\r\n  UPDATE_VEHICLE_TYPE_ID\r\n\r\n} from \"./actionType\";\r\nimport { AlertState } from \"../../actions\";\r\nimport { PaginationListStandalone } from \"react-bootstrap-table2-paginator\";\r\n\r\n// Get List Page API\r\nfunction* Get_Vehicle_GenratorFunction() {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(get_Vehicle_API);\r\n    yield put(getMethod_ForVehicleListSuccess(response.Data));\r\n    yield put(SpinnerState(false))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n// post api\r\nfunction* Post_Method_ForVehicle_GenFun({ data }) {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(Post_Vehicle_API, data);\r\n    yield put(SpinnerState(false))\r\n    yield put(PostMethod_ForVehicleMasterSuccess(response));\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n\r\n// get VehicleTypes Dropdown API\r\nfunction* get_VehicleTypes_DropDown_GenFun() {\r\n\r\n  try {\r\n    const response = yield call(get_VehicleTypes_API);\r\n    yield put(getMethod_VehicleTypes_ForDropDown_Success(response.Data));\r\n  \r\n  } catch (error) {\r\n    console.log(\" Vehicle API page error\", error);\r\n  }\r\n}\r\n\r\n// get DriverList Types Dropdown API\r\nfunction* get_DriverList_DropDown_GenFun() {\r\n\r\n  try {\r\n    const response = yield call(get_DriverListAPI );\r\n    yield put(getMethod_DriverList_ForDropDown_Success(response.Data));\r\n    \r\n  } catch (error) {\r\n    console.log(\" Vehicle API page error\", error);\r\n  }\r\n}\r\n\r\n// delete api \r\nfunction* Delete_VehicleType_ID_GenratorFunction({ id }) {\r\n  try {\r\n    yield put(SpinnerState(true))\r\n    const response = yield call(detelet_VehicleType_List_Api, id);\r\n    yield put(SpinnerState(false))\r\n    yield put(deleteVehicleTypeIDSuccess(response))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// edit api\r\nfunction* Edit_VehicleType_ID_GenratorFunction({ id ,pageMode}) {\r\n  try {\r\n    const response = yield call(edit_VehicleType_List_Api, id);\r\n    response.pageMode=pageMode\r\n    yield put(editVehicleTypeSuccess(response));\r\n   \r\n\r\n  } catch (error) {\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// update api\r\nfunction* Update_VehicleType_ID_GenratorFunction({ updateData, ID }) {\r\n  try {\r\n    yield put(SpinnerState(true))\r\n    const response = yield call(update_VehicleType_List_Api, updateData, ID);\r\n    yield put(SpinnerState(false))\r\n    yield put(updateVehicleTypeIDSuccess(response))\r\n  }\r\n  catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction* VehicleSaga() {\r\n  yield takeEvery(POST_METHOD_FOR_VEHICLE_MASTER, Post_Method_ForVehicle_GenFun)\r\n  yield takeEvery(GET_METHOD_FOR_VEHICLE_LIST, Get_Vehicle_GenratorFunction)\r\n  yield takeEvery(GET_METHOD_DRIVERLIST_FOR_DROPDOWN, get_DriverList_DropDown_GenFun)\r\n  yield takeEvery(GET_METHOD_VEHICLETYPES_FOR_DROPDOWN, get_VehicleTypes_DropDown_GenFun)\r\n  yield takeEvery(DELETE_VEHICLE_TYPE_ID, Delete_VehicleType_ID_GenratorFunction)\r\n  yield takeEvery(EDIT_VEHICLE_TYPE_ID, Edit_VehicleType_ID_GenratorFunction)\r\n  yield takeEvery(UPDATE_VEHICLE_TYPE_ID, Update_VehicleType_ID_GenratorFunction)\r\n}\r\n\r\nexport default VehicleSaga;","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CategoryTypeRedux\\saga.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CategoryRedux\\saga.js",["1767","1768","1769"],"import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { getMethod_ForCategoryAPISuccess,  PostMethod_ForCategoryAPISuccess} from \"./action\";\r\nimport { GET_METHOD_HANDLER_FOR_CATEGORY,\r\n        POST_METHOD_HANDLER_FOR_CATEGORY_API,\r\n        DELETE_CATEGORY_ID,\r\n        EDIT_CATEGORY_ID,\r\n        GET_CATEGORY_LIST,\r\n        UPDATE_CATEGORY_ID\r\n      } from \"./actionTypes\";\r\n\r\nimport { AlertState } from \"../../Utilites/CustomAlertRedux/actions\";\r\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\r\n\r\nimport { get_Category_Master_API, \r\n        Post_Category_API,\r\n        detelet_Category_List_Api,\r\n        edit_Category_List_Api,\r\n         get_Category_List_Api,\r\n         update_Category_List_Api\r\n     } from \"../../../helpers/backend_helper\";\r\n  \r\nimport {\r\n  deleteCategoryIDSuccess,\r\n  editCategoryIDSuccess,\r\n  getCategorylistSuccess,\r\n  updateCategoryIDSuccess\r\n} from \"./action\";\r\n\r\n\r\n\r\n// post api\r\nfunction*  Post_Method_ForCategory_GenFun({ data }) {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(Post_Category_API, data);\r\n    yield put(SpinnerState(false))\r\n    yield put(PostMethod_ForCategoryAPISuccess(response));\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n\r\n// get api\r\nfunction* Get_Category_List_GenratorFunction() {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    \r\n    const response = yield call(get_Category_List_Api);\r\n    yield put(getCategorylistSuccess(response.Data));\r\n    yield put(SpinnerState(false))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// delete api \r\nfunction* Delete_Category_ID_GenratorFunction({ id }) {\r\n  try {\r\n    yield put(SpinnerState(true))\r\n    const response = yield call(detelet_Category_List_Api, id);\r\n    yield put(SpinnerState(false))\r\n    yield put(deleteCategoryIDSuccess(response))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// edit api\r\nfunction* Edit_Category_ID_GenratorFunction({ id,pageMode }) {\r\n  try {\r\n    const response = yield call(edit_Category_List_Api, id);\r\n    response.pageMode=pageMode\r\n    yield put(editCategoryIDSuccess(response));\r\n    console.log(\"response in saga\", response)\r\n\r\n  } catch (error) {\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// update api\r\nfunction* Update_Category_ID_GenratorFunction({ updateData, ID }) {\r\n  try {\r\n    yield put(SpinnerState(true))\r\n    const response = yield call(update_Category_List_Api, updateData, ID);\r\n    yield put(SpinnerState(false))\r\n    yield put(updateCategoryIDSuccess(response))\r\n  }\r\n  catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n  function*  CategorySaga() {\r\n    yield takeEvery( POST_METHOD_HANDLER_FOR_CATEGORY_API,Post_Method_ForCategory_GenFun)\r\n    yield takeEvery(GET_CATEGORY_LIST, Get_Category_List_GenratorFunction)\r\n    yield takeEvery(DELETE_CATEGORY_ID, Delete_Category_ID_GenratorFunction)\r\n    yield takeEvery(EDIT_CATEGORY_ID, Edit_Category_ID_GenratorFunction)\r\n    yield takeEvery(UPDATE_CATEGORY_ID, Update_Category_ID_GenratorFunction)\r\n  }\r\n  \r\n  export default CategorySaga;","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyTypeRedux\\saga.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\EmployeeTypeRedux\\saga.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\RoleAccessRedux\\saga.js",["1770"],"import { call, put, takeEvery } from \"redux-saga/effects\";\r\n// import {\r\n\r\n//   PostModelsSubmitSuccess,\r\n// } from \"./actions\";\r\nimport {\r\n  AddPageHandlerForRoleAccessList_Api,\r\n  GetRoleListForRoleAccessList_Page_Api,\r\n  Get_RoleAccess_List_Page_Api,\r\n  GO_Button_HandlerForRoleAccessList_Api,\r\n PageDropdownForRoleAccessList_Api, PostMethod_HandlerForRoleAccessList_Api, Post_CopyRoleAccess_for_RoleAccess_Api,\r\n\r\n} from \"../../../helpers/backend_helper\";\r\nimport {\r\n  ADD_PAGE_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE,\r\n  GET_ROLEACCESS_LIST_PAGE,\r\n  GET_ROLE_ACCESS_LIST_FOR_ROLE_ACCESS_lIST_PAGE,\r\n  GO_BUTTON_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE,\r\n  PAGE_DROPDOWN_FOR_ROLE_ACCESS_lIST,\r\n  POST_METHOD_HANDLER_FOR_COPY_ROLE_ACCESS_FOR_ROLE_ACCESS,\r\n  POST_METHOD_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE,\r\n} from \"./actionType\";\r\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\r\nimport { AlertState } from \"../../Utilites/CustomAlertRedux/actions\";\r\nimport {\r\n  AddPageHandlerForRoleAccessListPage_Success,\r\n  getRoleAccessListPageSuccess,\r\n  GetRoleListForRoleAccessListPage_Success,\r\n  GO_Button_HandlerForRoleAccessListPage_Success,\r\n  PageDropdownForRoleAccessList_Success,\r\n  PostMethod_ForRoleAccessListPage_Success,\r\n  PostMethod_ForCopyRoleAccessFor_Role_Succes,\r\n  PostMethod_ForCopyRoleAccessFor_Role_Success,\r\n} from \"./actions\";\r\n\r\n\r\n\r\nfunction* GetRoleAccessListForRoleAccessList_GenratorFunction({ id1, id2 }) {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(GetRoleListForRoleAccessList_Page_Api, id1, id2);\r\n    yield put(SpinnerState(false))\r\n    yield put(GetRoleListForRoleAccessListPage_Success(response.Data));\r\n  }\r\n  catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n\r\nfunction* PageDropdownForRoleAccessList_GenratorFunction({ id1,id2 }) {\r\n  try {\r\n    const response = yield call(PageDropdownForRoleAccessList_Api, id1,id2);\r\n    yield put(PageDropdownForRoleAccessList_Success(response.Data));\r\n  }\r\n  catch (error) {\r\n    \r\n  }\r\n}\r\n\r\nfunction* GoButtonHandlerForRoleAccessList_GenratorFunction({ id1,id2}) {\r\n\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(GO_Button_HandlerForRoleAccessList_Api, id1,id2);\r\n    yield put(SpinnerState(false))\r\n    yield put(GO_Button_HandlerForRoleAccessListPage_Success(response.Data));\r\n  }\r\n  catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* AddPageHandlerForRoleAccessList_GenratorFunction({ id }) {\r\n\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(AddPageHandlerForRoleAccessList_Api, id);\r\n    yield put(SpinnerState(false))\r\n    yield put(AddPageHandlerForRoleAccessListPage_Success(response.Data));\r\n  }\r\n  catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* PostMethod_HandlerForRoleAccessList_GenratorFunction({ data }) {\r\n \r\n  yield put(SpinnerState(true))\r\n  try {\r\n\r\n    const response = yield call(PostMethod_HandlerForRoleAccessList_Api, data);\r\n    yield put(SpinnerState(false))\r\n\r\n    yield put(PostMethod_ForRoleAccessListPage_Success(response));\r\n  }\r\n  catch (error) {\r\n \r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n/// get api\r\n\r\nfunction* Get_RoleAccessList_GenratorFunction() {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(Get_RoleAccess_List_Page_Api);\r\n    yield put(getRoleAccessListPageSuccess(response.Data));\r\n    yield put(SpinnerState(false))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n\r\n// post api\r\n\r\nfunction*  Post_MethodForCopyRoleAccess_GenFun({data}) {\r\n  debugger\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(Post_CopyRoleAccess_for_RoleAccess_Api,data);\r\n    yield put(PostMethod_ForCopyRoleAccessFor_Role_Success(response));\r\n    yield put(SpinnerState(false))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    \r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nfunction* RoleAccessSaga() {\r\n  yield takeEvery(PAGE_DROPDOWN_FOR_ROLE_ACCESS_lIST,PageDropdownForRoleAccessList_GenratorFunction);\r\n  yield takeEvery(GET_ROLE_ACCESS_LIST_FOR_ROLE_ACCESS_lIST_PAGE, GetRoleAccessListForRoleAccessList_GenratorFunction);\r\n  yield takeEvery(GO_BUTTON_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE, GoButtonHandlerForRoleAccessList_GenratorFunction);\r\n  yield takeEvery(ADD_PAGE_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE, AddPageHandlerForRoleAccessList_GenratorFunction);\r\n  yield takeEvery(POST_METHOD_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE, PostMethod_HandlerForRoleAccessList_GenratorFunction);\r\n  yield takeEvery(GET_ROLEACCESS_LIST_PAGE, Get_RoleAccessList_GenratorFunction);\r\n  yield takeEvery(POST_METHOD_HANDLER_FOR_COPY_ROLE_ACCESS_FOR_ROLE_ACCESS, Post_MethodForCopyRoleAccess_GenFun);\r\n\r\n}\r\n\r\nexport default RoleAccessSaga;\r\n","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\PartyRedux\\saga.js",["1771","1772","1773","1774","1775","1776","1777"],"import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { GetPriceList_For_Dropdown, GetCompanyByDivisionTypeID_For_Dropdown, GetDistrictOnState_For_Dropdown, GetPartyTypeByDivisionTypeID_For_Dropdown, Party_Master_Delete_API, Party_Master_Edit_API, Party_Master_Get_API, Party_Master_Post_API, Party_Master_Update_API, GetAddressTypes_For_Dropdown, GetParty_For_Dropdown, GetPartyTypes_For_Dropdown, GetCompany_For_Dropdown } from \"../../../helpers/backend_helper\";\r\nimport { AlertState } from \"../../Utilites/CustomAlertRedux/actions\";\r\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\r\nimport { deletePartyIDSuccess, editPartyIDSuccess, GetCompanyByDivisionTypeIDSuccess, getDistrictOnStateSuccess,  getPartyListAPISuccess, GetPartyTypeByDivisionTypeIDSuccess, getPriceListSuccess, postPartyDataSuccess, updatePartyIDSuccess,getAddressTypesSuccess, getPartySuccess, getPartyTypesSuccess, getCompanySuccess } from \"./action\";\r\nimport { DELETE_PARTY_ID, EDIT_PARTY_ID, GET_COMPANY_BY_DIVISIONTYPES_ID, GET_DISTRICT_ON_STATE, GET_PRICELIST,GET_ADDRESSTYPES, GET_PARTTYPE_BY_DIVISIONTYPES_ID, GET_PARTY_LIST_API, POST_PARTY_DATA, UPDATE_PARTY_ID, GET_PARTY, GET_PARTYTYPES, GET_COMPANY } from \"./actionTypes\";\r\n\r\n// function* Get_Party_GenratorFunction() {\r\n//     yield put(SpinnerState(true))\r\n//     try {\r\n//       const response = yield call(Party_Master_Get_API);\r\n//       yield put(getPartyListAPISuccess(response.Data));\r\n//       yield put(SpinnerState(false))\r\n//     } catch (error) {\r\n//       yield put(SpinnerState(false))\r\n//       yield put(AlertState({ Type: 4, \r\n//         Status: true, Message: \"500 Error Message\",\r\n//       }));\r\n//     }\r\n//   }\r\n  \r\n  function* Get_Party_GenratorFunction() {\r\n    yield put(SpinnerState(true))\r\n    try {\r\n      const response = yield call(Party_Master_Get_API);\r\n      yield put(SpinnerState(false))\r\n      if (response.StatusCode === 200) yield put(getPartyListAPISuccess(response.Data))\r\n      else yield put(AlertState({\r\n        Type: 4,\r\n        Status: true, Message: JSON.stringify(response.Message),\r\n      }));\r\n    } catch (error) {\r\n      yield put(SpinnerState(false))\r\n      yield put(AlertState({\r\n        Type: 4,\r\n        Status: true, Message: \"500 Error Message\",\r\n      }));\r\n    }\r\n  }\r\n  function* Submit_Party_GenratorFunction({ Data }) {\r\n    yield put(SpinnerState(true))\r\n    try {\r\n      const response = yield call(Party_Master_Post_API, Data);\r\n      console.log(\"response\",response)\r\n      yield put(SpinnerState(false))\r\n      yield put(postPartyDataSuccess(response));\r\n    } catch (error) {\r\n      yield put(SpinnerState(false))\r\n      yield put(AlertState({ Type: 4, \r\n        Status: true, Message: \"500 Error Message\",\r\n      }));\r\n    }\r\n  }\r\n  \r\n    function* Delete_Party_GenratorFunction({ id }) {\r\n      try {\r\n        yield put(SpinnerState(true))\r\n        const response = yield call(Party_Master_Delete_API, id);\r\n        yield put(SpinnerState(false))\r\n        yield put(deletePartyIDSuccess(response))\r\n      } catch (error) {\r\n        yield put(SpinnerState(false))\r\n        yield put(AlertState({ Type: 4, \r\n          Status: true, Message: \"500 Error Message\",\r\n        }));\r\n      }\r\n    }\r\n  \r\n  function* Edit_Party_GenratorFunction({ id,pageMode }) {\r\n    try {\r\n      const response = yield call(Party_Master_Edit_API, id);\r\n      response.pageMode=pageMode\r\n      yield put(editPartyIDSuccess(response));\r\n \r\n    } catch (error) {\r\n      yield put(AlertState({ Type: 4, \r\n        Status: true, Message: \"500 Error Message\",\r\n      }));\r\n    }\r\n  }\r\n  \r\n  function* Update_Party_GenratorFunction({ updateData, id }) {\r\n   \r\n    try {\r\n      yield put(SpinnerState(true))\r\n      const response = yield call(Party_Master_Update_API, updateData, id);\r\n      yield put(SpinnerState(false))\r\n      yield put(updatePartyIDSuccess(response))\r\n    }\r\n    catch (error) {\r\n      yield put(SpinnerState(false))\r\n      yield put(AlertState({ Type: 4, \r\n        Status: true, Message: \"500 Error Message\",\r\n      }));\r\n    }\r\n  }\r\n\r\n// GetDistrictOnState API\r\nfunction* GetDistrictOnState_saga({id}) {\r\n  try {\r\n    const response = yield call(GetDistrictOnState_For_Dropdown,id);\r\n    yield put(getDistrictOnStateSuccess(response.Data));\r\n  } catch (error) {\r\n    console.log(\"GetDistrictOnState_saga page error\", error);\r\n  }\r\n}\r\n\r\n//get pricelist\r\nfunction* GetPriceList_saga({}) {\r\n  try {\r\n    const response = yield call(GetPriceList_For_Dropdown);\r\n    yield put(getPriceListSuccess(response.Data));\r\n  } catch (error) {\r\n    console.log(\"GetpriceList_saga page error\", error);\r\n  }\r\n}\r\n\r\n//get addresstypes\r\nfunction* GetAddressTypes_saga({}) {\r\n  try {\r\n    const response = yield call(GetAddressTypes_For_Dropdown);\r\n    yield put(getAddressTypesSuccess(response.Data));\r\n  } catch (error) {\r\n    console.log(\"GetAddressTypes_saga page error\", error);\r\n  }\r\n}\r\n\r\n//get partytypes\r\nfunction* GetPartyTypes_saga({}) {\r\n  try {\r\n    const response = yield call(GetPartyTypes_For_Dropdown);\r\n    yield put(getPartyTypesSuccess(response.Data));\r\n  } catch (error) {\r\n    console.log(\"GetPartyTypes_saga page error\", error);\r\n  }\r\n}\r\n\r\n\r\n//get Company\r\nfunction* GetCompany_saga({}) {\r\n  try {\r\n    const response = yield call(GetCompany_For_Dropdown);\r\n    yield put(getCompanySuccess(response.Data));\r\n  } catch (error) {\r\n    console.log(\"GetCompany_saga page error\", error);\r\n  }\r\n}\r\n\r\n\r\n  // GetPartyTypeByDivisionTypeID API dependent on DivisionTypes api\r\nfunction* GetPartyTypeByDivisionTypeID_GenratorFunction({id}) {\r\n  try {\r\n    const response = yield call(GetPartyTypeByDivisionTypeID_For_Dropdown,id);\r\n    yield put(GetPartyTypeByDivisionTypeIDSuccess(response.Data));\r\n  } catch (error) {\r\n    console.log(\"PartyType By DivisionType ID page error\", error);\r\n  }\r\n}\r\n\r\n    // GetCompanyByDivisionTypeID/1 API dependent on DivisionTypes api\r\nfunction* GetCompanyByDivisionTypeID_GenratorFunction({id}) {\r\n  try {\r\n    const response = yield call(GetCompanyByDivisionTypeID_For_Dropdown,id);\r\n    yield put(GetCompanyByDivisionTypeIDSuccess(response.Data));\r\n  } catch (error) {\r\n    console.log(\"Get Company ByDivisionType ID page error\", error);\r\n  }\r\n}\r\n    function* PartyMasterSaga() {\r\n      yield takeEvery(GET_PARTY_LIST_API, Get_Party_GenratorFunction);\r\n      yield takeEvery(POST_PARTY_DATA,Submit_Party_GenratorFunction );\r\n      yield takeEvery(EDIT_PARTY_ID, Edit_Party_GenratorFunction);\r\n      yield takeEvery(DELETE_PARTY_ID, Delete_Party_GenratorFunction);\r\n      yield takeEvery(UPDATE_PARTY_ID, Update_Party_GenratorFunction);\r\n      yield takeEvery(GET_DISTRICT_ON_STATE, GetDistrictOnState_saga);\r\n      yield takeEvery(GET_PRICELIST, GetPriceList_saga);\r\n      yield takeEvery(GET_ADDRESSTYPES, GetAddressTypes_saga);\r\n      yield takeEvery(GET_PARTYTYPES, GetPartyTypes_saga);\r\n      yield takeEvery(GET_COMPANY, GetCompany_saga);\r\n      yield takeEvery(GET_PARTTYPE_BY_DIVISIONTYPES_ID, GetPartyTypeByDivisionTypeID_GenratorFunction);\r\n      yield takeEvery(GET_COMPANY_BY_DIVISIONTYPES_ID, GetCompanyByDivisionTypeID_GenratorFunction);\r\n\r\n    }\r\n    \r\n    export default PartyMasterSaga;\r\n    ","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\ItemsRedux\\saga.js",["1778"],"import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport * as  apiCall from \"../../../helpers/backend_helper\";\r\nimport { AlertState } from \"../../Utilites/CustomAlertRedux/actions\";\r\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\r\nimport {\r\n  deleteItemIdSuccess,\r\n  editItemSuccess,\r\n  getBaseUnit_ForDropDownSuccess,\r\n  getItemGroup_ForDropDownSuccess,\r\n  getItemListSuccess, get_CategoryTypes_ForDropDown_Success,\r\n  get_Category_By_CategoryType_ForDropDownAPI_Success,\r\n  get_Category_By_CategoryType_ForDropDown_Success,\r\n  get_Division_ForDropDown_Success,\r\n  get_Group_By_GroupType_ForDropDown_Success,\r\n  get_ImageType_ForDropDown_Success,\r\n  get_MRPTypes_ForDropDown_Success,\r\n  get_Party_ForDropDown_Success,\r\n  get_PriceList_ForDropDown_Success,\r\n  get_Sub_Category_By_CategoryType_ForDropDown_Success,\r\n  get_Sub_Group_By_Group_ForDropDown_Success,\r\n  PostItemDataSuccess,\r\n  updateItemSuccess\r\n} from \"./action\";\r\nimport {\r\n  DELETE_ITEM_ID, EDIT_ITEM_ID,\r\n  GET_BASEUNIT_FOR_DROPDOWN,\r\n  GET_CATEGORYTYPE_FOR_DROPDOWN,\r\n  GET_CATEGORY_BY_CATEGORYTYPE_FOR_DROPDOWN,\r\n  GET_CATEGORY_BY_CATEGORYTYPE_FOR_DROPDOWN_API,\r\n  GET_CATEGORY_FOR_DROPDOWN,\r\n  GET_DIVISION_FOR_DROPDOWN,\r\n  GET_GROUP_BY_GROUPTYPE_FOR_DROPDOWN,\r\n  GET_IMAGETYPE_FOR_DROPDOWN,\r\n  GET_ITEM_GROUP_FOR_DROPDOWN,\r\n  GET_ITEM_LIST_API,\r\n  GET_MRPTYPE_FOR_DROPDOWN,\r\n  GET_PARTY_FOR_DROPDOWN,\r\n  GET_PRICE_LIST_FOR_DROPDOWN,\r\n  GET_SUB_CATEGORY_BY_CATEGORYTYPE_FOR_DROPDOWN,\r\n  GET_SUB_GROUP_BY_GROUP_FOR_DROPDOWN,\r\n  POST_ITEM_DATA,\r\n  UPDATE_ITEM_ID\r\n} from \"./actionType\";\r\n\r\n\r\nfunction* Get_Items_GenratorFunction() {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(apiCall.Items_Master_Get_API);\r\n    yield put(SpinnerState(false))\r\n    if (response.StatusCode === 200) yield put(getItemListSuccess(response.Data))\r\n    else yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: JSON.stringify(response.Message),\r\n    }));\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* Items_Group_GenratorFunction() {\r\n  // yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(apiCall.Items_Group_Get_API);\r\n    yield put(getItemGroup_ForDropDownSuccess(response.Data));\r\n    // yield put(SpinnerState(false))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n\r\nfunction* Submit_Items_GenratorFunction({ data }) {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(apiCall.Items_Master_Post_API, data);\r\n    yield put(SpinnerState(false))\r\n    yield put(PostItemDataSuccess(response));\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* Delete_Items_GenratorFunction({ id }) {\r\n  try {\r\n    yield put(SpinnerState(true))\r\n    const response = yield call(apiCall.Items_Master_Delete_API, id);\r\n    yield put(SpinnerState(false))\r\n    yield put(deleteItemIdSuccess(response))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* Edit_Items_GenratorFunction({ id, pageMode }) {\r\n\r\n  try {\r\n    const response = yield call(apiCall.Items_Master_Edit_API, id);\r\n    response.pageMode = pageMode\r\n    yield put(editItemSuccess(response));\r\n  } catch (error) {\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n\r\nfunction* Update_Items_GenratorFunction({ updateData, ID }) {\r\n\r\n  try {\r\n    yield put(SpinnerState(true))\r\n    const response = yield call(apiCall.Items_Master_Update_API, updateData, ID);\r\n    yield put(SpinnerState(false))\r\n    yield put(updateItemSuccess(response))\r\n    console.log(\"response\", response)\r\n  }\r\n  catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* BaseUnit_DropDown_GenratorFunction() {\r\n  try {\r\n    const response = yield call(apiCall.BaseUnit_Get_DropDown_API);\r\n    yield put(getBaseUnit_ForDropDownSuccess(response.Data));\r\n  } catch (error) {\r\n    console.log(\"Category Type saga page error\", error);\r\n  }\r\n}\r\n\r\nfunction* CategoryType_DropDown_GenratorFunction() {\r\n  try {\r\n    const response = yield call(apiCall.CategoryType_Get_DropDown_API);\r\n    yield put(get_CategoryTypes_ForDropDown_Success(response.Data));\r\n  } catch (error) {\r\n    console.log(\"Category Type saga page error\", error);\r\n  }\r\n}\r\n\r\n\r\n// Category  API dependent on CategoryType api\r\nfunction* Category_DropDown_GenratorFunction({ id, key }) {\r\n  try {\r\n    const response = yield call(apiCall.Category_By_CategoryTypes_DropDown_API, id);\r\n    yield put(get_Category_By_CategoryType_ForDropDown_Success({ Data: response.Data, key: key }));\r\n  } catch (error) {\r\n    console.log(\"Category saga Page error\", error);\r\n  }\r\n}\r\n\r\n//Sub Category API dependent on Category api \r\nfunction* SubCategory_DropDown_GenratorFunction({ id, key }) {\r\n  try {\r\n    const response = yield call(apiCall.SubCategory_By_CategoryTypes_DropDown_API, id);\r\n    yield put(get_Sub_Category_By_CategoryType_ForDropDown_Success({ Data: response.Data, key: key }));\r\n  } catch (error) {\r\n    console.log(\"Sub-Category saga page error\", error);\r\n  }\r\n}\r\n\r\nfunction* ImageType_DropDown_GenratorFunction() {\r\n  try {\r\n    const response = yield call(apiCall.ImageType_Get_DropDown_API);\r\n    yield put(get_ImageType_ForDropDown_Success(response.Data));\r\n  } catch (error) {\r\n    console.log(\"ImageType saga page error\", error);\r\n  }\r\n}\r\n\r\nfunction* MRPType_DropDown_GenratorFunction() {\r\n  try {\r\n    const response = yield call(apiCall.MRPType_Get_DropDown_API);\r\n    yield put(get_MRPTypes_ForDropDown_Success(response.Data));\r\n  } catch (error) {\r\n    console.log(\"MRP Type saga page error\", error);\r\n  }\r\n}\r\n\r\nfunction* Division_DropDown_GenratorFunction({ id = 1 }) {\r\n  try {\r\n    const response = yield call(apiCall.Division_Get_DropDown_API, id);\r\n    yield put(get_Division_ForDropDown_Success(response.Data));\r\n  } catch (error) {\r\n    console.log(\"Division saga page error\", error);\r\n  }\r\n}\r\n\r\nfunction* Party_DropDown_GenratorFunction({ id = 0 }) {\r\n  try {\r\n    const response = yield call(apiCall.Party_Get_DropDown_API, id);\r\n    yield put(get_Party_ForDropDown_Success(response.Data));\r\n  } catch (error) {\r\n    console.log(\"Party saga page error\", error);\r\n  }\r\n}\r\n\r\nfunction* PriceList_DropDown_GenratorFunction() {\r\n  try {\r\n    const response = yield call(apiCall.PriceList_Get_DropDown_API);\r\n    yield put(get_PriceList_ForDropDown_Success(response.Data));\r\n  } catch (error) {\r\n    console.log(\"MRP Type saga page error\", error);\r\n  }\r\n}\r\n\r\nfunction* Group_DropDown_GenratorFunction({ id }) {\r\n  try {\r\n    const response = yield call(apiCall.Group_By_GroupTypes_DropDown_API, id);\r\n    yield put(get_Group_By_GroupType_ForDropDown_Success(response.Data));\r\n   } catch (error) {\r\n    console.log(\"Group saga page error\", error);\r\n  }\r\n}\r\n\r\nfunction* SubGroup_DropDown_GenratorFunction({ id }) {\r\n  try {\r\n    const response = yield call(apiCall.SubGroup_By_Group_DropDown_API, id);\r\n    yield put(get_Sub_Group_By_Group_ForDropDown_Success(response.Data));\r\n  } catch (error) {\r\n    console.log(\"sub Group saga page error\", error);\r\n  }\r\n}\r\n\r\n// Category  API dependent on CategoryType api\r\nfunction* Category_DropDown_API_GenratorFunction({ id}) {\r\n  try {\r\n    const response = yield call(apiCall.Category_By_CategoryTypes_DropDown_API, id);\r\n    yield put(get_Category_By_CategoryType_ForDropDownAPI_Success(response.Data));\r\n  } catch (error) {\r\n    console.log(\"Category saga Page error\", error);\r\n  }\r\n}\r\n\r\nfunction* ItemsMastersSaga() {\r\n  yield takeEvery(GET_ITEM_LIST_API, Get_Items_GenratorFunction);\r\n  yield takeEvery(GET_ITEM_GROUP_FOR_DROPDOWN, Items_Group_GenratorFunction);\r\n  yield takeEvery(POST_ITEM_DATA, Submit_Items_GenratorFunction);\r\n  yield takeEvery(EDIT_ITEM_ID, Edit_Items_GenratorFunction);\r\n  yield takeEvery(DELETE_ITEM_ID, Delete_Items_GenratorFunction);\r\n  yield takeEvery(UPDATE_ITEM_ID, Update_Items_GenratorFunction);\r\n  yield takeEvery(GET_CATEGORYTYPE_FOR_DROPDOWN, CategoryType_DropDown_GenratorFunction);\r\n  yield takeEvery(GET_CATEGORY_BY_CATEGORYTYPE_FOR_DROPDOWN, Category_DropDown_GenratorFunction);\r\n  yield takeEvery(GET_SUB_CATEGORY_BY_CATEGORYTYPE_FOR_DROPDOWN, SubCategory_DropDown_GenratorFunction);\r\n  yield takeEvery(GET_BASEUNIT_FOR_DROPDOWN, BaseUnit_DropDown_GenratorFunction);\r\n  yield takeEvery(GET_IMAGETYPE_FOR_DROPDOWN, ImageType_DropDown_GenratorFunction);\r\n  yield takeEvery(GET_MRPTYPE_FOR_DROPDOWN, MRPType_DropDown_GenratorFunction);\r\n  yield takeEvery(GET_DIVISION_FOR_DROPDOWN, Division_DropDown_GenratorFunction);\r\n  yield takeEvery(GET_PARTY_FOR_DROPDOWN, Party_DropDown_GenratorFunction);\r\n  yield takeEvery(GET_PRICE_LIST_FOR_DROPDOWN, PriceList_DropDown_GenratorFunction);\r\n  yield takeEvery(GET_GROUP_BY_GROUPTYPE_FOR_DROPDOWN, Group_DropDown_GenratorFunction);\r\n  yield takeEvery(GET_SUB_GROUP_BY_GROUP_FOR_DROPDOWN, SubGroup_DropDown_GenratorFunction);\r\n  yield takeEvery(GET_CATEGORY_BY_CATEGORYTYPE_FOR_DROPDOWN_API, Category_DropDown_API_GenratorFunction);\r\n}\r\n\r\nexport default ItemsMastersSaga;\r\n","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\UserRegistrationRedux\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\ModulesRedux\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\RoleMasterRedux\\saga.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\M_EmployeeRedux\\saga.js",["1779","1780","1781","1782","1783","1784"],"import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { detelet_EmployeeID, edit_EmployeeAPI, getComapny_For_Dropdown, getDesignationID_For_Dropdown, getEmployeeType_For_Dropdown, getRegion_For_Dropdown, getState_For_Dropdown, Get_CompanyBy_EmployeeType_For_Dropdown, get_EmployeelistApi, post_EmployeeData, update_EmployeeAPI } from \"../../../helpers/backend_helper\";\r\nimport {\r\n  GET_DESIGNATIONID, GET_EMPLOYEETYPE,\r\n  GET_STATE, POST_EMPLOYEE, GET_EMPLOYEE_LIST, UPDATE_EMPLOYEE_ID,\r\n  DELETE_EMPLOYEE_ID, EDIT_EMPLOYEE_ID, GET_EMPLOYEE_TYPES_ID, GET_COMPANYNAME_BY_EMPLOYEETYPES_ID, GET_PARTYNAME_BY_DIVISIONTYPES_ID,\r\n} from './actionTypes'\r\nimport {\r\n  getDesignationIDSuccess, getEmployeeTypeESuccess,\r\n  getStateESuccess, PostEmployeeSuccess,\r\n  getEmployeelistSuccess,\r\n  deleteEmployeeIDSuccess, editEmployeeSuccess, updateEmployeeIDSuccess, get_EmployeeTypesID_Success, Get_CompanyName_By_EmployeeTypeID_Success, Get_PartyName_By_EmployeeTypeID_Success,\r\n} from \"./action\";\r\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\r\nimport { AlertState } from \"../../Utilites/CustomAlertRedux/actions\";\r\n\r\n///  DesignationID dropdown list\r\nfunction* DesignationID_saga() {\r\n  try {\r\n    const response = yield call(getDesignationID_For_Dropdown);\r\n    yield put(getDesignationIDSuccess(response.Data));\r\n  } catch (error) {\r\n    console.log(\"DesignationID_saga page error\", error);\r\n  }\r\n}\r\n\r\n//// EmployeeType drop down api\r\nfunction* EmployeeType_saga() {\r\n  try {\r\n    const response = yield call(getEmployeeType_For_Dropdown);\r\n    yield put(getEmployeeTypeESuccess(response.Data));\r\n  } catch (error) {\r\n    console.log(\"EmployeeType_saga  page error\", error);\r\n  }\r\n}\r\n\r\n///State  dropdown api\r\nfunction* State_saga() {\r\n  try {\r\n    const response = yield call(getState_For_Dropdown);\r\n    yield put(getStateESuccess(response.Data));\r\n  } catch (error) {\r\n    console.log(\"State_saga page error\", error);\r\n  }\r\n}\r\n\r\n\r\n///post api\r\n\r\nfunction* Submit_Employee_GenratorFunction({ Data }) {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(post_EmployeeData, Data);\r\n    console.log(\"post response in saga file\", response)\r\n    yield put(SpinnerState(false))\r\n    yield put(PostEmployeeSuccess(response));\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n/// get api\r\n\r\nfunction* Get_EmployeeList_GenratorFunction() {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(get_EmployeelistApi);\r\n    yield put(getEmployeelistSuccess(response.Data));\r\n    yield put(SpinnerState(false))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n//// delete api \r\n\r\nfunction* Delete_EmployeeID_GenratorFunction({ id }) {\r\n  try {\r\n    yield put(SpinnerState(true))\r\n    const response = yield call(detelet_EmployeeID, id);\r\n    yield put(SpinnerState(false))\r\n    yield put(deleteEmployeeIDSuccess(response))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* Edit_EmployeeID_GenratorFunction({ id,pageMode }) {\r\n  try {\r\n    const response = yield call(edit_EmployeeAPI, id);\r\n    response.pageMode=pageMode\r\n    yield put(editEmployeeSuccess(response));\r\n    console.log(\"response in saga\", response)\r\n\r\n  } catch (error) {\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* Update_EmployeeID_GenratorFunction({ updateData, ID }) {\r\n  try {\r\n    yield put(SpinnerState(true))\r\n    const response = yield call(update_EmployeeAPI, updateData, ID);\r\n    yield put(SpinnerState(false))\r\n    yield put(updateEmployeeIDSuccess(response))\r\n  }\r\n  catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// Company Name API dependent on Employee Types api\r\nfunction* Get_CompanyName_By_EmployeeTypesID_GenratorFunction({ id }) {\r\n  try {\r\n    const response = yield call(Get_CompanyBy_EmployeeType_For_Dropdown,id);\r\n    yield put(Get_CompanyName_By_EmployeeTypeID_Success(response.Data));\r\n  } catch (error) {\r\n    console.log(\"Company Name By Employee Types ID page error\", error);\r\n  }\r\n}\r\n\r\nfunction* M_EmployeeSaga() {\r\n  yield takeEvery(GET_DESIGNATIONID, DesignationID_saga);\r\n  yield takeEvery(GET_EMPLOYEETYPE, EmployeeType_saga);\r\n  yield takeEvery(GET_STATE, State_saga);\r\n  yield takeEvery(GET_EMPLOYEE_LIST, Get_EmployeeList_GenratorFunction)\r\n  yield takeEvery(POST_EMPLOYEE, Submit_Employee_GenratorFunction)\r\n  yield takeEvery(EDIT_EMPLOYEE_ID, Edit_EmployeeID_GenratorFunction)\r\n  yield takeEvery(DELETE_EMPLOYEE_ID, Delete_EmployeeID_GenratorFunction)\r\n  yield takeEvery(UPDATE_EMPLOYEE_ID, Update_EmployeeID_GenratorFunction)\r\n  yield takeEvery(GET_COMPANYNAME_BY_EMPLOYEETYPES_ID, Get_CompanyName_By_EmployeeTypesID_GenratorFunction)\r\n}\r\nexport default M_EmployeeSaga;","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\UserRegistrationRedux\\saga.js",["1785"],"import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport {\r\n  getEmployee_Dropdown_For_UserRegistration_API,\r\n  RolesListDropdown_For_UserRegistration_API,\r\n  User_Component_PostMethod_API,\r\n  User_Component_GetMethod_API,\r\n  User_Component_Delete_Method_API,\r\n  User_Component_EditById_API,\r\n  User_Component_Update_API,\r\n  UserPartiesForUserMaster_API\r\n} from \"../../../helpers/backend_helper\";\r\nimport {\r\n  GET_EMPLOYEE, GET_ROLE, ADD_USER, GET_USER,\r\n  DELETE_USER, EDIT_USER, UPDATE_USER, GET_USER_PARTIES_FOR_USER_MASTER, GET_EMPLOYEE_FOR_USER_REGISTRATION\r\n} from './actionType'\r\nimport {\r\n  getRolesSuccess,\r\n  addUserSuccess,\r\n  getUserSuccess,\r\n  deleteSuccess,\r\n  editSuccess,\r\n  updateSuccess,\r\n  GetUserPartiesForUserMastePageSuccess,\r\n  getEmployeeForUseRegistrationSuccess\r\n} from \"./actions\";\r\nimport { AlertState } from \"../../Utilites/CustomAlertRedux/actions\";\r\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\r\n\r\n// employee dropdown list\r\nfunction* EmployeelistDropdown_GenratorFunction() {\r\n  try {\r\n    const response = yield call(getEmployee_Dropdown_For_UserRegistration_API);\r\n    yield put(getEmployeeForUseRegistrationSuccess(response.Data));\r\n  } catch (error) {\r\n    console.log(\"Employeelist  saga page error\", error);\r\n  }\r\n}\r\n\r\n// roles dropdownlist\r\nfunction* RolesListDropdoun_GenratorFunction() {\r\n  try {\r\n    const response = yield call(RolesListDropdown_For_UserRegistration_API);\r\n    yield put(getRolesSuccess(response.Data));\r\n\r\n  } catch (error) {\r\n    console.log(\"Rolelist  saga page error\", error);\r\n  }\r\n}\r\n\r\n// post api\r\nfunction* user_save_GenratorFunction({ data }) {\r\n\r\n\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(User_Component_PostMethod_API, data);\r\n    console.log(\"response\",response)\r\n    yield put(SpinnerState(false))\r\n    yield put(addUserSuccess(response));\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n//  Get list api\r\nfunction* Fetch_UserList_GenratorFunction() {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(User_Component_GetMethod_API);\r\n    yield put(getUserSuccess(response.Data));\r\n    yield put(SpinnerState(false))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// delete api \r\nfunction* Delete_UserList_GenratorFunction({ id }) {\r\n  try {\r\n    yield put(SpinnerState(true))\r\n    const response = yield call(User_Component_Delete_Method_API, id);\r\n    yield put(SpinnerState(false))\r\n    yield put(deleteSuccess(response))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// edit api\r\nfunction* Edit_UserList_GenratorFunction({ id,pageMode}) {\r\n  try {\r\n    const response = yield call(User_Component_EditById_API, id);\r\n    response.pageMode=pageMode\r\n    yield put(editSuccess(response));\r\n  } catch (error) {\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* Update_User_GenratorFunction({ data, id }) {\r\n  debugger\r\n  try {\r\n    yield put(SpinnerState(true))\r\n    const response = yield call(User_Component_Update_API, data, id);\r\n    console.log(\"update response\",response)\r\n    yield put(SpinnerState(false))\r\n    yield put(updateSuccess(response))\r\n  }\r\n  catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* Get_UserPartiesForUserMaster_GenratorFunction({ id }) {\r\n  \r\n  try {\r\n    const response = yield call(UserPartiesForUserMaster_API,  id);\r\n    yield put(GetUserPartiesForUserMastePageSuccess(response.Data))\r\n  }\r\n  catch (error) {\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* UserRegistrationSaga() {\r\n  yield takeEvery(GET_EMPLOYEE_FOR_USER_REGISTRATION, EmployeelistDropdown_GenratorFunction);\r\n  yield takeEvery(GET_ROLE, RolesListDropdoun_GenratorFunction);\r\n  yield takeEvery(ADD_USER, user_save_GenratorFunction);\r\n  yield takeEvery(UPDATE_USER, Update_User_GenratorFunction);\r\n  \r\n  yield takeEvery(GET_USER, Fetch_UserList_GenratorFunction)\r\n  yield takeEvery(DELETE_USER, Delete_UserList_GenratorFunction)\r\n  yield takeEvery(EDIT_USER, Edit_UserList_GenratorFunction)\r\n  yield takeEvery(GET_USER_PARTIES_FOR_USER_MASTER, Get_UserPartiesForUserMaster_GenratorFunction)\r\n  \r\n}\r\nexport default UserRegistrationSaga;","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\HPagesRedux\\saga.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Purchase\\OrderPageRedux\\saga.js",["1786","1787","1788","1789","1790","1791"],"import { call, put, takeEvery } from \"redux-saga/effects\";\r\n\r\nimport {\r\n  getOrderListSuccess,\r\n  deleteOrderIdSuccess,\r\n  getSupplierSuccess,\r\n  goButtonSuccess,\r\n  postOrderSuccess,\r\n  editOrderIdSuccess,\r\n  updateOrderIdSuccess,\r\n  getOrderListPageSuccess,\r\n} from \"./actions\";\r\nimport {\r\n\r\n  editOrderID_forOrderPage_ApiCall,\r\n  UpdateOrder_ID_ApiCall,\r\n  deleteOrderID_forOrderPage_ApiCall,\r\n  OrderPage_Post_API,\r\n  OrderPage_GetSupplier_API,\r\n  OrderPage_GoButton_API,\r\n  OrderPage_get_API,\r\n  getOrderList_For_Listpage,\r\n} from \"../../../helpers/backend_helper\";\r\n\r\nimport {\r\n  GET_ORDER_LIST,\r\n  UPDATE_ORDER_ID_FROM_ORDER_PAGE,\r\n  EDIT_ORDER_FOR_ORDER_PAGE,\r\n  DELETE_ORDER_FOR_ORDER_PAGE,\r\n  GET_SUPPLIER,\r\n  GO_BUTTON_FOR_ORDER_PAGE,\r\n  POST_ORDER_FROM_ORDER_PAGE,\r\n  GET_ORDER_LIST_PAGE,\r\n} from \"./actionType\";\r\n\r\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\r\nimport { AlertState } from \"../../Utilites/CustomAlertRedux/actions\";\r\n\r\n\r\nfunction* goButtonGenFunc({ data, hasEditVal }) {\r\n  \r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(OrderPage_GoButton_API, data);\r\n    if (hasEditVal) {\r\n      response.Data.forEach(element => {\r\n        hasEditVal.OrderItem.forEach(ele => {\r\n          if (element.id === ele.Item) {\r\n            element[\"inpRate\"] = ele.Rate\r\n            element[\"inpQty\"] = ele.Quantity\r\n            element[\"totalAmount\"] = ele.Amount\r\n            element[\"UOM\"] = ele.Unit\r\n            element[\"UOMLabel\"] = ele.UnitName\r\n            element[\"inpBaseUnitQty\"] = ele.BaseUnitQuantity\r\n\r\n          }\r\n        })\r\n      });\r\n    }\r\n    yield put(goButtonSuccess(response.Data));\r\n    yield put(SpinnerState(false))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* postOrder_GenFunc({ data }) {\r\n\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(OrderPage_Post_API, data);\r\n    yield put(postOrderSuccess(response));\r\n    yield put(SpinnerState(false))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* editOrderGenFunc({ id, pageMode }) {\r\n\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(editOrderID_forOrderPage_ApiCall, id);\r\n    response.pageMode = pageMode\r\n    yield put(SpinnerState(false))\r\n    debugger\r\n    yield put(editOrderIdSuccess(response));\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* DeleteOrder_GenratorFunction({ id }) {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(deleteOrderID_forOrderPage_ApiCall, id);\r\n    yield put(SpinnerState(false))\r\n    yield put(deleteOrderIdSuccess(response));\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* UpdateOrder_ID_GenratorFunction({ data, id }) {\r\n\r\n  try {\r\n    yield put(SpinnerState(true))\r\n    const response = yield call(UpdateOrder_ID_ApiCall, data, id);\r\n    yield put(SpinnerState(false))\r\n    yield put(updateOrderIdSuccess(response))\r\n  }\r\n  catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// List Page API\r\nfunction* get_OrderListPage_GenratorFunction() {\r\n  debugger\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(getOrderList_For_Listpage);\r\n    yield put(SpinnerState(false))\r\n    yield put(getOrderListPageSuccess(response.Data))\r\n\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* OrderPageSaga() {\r\n \r\n  yield takeEvery(GO_BUTTON_FOR_ORDER_PAGE, goButtonGenFunc);\r\n  yield takeEvery(POST_ORDER_FROM_ORDER_PAGE, postOrder_GenFunc);\r\n  yield takeEvery(EDIT_ORDER_FOR_ORDER_PAGE, editOrderGenFunc);\r\n  yield takeEvery(UPDATE_ORDER_ID_FROM_ORDER_PAGE, UpdateOrder_ID_GenratorFunction)\r\n  yield takeEvery(DELETE_ORDER_FOR_ORDER_PAGE, DeleteOrder_GenratorFunction);\r\n  yield takeEvery(GET_ORDER_LIST_PAGE, get_OrderListPage_GenratorFunction);\r\n}\r\n\r\nexport default OrderPageSaga;\r\n","D:\\GitProjects\\Manthan\\src\\store\\Administrator\\RoleAccessRedux\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\CompanyRedux\\saga.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Utilites\\Spinner\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Utilites\\PageFiled\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Administrator\\ModulesRedux\\saga.js",["1792","1793"],"import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport {\r\n  deleteModuleIDSuccess,\r\n  editModuleIDSuccess,\r\n  fetchModelsList,\r\n  fetchModelsListError,\r\n  fetchModelsListSuccess,\r\n  PostModelsSubmitSuccess,\r\n  updateModuleIDSuccess\r\n} from \"./actions\";\r\nimport {\r\n  delete_ModuleID,\r\n  edit_ModuleID,\r\n  Fetch_ModulesList,\r\n  postSubmitModules,\r\n  updateModule_ID\r\n} from \"../../../helpers/backend_helper\";\r\nimport {\r\n  DELETE_MODULE_ID,\r\n  EDIT_MODULE_ID,\r\n  FETCH_MODULES_LIST,\r\n  POST_MODULES_SUBMIT,\r\n  UPDATE_MODULE_ID\r\n} from \"./actionType\";\r\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\r\nimport { AlertState } from \"../../Utilites/CustomAlertRedux/actions\";\r\n\r\nfunction* SubmitModules_GenratorFunction({ data }) {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(postSubmitModules, data);\r\n    yield put(SpinnerState(false))\r\n    yield put(PostModelsSubmitSuccess(response));\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({ Type: 4, \r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* fetchModulesList_GenratorFunction() {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(Fetch_ModulesList);\r\n    if(response.StatusCode===200){\r\n      yield put(fetchModelsListSuccess(response.Data));\r\n    }\r\n    else {\r\n      yield put(AlertState({ Type: 4, \r\n        Status: true, Message:response.Message,\r\n      }));\r\n    }\r\n\r\n    yield put(SpinnerState(false))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({ Type: 4, \r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\nfunction* deleteModule_ID_GenratorFunction({ id }) {\r\n  try {\r\n    yield put(SpinnerState(true))\r\n    const response = yield call(delete_ModuleID, id);\r\n    yield put(SpinnerState(false))\r\n    yield put(deleteModuleIDSuccess(response))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({ Type: 4, \r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* editModule_ID_GenratorFunction({ id,pageMode }) {\r\n  try {\r\n    const response = yield call(edit_ModuleID, id);\r\n    response.pageMode=pageMode\r\n    yield put(editModuleIDSuccess(response));\r\n  } catch (error) {\r\n    yield put(AlertState({ Type: 4, \r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* update_Module_GenratorFunction({ data, id }) {\r\n  console.log(\"data\",data)\r\n  try {\r\n    yield put(SpinnerState(true))\r\n    const response = yield call(updateModule_ID, data, id);\r\n    yield put(SpinnerState(false))\r\n    yield put(updateModuleIDSuccess(response))\r\n  }\r\n  catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({ Type: 4, \r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\nfunction* ModulesSaga() {\r\n  yield takeEvery(POST_MODULES_SUBMIT, SubmitModules_GenratorFunction);\r\n  yield takeEvery(FETCH_MODULES_LIST, fetchModulesList_GenratorFunction);\r\n  yield takeEvery(DELETE_MODULE_ID, deleteModule_ID_GenratorFunction);\r\n  yield takeEvery(EDIT_MODULE_ID, editModule_ID_GenratorFunction);\r\n  yield takeEvery(UPDATE_MODULE_ID, update_Module_GenratorFunction);\r\n\r\n\r\n}\r\n\r\nexport default ModulesSaga;\r\n","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\CustomSearchRedux\\saga.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Utilites\\CustomAlertRedux\\saga.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Utilites\\Spinner\\saga.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Utilites\\PageFiled\\saga.js",[],"D:\\GitProjects\\Manthan\\src\\store\\layout\\saga.js",[],"D:\\GitProjects\\Manthan\\src\\store\\auth\\login\\saga.js",["1794","1795","1796","1797"],"import { call, put, takeEvery } from \"redux-saga/effects\"\r\n\r\n// Login Redux States\r\nimport {\r\n  GET_SUPER_ADMIN_API,\r\n  GET_USER_DETAILS_AFTER_LOGIN,\r\n  LOGIN_USER, LOGOUT_USER,\r\n  ROLE_ACCESS_API_CALL\r\n} from \"./actionTypes\"\r\nimport {\r\n  apiError, divisionDropdownSelectSuccess, getUserDetailsAction, getUserDetailsActionSuccess, loginSuccess,\r\n  logoutUserSuccess,\r\n  postSuperAdminSuccess,\r\n  RoleAccessUpdateSuccess,\r\n  roleAceessAction,\r\n  roleAceessActionSuccess\r\n} from \"./actions\"\r\n\r\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\"\r\nimport {\r\n  divisionDropdown_Forlogin_ChangeDivisionPage_ApiCall,\r\n  getUserDetails_afterLogin_ApiCall,\r\n  post_SuperAdmin,\r\n  Python_FoodERP_postJwtLogin, RoleAccessApi_url, showPagesListOnPageAccess_DropDown_List, UserPartiesForUserMaster_API\r\n} from \"../../../helpers/backend_helper\"\r\nimport { AlertState } from \"../../actions\"\r\n\r\nconst fireBaseBackend = getFirebaseBackend()\r\n\r\nfunction* loginUser({ payload: { user, history } }) {\r\n\r\n  try {\r\n    const response =\r\n      yield call(Python_FoodERP_postJwtLogin, {\r\n        LoginName: user.UserName,\r\n        password: user.Password\r\n      })\r\n    try {\r\n      if (response.StatusCode === 200) {\r\n\r\n        localStorage.setItem(\"token\", (response.token))\r\n        localStorage.setItem(\"userId\", (response.UserID))\r\n\r\n        history.push(\"/division\")\r\n      }\r\n      else {\r\n        yield put(apiError(\"Incorrect UserName And Password\"))\r\n      }\r\n\r\n    } catch (e) {\r\n      yield put(apiError(\"Incorrect UserName And Password\"))\r\n    }\r\n\r\n  } catch (error) {\r\n    yield put(apiError(\"Incorrect UserName And Password\"))\r\n  }\r\n}\r\nfunction* afterLoginUserDetails_genFun({ id }) {\r\n\r\n  try {\r\n\r\n    const response = yield call(getUserDetails_afterLogin_ApiCall, {\r\n      UserId: id,\r\n    })\r\n    yield put(getUserDetailsActionSuccess(response.Data))\r\n    localStorage.setItem(\"UserName\", (response.Data.UserName))\r\n\r\n    var employee = response.Data.EmployeeID;\r\n\r\n    const response2 = yield call(divisionDropdown_Forlogin_ChangeDivisionPage_ApiCall, employee,)\r\n    yield put(divisionDropdownSelectSuccess(response2.Data))\r\n\r\n  } catch (e) {\r\n\r\n  }\r\n}\r\n\r\nfunction* logoutUser({ payload: { history } }) {\r\n  try {\r\n    localStorage.removeItem(\"authUser\")\r\n\r\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\r\n      const response = yield call(fireBaseBackend.logout)\r\n      yield put(logoutUserSuccess(response))\r\n    }\r\n    history.push(\"/login\")\r\n  } catch (error) {\r\n    yield put(apiError(error))\r\n  }\r\n}\r\nfunction* RoleAccessGenratorFunction({ id1, id2, }) {\r\n\r\n  try {\r\n    const PageAccessApi = yield call(showPagesListOnPageAccess_DropDown_List)\r\n\r\n    const RoleResponse = yield call(RoleAccessApi_url, id1, id2,);\r\n\r\n    if ((RoleResponse.Data.length > 0) && (PageAccessApi.Data.length > 0)) {\r\n\r\n      let arrayMain = []\r\n      let objMain = {}\r\n      let arrayChild = []\r\n      let objChild = {}\r\n      let all_DataInSinlgeArray = []\r\n\r\n      RoleResponse.Data.forEach((parent) => {\r\n        objMain = parent;\r\n\r\n        parent.ModuleData.forEach((child) => {\r\n\r\n          objChild = child;\r\n\r\n          PageAccessApi.Data.forEach((page) => {\r\n            objChild[`RoleAccess_${page.Name}`] = false;\r\n          })\r\n\r\n          child.RolePageAccess.forEach((role) => {\r\n            child[`RoleAccess_${role.Name}`] = true;\r\n          })\r\n\r\n          arrayChild.push(objChild)\r\n          delete objMain.ModuleData\r\n          objMain[\"ModuleData\"] = arrayChild\r\n          objChild = {};\r\n\r\n        });\r\n        arrayMain.push(objMain)\r\n        arrayChild = []\r\n        objMain = {}\r\n      })\r\n\r\n      arrayMain.forEach((i) => {\r\n        i.ModuleData.forEach((index) => {\r\n          all_DataInSinlgeArray.push(index)\r\n        })\r\n      })\r\n\r\n\r\n      yield put(roleAceessActionSuccess(arrayMain))\r\n      yield put(RoleAccessUpdateSuccess(all_DataInSinlgeArray))\r\n    }\r\n\r\n  } catch (error) {\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error : RoleAccess Api\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* Post_SuperAdmin_API_GenratorFunction() {\r\n  // yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(post_SuperAdmin);\r\n    yield put(postSuperAdminSuccess(response.Data));\r\n    // yield put(SpinnerState(false))\r\n  } catch (error) {\r\n    // / yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\nfunction* authSaga() {\r\n  yield takeEvery(LOGIN_USER, loginUser)\r\n  yield takeEvery(GET_USER_DETAILS_AFTER_LOGIN, afterLoginUserDetails_genFun)\r\n  yield takeEvery(ROLE_ACCESS_API_CALL, RoleAccessGenratorFunction)\r\n  yield takeEvery(LOGOUT_USER, logoutUser)\r\n  yield takeEvery(GET_SUPER_ADMIN_API, Post_SuperAdmin_API_GenratorFunction)\r\n}\r\n\r\nexport default authSaga\r\n","D:\\GitProjects\\Manthan\\src\\store\\auth\\forgetpwd\\saga.js",["1798","1799"],"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\"\r\n\r\n// Login Redux States\r\nimport { CHANGE_PASSWORD_FOR_FORGET_PASSWORD, SEND_OTP_FOR_FORGET_PASSWORD, } from \"./actionTypes\"\r\nimport {  userForgetPassword_sendOTP_Success, changePasswordForForgetPasswordSuccess, changePasswordForForgetPasswordError, userForgetPassword_sendOTP_Error } from \"./actions\"\r\n\r\n//Include Both Helper File with needed methods\r\nimport { Python_FoodERP_postJwtForgetPwd_SendOTP, Python_FoodERP_postJwtForgetPwd_Verify_OTP } from \"../../../helpers/backend_helper\"\r\n\r\n\r\n\r\n// function* forgetUser({ user }) {\r\n//   try {\r\n\r\n//     const response =\"lxnvc\"\r\n//     //  yield call(Python_FoodERP_postJwtForgetPwd, {\r\n//       // \"Email\": \"rohitganeshaa98@gmail.com\",\r\n//       // \"Mobail\": 1234\r\n//     // })\r\n//     if (response) {\r\n//       yield put(userForgetPasswordSuccess(response))\r\n//     }\r\n//   } catch (error) {\r\n//     yield put(userForgetPasswordError(error))\r\n//   }\r\n// }\r\n\r\n\r\nfunction* sendOTP_GnerFun({ user }) {\r\n  debugger\r\n  try {\r\n   \r\n    const response = yield call(Python_FoodERP_postJwtForgetPwd_SendOTP, user)\r\n    if (response.StatusCode == 200) {\r\n      yield put(userForgetPassword_sendOTP_Success(response.Message))\r\n    }\r\n    else {\r\n      yield put(userForgetPassword_sendOTP_Error(response.Message))\r\n    }\r\n  } catch (error) {\r\n    console.log(JSON.stringify(error))\r\n    yield put(userForgetPassword_sendOTP_Error(error))\r\n  }\r\n}\r\n\r\n\r\nfunction* changePassword_GnerFun({ data }) {\r\n  try {\r\ndebugger\r\n    const response = yield call(Python_FoodERP_postJwtForgetPwd_Verify_OTP, data)\r\n    //  \"Reset link are sended to your mailbox, check there first\"\r\n\r\n    if (response.StatusCode == 200) {\r\n      yield put(\r\n        changePasswordForForgetPasswordSuccess(response.Message))\r\n    } else {\r\n      yield put(changePasswordForForgetPasswordError(response.Message))\r\n    }\r\n\r\n  } catch (error) {\r\n    yield put(changePasswordForForgetPasswordError('Reset password Error'))\r\n  }\r\n}\r\nexport function* watchUserPasswordForget() {\r\n  // yield takeEvery(FORGET_PASSWORD, forgetUser)\r\n  yield takeEvery(SEND_OTP_FOR_FORGET_PASSWORD, sendOTP_GnerFun)\r\n  yield takeEvery(CHANGE_PASSWORD_FOR_FORGET_PASSWORD, changePassword_GnerFun)\r\n}\r\n\r\nfunction* forgetPasswordSaga() {\r\n  yield all([fork(watchUserPasswordForget)])\r\n}\r\n\r\nexport default forgetPasswordSaga\r\n","D:\\GitProjects\\Manthan\\src\\store\\auth\\profile\\saga.js",[],"D:\\GitProjects\\Manthan\\src\\store\\auth\\register\\saga.js",[],"D:\\GitProjects\\Manthan\\src\\store\\layout\\actionTypes.js",[],"D:\\GitProjects\\Manthan\\src\\common\\languages.js",[],"D:\\GitProjects\\Manthan\\src\\constants\\layout.js",[],"D:\\GitProjects\\Manthan\\src\\store\\auth\\login\\actionTypes.js",[],"D:\\GitProjects\\Manthan\\src\\store\\auth\\profile\\actionTypes.js",[],"D:\\GitProjects\\Manthan\\src\\store\\auth\\forgetpwd\\actionTypes.js",[],"D:\\GitProjects\\Manthan\\src\\store\\auth\\register\\actionTypes.js",[],"D:\\GitProjects\\Manthan\\src\\store\\Utilites\\CustomSearchRedux\\actionType.js",[],"D:\\GitProjects\\Manthan\\src\\components\\VerticalLayout\\Sidebar.js",[],"D:\\GitProjects\\Manthan\\src\\components\\VerticalLayout\\Header.js",["1800","1801","1802"],"import PropTypes from 'prop-types'\r\nimport React, { useState } from \"react\"\r\nimport { connect, useDispatch } from \"react-redux\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\n//import drawer\r\nimport ReactDrawer from 'react-drawer';\r\nimport 'react-drawer/lib/react-drawer.css';\r\n\r\n//Import Icons\r\nimport FeatherIcon from \"feather-icons-react\";\r\n\r\n// Reactstrap\r\nimport { Dropdown, DropdownToggle, DropdownMenu, Row, Col } from \"reactstrap\"\r\n\r\n// Import menuDropdown\r\nimport LanguageDropdown from \"../CommonForBoth/TopbarDropdown/LanguageDropdown\"\r\nimport NotificationDropdown from \"../CommonForBoth/TopbarDropdown/NotificationDropdown\"\r\nimport ProfileMenu from \"../CommonForBoth/TopbarDropdown/ProfileMenu\"\r\nimport RightSidebar from \"../CommonForBoth/RightSidebar\"\r\nimport LightDark from \"../CommonForBoth/Menus/LightDark\";\r\n\r\n// import images\r\nimport logoSvg from \"../../assets/images/logo-sm.svg\"\r\nimport github from \"../../assets/images/brands/github.png\"\r\nimport bitbucket from \"../../assets/images/brands/bitbucket.png\"\r\nimport dribbble from \"../../assets/images/brands/dribbble.png\"\r\nimport dropbox from \"../../assets/images/brands/dropbox.png\"\r\nimport mail_chimp from \"../../assets/images/brands/mail_chimp.png\"\r\nimport slack from \"../../assets/images/brands/slack.png\"\r\n\r\n//i18n\r\nimport { withTranslation } from \"react-i18next\"\r\n\r\n// Redux Store\r\nimport {\r\n  showRightSidebarAction,\r\n  toggleLeftmenu,\r\n  changeSidebarType,\r\n  changelayoutMode\r\n} from \"../../store/actions\"\r\nimport { CustomSearchInput } from '../../store/Utilites/CustomSearchRedux/actions';\r\nimport SearchBoxSecond from '../../pages/Adminisrator/SearchBox/SearchBoxSecond';\r\nimport { MainSearchBox, } from '../Common/CmponentRelatedCommonFile/SearchBox/index';\r\n// import initialDetails from '../../pages/Adminisrator/SearchBox/initialDetails.js';\r\n\r\n\r\n\r\nconst Header = props => {\r\n  const dispatch = useDispatch();\r\n  const { onChangeLayoutMode } = props;\r\n  const [search, setsearch] = useState(false)\r\n  const [socialDrp, setsocialDrp] = useState(false)\r\n  const [isClick, setClick] = useState(true);\r\n  const [position, setPosition] = useState();\r\n  const [open, setOpen] = useState(false);\r\n\r\n\r\n  function searchFunctionHandller(e) {\r\n    dispatch(CustomSearchInput(e.target.value))\r\n  }\r\n  /**\r\n   * Rightsidebar drawer\r\n   */\r\n  const toggleTopDrawer = () => {\r\n    setPosition('right');\r\n    setOpen(!open)\r\n  }\r\n\r\n  const onDrawerClose = () => {\r\n    setOpen(false);\r\n  }\r\n\r\n  /*** Sidebar menu icon and default menu set */\r\n  function tToggle() {\r\n    var body = document.body;\r\n    setClick(!isClick);\r\n    if (isClick === true) {\r\n      body.classList.add(\"sidebar-enable\");\r\n      document.body.setAttribute('data-sidebar-size', 'sm');\r\n    } else {\r\n      body.classList.remove(\"sidebar-enable\");\r\n      document.body.setAttribute('data-sidebar-size', 'lg');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <header id=\"page-topbar\">\r\n        <div className=\"navbar-header\">\r\n          <div className=\"d-flex\">\r\n            <div className=\"navbar-brand-box\">\r\n              <Link to=\"/dashboard\" className=\"logo logo-dark\">\r\n                <span className=\"logo-sm\">\r\n                  <img src={logoSvg} alt=\"\" height=\"24\" />\r\n                </span>\r\n                <span className=\"logo-lg\">\r\n                  <img src={logoSvg} alt=\"\" height=\"24\" /> <span className=\"logo-txt\">FoodERP</span>\r\n                </span>\r\n              </Link>\r\n\r\n              <Link to=\"/dashboard\" className=\"logo logo-light\">\r\n                <span className=\"logo-sm\">\r\n                  <img src={logoSvg} alt=\"\" height=\"24\" />\r\n                </span>\r\n                <span className=\"logo-lg\">\r\n                  <img src={logoSvg} alt=\"\" height=\"24\" /> <span className=\"logo-txt\">FoodERP</span>\r\n                </span>\r\n              </Link>\r\n            </div>\r\n\r\n            <button\r\n              onClick={() => {\r\n                tToggle()\r\n              }}\r\n              type=\"button\" className=\"btn btn-sm px-2 font-size-16 header-item\" id=\"vertical-menu-btn\">\r\n              <i className=\"fa fa-fw fa-bars\"></i>\r\n            </button>\r\n            {/* <SearchBoxSecond/> */}\r\n            <MainSearchBox/>\r\n             \r\n           \r\n            {/* <form className=\"app-search d-none d-lg-block\">\r\n              <div className=\"position-relative\">\r\n                <input type=\"text\" className=\"form-control\" placeholder=\"Search...\" onChange={(e) => {searchFunctionHandller(e)}} />\r\n                <button className=\"btn btn-primary\" type=\"button\"><i className=\"bx bx-search-alt align-middle\"></i></button>\r\n              </div>\r\n            </form> */}\r\n          </div>\r\n\r\n          <div className=\"d-flex\">\r\n            <div className=\"dropdown d-inline-block d-lg-none ms-2\">\r\n              <button type=\"button\" className=\"btn header-item\" id=\"page-header-search-dropdown\"\r\n                data-bs-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                <FeatherIcon\r\n                  icon=\"search\"\r\n                  className=\"icon-lg\"\r\n                />\r\n              </button>\r\n              <div className=\"dropdown-menu dropdown-menu-lg dropdown-menu-end p-0\"\r\n                aria-labelledby=\"page-header-search-dropdown\">\r\n\r\n                <form className=\"p-3\">\r\n                  <div className=\"form-group m-0\">\r\n                    <div className=\"input-group\">\r\n                      <input type=\"text\" className=\"form-control\" placeholder=\"Search ...\" aria-label=\"Search Result\" />\r\n\r\n                      <button className=\"btn btn-primary\" type=\"submit\"><i className=\"mdi mdi-magnify\"></i></button>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n          <div className=\"d-flex\">\r\n            <div className=\"dropdown d-inline-block d-lg-none ms-2\">\r\n              <button\r\n                onClick={() => {\r\n                  setsearch(!search)\r\n                }}\r\n                type=\"button\"\r\n                className=\"btn header-item noti-icon \"\r\n                id=\"page-header-search-dropdown\"\r\n              >\r\n                <i className=\"mdi mdi-magnify\" />\r\n              </button>\r\n              <div\r\n                className={\r\n                  search\r\n                    ? \"dropdown-menu dropdown-menu-lg dropdown-menu-end p-0 show\"\r\n                    : \"dropdown-menu dropdown-menu-lg dropdown-menu-end p-0\"\r\n                }\r\n                aria-labelledby=\"page-header-search-dropdown\"\r\n              >\r\n                <form className=\"p-3\">\r\n                  <div className=\"form-group m-0\">\r\n                    <div className=\"input-group\">\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Search ...\"\r\n                        aria-label=\"Recipient's username\"\r\n                      />\r\n                      <div className=\"input-group-append\">\r\n                        <button className=\"btn btn-primary\" type=\"submit\">\r\n                          <i className=\"mdi mdi-magnify\" />\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n\r\n            {/* <LanguageDropdown /> */}\r\n\r\n            {/* light / dark mode */}\r\n            <LightDark layoutMode={props['layoutMode']} onChangeLayoutMode={onChangeLayoutMode} />\r\n\r\n            <Dropdown\r\n              className=\"d-none d-lg-inline-block ms-1\"\r\n              isOpen={socialDrp}\r\n              toggle={() => {\r\n                setsocialDrp(!socialDrp)\r\n              }}\r\n            >\r\n              <DropdownToggle\r\n                className=\"btn header-item noti-icon \"\r\n                tag=\"button\"\r\n              >\r\n                <FeatherIcon\r\n                  icon=\"grid\"\r\n                  className=\"icon-lg\"\r\n                />\r\n              </DropdownToggle>\r\n              <DropdownMenu className=\"dropdown-menu-lg dropdown-menu-end\">\r\n                <div className=\"p-2\">\r\n                  <Row className=\"g-0\">\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={github} alt=\"Github\" />\r\n                        <span>GitHub</span>\r\n                      </Link>\r\n                    </Col>\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={bitbucket} alt=\"bitbucket\" />\r\n                        <span>Bitbucket</span>\r\n                      </Link>\r\n                    </Col>\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={dribbble} alt=\"dribbble\" />\r\n                        <span>Dribbble</span>\r\n                      </Link>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Row className=\"g-0\">\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={dropbox} alt=\"dropbox\" />\r\n                        <span>Dropbox</span>\r\n                      </Link>\r\n                    </Col>\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={mail_chimp} alt=\"mail_chimp\" />\r\n                        <span>Mail Chimp</span>\r\n                      </Link>\r\n                    </Col>\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={slack} alt=\"slack\" />\r\n                        <span>Slack</span>\r\n                      </Link>\r\n                    </Col>\r\n                  </Row>\r\n                </div>\r\n              </DropdownMenu>\r\n            </Dropdown>\r\n\r\n            <NotificationDropdown />\r\n            <div\r\n              onClick={toggleTopDrawer} disabled={open}\r\n              className=\"dropdown d-inline-block\"\r\n            >\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn header-item noti-icon right-bar-toggle \"\r\n              >\r\n                <FeatherIcon\r\n                  icon=\"settings\"\r\n                  className=\"icon-lg\"\r\n                />\r\n              </button>\r\n            </div>\r\n            <ProfileMenu />\r\n\r\n          </div>\r\n        </div>\r\n      </header>\r\n      <ReactDrawer\r\n        open={open}\r\n        position={position}\r\n        onClose={onDrawerClose}\r\n      >\r\n        <RightSidebar onClose={onDrawerClose} onChangeLayoutMode={onChangeLayoutMode} />\r\n      </ReactDrawer>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nHeader.propTypes = {\r\n  changeSidebarType: PropTypes.func,\r\n  leftMenu: PropTypes.any,\r\n  leftSideBarType: PropTypes.any,\r\n  showRightSidebar: PropTypes.any,\r\n  showRightSidebarAction: PropTypes.func,\r\n  t: PropTypes.any,\r\n  toggleLeftmenu: PropTypes.func,\r\n  changelayoutMode: PropTypes.func,\r\n  layoutMode: PropTypes.any,\r\n}\r\n\r\nconst mapStatetoProps = state => {\r\n  const {\r\n    layoutType,\r\n    showRightSidebar,\r\n    leftMenu,\r\n    leftSideBarType,\r\n    layoutMode\r\n  } = state.Layout\r\n  return { layoutType, showRightSidebar, leftMenu, leftSideBarType, layoutMode }\r\n}\r\n\r\nexport default connect(mapStatetoProps, {\r\n  showRightSidebarAction,\r\n  changelayoutMode,\r\n  toggleLeftmenu,\r\n  changeSidebarType,\r\n})(withTranslation()(Header))\r\n","D:\\GitProjects\\Manthan\\src\\store\\Utilites\\CustomSearchRedux\\actions.js",[],"D:\\GitProjects\\Manthan\\src\\helpers\\firebase_helper.js",[],"D:\\GitProjects\\Manthan\\src\\components\\VerticalLayout\\SidebarContent.js",["1803","1804","1805","1806","1807","1808","1809","1810"],"import PropTypes from \"prop-types\";\r\nimport React, { useEffect, useRef, useCallback, useState } from \"react\";\r\n\r\n//Import Icons\r\nimport FeatherIcon from \"feather-icons-react\";\r\n\r\n// //Import Scrollbar\r\nimport SimpleBar from \"simplebar-react\";\r\n\r\n//Import images\r\n\r\n//i18n\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\n// MetisMenu\r\nimport MetisMenu from \"metismenujs\";\r\nimport { useHistory, withRouter } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getUserDetailsAction, roleAceessAction } from \"../../store/auth/login/actions\";\r\nimport { demoRolleAcess } from \"./aaaa\";\r\n// import { RoleAccessData } from \"./APIDEMO\";\r\n\r\nconst SidebarContent = (props) => {\r\n  const ref = useRef();\r\n  const pathName = props.location.pathname;\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  // const  RoleAccessData=demoRolleAcess\r\n  const {\r\n    RoleAccessData,\r\n    afterLoginUserDetails,\r\n    RoleAccessModifiedinSingleArray\r\n  } = useSelector((state) => ({\r\n    RoleAccessData: state.Login.RoleData,\r\n    afterLoginUserDetails: state.Login.afterLoginUserDetails,\r\n    RoleAccessModifiedinSingleArray: state.Login.RoleAccessUpdateData,\r\n  }));\r\n\r\n  useEffect(() => {\r\n    if (RoleAccessData.length <= 0) {\r\n      var role = JSON.parse(localStorage.getItem(\"roleId\"))\r\n      if (!(role === undefined) && !(role === null)) {\r\n        var party = role.Party_id\r\n        var employee = role.Employee_id;\r\n        dispatch(roleAceessAction(party, employee))\r\n      };\r\n\r\n      // dispatch(getUserDetailsAction(user))\r\n      // roleAceessAction()\r\n    }\r\n  }, [])\r\n\r\n  const activateParentDropdown = useCallback((item) => {\r\n\r\n    item.classList.add(\"active\")\r\n    const parent = item.parentElement\r\n    const parent2El = parent.childNodes[1]\r\n    if (parent2El && parent2El.id !== \"side-menu\") {\r\n      parent2El.classList.add(\"mm-show\")\r\n    }\r\n\r\n    if (parent) {\r\n      parent.classList.add(\"mm-active\")\r\n      const parent2 = parent.parentElement\r\n\r\n      if (parent2) {\r\n        parent2.classList.add(\"mm-show\") // ul tag\r\n\r\n        const parent3 = parent2.parentElement // li tag\r\n\r\n        if (parent3) {\r\n          parent3.classList.add(\"mm-active\") // li\r\n          parent3.childNodes[0].classList.add(\"mm-active\") //a\r\n          const parent4 = parent3.parentElement // ul\r\n          if (parent4) {\r\n            parent4.classList.add(\"mm-show\") // ul\r\n            const parent5 = parent4.parentElement\r\n            if (parent5) {\r\n              parent5.classList.add(\"mm-show\") // li\r\n              parent5.childNodes[0].classList.add(\"mm-active\") // a tag\r\n            }\r\n          }\r\n        }\r\n      }\r\n      scrollElement(item);\r\n      return false\r\n    }\r\n    scrollElement(item);\r\n    return false\r\n  }, []);\r\n\r\n  // Use ComponentDidMount and ComponentDidUpdate method symultaniously\r\n  useEffect(() => {\r\n    // debugger\r\n    let pathName = props.location.pathname\r\n    // debugger\r\n    let userAcc = RoleAccessModifiedinSingleArray.find((inx) => {\r\n      const path = inx.ActualPagePath.toLowerCase()\r\n      return (`/${path}` === pathName.toLowerCase())\r\n    })\r\n    if (userAcc === undefined) {\r\n      pathName = \"Dashbord\"\r\n    }\r\n    else if (!userAcc.RoleAccess_IsShowOnMenu) {\r\n      let listPagePath = RoleAccessModifiedinSingleArray.find((inx) => {\r\n        return (inx.id === userAcc.RelatedPageID)\r\n      })\r\n      if (!(listPagePath === undefined)) {\r\n        pathName = `/${listPagePath.ActualPagePath}`\r\n      }\r\n    }\r\n\r\n    const initMenu = () => {\r\n\r\n      new MetisMenu(\"#side-menu\")\r\n      let matchingMenuItem = null\r\n      const ul = document.getElementById(\"side-menu\")\r\n      const items = ul.getElementsByTagName(\"a\")\r\n      for (let i = 0; i < items.length; ++i) {\r\n        if (pathName === items[i].pathname) {\r\n          matchingMenuItem = items[i]\r\n          break\r\n        }\r\n      }\r\n      if (matchingMenuItem) {\r\n        activateParentDropdown(matchingMenuItem)\r\n      }\r\n    }\r\n    initMenu()\r\n  }, [pathName, activateParentDropdown, RoleAccessModifiedinSingleArray])\r\n\r\n  useEffect(() => {\r\n    ref.current.recalculate()\r\n  })\r\n\r\n  function scrollElement(item) {\r\n    if (item) {\r\n      const currentPosition = item.offsetTop\r\n      if (currentPosition > window.innerHeight) {\r\n        ref.current.getScrollElement().scrollTop = currentPosition - 300\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <SimpleBar style={{ maxHeight: \"100%\" }} ref={ref}>\r\n        <div id=\"sidebar-menu\">\r\n          <ul className=\"metismenu list-unstyled\" id=\"side-menu\">\r\n\r\n            {/* <li>\r\n              <Link to=\"/Dashboard\" className=\"\">\r\n                <FeatherIcon icon=\"home\" />\r\n                <span>{props.t(\"Dashboard\")}</span>\r\n              </Link>\r\n            </li> */}\r\n            {/* <li>\r\n              <Link to= {`/${btoa(\"RoleAccess\")}`} State={ \"occupation\" }>\r\n                Next Step\r\n              </Link>\r\n              <Link to={{pathname:`/${btoa(\"RoleAccess\")}`, state: {fromDashboardAccess: true }}}>\r\n              Next Step2222\r\n              </Link>\r\n            </li> */}\r\n            {RoleAccessData.map((item) => {\r\n              return (\r\n                <li >\r\n                  <Link to=\"/#\" className=\"has-arrow\">\r\n                    <FeatherIcon icon=\"grid\" />\r\n                    <span>{props.t(item.ModuleName)}</span>    {/* change Module Name */}\r\n\r\n                  </Link>\r\n                  <ul className=\"sub-menu\">\r\n                    {item.ModuleData.map((index, j) => {\r\n                      if (index.RoleAccess_IsShowOnMenu === true) {\r\n                        return (\r\n                          <li>\r\n                            <Link to={{ pathname: `/${index.ActualPagePath}`, }} >{props.t(index.Name)}</Link>\r\n                          </li>\r\n                          // class={pathName === indx.SelectIcon ? \"active\" : \"\"}\r\n                        )\r\n                      }\r\n                      else {\r\n                        <></>\r\n                      }\r\n\r\n                    })}\r\n                  </ul>\r\n                </li>\r\n              )\r\n            })}\r\n            {/* <li>\r\n              <link href={\"/RolesMaster\"}>{props.t('Roles Master')}</link>\r\n              <a href=\"/RolesList\">Visit Pluralsight</a>\r\n            </li>\r\n            <li>\r\n              <Link to={'/RolesList'}>{props.t('Roles List')}</Link>\r\n            </li>\r\n            <li>\r\n              <Link to={'/validationTest'}>{props.t('validationTest')}</Link>\r\n            </li> */}\r\n          </ul >\r\n        </div>\r\n      </SimpleBar>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nSidebarContent.propTypes = {\r\n  location: PropTypes.object,\r\n  t: PropTypes.any,\r\n};\r\n\r\nexport default withTranslation()(withRouter(SidebarContent));\r\n","D:\\GitProjects\\Manthan\\src\\components\\Common\\CmponentRelatedCommonFile\\SearchBox\\index.js",["1811","1812","1813","1814","1815","1816","1817","1818","1819"],"import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport '../../../../assets/searchBox/searchBox.scss'\r\nimport { MySearch } from './MySearch';\r\n\r\nexport const MainSearchBox = () => {\r\n\r\n    const [searchRoleData, setSearchRoleData] = useState([])\r\n    // const  RoleAccessData=demoRolleAcess\r\n\r\n    const { RoleAccessData, searchProps } = useSelector((state) => ({\r\n        RoleAccessData: state.Login.RoleData,\r\n        searchProps: state.BreadcrumbReducer.searchProps,\r\n    }));\r\n\r\n    useEffect(() => {\r\n\r\n        let SearchRoleData_initial = []\r\n\r\n        RoleAccessData.map((i) => {\r\n            i.ModuleData.map((index) => {\r\n                SearchRoleData_initial.push(index)\r\n            })\r\n        })\r\n        setSearchRoleData(SearchRoleData_initial)\r\n    }, [RoleAccessData])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        function autocomplete(inp, arr) {\r\n            /*the autocomplete function takes two arguments,\r\n            the text field element and an array of possible autocompleted values:*/\r\n            var currentFocus;\r\n            /*execute a function when someone writes in the text field:*/\r\n\r\n            inp.addEventListener(\"input\", function (e) {\r\n\r\n                var a, b, i, val = this.value;\r\n                /*close any already open lists of autocompleted values*/\r\n                closeAllLists();\r\n\r\n                // if (!val) { return false; }\r\n                // var a = input.value\r\n\r\n                if (val[0] === \"/\") { val = val.substring(1); }\r\n                else { return false }\r\n\r\n                if (!val) { return false; }\r\n\r\n                currentFocus = -1;\r\n                /*create a DIV element that will contain the items (values):*/\r\n                a = document.createElement(\"DIV\");\r\n                a.setAttribute(\"id\", this.id + \"autocomplete-list\");\r\n                a.setAttribute(\"class\", \"autocomplete-items\");\r\n                /*append the DIV element as a child of the autocomplete container:*/\r\n                this.parentNode.appendChild(a);\r\n                /*for each item in the array...*/\r\n                for (i = 0; i < arr.length; i++) {\r\n                    /*check if the item starts with the same letters as the text field value:*/\r\n                    if (arr[i].Name.substr(0, val.length).toUpperCase() == val.toUpperCase()) {\r\n                        /*create a DIV element for each matching element:*/\r\n                        b = document.createElement(\"DIV\");\r\n                        /*make the matching letters bold:*/\r\n                        b.innerHTML = \"<strong>\" + arr[i].Name.substr(0, val.length) + \"</strong>\";\r\n                        b.innerHTML += arr[i].Name.substr(val.length);\r\n                        /*insert a input field that will hold the current array item's value:*/\r\n                        b.innerHTML += \"<input type='hidden' id='\" + i + \"' value='\" + arr[i].Name + \"'>\";\r\n                        //  var ActualPagePath=arr[i].ActualPagePath\r\n                        // alert(ActualPagePath)\r\n                        /*execute a function when someone clicks on the item value (DIV element):*/\r\n                        b.addEventListener(\"click\", function (e) {\r\n                            /*insert the value for the autocomplete text field:*/\r\n                            inp.value = this.getElementsByTagName(\"input\")[0].value;\r\n                            var input_id = this.getElementsByTagName(\"input\")[0].id;\r\n\r\n                            // alert(input_id)\r\n                            var ActualPagePath = arr[input_id].ActualPagePath\r\n                            window.location.href = (ActualPagePath)\r\n                            // window.open(ActualPagePath)\r\n                            /*close the list of autocompleted values,\r\n                            (or any other open lists of autocompleted values:*/\r\n                            closeAllLists();\r\n                        });\r\n                        a.appendChild(b);\r\n                    }\r\n                }\r\n            });\r\n            /*execute a function presses a key on the keyboard:*/\r\n            inp.addEventListener(\"keydown\", function (e) {\r\n                // debugger\r\n                var x = document.getElementById(this.id + \"autocomplete-list\");\r\n                if (x) x = x.getElementsByTagName(\"div\");\r\n                if (e.keyCode == 40) {\r\n                    /*If the arrow DOWN key is pressed,\r\n                    increase the currentFocus variable:*/\r\n                    currentFocus++;\r\n                    /*and and make the current item more visible:*/\r\n                    addActive(x);\r\n                } else if (e.keyCode == 38) { //up\r\n                    /*If the arrow UP key is pressed,\r\n                    decrease the currentFocus variable:*/\r\n                    currentFocus--;\r\n                    /*and and make the current item more visible:*/\r\n                    addActive(x);\r\n                } else if (e.keyCode == 13) {\r\n                    /*If the ENTER key is pressed, prevent the form from being submitted,*/\r\n                    e.preventDefault();\r\n                    if (currentFocus > -1) {\r\n                        /*and simulate a click on the \"active\" item:*/\r\n                        if (x) x[currentFocus].click();\r\n                    }\r\n                }\r\n            });\r\n            function addActive(x) {\r\n                /*a function to classify an item as \"active\":*/\r\n                if (!x) return false;\r\n                /*start by removing the \"active\" class on all items:*/\r\n                removeActive(x);\r\n                if (currentFocus >= x.length) currentFocus = 0;\r\n                if (currentFocus < 0) currentFocus = (x.length - 1);\r\n                /*add class \"autocomplete-active\":*/\r\n                x[currentFocus].classList.add(\"autocomplete-active\");\r\n            }\r\n            function removeActive(x) {\r\n                /*a function to remove the \"active\" class from all autocomplete items:*/\r\n                for (var i = 0; i < x.length; i++) {\r\n                    x[i].classList.remove(\"autocomplete-active\");\r\n                }\r\n            }\r\n            function closeAllLists(elmnt) {\r\n                /*close all autocomplete lists in the document,\r\n                except the one passed as an argument:*/\r\n                var x = document.getElementsByClassName(\"autocomplete-items\");\r\n                for (var i = 0; i < x.length; i++) {\r\n                    if (elmnt != x[i] && elmnt != inp) {\r\n                        x[i].parentNode.removeChild(x[i]);\r\n                    }\r\n                }\r\n            }\r\n            /*execute a function when someone clicks in the document:*/\r\n            document.addEventListener(\"click\", function (e) {\r\n                closeAllLists(e.target);\r\n            });\r\n        }\r\n\r\n\r\n        /*initiate the autocomplete function on the \"myInput\" element, and pass along the countries array as possible autocomplete values:*/\r\n        autocomplete(document.getElementById(\"myInput\"), searchRoleData);\r\n\r\n    }, [searchRoleData])\r\n\r\n    // searchProps2 = searchProps\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MySearch />\r\n        </React.Fragment>\r\n\r\n\r\n    )\r\n}\r\n\r\n","D:\\GitProjects\\Manthan\\src\\components\\VerticalLayout\\aaaa.js",["1820","1821"],"  export  const  demoRolleAcess=\r\n [\r\n      {\r\n        ModuleID: 8,\r\n        ModuleName: \"Administration\",\r\n        ModuleData: [\r\n          {\r\n            ID: 2,\r\n            Name: \"Module List\",\r\n            DisplayIndex: 2,\r\n            Icon: \"Module List\",\r\n            ActualPagePath: \"ModulesList\",\r\n            SelectIcon:\"ModulesList\"\r\n          },\r\n          {\r\n            ID: 3,\r\n            Name: \"Modules Master\",\r\n            DisplayIndex: 1,\r\n            Icon: \"Modules Master\",\r\n            ActualPagePath: \"modulesMaster\",\r\n            SelectIcon:\"ModulesList\"\r\n\r\n          },\r\n          {\r\n            ID: 4,\r\n            Name: \"Company Master\",\r\n            DisplayIndex: 3,\r\n            Icon: \"Companys Master\",\r\n            ActualPagePath: \"companyMaster\",\r\n            SelectIcon:\"companyList\"\r\n\r\n          },\r\n          {\r\n            ID: 5,\r\n            Name: \"Company List\",\r\n            DisplayIndex: 3,\r\n            Icon: \"CompanyList\",\r\n            ActualPagePath: \"companyList\",\r\n            SelectIcon:\"companyList\"\r\n\r\n          },\r\n          {\r\n            ID: 6,\r\n            Name: \"Pages Master\",\r\n            DisplayIndex: 5,\r\n            Icon: \"pagesMaster\",\r\n            ActualPagePath: \"pagesMaster\",\r\n            SelectIcon:\"PagesList\"\r\n\r\n          },\r\n          {\r\n            ID: 7,\r\n            Name: \"Pages List\",\r\n            DisplayIndex: 3,\r\n            Icon: \"Pages List\",\r\n            ActualPagePath: \"PagesList\",\r\n            SelectIcon:\"PagesList\"\r\n\r\n          },\r\n          {\r\n            ID: 8,\r\n            Name: \"Users List\",\r\n            DisplayIndex: 8,\r\n            Icon: \"Users List\",\r\n            SelectIcon:\"PagesList\",\r\n            ActualPagePath: \"PagesList\"\r\n          },\r\n          {\r\n            ID: 9,\r\n            Name: \"Users Master\",\r\n            DisplayIndex: 7,\r\n            Icon: \"Users Master\",\r\n            ActualPagePath: \"usersMaster\",\r\n            SelectIcon:\"PagesList\",\r\n        }\r\n        ]\r\n      },\r\n      {\r\n        ModuleID: 9,\r\n        ModuleName: \"Master\",\r\n        ModuleData: [\r\n          {\r\n            ID: 11,\r\n            Name: \"Employees Master\",\r\n            DisplayIndex: 1,\r\n            Icon: \"Employees Master\",\r\n            ActualPagePath: \"employeesMaster\",\r\n            ActualPagePath: \"employeesList\",\r\n\r\n          },\r\n          {\r\n            ID: 12,\r\n            Name: \"Employees List\",\r\n            DisplayIndex: 2,\r\n            Icon: \"Employees Lsit\",\r\n            ActualPagePath: \"employeesList\",\r\n            ActualPagePath: \"employeesList\",\r\n\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n   ",{"ruleId":"1822","replacedBy":"1823"},{"ruleId":"1824","replacedBy":"1825"},{"ruleId":"1826","severity":1,"message":"1827","line":2,"column":17,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":26},{"ruleId":"1826","severity":1,"message":"1830","line":5,"column":19,"nodeType":"1828","messageId":"1829","endLine":5,"endColumn":30},{"ruleId":"1831","severity":1,"message":"1832","line":6,"column":3,"nodeType":"1833","messageId":"1834","endLine":6,"endColumn":33,"fix":"1835"},{"ruleId":"1831","severity":1,"message":"1836","line":7,"column":3,"nodeType":"1833","messageId":"1834","endLine":7,"endColumn":19,"fix":"1837"},{"ruleId":"1838","severity":1,"message":"1839","line":96,"column":6,"nodeType":"1840","endLine":96,"endColumn":28,"suggestions":"1841"},{"ruleId":"1842","severity":1,"message":"1843","line":101,"column":3,"nodeType":"1844","messageId":"1845","endLine":101,"endColumn":21},{"ruleId":"1842","severity":1,"message":"1846","line":102,"column":3,"nodeType":"1844","messageId":"1845","endLine":102,"endColumn":17},{"ruleId":"1842","severity":1,"message":"1847","line":103,"column":3,"nodeType":"1844","messageId":"1845","endLine":103,"endColumn":16},{"ruleId":"1842","severity":1,"message":"1848","line":104,"column":3,"nodeType":"1844","messageId":"1845","endLine":104,"endColumn":22},{"ruleId":"1842","severity":1,"message":"1849","line":105,"column":3,"nodeType":"1844","messageId":"1845","endLine":105,"endColumn":19},{"ruleId":"1842","severity":1,"message":"1850","line":106,"column":3,"nodeType":"1844","messageId":"1845","endLine":106,"endColumn":19},{"ruleId":"1842","severity":1,"message":"1851","line":107,"column":3,"nodeType":"1844","messageId":"1845","endLine":107,"endColumn":22},{"ruleId":"1842","severity":1,"message":"1852","line":108,"column":3,"nodeType":"1844","messageId":"1845","endLine":108,"endColumn":27},{"ruleId":"1842","severity":1,"message":"1853","line":109,"column":3,"nodeType":"1844","messageId":"1845","endLine":109,"endColumn":19},{"ruleId":"1842","severity":1,"message":"1854","line":110,"column":3,"nodeType":"1844","messageId":"1845","endLine":110,"endColumn":13},{"ruleId":"1826","severity":1,"message":"1855","line":25,"column":8,"nodeType":"1828","messageId":"1829","endLine":25,"endColumn":13},{"ruleId":"1826","severity":1,"message":"1856","line":15,"column":121,"nodeType":"1828","messageId":"1829","endLine":15,"endColumn":139},{"ruleId":"1826","severity":1,"message":"1857","line":24,"column":9,"nodeType":"1828","messageId":"1829","endLine":24,"endColumn":16},{"ruleId":"1838","severity":1,"message":"1858","line":61,"column":6,"nodeType":"1840","endLine":61,"endColumn":56,"suggestions":"1859"},{"ruleId":"1838","severity":1,"message":"1858","line":77,"column":6,"nodeType":"1840","endLine":77,"endColumn":55,"suggestions":"1860"},{"ruleId":"1826","severity":1,"message":"1861","line":2,"column":31,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":41},{"ruleId":"1826","severity":1,"message":"1862","line":2,"column":43,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":48},{"ruleId":"1826","severity":1,"message":"1863","line":3,"column":18,"nodeType":"1828","messageId":"1829","endLine":3,"endColumn":25},{"ruleId":"1826","severity":1,"message":"1864","line":3,"column":36,"nodeType":"1828","messageId":"1829","endLine":3,"endColumn":46},{"ruleId":"1826","severity":1,"message":"1865","line":38,"column":12,"nodeType":"1828","messageId":"1829","endLine":38,"endColumn":20},{"ruleId":"1826","severity":1,"message":"1866","line":38,"column":22,"nodeType":"1828","messageId":"1829","endLine":38,"endColumn":33},{"ruleId":"1838","severity":1,"message":"1858","line":53,"column":8,"nodeType":"1840","endLine":53,"endColumn":10,"suggestions":"1867"},{"ruleId":"1868","severity":1,"message":"1869","line":55,"column":5,"nodeType":"1870","messageId":"1871","endLine":55,"endColumn":63},{"ruleId":"1838","severity":1,"message":"1872","line":91,"column":8,"nodeType":"1840","endLine":91,"endColumn":20,"suggestions":"1873"},{"ruleId":"1838","severity":1,"message":"1874","line":131,"column":8,"nodeType":"1840","endLine":131,"endColumn":10,"suggestions":"1875"},{"ruleId":"1838","severity":1,"message":"1876","line":165,"column":8,"nodeType":"1840","endLine":165,"endColumn":17,"suggestions":"1877"},{"ruleId":"1838","severity":1,"message":"1878","line":182,"column":8,"nodeType":"1840","endLine":182,"endColumn":29,"suggestions":"1879"},{"ruleId":"1838","severity":1,"message":"1880","line":190,"column":8,"nodeType":"1840","endLine":190,"endColumn":19,"suggestions":"1881"},{"ruleId":"1838","severity":1,"message":"1858","line":44,"column":8,"nodeType":"1840","endLine":44,"endColumn":10,"suggestions":"1882"},{"ruleId":"1826","severity":1,"message":"1883","line":15,"column":10,"nodeType":"1828","messageId":"1829","endLine":15,"endColumn":20},{"ruleId":"1838","severity":1,"message":"1858","line":48,"column":8,"nodeType":"1840","endLine":48,"endColumn":10,"suggestions":"1884"},{"ruleId":"1826","severity":1,"message":"1865","line":47,"column":10,"nodeType":"1828","messageId":"1829","endLine":47,"endColumn":18},{"ruleId":"1826","severity":1,"message":"1866","line":47,"column":20,"nodeType":"1828","messageId":"1829","endLine":47,"endColumn":31},{"ruleId":"1826","severity":1,"message":"1885","line":52,"column":10,"nodeType":"1828","messageId":"1829","endLine":52,"endColumn":28},{"ruleId":"1868","severity":1,"message":"1869","line":62,"column":3,"nodeType":"1870","messageId":"1871","endLine":62,"endColumn":61},{"ruleId":"1838","severity":1,"message":"1872","line":107,"column":6,"nodeType":"1840","endLine":107,"endColumn":18,"suggestions":"1886"},{"ruleId":"1838","severity":1,"message":"1874","line":150,"column":6,"nodeType":"1840","endLine":150,"endColumn":8,"suggestions":"1887"},{"ruleId":"1838","severity":1,"message":"1876","line":185,"column":6,"nodeType":"1840","endLine":185,"endColumn":15,"suggestions":"1888"},{"ruleId":"1838","severity":1,"message":"1878","line":202,"column":6,"nodeType":"1840","endLine":202,"endColumn":27,"suggestions":"1889"},{"ruleId":"1838","severity":1,"message":"1880","line":219,"column":6,"nodeType":"1840","endLine":219,"endColumn":17,"suggestions":"1890"},{"ruleId":"1826","severity":1,"message":"1891","line":1,"column":8,"nodeType":"1828","messageId":"1829","endLine":1,"endColumn":17},{"ruleId":"1826","severity":1,"message":"1892","line":5,"column":20,"nodeType":"1828","messageId":"1829","endLine":5,"endColumn":25},{"ruleId":"1826","severity":1,"message":"1862","line":5,"column":38,"nodeType":"1828","messageId":"1829","endLine":5,"endColumn":43},{"ruleId":"1826","severity":1,"message":"1893","line":10,"column":10,"nodeType":"1828","messageId":"1829","endLine":10,"endColumn":20},{"ruleId":"1826","severity":1,"message":"1894","line":13,"column":10,"nodeType":"1828","messageId":"1829","endLine":13,"endColumn":16},{"ruleId":"1826","severity":1,"message":"1895","line":13,"column":18,"nodeType":"1828","messageId":"1829","endLine":13,"endColumn":25},{"ruleId":"1826","severity":1,"message":"1896","line":18,"column":32,"nodeType":"1828","messageId":"1829","endLine":18,"endColumn":41},{"ruleId":"1826","severity":1,"message":"1897","line":33,"column":11,"nodeType":"1828","messageId":"1829","endLine":33,"endColumn":21},{"ruleId":"1838","severity":1,"message":"1878","line":48,"column":6,"nodeType":"1840","endLine":48,"endColumn":8,"suggestions":"1898"},{"ruleId":"1838","severity":1,"message":"1878","line":67,"column":6,"nodeType":"1840","endLine":67,"endColumn":30,"suggestions":"1899"},{"ruleId":"1838","severity":1,"message":"1858","line":46,"column":6,"nodeType":"1840","endLine":46,"endColumn":8,"suggestions":"1900"},{"ruleId":"1838","severity":1,"message":"1858","line":47,"column":8,"nodeType":"1840","endLine":47,"endColumn":10,"suggestions":"1901"},{"ruleId":"1826","severity":1,"message":"1902","line":7,"column":3,"nodeType":"1828","messageId":"1829","endLine":7,"endColumn":11},{"ruleId":"1838","severity":1,"message":"1872","line":126,"column":6,"nodeType":"1840","endLine":126,"endColumn":18,"suggestions":"1903"},{"ruleId":"1838","severity":1,"message":"1904","line":217,"column":6,"nodeType":"1840","endLine":217,"endColumn":8,"suggestions":"1905"},{"ruleId":"1838","severity":1,"message":"1876","line":258,"column":6,"nodeType":"1840","endLine":258,"endColumn":15,"suggestions":"1906"},{"ruleId":"1838","severity":1,"message":"1907","line":280,"column":6,"nodeType":"1840","endLine":280,"endColumn":29,"suggestions":"1908"},{"ruleId":"1838","severity":1,"message":"1878","line":297,"column":6,"nodeType":"1840","endLine":297,"endColumn":27,"suggestions":"1909"},{"ruleId":"1910","severity":1,"message":"1911","line":366,"column":9,"nodeType":"1912","messageId":"1913","endLine":366,"endColumn":47},{"ruleId":"1910","severity":1,"message":"1911","line":377,"column":9,"nodeType":"1912","messageId":"1913","endLine":377,"endColumn":47},{"ruleId":"1914","severity":1,"message":"1915","line":394,"column":5,"nodeType":"1916","messageId":"1917","endLine":580,"endColumn":6},{"ruleId":"1826","severity":1,"message":"1918","line":3,"column":77,"nodeType":"1828","messageId":"1829","endLine":3,"endColumn":82},{"ruleId":"1826","severity":1,"message":"1919","line":31,"column":7,"nodeType":"1828","messageId":"1829","endLine":31,"endColumn":29},{"ruleId":"1826","severity":1,"message":"1920","line":32,"column":7,"nodeType":"1828","messageId":"1829","endLine":32,"endColumn":20},{"ruleId":"1826","severity":1,"message":"1921","line":44,"column":10,"nodeType":"1828","messageId":"1829","endLine":44,"endColumn":22},{"ruleId":"1838","severity":1,"message":"1922","line":63,"column":6,"nodeType":"1840","endLine":63,"endColumn":17,"suggestions":"1923"},{"ruleId":"1838","severity":1,"message":"1872","line":108,"column":6,"nodeType":"1840","endLine":108,"endColumn":18,"suggestions":"1924"},{"ruleId":"1925","severity":1,"message":"1926","line":159,"column":37,"nodeType":"1927","messageId":"1928","endLine":159,"endColumn":39},{"ruleId":"1925","severity":1,"message":"1926","line":160,"column":33,"nodeType":"1927","messageId":"1928","endLine":160,"endColumn":35},{"ruleId":"1838","severity":1,"message":"1904","line":171,"column":6,"nodeType":"1840","endLine":171,"endColumn":8,"suggestions":"1929"},{"ruleId":"1838","severity":1,"message":"1930","line":208,"column":6,"nodeType":"1840","endLine":208,"endColumn":30,"suggestions":"1931"},{"ruleId":"1826","severity":1,"message":"1932","line":232,"column":12,"nodeType":"1828","messageId":"1829","endLine":232,"endColumn":31},{"ruleId":"1838","severity":1,"message":"1858","line":45,"column":6,"nodeType":"1840","endLine":45,"endColumn":8,"suggestions":"1933"},{"ruleId":"1838","severity":1,"message":"1858","line":45,"column":6,"nodeType":"1840","endLine":45,"endColumn":8,"suggestions":"1934"},{"ruleId":"1826","severity":1,"message":"1863","line":4,"column":10,"nodeType":"1828","messageId":"1829","endLine":4,"endColumn":17},{"ruleId":"1838","severity":1,"message":"1858","line":75,"column":6,"nodeType":"1840","endLine":75,"endColumn":8,"suggestions":"1935"},{"ruleId":"1838","severity":1,"message":"1872","line":93,"column":6,"nodeType":"1840","endLine":93,"endColumn":18,"suggestions":"1936"},{"ruleId":"1838","severity":1,"message":"1880","line":101,"column":6,"nodeType":"1840","endLine":101,"endColumn":17,"suggestions":"1937"},{"ruleId":"1826","severity":1,"message":"1938","line":124,"column":91,"nodeType":"1828","messageId":"1829","endLine":124,"endColumn":108},{"ruleId":"1838","severity":1,"message":"1874","line":151,"column":6,"nodeType":"1840","endLine":151,"endColumn":8,"suggestions":"1939"},{"ruleId":"1838","severity":1,"message":"1940","line":184,"column":6,"nodeType":"1840","endLine":184,"endColumn":22,"suggestions":"1941"},{"ruleId":"1838","severity":1,"message":"1878","line":201,"column":6,"nodeType":"1840","endLine":201,"endColumn":27,"suggestions":"1942"},{"ruleId":"1838","severity":1,"message":"1858","line":46,"column":6,"nodeType":"1840","endLine":46,"endColumn":8,"suggestions":"1943"},{"ruleId":"1826","severity":1,"message":"1944","line":1,"column":28,"nodeType":"1828","messageId":"1829","endLine":1,"endColumn":36},{"ruleId":"1838","severity":1,"message":"1858","line":45,"column":8,"nodeType":"1840","endLine":45,"endColumn":10,"suggestions":"1945"},{"ruleId":"1826","severity":1,"message":"1946","line":5,"column":5,"nodeType":"1828","messageId":"1829","endLine":5,"endColumn":11},{"ruleId":"1826","severity":1,"message":"1947","line":20,"column":5,"nodeType":"1828","messageId":"1829","endLine":20,"endColumn":10},{"ruleId":"1826","severity":1,"message":"1948","line":23,"column":10,"nodeType":"1828","messageId":"1829","endLine":23,"endColumn":14},{"ruleId":"1826","severity":1,"message":"1949","line":38,"column":5,"nodeType":"1828","messageId":"1829","endLine":38,"endColumn":18},{"ruleId":"1838","severity":1,"message":"1950","line":116,"column":8,"nodeType":"1840","endLine":116,"endColumn":41,"suggestions":"1951"},{"ruleId":"1838","severity":1,"message":"1952","line":169,"column":8,"nodeType":"1840","endLine":169,"endColumn":47,"suggestions":"1953"},{"ruleId":"1838","severity":1,"message":"1930","line":209,"column":8,"nodeType":"1840","endLine":209,"endColumn":32,"suggestions":"1954"},{"ruleId":"1955","severity":1,"message":"1956","line":524,"column":123,"nodeType":"1957","messageId":"1958","endLine":524,"endColumn":124,"suggestions":"1959"},{"ruleId":"1960","severity":1,"message":"1961","line":751,"column":69,"nodeType":"1962","messageId":"1963","endLine":751,"endColumn":155},{"ruleId":"1826","severity":1,"message":"1964","line":5,"column":5,"nodeType":"1828","messageId":"1829","endLine":5,"endColumn":9},{"ruleId":"1826","severity":1,"message":"1965","line":6,"column":7,"nodeType":"1828","messageId":"1829","endLine":6,"endColumn":15},{"ruleId":"1826","severity":1,"message":"1966","line":11,"column":13,"nodeType":"1828","messageId":"1829","endLine":11,"endColumn":22},{"ruleId":"1826","severity":1,"message":"1967","line":16,"column":29,"nodeType":"1828","messageId":"1829","endLine":16,"endColumn":40},{"ruleId":"1925","severity":1,"message":"1926","line":25,"column":32,"nodeType":"1927","messageId":"1928","endLine":25,"endColumn":34},{"ruleId":"1925","severity":1,"message":"1926","line":26,"column":38,"nodeType":"1927","messageId":"1928","endLine":26,"endColumn":40},{"ruleId":"1968","severity":1,"message":"1969","line":65,"column":73,"nodeType":"1970","messageId":"1845","endLine":65,"endColumn":75},{"ruleId":"1968","severity":1,"message":"1969","line":98,"column":31,"nodeType":"1970","messageId":"1845","endLine":98,"endColumn":33},{"ruleId":"1968","severity":1,"message":"1969","line":104,"column":38,"nodeType":"1970","messageId":"1845","endLine":104,"endColumn":40},{"ruleId":"1968","severity":1,"message":"1969","line":110,"column":38,"nodeType":"1970","messageId":"1845","endLine":110,"endColumn":40},{"ruleId":"1968","severity":1,"message":"1971","line":140,"column":31,"nodeType":"1970","messageId":"1845","endLine":140,"endColumn":33},{"ruleId":"1968","severity":1,"message":"1971","line":140,"column":48,"nodeType":"1970","messageId":"1845","endLine":140,"endColumn":50},{"ruleId":"1826","severity":1,"message":"1972","line":155,"column":13,"nodeType":"1828","messageId":"1829","endLine":155,"endColumn":22},{"ruleId":"1826","severity":1,"message":"1973","line":263,"column":7,"nodeType":"1828","messageId":"1829","endLine":263,"endColumn":18},{"ruleId":"1826","severity":1,"message":"1974","line":266,"column":10,"nodeType":"1828","messageId":"1829","endLine":266,"endColumn":19},{"ruleId":"1826","severity":1,"message":"1975","line":284,"column":9,"nodeType":"1828","messageId":"1829","endLine":284,"endColumn":14},{"ruleId":"1826","severity":1,"message":"1976","line":294,"column":14,"nodeType":"1828","messageId":"1829","endLine":294,"endColumn":22},{"ruleId":"1826","severity":1,"message":"1977","line":2,"column":16,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":22},{"ruleId":"1826","severity":1,"message":"1978","line":3,"column":21,"nodeType":"1828","messageId":"1829","endLine":3,"endColumn":26},{"ruleId":"1838","severity":1,"message":"1979","line":61,"column":8,"nodeType":"1840","endLine":61,"endColumn":41,"suggestions":"1980"},{"ruleId":"1838","severity":1,"message":"1858","line":67,"column":8,"nodeType":"1840","endLine":67,"endColumn":10,"suggestions":"1981"},{"ruleId":"1838","severity":1,"message":"1907","line":121,"column":8,"nodeType":"1840","endLine":121,"endColumn":39,"suggestions":"1982"},{"ruleId":"1826","severity":1,"message":"1983","line":220,"column":11,"nodeType":"1828","messageId":"1829","endLine":220,"endColumn":24},{"ruleId":"1826","severity":1,"message":"1984","line":1,"column":28,"nodeType":"1828","messageId":"1829","endLine":1,"endColumn":34},{"ruleId":"1826","severity":1,"message":"1985","line":10,"column":5,"nodeType":"1828","messageId":"1829","endLine":10,"endColumn":15},{"ruleId":"1826","severity":1,"message":"1986","line":12,"column":5,"nodeType":"1828","messageId":"1829","endLine":12,"endColumn":49},{"ruleId":"1826","severity":1,"message":"1987","line":25,"column":12,"nodeType":"1828","messageId":"1829","endLine":25,"endColumn":31},{"ruleId":"1826","severity":1,"message":"1988","line":25,"column":33,"nodeType":"1828","messageId":"1829","endLine":25,"endColumn":55},{"ruleId":"1826","severity":1,"message":"1989","line":26,"column":12,"nodeType":"1828","messageId":"1829","endLine":26,"endColumn":25},{"ruleId":"1826","severity":1,"message":"1990","line":26,"column":27,"nodeType":"1828","messageId":"1829","endLine":26,"endColumn":43},{"ruleId":"1826","severity":1,"message":"1991","line":29,"column":22,"nodeType":"1828","messageId":"1829","endLine":29,"endColumn":33},{"ruleId":"1838","severity":1,"message":"1858","line":49,"column":8,"nodeType":"1840","endLine":49,"endColumn":10,"suggestions":"1992"},{"ruleId":"1838","severity":1,"message":"1993","line":74,"column":8,"nodeType":"1840","endLine":74,"endColumn":17,"suggestions":"1994"},{"ruleId":"1968","severity":1,"message":"1969","line":114,"column":41,"nodeType":"1970","messageId":"1845","endLine":114,"endColumn":43},{"ruleId":"1826","severity":1,"message":"1948","line":21,"column":10,"nodeType":"1828","messageId":"1829","endLine":21,"endColumn":14},{"ruleId":"1826","severity":1,"message":"1995","line":32,"column":5,"nodeType":"1828","messageId":"1829","endLine":32,"endColumn":45},{"ruleId":"1826","severity":1,"message":"1996","line":34,"column":5,"nodeType":"1828","messageId":"1829","endLine":34,"endColumn":53},{"ruleId":"1826","severity":1,"message":"1997","line":39,"column":5,"nodeType":"1828","messageId":"1829","endLine":39,"endColumn":49},{"ruleId":"1826","severity":1,"message":"1998","line":40,"column":5,"nodeType":"1828","messageId":"1829","endLine":40,"endColumn":57},{"ruleId":"1826","severity":1,"message":"1999","line":52,"column":8,"nodeType":"1828","messageId":"1829","endLine":52,"endColumn":19},{"ruleId":"1826","severity":1,"message":"2000","line":53,"column":8,"nodeType":"1828","messageId":"1829","endLine":53,"endColumn":19},{"ruleId":"1826","severity":1,"message":"2001","line":85,"column":25,"nodeType":"1828","messageId":"1829","endLine":85,"endColumn":39},{"ruleId":"1826","severity":1,"message":"2002","line":110,"column":12,"nodeType":"1828","messageId":"1829","endLine":110,"endColumn":34},{"ruleId":"1826","severity":1,"message":"2003","line":110,"column":36,"nodeType":"1828","messageId":"1829","endLine":110,"endColumn":61},{"ruleId":"1826","severity":1,"message":"2004","line":116,"column":12,"nodeType":"1828","messageId":"1829","endLine":116,"endColumn":34},{"ruleId":"1838","severity":1,"message":"1872","line":162,"column":8,"nodeType":"1840","endLine":162,"endColumn":20,"suggestions":"2005"},{"ruleId":"1838","severity":1,"message":"1904","line":258,"column":8,"nodeType":"1840","endLine":258,"endColumn":10,"suggestions":"2006"},{"ruleId":"1838","severity":1,"message":"1876","line":293,"column":8,"nodeType":"1840","endLine":293,"endColumn":25,"suggestions":"2007"},{"ruleId":"1960","severity":1,"message":"2008","line":1268,"column":69,"nodeType":"1962","messageId":"1963","endLine":1268,"endColumn":131},{"ruleId":"1838","severity":1,"message":"1858","line":76,"column":8,"nodeType":"1840","endLine":76,"endColumn":10,"suggestions":"2009"},{"ruleId":"1838","severity":1,"message":"1872","line":96,"column":8,"nodeType":"1840","endLine":96,"endColumn":20,"suggestions":"2010"},{"ruleId":"1838","severity":1,"message":"1874","line":131,"column":8,"nodeType":"1840","endLine":131,"endColumn":10,"suggestions":"2011"},{"ruleId":"1838","severity":1,"message":"1876","line":165,"column":8,"nodeType":"1840","endLine":165,"endColumn":17,"suggestions":"2012"},{"ruleId":"1838","severity":1,"message":"1878","line":182,"column":8,"nodeType":"1840","endLine":182,"endColumn":29,"suggestions":"2013"},{"ruleId":"1838","severity":1,"message":"1880","line":190,"column":8,"nodeType":"1840","endLine":190,"endColumn":19,"suggestions":"2014"},{"ruleId":"1838","severity":1,"message":"1858","line":48,"column":6,"nodeType":"1840","endLine":48,"endColumn":8,"suggestions":"2015"},{"ruleId":"1826","severity":1,"message":"1894","line":4,"column":10,"nodeType":"1828","messageId":"1829","endLine":4,"endColumn":16},{"ruleId":"1826","severity":1,"message":"2016","line":4,"column":18,"nodeType":"1828","messageId":"1829","endLine":4,"endColumn":25},{"ruleId":"1826","severity":1,"message":"1895","line":4,"column":27,"nodeType":"1828","messageId":"1829","endLine":4,"endColumn":34},{"ruleId":"1826","severity":1,"message":"1863","line":4,"column":36,"nodeType":"1828","messageId":"1829","endLine":4,"endColumn":43},{"ruleId":"1826","severity":1,"message":"2017","line":9,"column":5,"nodeType":"1828","messageId":"1829","endLine":9,"endColumn":23},{"ruleId":"1826","severity":1,"message":"2018","line":9,"column":25,"nodeType":"1828","messageId":"1829","endLine":9,"endColumn":43},{"ruleId":"1826","severity":1,"message":"2019","line":9,"column":45,"nodeType":"1828","messageId":"1829","endLine":9,"endColumn":70},{"ruleId":"1826","severity":1,"message":"2020","line":9,"column":72,"nodeType":"1828","messageId":"1829","endLine":9,"endColumn":90},{"ruleId":"1826","severity":1,"message":"1949","line":11,"column":35,"nodeType":"1828","messageId":"1829","endLine":11,"endColumn":48},{"ruleId":"1826","severity":1,"message":"2021","line":11,"column":50,"nodeType":"1828","messageId":"1829","endLine":11,"endColumn":70},{"ruleId":"1826","severity":1,"message":"2022","line":11,"column":72,"nodeType":"1828","messageId":"1829","endLine":11,"endColumn":85},{"ruleId":"1826","severity":1,"message":"1978","line":13,"column":17,"nodeType":"1828","messageId":"1829","endLine":13,"endColumn":22},{"ruleId":"1826","severity":1,"message":"2023","line":16,"column":47,"nodeType":"1828","messageId":"1829","endLine":16,"endColumn":63},{"ruleId":"1826","severity":1,"message":"2024","line":16,"column":65,"nodeType":"1828","messageId":"1829","endLine":16,"endColumn":77},{"ruleId":"1826","severity":1,"message":"2025","line":16,"column":107,"nodeType":"1828","messageId":"1829","endLine":16,"endColumn":139},{"ruleId":"1826","severity":1,"message":"2026","line":16,"column":309,"nodeType":"1828","messageId":"1829","endLine":16,"endColumn":335},{"ruleId":"1826","severity":1,"message":"2027","line":16,"column":412,"nodeType":"1828","messageId":"1829","endLine":16,"endColumn":428},{"ruleId":"1826","severity":1,"message":"2028","line":19,"column":22,"nodeType":"1828","messageId":"1829","endLine":19,"endColumn":33},{"ruleId":"1826","severity":1,"message":"2029","line":19,"column":35,"nodeType":"1828","messageId":"1829","endLine":19,"endColumn":44},{"ruleId":"1826","severity":1,"message":"2030","line":20,"column":10,"nodeType":"1828","messageId":"1829","endLine":20,"endColumn":37},{"ruleId":"1826","severity":1,"message":"2031","line":24,"column":11,"nodeType":"1828","messageId":"1829","endLine":24,"endColumn":18},{"ruleId":"1826","severity":1,"message":"2032","line":80,"column":17,"nodeType":"1828","messageId":"1829","endLine":80,"endColumn":26},{"ruleId":"1838","severity":1,"message":"2033","line":95,"column":8,"nodeType":"1840","endLine":95,"endColumn":41,"suggestions":"2034"},{"ruleId":"1838","severity":1,"message":"1858","line":113,"column":8,"nodeType":"1840","endLine":113,"endColumn":10,"suggestions":"2035"},{"ruleId":"1925","severity":1,"message":"1926","line":120,"column":68,"nodeType":"1927","messageId":"1928","endLine":120,"endColumn":70},{"ruleId":"1838","severity":1,"message":"2036","line":160,"column":8,"nodeType":"1840","endLine":160,"endColumn":51,"suggestions":"2037"},{"ruleId":"1838","severity":1,"message":"2038","line":171,"column":33,"nodeType":"2039","endLine":171,"endColumn":76},{"ruleId":"1838","severity":1,"message":"1858","line":196,"column":8,"nodeType":"1840","endLine":196,"endColumn":39,"suggestions":"2040"},{"ruleId":"1868","severity":1,"message":"2041","line":907,"column":1,"nodeType":"1870","messageId":"2042","endLine":975,"endColumn":10},{"ruleId":"1826","severity":1,"message":"2043","line":14,"column":8,"nodeType":"1828","messageId":"1829","endLine":14,"endColumn":14},{"ruleId":"1826","severity":1,"message":"1895","line":17,"column":10,"nodeType":"1828","messageId":"1829","endLine":17,"endColumn":17},{"ruleId":"1826","severity":1,"message":"1894","line":17,"column":19,"nodeType":"1828","messageId":"1829","endLine":17,"endColumn":25},{"ruleId":"1826","severity":1,"message":"1863","line":17,"column":27,"nodeType":"1828","messageId":"1829","endLine":17,"endColumn":34},{"ruleId":"1826","severity":1,"message":"1948","line":19,"column":10,"nodeType":"1828","messageId":"1829","endLine":19,"endColumn":14},{"ruleId":"1826","severity":1,"message":"2030","line":20,"column":10,"nodeType":"1828","messageId":"1829","endLine":20,"endColumn":37},{"ruleId":"1826","severity":1,"message":"2044","line":31,"column":5,"nodeType":"1828","messageId":"1829","endLine":31,"endColumn":18},{"ruleId":"1826","severity":1,"message":"2045","line":43,"column":12,"nodeType":"1828","messageId":"1829","endLine":43,"endColumn":20},{"ruleId":"1826","severity":1,"message":"1865","line":44,"column":12,"nodeType":"1828","messageId":"1829","endLine":44,"endColumn":20},{"ruleId":"1826","severity":1,"message":"1866","line":44,"column":22,"nodeType":"1828","messageId":"1829","endLine":44,"endColumn":33},{"ruleId":"1826","severity":1,"message":"2046","line":50,"column":30,"nodeType":"1828","messageId":"1829","endLine":50,"endColumn":40},{"ruleId":"1838","severity":1,"message":"1858","line":60,"column":8,"nodeType":"1840","endLine":60,"endColumn":10,"suggestions":"2047"},{"ruleId":"1868","severity":1,"message":"1869","line":62,"column":5,"nodeType":"1870","messageId":"1871","endLine":62,"endColumn":63},{"ruleId":"1838","severity":1,"message":"1872","line":97,"column":8,"nodeType":"1840","endLine":97,"endColumn":20,"suggestions":"2048"},{"ruleId":"1838","severity":1,"message":"1874","line":139,"column":8,"nodeType":"1840","endLine":139,"endColumn":10,"suggestions":"2049"},{"ruleId":"1838","severity":1,"message":"1876","line":174,"column":8,"nodeType":"1840","endLine":174,"endColumn":25,"suggestions":"2050"},{"ruleId":"1838","severity":1,"message":"1880","line":182,"column":8,"nodeType":"1840","endLine":182,"endColumn":19,"suggestions":"2051"},{"ruleId":"1838","severity":1,"message":"1858","line":46,"column":6,"nodeType":"1840","endLine":46,"endColumn":8,"suggestions":"2052"},{"ruleId":"1838","severity":1,"message":"1858","line":57,"column":8,"nodeType":"1840","endLine":57,"endColumn":10,"suggestions":"2053"},{"ruleId":"1868","severity":1,"message":"1869","line":59,"column":5,"nodeType":"1870","messageId":"1871","endLine":59,"endColumn":63},{"ruleId":"1838","severity":1,"message":"1872","line":93,"column":8,"nodeType":"1840","endLine":93,"endColumn":20,"suggestions":"2054"},{"ruleId":"1838","severity":1,"message":"1874","line":126,"column":8,"nodeType":"1840","endLine":126,"endColumn":10,"suggestions":"2055"},{"ruleId":"1838","severity":1,"message":"1876","line":161,"column":8,"nodeType":"1840","endLine":161,"endColumn":17,"suggestions":"2056"},{"ruleId":"1838","severity":1,"message":"1878","line":178,"column":8,"nodeType":"1840","endLine":178,"endColumn":29,"suggestions":"2057"},{"ruleId":"1838","severity":1,"message":"1880","line":187,"column":8,"nodeType":"1840","endLine":187,"endColumn":19,"suggestions":"2058"},{"ruleId":"1838","severity":1,"message":"1858","line":45,"column":6,"nodeType":"1840","endLine":45,"endColumn":8,"suggestions":"2059"},{"ruleId":"1826","severity":1,"message":"2060","line":15,"column":3,"nodeType":"1828","messageId":"1829","endLine":15,"endColumn":44},{"ruleId":"1826","severity":1,"message":"2061","line":46,"column":10,"nodeType":"1828","messageId":"1829","endLine":46,"endColumn":36},{"ruleId":"1826","severity":1,"message":"2062","line":47,"column":10,"nodeType":"1828","messageId":"1829","endLine":47,"endColumn":37},{"ruleId":"1826","severity":1,"message":"2063","line":48,"column":10,"nodeType":"1828","messageId":"1829","endLine":48,"endColumn":30},{"ruleId":"1826","severity":1,"message":"2064","line":49,"column":10,"nodeType":"1828","messageId":"1829","endLine":49,"endColumn":33},{"ruleId":"1826","severity":1,"message":"2065","line":50,"column":10,"nodeType":"1828","messageId":"1829","endLine":50,"endColumn":32},{"ruleId":"1826","severity":1,"message":"2066","line":51,"column":10,"nodeType":"1828","messageId":"1829","endLine":51,"endColumn":30},{"ruleId":"1826","severity":1,"message":"2067","line":52,"column":10,"nodeType":"1828","messageId":"1829","endLine":52,"endColumn":25},{"ruleId":"1838","severity":1,"message":"1872","line":134,"column":6,"nodeType":"1840","endLine":134,"endColumn":18,"suggestions":"2068"},{"ruleId":"1826","severity":1,"message":"2069","line":167,"column":84,"nodeType":"1828","messageId":"1829","endLine":167,"endColumn":99},{"ruleId":"1838","severity":1,"message":"1874","line":211,"column":6,"nodeType":"1840","endLine":211,"endColumn":8,"suggestions":"2070"},{"ruleId":"1838","severity":1,"message":"1876","line":254,"column":6,"nodeType":"1840","endLine":254,"endColumn":15,"suggestions":"2071"},{"ruleId":"1838","severity":1,"message":"1878","line":271,"column":6,"nodeType":"1840","endLine":271,"endColumn":27,"suggestions":"2072"},{"ruleId":"1838","severity":1,"message":"1880","line":279,"column":6,"nodeType":"1840","endLine":279,"endColumn":17,"suggestions":"2073"},{"ruleId":"1868","severity":1,"message":"1869","line":63,"column":5,"nodeType":"1870","messageId":"1871","endLine":63,"endColumn":63},{"ruleId":"1838","severity":1,"message":"1858","line":79,"column":8,"nodeType":"1840","endLine":79,"endColumn":10,"suggestions":"2074"},{"ruleId":"1838","severity":1,"message":"1872","line":101,"column":8,"nodeType":"1840","endLine":101,"endColumn":20,"suggestions":"2075"},{"ruleId":"1838","severity":1,"message":"1874","line":137,"column":8,"nodeType":"1840","endLine":137,"endColumn":10,"suggestions":"2076"},{"ruleId":"1838","severity":1,"message":"1876","line":170,"column":8,"nodeType":"1840","endLine":170,"endColumn":17,"suggestions":"2077"},{"ruleId":"1838","severity":1,"message":"1878","line":187,"column":8,"nodeType":"1840","endLine":187,"endColumn":29,"suggestions":"2078"},{"ruleId":"1838","severity":1,"message":"1880","line":195,"column":8,"nodeType":"1840","endLine":195,"endColumn":19,"suggestions":"2079"},{"ruleId":"1838","severity":1,"message":"1858","line":45,"column":6,"nodeType":"1840","endLine":45,"endColumn":8,"suggestions":"2080"},{"ruleId":"1826","severity":1,"message":"2044","line":28,"column":5,"nodeType":"1828","messageId":"1829","endLine":28,"endColumn":18},{"ruleId":"1826","severity":1,"message":"2081","line":47,"column":12,"nodeType":"1828","messageId":"1829","endLine":47,"endColumn":36},{"ruleId":"1868","severity":1,"message":"1869","line":67,"column":5,"nodeType":"1870","messageId":"1871","endLine":67,"endColumn":63},{"ruleId":"1868","severity":1,"message":"1869","line":68,"column":5,"nodeType":"1870","messageId":"1871","endLine":68,"endColumn":18},{"ruleId":"1838","severity":1,"message":"1858","line":109,"column":8,"nodeType":"1840","endLine":109,"endColumn":10,"suggestions":"2082"},{"ruleId":"1868","severity":1,"message":"1869","line":110,"column":5,"nodeType":"1870","messageId":"1871","endLine":110,"endColumn":16},{"ruleId":"1838","severity":1,"message":"2083","line":136,"column":8,"nodeType":"1840","endLine":136,"endColumn":41,"suggestions":"2084"},{"ruleId":"1838","severity":1,"message":"1952","line":156,"column":8,"nodeType":"1840","endLine":156,"endColumn":32,"suggestions":"2085"},{"ruleId":"1838","severity":1,"message":"1876","line":191,"column":8,"nodeType":"1840","endLine":191,"endColumn":25,"suggestions":"2086"},{"ruleId":"1838","severity":1,"message":"1880","line":198,"column":8,"nodeType":"1840","endLine":198,"endColumn":19,"suggestions":"2087"},{"ruleId":"1826","severity":1,"message":"2088","line":205,"column":14,"nodeType":"1828","messageId":"1829","endLine":205,"endColumn":38},{"ruleId":"1826","severity":1,"message":"2089","line":13,"column":10,"nodeType":"1828","messageId":"1829","endLine":13,"endColumn":25},{"ruleId":"1826","severity":1,"message":"2090","line":13,"column":76,"nodeType":"1828","messageId":"1829","endLine":13,"endColumn":98},{"ruleId":"1838","severity":1,"message":"1858","line":45,"column":6,"nodeType":"1840","endLine":45,"endColumn":8,"suggestions":"2091"},{"ruleId":"1826","severity":1,"message":"2092","line":36,"column":10,"nodeType":"1828","messageId":"1829","endLine":36,"endColumn":21},{"ruleId":"1826","severity":1,"message":"1865","line":55,"column":12,"nodeType":"1828","messageId":"1829","endLine":55,"endColumn":20},{"ruleId":"1826","severity":1,"message":"1866","line":55,"column":22,"nodeType":"1828","messageId":"1829","endLine":55,"endColumn":33},{"ruleId":"1838","severity":1,"message":"1858","line":102,"column":8,"nodeType":"1840","endLine":102,"endColumn":10,"suggestions":"2093"},{"ruleId":"1838","severity":1,"message":"1872","line":132,"column":8,"nodeType":"1840","endLine":132,"endColumn":20,"suggestions":"2094"},{"ruleId":"1826","severity":1,"message":"2095","line":158,"column":108,"nodeType":"1828","messageId":"1829","endLine":158,"endColumn":124},{"ruleId":"1838","severity":1,"message":"1874","line":184,"column":8,"nodeType":"1840","endLine":184,"endColumn":10,"suggestions":"2096"},{"ruleId":"1838","severity":1,"message":"1876","line":220,"column":8,"nodeType":"1840","endLine":220,"endColumn":17,"suggestions":"2097"},{"ruleId":"1838","severity":1,"message":"1878","line":237,"column":8,"nodeType":"1840","endLine":237,"endColumn":29,"suggestions":"2098"},{"ruleId":"1838","severity":1,"message":"1880","line":245,"column":8,"nodeType":"1840","endLine":245,"endColumn":19,"suggestions":"2099"},{"ruleId":"1826","severity":1,"message":"1857","line":21,"column":9,"nodeType":"1828","messageId":"1829","endLine":21,"endColumn":16},{"ruleId":"1838","severity":1,"message":"1858","line":51,"column":6,"nodeType":"1840","endLine":51,"endColumn":8,"suggestions":"2100"},{"ruleId":"1838","severity":1,"message":"1858","line":46,"column":6,"nodeType":"1840","endLine":46,"endColumn":8,"suggestions":"2101"},{"ruleId":"1826","severity":1,"message":"2102","line":27,"column":5,"nodeType":"1828","messageId":"1829","endLine":27,"endColumn":33},{"ruleId":"1868","severity":1,"message":"1869","line":52,"column":5,"nodeType":"1870","messageId":"1871","endLine":52,"endColumn":63},{"ruleId":"1838","severity":1,"message":"1858","line":80,"column":8,"nodeType":"1840","endLine":80,"endColumn":10,"suggestions":"2103"},{"ruleId":"1838","severity":1,"message":"1872","line":101,"column":8,"nodeType":"1840","endLine":101,"endColumn":20,"suggestions":"2104"},{"ruleId":"1838","severity":1,"message":"1874","line":134,"column":8,"nodeType":"1840","endLine":134,"endColumn":10,"suggestions":"2105"},{"ruleId":"1838","severity":1,"message":"1876","line":169,"column":8,"nodeType":"1840","endLine":169,"endColumn":17,"suggestions":"2106"},{"ruleId":"1838","severity":1,"message":"1878","line":186,"column":8,"nodeType":"1840","endLine":186,"endColumn":29,"suggestions":"2107"},{"ruleId":"1838","severity":1,"message":"1880","line":194,"column":8,"nodeType":"1840","endLine":194,"endColumn":19,"suggestions":"2108"},{"ruleId":"1838","severity":1,"message":"1858","line":45,"column":6,"nodeType":"1840","endLine":45,"endColumn":8,"suggestions":"2109"},{"ruleId":"1838","severity":1,"message":"1858","line":44,"column":6,"nodeType":"1840","endLine":44,"endColumn":8,"suggestions":"2110"},{"ruleId":"1826","severity":1,"message":"1984","line":1,"column":28,"nodeType":"1828","messageId":"1829","endLine":1,"endColumn":34},{"ruleId":"1826","severity":1,"message":"2111","line":32,"column":10,"nodeType":"1828","messageId":"1829","endLine":32,"endColumn":30},{"ruleId":"1826","severity":1,"message":"2112","line":39,"column":5,"nodeType":"1828","messageId":"1829","endLine":39,"endColumn":18},{"ruleId":"1826","severity":1,"message":"2113","line":56,"column":9,"nodeType":"1828","messageId":"1829","endLine":56,"endColumn":22},{"ruleId":"1826","severity":1,"message":"1865","line":59,"column":12,"nodeType":"1828","messageId":"1829","endLine":59,"endColumn":20},{"ruleId":"1826","severity":1,"message":"1866","line":59,"column":22,"nodeType":"1828","messageId":"1829","endLine":59,"endColumn":33},{"ruleId":"1826","severity":1,"message":"1991","line":60,"column":22,"nodeType":"1828","messageId":"1829","endLine":60,"endColumn":33},{"ruleId":"1826","severity":1,"message":"2114","line":75,"column":12,"nodeType":"1828","messageId":"1829","endLine":75,"endColumn":21},{"ruleId":"1826","severity":1,"message":"2115","line":75,"column":23,"nodeType":"1828","messageId":"1829","endLine":75,"endColumn":35},{"ruleId":"1838","severity":1,"message":"1950","line":112,"column":8,"nodeType":"1840","endLine":112,"endColumn":41,"suggestions":"2116"},{"ruleId":"1838","severity":1,"message":"2117","line":132,"column":8,"nodeType":"1840","endLine":132,"endColumn":25,"suggestions":"2118"},{"ruleId":"1838","severity":1,"message":"2117","line":150,"column":8,"nodeType":"1840","endLine":150,"endColumn":27,"suggestions":"2119"},{"ruleId":"1826","severity":1,"message":"2120","line":157,"column":11,"nodeType":"1828","messageId":"1829","endLine":157,"endColumn":36},{"ruleId":"1826","severity":1,"message":"2121","line":25,"column":27,"nodeType":"1828","messageId":"1829","endLine":25,"endColumn":33},{"ruleId":"1826","severity":1,"message":"1991","line":50,"column":22,"nodeType":"1828","messageId":"1829","endLine":50,"endColumn":33},{"ruleId":"1838","severity":1,"message":"1872","line":93,"column":8,"nodeType":"1840","endLine":93,"endColumn":20,"suggestions":"2122"},{"ruleId":"1838","severity":1,"message":"2123","line":131,"column":8,"nodeType":"1840","endLine":131,"endColumn":20,"suggestions":"2124"},{"ruleId":"1838","severity":1,"message":"1876","line":169,"column":8,"nodeType":"1840","endLine":169,"endColumn":17,"suggestions":"2125"},{"ruleId":"1838","severity":1,"message":"2126","line":194,"column":8,"nodeType":"1840","endLine":194,"endColumn":23,"suggestions":"2127"},{"ruleId":"1826","severity":1,"message":"2121","line":8,"column":27,"nodeType":"1828","messageId":"1829","endLine":8,"endColumn":33},{"ruleId":"1838","severity":1,"message":"1979","line":51,"column":6,"nodeType":"1840","endLine":51,"endColumn":18,"suggestions":"2128"},{"ruleId":"1838","severity":1,"message":"1858","line":56,"column":6,"nodeType":"1840","endLine":56,"endColumn":8,"suggestions":"2129"},{"ruleId":"1838","severity":1,"message":"2130","line":80,"column":6,"nodeType":"1840","endLine":80,"endColumn":24,"suggestions":"2131"},{"ruleId":"1826","severity":1,"message":"2121","line":25,"column":27,"nodeType":"1828","messageId":"1829","endLine":25,"endColumn":33},{"ruleId":"1826","severity":1,"message":"1991","line":48,"column":22,"nodeType":"1828","messageId":"1829","endLine":48,"endColumn":33},{"ruleId":"1838","severity":1,"message":"1872","line":89,"column":8,"nodeType":"1840","endLine":89,"endColumn":20,"suggestions":"2132"},{"ruleId":"1838","severity":1,"message":"2123","line":121,"column":8,"nodeType":"1840","endLine":121,"endColumn":20,"suggestions":"2133"},{"ruleId":"1838","severity":1,"message":"2126","line":152,"column":8,"nodeType":"1840","endLine":152,"endColumn":23,"suggestions":"2134"},{"ruleId":"1838","severity":1,"message":"1876","line":254,"column":8,"nodeType":"1840","endLine":254,"endColumn":25,"suggestions":"2135"},{"ruleId":"1826","severity":1,"message":"2121","line":8,"column":27,"nodeType":"1828","messageId":"1829","endLine":8,"endColumn":33},{"ruleId":"1838","severity":1,"message":"1979","line":51,"column":6,"nodeType":"1840","endLine":51,"endColumn":39,"suggestions":"2136"},{"ruleId":"1838","severity":1,"message":"1858","line":56,"column":6,"nodeType":"1840","endLine":56,"endColumn":8,"suggestions":"2137"},{"ruleId":"1838","severity":1,"message":"1858","line":80,"column":6,"nodeType":"1840","endLine":80,"endColumn":21,"suggestions":"2138"},{"ruleId":"1826","severity":1,"message":"1866","line":31,"column":22,"nodeType":"1828","messageId":"1829","endLine":31,"endColumn":33},{"ruleId":"1838","severity":1,"message":"1950","line":71,"column":8,"nodeType":"1840","endLine":71,"endColumn":41,"suggestions":"2139"},{"ruleId":"1838","severity":1,"message":"1952","line":84,"column":8,"nodeType":"1840","endLine":84,"endColumn":32,"suggestions":"2140"},{"ruleId":"1838","severity":1,"message":"1876","line":119,"column":8,"nodeType":"1840","endLine":119,"endColumn":25,"suggestions":"2141"},{"ruleId":"1826","severity":1,"message":"1865","line":49,"column":12,"nodeType":"1828","messageId":"1829","endLine":49,"endColumn":20},{"ruleId":"1826","severity":1,"message":"2142","line":53,"column":12,"nodeType":"1828","messageId":"1829","endLine":53,"endColumn":38},{"ruleId":"1868","severity":1,"message":"1869","line":73,"column":5,"nodeType":"1870","messageId":"1871","endLine":73,"endColumn":63},{"ruleId":"1868","severity":1,"message":"1869","line":74,"column":5,"nodeType":"1870","messageId":"1871","endLine":74,"endColumn":18},{"ruleId":"1868","severity":1,"message":"1869","line":90,"column":5,"nodeType":"1870","messageId":"1871","endLine":90,"endColumn":16},{"ruleId":"1838","severity":1,"message":"1858","line":96,"column":8,"nodeType":"1840","endLine":96,"endColumn":10,"suggestions":"2143"},{"ruleId":"1838","severity":1,"message":"1872","line":118,"column":8,"nodeType":"1840","endLine":118,"endColumn":20,"suggestions":"2144"},{"ruleId":"1838","severity":1,"message":"1874","line":163,"column":8,"nodeType":"1840","endLine":163,"endColumn":10,"suggestions":"2145"},{"ruleId":"1838","severity":1,"message":"1876","line":198,"column":8,"nodeType":"1840","endLine":198,"endColumn":17,"suggestions":"2146"},{"ruleId":"1838","severity":1,"message":"1878","line":215,"column":8,"nodeType":"1840","endLine":215,"endColumn":29,"suggestions":"2147"},{"ruleId":"1838","severity":1,"message":"1880","line":225,"column":8,"nodeType":"1840","endLine":225,"endColumn":19,"suggestions":"2148"},{"ruleId":"1826","severity":1,"message":"2149","line":234,"column":14,"nodeType":"1828","messageId":"1829","endLine":234,"endColumn":30},{"ruleId":"1838","severity":1,"message":"1858","line":42,"column":6,"nodeType":"1840","endLine":42,"endColumn":8,"suggestions":"2150"},{"ruleId":"1838","severity":1,"message":"1858","line":46,"column":6,"nodeType":"1840","endLine":46,"endColumn":8,"suggestions":"2151"},{"ruleId":"1838","severity":1,"message":"1858","line":47,"column":6,"nodeType":"1840","endLine":47,"endColumn":8,"suggestions":"2152"},{"ruleId":"1838","severity":1,"message":"1858","line":71,"column":8,"nodeType":"1840","endLine":71,"endColumn":10,"suggestions":"2153"},{"ruleId":"1838","severity":1,"message":"1872","line":93,"column":8,"nodeType":"1840","endLine":93,"endColumn":20,"suggestions":"2154"},{"ruleId":"1838","severity":1,"message":"1874","line":127,"column":8,"nodeType":"1840","endLine":127,"endColumn":10,"suggestions":"2155"},{"ruleId":"1838","severity":1,"message":"1876","line":159,"column":8,"nodeType":"1840","endLine":159,"endColumn":17,"suggestions":"2156"},{"ruleId":"1838","severity":1,"message":"1878","line":176,"column":8,"nodeType":"1840","endLine":176,"endColumn":29,"suggestions":"2157"},{"ruleId":"1838","severity":1,"message":"1880","line":183,"column":8,"nodeType":"1840","endLine":183,"endColumn":19,"suggestions":"2158"},{"ruleId":"1826","severity":1,"message":"2159","line":4,"column":8,"nodeType":"1828","messageId":"1829","endLine":4,"endColumn":22},{"ruleId":"1826","severity":1,"message":"2160","line":14,"column":10,"nodeType":"1828","messageId":"1829","endLine":14,"endColumn":25},{"ruleId":"1826","severity":1,"message":"2161","line":15,"column":8,"nodeType":"1828","messageId":"1829","endLine":15,"endColumn":21},{"ruleId":"1826","severity":1,"message":"2162","line":31,"column":9,"nodeType":"1828","messageId":"1829","endLine":31,"endColumn":15},{"ruleId":"1838","severity":1,"message":"1858","line":45,"column":6,"nodeType":"1840","endLine":45,"endColumn":8,"suggestions":"2163"},{"ruleId":"1826","severity":1,"message":"2164","line":47,"column":11,"nodeType":"1828","messageId":"1829","endLine":47,"endColumn":20},{"ruleId":"1826","severity":1,"message":"1984","line":1,"column":28,"nodeType":"1828","messageId":"1829","endLine":1,"endColumn":34},{"ruleId":"1826","severity":1,"message":"1865","line":33,"column":12,"nodeType":"1828","messageId":"1829","endLine":33,"endColumn":20},{"ruleId":"1826","severity":1,"message":"1866","line":33,"column":22,"nodeType":"1828","messageId":"1829","endLine":33,"endColumn":33},{"ruleId":"1826","severity":1,"message":"1991","line":34,"column":22,"nodeType":"1828","messageId":"1829","endLine":34,"endColumn":33},{"ruleId":"1868","severity":1,"message":"1869","line":59,"column":5,"nodeType":"1870","messageId":"1871","endLine":59,"endColumn":18},{"ruleId":"1826","severity":1,"message":"2165","line":60,"column":19,"nodeType":"1828","messageId":"1829","endLine":60,"endColumn":27},{"ruleId":"1826","severity":1,"message":"2166","line":92,"column":11,"nodeType":"1828","messageId":"1829","endLine":92,"endColumn":17},{"ruleId":"1826","severity":1,"message":"2167","line":93,"column":13,"nodeType":"1828","messageId":"1829","endLine":93,"endColumn":20},{"ruleId":"1826","severity":1,"message":"2168","line":94,"column":13,"nodeType":"1828","messageId":"1829","endLine":94,"endColumn":23},{"ruleId":"1826","severity":1,"message":"2169","line":98,"column":11,"nodeType":"1828","messageId":"1829","endLine":98,"endColumn":25},{"ruleId":"1838","severity":1,"message":"1872","line":117,"column":8,"nodeType":"1840","endLine":117,"endColumn":20,"suggestions":"2170"},{"ruleId":"1838","severity":1,"message":"1876","line":150,"column":8,"nodeType":"1840","endLine":150,"endColumn":17,"suggestions":"2171"},{"ruleId":"1826","severity":1,"message":"1895","line":16,"column":10,"nodeType":"1828","messageId":"1829","endLine":16,"endColumn":17},{"ruleId":"1826","severity":1,"message":"1894","line":16,"column":19,"nodeType":"1828","messageId":"1829","endLine":16,"endColumn":25},{"ruleId":"1826","severity":1,"message":"2111","line":20,"column":10,"nodeType":"1828","messageId":"1829","endLine":20,"endColumn":30},{"ruleId":"1826","severity":1,"message":"2089","line":20,"column":32,"nodeType":"1828","messageId":"1829","endLine":20,"endColumn":47},{"ruleId":"1826","severity":1,"message":"2090","line":20,"column":49,"nodeType":"1828","messageId":"1829","endLine":20,"endColumn":71},{"ruleId":"1826","severity":1,"message":"2172","line":20,"column":73,"nodeType":"1828","messageId":"1829","endLine":20,"endColumn":84},{"ruleId":"1826","severity":1,"message":"2173","line":20,"column":86,"nodeType":"1828","messageId":"1829","endLine":20,"endColumn":104},{"ruleId":"1826","severity":1,"message":"2030","line":24,"column":10,"nodeType":"1828","messageId":"1829","endLine":24,"endColumn":37},{"ruleId":"1826","severity":1,"message":"2174","line":27,"column":5,"nodeType":"1828","messageId":"1829","endLine":27,"endColumn":24},{"ruleId":"1826","severity":1,"message":"2175","line":28,"column":5,"nodeType":"1828","messageId":"1829","endLine":28,"endColumn":14},{"ruleId":"1826","severity":1,"message":"2176","line":29,"column":5,"nodeType":"1828","messageId":"1829","endLine":29,"endColumn":21},{"ruleId":"1826","severity":1,"message":"2177","line":30,"column":5,"nodeType":"1828","messageId":"1829","endLine":30,"endColumn":19},{"ruleId":"1826","severity":1,"message":"2178","line":31,"column":5,"nodeType":"1828","messageId":"1829","endLine":31,"endColumn":17},{"ruleId":"1826","severity":1,"message":"2179","line":35,"column":8,"nodeType":"1828","messageId":"1829","endLine":35,"endColumn":25},{"ruleId":"1826","severity":1,"message":"2180","line":35,"column":29,"nodeType":"1828","messageId":"1829","endLine":35,"endColumn":53},{"ruleId":"1826","severity":1,"message":"2181","line":35,"column":55,"nodeType":"1828","messageId":"1829","endLine":35,"endColumn":73},{"ruleId":"1826","severity":1,"message":"2182","line":36,"column":8,"nodeType":"1828","messageId":"1829","endLine":36,"endColumn":23},{"ruleId":"1826","severity":1,"message":"2183","line":37,"column":8,"nodeType":"1828","messageId":"1829","endLine":37,"endColumn":22},{"ruleId":"1826","severity":1,"message":"2184","line":38,"column":10,"nodeType":"1828","messageId":"1829","endLine":38,"endColumn":23},{"ruleId":"1826","severity":1,"message":"2031","line":46,"column":11,"nodeType":"1828","messageId":"1829","endLine":46,"endColumn":18},{"ruleId":"1826","severity":1,"message":"1991","line":50,"column":22,"nodeType":"1828","messageId":"1829","endLine":50,"endColumn":33},{"ruleId":"1826","severity":1,"message":"2185","line":51,"column":22,"nodeType":"1828","messageId":"1829","endLine":51,"endColumn":33},{"ruleId":"1826","severity":1,"message":"2186","line":52,"column":12,"nodeType":"1828","messageId":"1829","endLine":52,"endColumn":21},{"ruleId":"1826","severity":1,"message":"2187","line":52,"column":23,"nodeType":"1828","messageId":"1829","endLine":52,"endColumn":34},{"ruleId":"1826","severity":1,"message":"2164","line":67,"column":9,"nodeType":"1828","messageId":"1829","endLine":67,"endColumn":18},{"ruleId":"1838","severity":1,"message":"1979","line":86,"column":8,"nodeType":"1840","endLine":86,"endColumn":20,"suggestions":"2188"},{"ruleId":"1838","severity":1,"message":"1858","line":113,"column":8,"nodeType":"1840","endLine":113,"endColumn":17,"suggestions":"2189"},{"ruleId":"1826","severity":1,"message":"2190","line":3,"column":23,"nodeType":"1828","messageId":"1829","endLine":3,"endColumn":28},{"ruleId":"1826","severity":1,"message":"2121","line":8,"column":27,"nodeType":"1828","messageId":"1829","endLine":8,"endColumn":33},{"ruleId":"1838","severity":1,"message":"1979","line":51,"column":8,"nodeType":"1840","endLine":51,"endColumn":20,"suggestions":"2191"},{"ruleId":"1838","severity":1,"message":"1858","line":56,"column":8,"nodeType":"1840","endLine":56,"endColumn":10,"suggestions":"2192"},{"ruleId":"1838","severity":1,"message":"1858","line":80,"column":8,"nodeType":"1840","endLine":80,"endColumn":19,"suggestions":"2193"},{"ruleId":"1826","severity":1,"message":"1946","line":4,"column":5,"nodeType":"1828","messageId":"1829","endLine":4,"endColumn":11},{"ruleId":"1838","severity":1,"message":"1858","line":81,"column":8,"nodeType":"1840","endLine":81,"endColumn":10,"suggestions":"2194"},{"ruleId":"1838","severity":1,"message":"1872","line":101,"column":8,"nodeType":"1840","endLine":101,"endColumn":20,"suggestions":"2195"},{"ruleId":"1838","severity":1,"message":"1874","line":140,"column":8,"nodeType":"1840","endLine":140,"endColumn":10,"suggestions":"2196"},{"ruleId":"1838","severity":1,"message":"1876","line":174,"column":8,"nodeType":"1840","endLine":174,"endColumn":17,"suggestions":"2197"},{"ruleId":"1838","severity":1,"message":"1878","line":191,"column":8,"nodeType":"1840","endLine":191,"endColumn":29,"suggestions":"2198"},{"ruleId":"1838","severity":1,"message":"1880","line":201,"column":8,"nodeType":"1840","endLine":201,"endColumn":19,"suggestions":"2199"},{"ruleId":"1826","severity":1,"message":"2200","line":408,"column":7,"nodeType":"1828","messageId":"1829","endLine":408,"endColumn":12},{"ruleId":"1826","severity":1,"message":"2201","line":412,"column":7,"nodeType":"1828","messageId":"1829","endLine":412,"endColumn":13},{"ruleId":"1826","severity":1,"message":"2202","line":415,"column":7,"nodeType":"1828","messageId":"1829","endLine":415,"endColumn":14},{"ruleId":"1826","severity":1,"message":"2043","line":14,"column":8,"nodeType":"1828","messageId":"1829","endLine":14,"endColumn":14},{"ruleId":"1826","severity":1,"message":"2121","line":25,"column":27,"nodeType":"1828","messageId":"1829","endLine":25,"endColumn":33},{"ruleId":"1826","severity":1,"message":"1895","line":27,"column":10,"nodeType":"1828","messageId":"1829","endLine":27,"endColumn":17},{"ruleId":"1826","severity":1,"message":"1991","line":38,"column":22,"nodeType":"1828","messageId":"1829","endLine":38,"endColumn":33},{"ruleId":"1826","severity":1,"message":"2169","line":56,"column":11,"nodeType":"1828","messageId":"1829","endLine":56,"endColumn":25},{"ruleId":"1838","severity":1,"message":"1872","line":75,"column":8,"nodeType":"1840","endLine":75,"endColumn":20,"suggestions":"2203"},{"ruleId":"1838","severity":1,"message":"2123","line":100,"column":8,"nodeType":"1840","endLine":100,"endColumn":20,"suggestions":"2204"},{"ruleId":"1838","severity":1,"message":"1876","line":139,"column":8,"nodeType":"1840","endLine":139,"endColumn":17,"suggestions":"2205"},{"ruleId":"1838","severity":1,"message":"2126","line":164,"column":8,"nodeType":"1840","endLine":164,"endColumn":23,"suggestions":"2206"},{"ruleId":"2207","severity":1,"message":"2208","line":254,"column":40,"nodeType":"2209","messageId":"2210","endLine":254,"endColumn":42},{"ruleId":"2207","severity":1,"message":"2208","line":254,"column":77,"nodeType":"2209","messageId":"2210","endLine":254,"endColumn":79},{"ruleId":"2207","severity":1,"message":"2208","line":308,"column":40,"nodeType":"2209","messageId":"2210","endLine":308,"endColumn":42},{"ruleId":"2207","severity":1,"message":"2208","line":308,"column":78,"nodeType":"2209","messageId":"2210","endLine":308,"endColumn":80},{"ruleId":"1826","severity":1,"message":"1944","line":1,"column":28,"nodeType":"1828","messageId":"1829","endLine":1,"endColumn":36},{"ruleId":"1826","severity":1,"message":"2211","line":6,"column":5,"nodeType":"1828","messageId":"1829","endLine":6,"endColumn":23},{"ruleId":"1838","severity":1,"message":"1858","line":47,"column":8,"nodeType":"1840","endLine":47,"endColumn":10,"suggestions":"2212"},{"ruleId":"1826","severity":1,"message":"2213","line":15,"column":38,"nodeType":"1828","messageId":"1829","endLine":15,"endColumn":43},{"ruleId":"1826","severity":1,"message":"1984","line":15,"column":45,"nodeType":"1828","messageId":"1829","endLine":15,"endColumn":51},{"ruleId":"1826","severity":1,"message":"2121","line":18,"column":27,"nodeType":"1828","messageId":"1829","endLine":18,"endColumn":33},{"ruleId":"1838","severity":1,"message":"1858","line":74,"column":8,"nodeType":"1840","endLine":74,"endColumn":10,"suggestions":"2214"},{"ruleId":"1826","severity":1,"message":"2215","line":83,"column":9,"nodeType":"1828","messageId":"1829","endLine":83,"endColumn":26},{"ruleId":"1826","severity":1,"message":"2164","line":84,"column":9,"nodeType":"1828","messageId":"1829","endLine":84,"endColumn":18},{"ruleId":"1838","severity":1,"message":"1872","line":111,"column":8,"nodeType":"1840","endLine":111,"endColumn":20,"suggestions":"2216"},{"ruleId":"1838","severity":1,"message":"2217","line":162,"column":8,"nodeType":"1840","endLine":162,"endColumn":10,"suggestions":"2218"},{"ruleId":"1838","severity":1,"message":"2219","line":169,"column":8,"nodeType":"1840","endLine":169,"endColumn":25,"suggestions":"2220"},{"ruleId":"1838","severity":1,"message":"1858","line":193,"column":8,"nodeType":"1840","endLine":193,"endColumn":17,"suggestions":"2221"},{"ruleId":"1838","severity":1,"message":"1878","line":212,"column":8,"nodeType":"1840","endLine":212,"endColumn":29,"suggestions":"2222"},{"ruleId":"1826","severity":1,"message":"2223","line":397,"column":13,"nodeType":"1828","messageId":"1829","endLine":397,"endColumn":21},{"ruleId":"1826","severity":1,"message":"2224","line":413,"column":13,"nodeType":"1828","messageId":"1829","endLine":413,"endColumn":17},{"ruleId":"1838","severity":1,"message":"1878","line":24,"column":8,"nodeType":"1840","endLine":24,"endColumn":18,"suggestions":"2225"},{"ruleId":"1826","severity":1,"message":"1944","line":1,"column":17,"nodeType":"1828","messageId":"1829","endLine":1,"endColumn":25},{"ruleId":"1826","severity":1,"message":"1947","line":3,"column":27,"nodeType":"1828","messageId":"1829","endLine":3,"endColumn":32},{"ruleId":"1826","severity":1,"message":"2226","line":50,"column":31,"nodeType":"1828","messageId":"1829","endLine":50,"endColumn":53},{"ruleId":"1838","severity":1,"message":"2227","line":84,"column":6,"nodeType":"1840","endLine":84,"endColumn":15,"suggestions":"2228"},{"ruleId":"1925","severity":1,"message":"1926","line":106,"column":34,"nodeType":"1927","messageId":"1928","endLine":106,"endColumn":36},{"ruleId":"1925","severity":1,"message":"1926","line":107,"column":35,"nodeType":"1927","messageId":"1928","endLine":107,"endColumn":37},{"ruleId":"2229","severity":1,"message":"2230","line":138,"column":18,"nodeType":"1828","messageId":"2231","endLine":138,"endColumn":19},{"ruleId":"1826","severity":1,"message":"2232","line":3,"column":15,"nodeType":"1828","messageId":"1829","endLine":3,"endColumn":18},{"ruleId":"1826","severity":1,"message":"2233","line":25,"column":9,"nodeType":"1828","messageId":"1829","endLine":25,"endColumn":16},{"ruleId":"1826","severity":1,"message":"2164","line":26,"column":9,"nodeType":"1828","messageId":"1829","endLine":26,"endColumn":18},{"ruleId":"1838","severity":1,"message":"2227","line":74,"column":8,"nodeType":"1840","endLine":74,"endColumn":17,"suggestions":"2234"},{"ruleId":"1925","severity":1,"message":"1926","line":95,"column":32,"nodeType":"1927","messageId":"1928","endLine":95,"endColumn":34},{"ruleId":"1925","severity":1,"message":"1926","line":96,"column":41,"nodeType":"1927","messageId":"1928","endLine":96,"endColumn":43},{"ruleId":"2229","severity":1,"message":"2230","line":126,"column":26,"nodeType":"1828","messageId":"2231","endLine":126,"endColumn":27},{"ruleId":"1826","severity":1,"message":"2121","line":9,"column":27,"nodeType":"1828","messageId":"1829","endLine":9,"endColumn":33},{"ruleId":"1826","severity":1,"message":"1967","line":25,"column":5,"nodeType":"1828","messageId":"1829","endLine":25,"endColumn":16},{"ruleId":"1838","severity":1,"message":"1979","line":92,"column":6,"nodeType":"1840","endLine":92,"endColumn":18,"suggestions":"2235"},{"ruleId":"1838","severity":1,"message":"2236","line":109,"column":6,"nodeType":"1840","endLine":109,"endColumn":17,"suggestions":"2237"},{"ruleId":"1838","severity":1,"message":"2238","line":136,"column":6,"nodeType":"1840","endLine":136,"endColumn":17,"suggestions":"2239"},{"ruleId":"1838","severity":1,"message":"2240","line":159,"column":6,"nodeType":"1840","endLine":159,"endColumn":17,"suggestions":"2241"},{"ruleId":"1838","severity":1,"message":"2242","line":187,"column":6,"nodeType":"1840","endLine":187,"endColumn":15,"suggestions":"2243"},{"ruleId":"1838","severity":1,"message":"2244","line":204,"column":6,"nodeType":"1840","endLine":204,"endColumn":16,"suggestions":"2245"},{"ruleId":"1826","severity":1,"message":"1827","line":1,"column":10,"nodeType":"1828","messageId":"1829","endLine":1,"endColumn":19},{"ruleId":"1826","severity":1,"message":"2246","line":9,"column":5,"nodeType":"1828","messageId":"1829","endLine":9,"endColumn":19},{"ruleId":"2247","severity":1,"message":"2248","line":332,"column":51,"nodeType":"2249","messageId":"2250","endLine":332,"endColumn":65,"fix":"2251"},{"ruleId":"1826","severity":1,"message":"1827","line":1,"column":17,"nodeType":"1828","messageId":"1829","endLine":1,"endColumn":26},{"ruleId":"1826","severity":1,"message":"1944","line":1,"column":28,"nodeType":"1828","messageId":"1829","endLine":1,"endColumn":36},{"ruleId":"1826","severity":1,"message":"2252","line":2,"column":10,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":14},{"ruleId":"1826","severity":1,"message":"2253","line":2,"column":16,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":24},{"ruleId":"1826","severity":1,"message":"1861","line":2,"column":26,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":36},{"ruleId":"1826","severity":1,"message":"2232","line":2,"column":38,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":41},{"ruleId":"1826","severity":1,"message":"2254","line":2,"column":43,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":51},{"ruleId":"1826","severity":1,"message":"2255","line":2,"column":53,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":65},{"ruleId":"1826","severity":1,"message":"2256","line":2,"column":67,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":79},{"ruleId":"1826","severity":1,"message":"2257","line":2,"column":81,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":95},{"ruleId":"1826","severity":1,"message":"1918","line":2,"column":97,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":102},{"ruleId":"1826","severity":1,"message":"1862","line":2,"column":104,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":109},{"ruleId":"1826","severity":1,"message":"2190","line":2,"column":111,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":116},{"ruleId":"1826","severity":1,"message":"2258","line":2,"column":118,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":121},{"ruleId":"1826","severity":1,"message":"2259","line":2,"column":123,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":143},{"ruleId":"1826","severity":1,"message":"2260","line":3,"column":3,"nodeType":"1828","messageId":"1829","endLine":3,"endColumn":34},{"ruleId":"1826","severity":1,"message":"2261","line":4,"column":3,"nodeType":"1828","messageId":"1829","endLine":4,"endColumn":42},{"ruleId":"1826","severity":1,"message":"2262","line":2,"column":8,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":25},{"ruleId":"1826","severity":1,"message":"2263","line":9,"column":134,"nodeType":"1828","messageId":"1829","endLine":9,"endColumn":167},{"ruleId":"1826","severity":1,"message":"2264","line":9,"column":169,"nodeType":"1828","messageId":"1829","endLine":9,"endColumn":210},{"ruleId":"1826","severity":1,"message":"1985","line":16,"column":10,"nodeType":"1828","messageId":"1829","endLine":16,"endColumn":20},{"ruleId":"1826","severity":1,"message":"1827","line":1,"column":17,"nodeType":"1828","messageId":"1829","endLine":1,"endColumn":26},{"ruleId":"1826","severity":1,"message":"1918","line":2,"column":50,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":55},{"ruleId":"1826","severity":1,"message":"2043","line":4,"column":8,"nodeType":"1828","messageId":"1829","endLine":4,"endColumn":14},{"ruleId":"1826","severity":1,"message":"2265","line":5,"column":10,"nodeType":"1828","messageId":"1829","endLine":5,"endColumn":21},{"ruleId":"1826","severity":1,"message":"1830","line":5,"column":23,"nodeType":"1828","messageId":"1829","endLine":5,"endColumn":34},{"ruleId":"1826","severity":1,"message":"2266","line":6,"column":10,"nodeType":"1828","messageId":"1829","endLine":6,"endColumn":25},{"ruleId":"1826","severity":1,"message":"2267","line":23,"column":12,"nodeType":"1828","messageId":"1829","endLine":23,"endColumn":29},{"ruleId":"1826","severity":1,"message":"2268","line":23,"column":31,"nodeType":"1828","messageId":"1829","endLine":23,"endColumn":51},{"ruleId":"1968","severity":1,"message":"1969","line":58,"column":38,"nodeType":"1970","messageId":"1845","endLine":58,"endColumn":40},{"ruleId":"1968","severity":1,"message":"1969","line":60,"column":19,"nodeType":"1970","messageId":"1845","endLine":60,"endColumn":21},{"ruleId":"1968","severity":1,"message":"1969","line":75,"column":34,"nodeType":"1970","messageId":"1845","endLine":75,"endColumn":36},{"ruleId":"1968","severity":1,"message":"1969","line":77,"column":19,"nodeType":"1970","messageId":"1845","endLine":77,"endColumn":21},{"ruleId":"1968","severity":1,"message":"1969","line":101,"column":23,"nodeType":"1970","messageId":"1845","endLine":101,"endColumn":25},{"ruleId":"1826","severity":1,"message":"1944","line":1,"column":28,"nodeType":"1828","messageId":"1829","endLine":1,"endColumn":36},{"ruleId":"1826","severity":1,"message":"2269","line":5,"column":10,"nodeType":"1828","messageId":"1829","endLine":5,"endColumn":32},{"ruleId":"1826","severity":1,"message":"2270","line":5,"column":34,"nodeType":"1828","messageId":"1829","endLine":5,"endColumn":63},{"ruleId":"1838","severity":1,"message":"2271","line":65,"column":8,"nodeType":"1840","endLine":65,"endColumn":19,"suggestions":"2272"},{"ruleId":"1826","severity":1,"message":"1944","line":1,"column":17,"nodeType":"1828","messageId":"1829","endLine":1,"endColumn":25},{"ruleId":"1826","severity":1,"message":"1944","line":1,"column":28,"nodeType":"1828","messageId":"1829","endLine":1,"endColumn":36},{"ruleId":"1838","severity":1,"message":"2271","line":66,"column":6,"nodeType":"1840","endLine":66,"endColumn":17,"suggestions":"2273"},{"ruleId":"1826","severity":1,"message":"1944","line":1,"column":28,"nodeType":"1828","messageId":"1829","endLine":1,"endColumn":36},{"ruleId":"1838","severity":1,"message":"2271","line":65,"column":6,"nodeType":"1840","endLine":65,"endColumn":17,"suggestions":"2274"},{"ruleId":"1826","severity":1,"message":"1944","line":1,"column":17,"nodeType":"1828","messageId":"1829","endLine":1,"endColumn":25},{"ruleId":"1826","severity":1,"message":"1944","line":1,"column":17,"nodeType":"1828","messageId":"1829","endLine":1,"endColumn":25},{"ruleId":"1826","severity":1,"message":"2275","line":1,"column":10,"nodeType":"1828","messageId":"1829","endLine":1,"endColumn":32},{"ruleId":"1826","severity":1,"message":"2276","line":5,"column":3,"nodeType":"1828","messageId":"1829","endLine":5,"endColumn":21},{"ruleId":"1826","severity":1,"message":"2277","line":6,"column":3,"nodeType":"1828","messageId":"1829","endLine":6,"endColumn":29},{"ruleId":"1826","severity":1,"message":"2261","line":3,"column":3,"nodeType":"1828","messageId":"1829","endLine":3,"endColumn":42},{"ruleId":"1826","severity":1,"message":"2266","line":1,"column":10,"nodeType":"1828","messageId":"1829","endLine":1,"endColumn":25},{"ruleId":"1826","severity":1,"message":"2278","line":2,"column":3,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":18},{"ruleId":"1826","severity":1,"message":"2279","line":3,"column":3,"nodeType":"1828","messageId":"1829","endLine":3,"endColumn":26},{"ruleId":"1826","severity":1,"message":"2280","line":4,"column":3,"nodeType":"1828","messageId":"1829","endLine":4,"endColumn":24},{"ruleId":"1826","severity":1,"message":"2281","line":10,"column":3,"nodeType":"1828","messageId":"1829","endLine":10,"endColumn":32},{"ruleId":"1826","severity":1,"message":"2264","line":12,"column":3,"nodeType":"1828","messageId":"1829","endLine":12,"endColumn":44},{"ruleId":"1826","severity":1,"message":"2282","line":2,"column":3,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":25},{"ruleId":"1826","severity":1,"message":"2283","line":3,"column":3,"nodeType":"1828","messageId":"1829","endLine":3,"endColumn":41},{"ruleId":"1826","severity":1,"message":"2284","line":4,"column":3,"nodeType":"1828","messageId":"1829","endLine":4,"endColumn":39},{"ruleId":"1826","severity":1,"message":"2285","line":5,"column":3,"nodeType":"1828","messageId":"1829","endLine":5,"endColumn":33},{"ruleId":"1826","severity":1,"message":"2286","line":6,"column":3,"nodeType":"1828","messageId":"1829","endLine":6,"endColumn":25},{"ruleId":"1826","severity":1,"message":"2287","line":7,"column":3,"nodeType":"1828","messageId":"1829","endLine":7,"endColumn":21},{"ruleId":"1826","severity":1,"message":"2288","line":11,"column":3,"nodeType":"1828","messageId":"1829","endLine":11,"endColumn":23},{"ruleId":"1826","severity":1,"message":"2289","line":12,"column":3,"nodeType":"1828","messageId":"1829","endLine":12,"endColumn":27},{"ruleId":"1826","severity":1,"message":"2278","line":2,"column":3,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":18},{"ruleId":"1826","severity":1,"message":"2279","line":3,"column":3,"nodeType":"1828","messageId":"1829","endLine":3,"endColumn":26},{"ruleId":"1826","severity":1,"message":"2280","line":4,"column":3,"nodeType":"1828","messageId":"1829","endLine":4,"endColumn":24},{"ruleId":"2290","severity":1,"message":"2291","line":70,"column":5,"nodeType":"2292","messageId":"2293","endLine":72,"endColumn":12},{"ruleId":"2290","severity":1,"message":"2294","line":32,"column":5,"nodeType":"2292","messageId":"2295","endLine":36,"endColumn":8},{"ruleId":"2290","severity":1,"message":"2294","line":38,"column":5,"nodeType":"2292","messageId":"2295","endLine":40,"endColumn":12},{"ruleId":"2290","severity":1,"message":"2294","line":44,"column":5,"nodeType":"2292","messageId":"2295","endLine":46,"endColumn":12},{"ruleId":"1826","severity":1,"message":"2296","line":2,"column":40,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":53},{"ruleId":"1826","severity":1,"message":"2297","line":2,"column":88,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":106},{"ruleId":"1826","severity":1,"message":"2298","line":3,"column":10,"nodeType":"1828","messageId":"1829","endLine":3,"endColumn":41},{"ruleId":"1826","severity":1,"message":"2299","line":3,"column":71,"nodeType":"1828","messageId":"1829","endLine":3,"endColumn":90},{"ruleId":"1826","severity":1,"message":"2300","line":5,"column":73,"nodeType":"1828","messageId":"1829","endLine":5,"endColumn":101},{"ruleId":"1826","severity":1,"message":"2301","line":9,"column":11,"nodeType":"1828","messageId":"1829","endLine":9,"endColumn":55},{"ruleId":"1826","severity":1,"message":"2180","line":20,"column":10,"nodeType":"1828","messageId":"1829","endLine":20,"endColumn":34},{"ruleId":"1826","severity":1,"message":"2302","line":5,"column":10,"nodeType":"1828","messageId":"1829","endLine":5,"endColumn":29},{"ruleId":"1826","severity":1,"message":"2303","line":7,"column":106,"nodeType":"1828","messageId":"1829","endLine":7,"endColumn":120},{"ruleId":"1826","severity":1,"message":"2180","line":20,"column":10,"nodeType":"1828","messageId":"1829","endLine":20,"endColumn":34},{"ruleId":"1826","severity":1,"message":"2180","line":24,"column":10,"nodeType":"1828","messageId":"1829","endLine":24,"endColumn":34},{"ruleId":"1826","severity":1,"message":"2304","line":2,"column":10,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":41},{"ruleId":"1826","severity":1,"message":"2260","line":3,"column":10,"nodeType":"1828","messageId":"1829","endLine":3,"endColumn":41},{"ruleId":"1826","severity":1,"message":"2305","line":14,"column":10,"nodeType":"1828","messageId":"1829","endLine":14,"endColumn":33},{"ruleId":"1826","severity":1,"message":"2306","line":32,"column":3,"nodeType":"1828","messageId":"1829","endLine":32,"endColumn":46},{"ruleId":"1826","severity":1,"message":"2307","line":2,"column":302,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":323},{"ruleId":"1826","severity":1,"message":"2308","line":5,"column":264,"nodeType":"1828","messageId":"1829","endLine":5,"endColumn":279},{"ruleId":"1826","severity":1,"message":"2309","line":6,"column":218,"nodeType":"1828","messageId":"1829","endLine":6,"endColumn":227},{"ruleId":"2310","severity":1,"message":"2311","line":109,"column":29,"nodeType":"2312","messageId":"1845","endLine":109,"endColumn":31},{"ruleId":"2310","severity":1,"message":"2311","line":119,"column":32,"nodeType":"2312","messageId":"1845","endLine":119,"endColumn":34},{"ruleId":"2310","severity":1,"message":"2311","line":129,"column":30,"nodeType":"2312","messageId":"1845","endLine":129,"endColumn":32},{"ruleId":"2310","severity":1,"message":"2311","line":140,"column":27,"nodeType":"2312","messageId":"1845","endLine":140,"endColumn":29},{"ruleId":"1826","severity":1,"message":"2313","line":30,"column":3,"nodeType":"1828","messageId":"1829","endLine":30,"endColumn":28},{"ruleId":"1826","severity":1,"message":"2314","line":2,"column":48,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":71},{"ruleId":"1826","severity":1,"message":"2315","line":2,"column":134,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":156},{"ruleId":"1826","severity":1,"message":"2316","line":6,"column":41,"nodeType":"1828","messageId":"1829","endLine":6,"endColumn":62},{"ruleId":"1826","severity":1,"message":"2263","line":6,"column":101,"nodeType":"1828","messageId":"1829","endLine":6,"endColumn":134},{"ruleId":"1826","severity":1,"message":"2317","line":12,"column":74,"nodeType":"1828","messageId":"1829","endLine":12,"endColumn":101},{"ruleId":"1826","severity":1,"message":"2318","line":12,"column":146,"nodeType":"1828","messageId":"1829","endLine":12,"endColumn":185},{"ruleId":"1826","severity":1,"message":"2319","line":13,"column":3,"nodeType":"1828","messageId":"1829","endLine":13,"endColumn":15},{"ruleId":"1826","severity":1,"message":"2320","line":4,"column":3,"nodeType":"1828","messageId":"1829","endLine":4,"endColumn":22},{"ruleId":"1826","severity":1,"message":"2321","line":6,"column":3,"nodeType":"1828","messageId":"1829","endLine":6,"endColumn":21},{"ruleId":"1826","severity":1,"message":"2322","line":19,"column":3,"nodeType":"1828","messageId":"1829","endLine":19,"endColumn":28},{"ruleId":"1826","severity":1,"message":"2323","line":21,"column":3,"nodeType":"1828","messageId":"1829","endLine":21,"endColumn":20},{"ruleId":"1826","severity":1,"message":"2324","line":26,"column":3,"nodeType":"1828","messageId":"1829","endLine":26,"endColumn":17},{"ruleId":"1826","severity":1,"message":"2325","line":30,"column":3,"nodeType":"1828","messageId":"1829","endLine":30,"endColumn":15},{"ruleId":"1826","severity":1,"message":"2326","line":5,"column":3,"nodeType":"1828","messageId":"1829","endLine":5,"endColumn":18},{"ruleId":"1826","severity":1,"message":"2327","line":6,"column":3,"nodeType":"1828","messageId":"1829","endLine":6,"endColumn":23},{"ruleId":"1826","severity":1,"message":"2328","line":11,"column":44,"nodeType":"1828","messageId":"1829","endLine":11,"endColumn":64},{"ruleId":"1826","severity":1,"message":"2329","line":11,"column":95,"nodeType":"1828","messageId":"1829","endLine":11,"endColumn":107},{"ruleId":"1826","severity":1,"message":"2027","line":15,"column":3,"nodeType":"1828","messageId":"1829","endLine":15,"endColumn":19},{"ruleId":"1826","severity":1,"message":"2330","line":24,"column":92,"nodeType":"1828","messageId":"1829","endLine":24,"endColumn":120},{"ruleId":"1968","severity":1,"message":"1969","line":34,"column":29,"nodeType":"1970","messageId":"1845","endLine":34,"endColumn":31},{"ruleId":"1968","severity":1,"message":"1969","line":53,"column":29,"nodeType":"1970","messageId":"1845","endLine":53,"endColumn":31},{"ruleId":"1826","severity":1,"message":"2331","line":17,"column":8,"nodeType":"1828","messageId":"1829","endLine":17,"endColumn":24},{"ruleId":"1826","severity":1,"message":"2332","line":43,"column":8,"nodeType":"1828","messageId":"1829","endLine":43,"endColumn":23},{"ruleId":"1826","severity":1,"message":"2333","line":59,"column":12,"nodeType":"1828","messageId":"1829","endLine":59,"endColumn":34},{"ruleId":"1826","severity":1,"message":"1944","line":2,"column":49,"nodeType":"1828","messageId":"1829","endLine":2,"endColumn":57},{"ruleId":"1826","severity":1,"message":"1883","line":17,"column":10,"nodeType":"1828","messageId":"1829","endLine":17,"endColumn":20},{"ruleId":"1826","severity":1,"message":"2328","line":20,"column":10,"nodeType":"1828","messageId":"1829","endLine":20,"endColumn":30},{"ruleId":"1826","severity":1,"message":"2334","line":21,"column":10,"nodeType":"1828","messageId":"1829","endLine":21,"endColumn":24},{"ruleId":"1826","severity":1,"message":"2335","line":33,"column":5,"nodeType":"1828","messageId":"1829","endLine":33,"endColumn":26},{"ruleId":"1838","severity":1,"message":"2336","line":53,"column":6,"nodeType":"1840","endLine":53,"endColumn":8,"suggestions":"2337"},{"ruleId":"1838","severity":1,"message":"2338","line":132,"column":6,"nodeType":"1840","endLine":132,"endColumn":73,"suggestions":"2339"},{"ruleId":"1925","severity":1,"message":"2340","line":178,"column":53,"nodeType":"1927","messageId":"2341","endLine":178,"endColumn":55},{"ruleId":"1826","severity":1,"message":"1967","line":11,"column":29,"nodeType":"1828","messageId":"1829","endLine":11,"endColumn":40},{"ruleId":"1925","severity":1,"message":"1926","line":20,"column":32,"nodeType":"1927","messageId":"1928","endLine":20,"endColumn":34},{"ruleId":"1925","severity":1,"message":"1926","line":21,"column":38,"nodeType":"1927","messageId":"1928","endLine":21,"endColumn":40},{"ruleId":"1968","severity":1,"message":"1969","line":61,"column":73,"nodeType":"1970","messageId":"1845","endLine":61,"endColumn":75},{"ruleId":"1968","severity":1,"message":"1969","line":94,"column":31,"nodeType":"1970","messageId":"1845","endLine":94,"endColumn":33},{"ruleId":"1968","severity":1,"message":"1969","line":100,"column":38,"nodeType":"1970","messageId":"1845","endLine":100,"endColumn":40},{"ruleId":"1968","severity":1,"message":"1969","line":106,"column":38,"nodeType":"1970","messageId":"1845","endLine":106,"endColumn":40},{"ruleId":"1968","severity":1,"message":"1971","line":136,"column":31,"nodeType":"1970","messageId":"1845","endLine":136,"endColumn":33},{"ruleId":"1968","severity":1,"message":"1971","line":136,"column":48,"nodeType":"1970","messageId":"1845","endLine":136,"endColumn":50},{"ruleId":"1842","severity":1,"message":"2342","line":88,"column":13,"nodeType":"1844","messageId":"1845","endLine":88,"endColumn":27},{"ruleId":"1842","severity":1,"message":"2342","line":97,"column":13,"nodeType":"1844","messageId":"1845","endLine":97,"endColumn":27},"no-native-reassign",["2343"],"no-negated-in-lhs",["2344"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useSelector' is defined but never used.","no-useless-rename","Destructuring assignment userPageAccess unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"2345","text":"2346"},"Destructuring assignment history unnecessarily renamed.",{"range":"2347","text":"2348"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'changelayoutMode' and 'layoutType'. Either include them or remove the dependency array.","ArrayExpression",["2349"],"no-dupe-keys","Duplicate key 'SubCategoryReducer'.","ObjectExpression","unexpected","Duplicate key 'VehicleReducer'.","Duplicate key 'DriverReducer'.","Duplicate key 'CompanyGroupReducer'.","Duplicate key 'PriceListReducer'.","Duplicate key 'MRPMasterReducer'.","Duplicate key 'MarginMasterReducer'.","Duplicate key 'TermsAndCondtionsReducer'.","Duplicate key 'GroupTypeReducer'.","Duplicate key 'GSTReducer'.","'axios' is defined but never used.","'userForgetPassword' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["2350"],["2351"],"'CardHeader' is defined but never used.","'Label' is defined but never used.","'AvInput' is defined but never used.","'AvFeedback' is defined but never used.","'EditData' is assigned a value but never used.","'setEditData' is assigned a value but never used.",["2352"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","React Hook useEffect has missing dependencies: 'hasShowModal', 'location.pathname', and 'props.masterPath'. Either include them or remove the dependency array.",["2353"],"React Hook useEffect has missing dependencies: 'dispatch', 'hasShowModal', 'hasShowloction', 'location.editValue', 'location.pageMode', 'props.editValue', 'props.pageMode', and 'state'. Either include them or remove the dependency array. If 'setPageMode' needs the current value of 'props.pageMode', you can also switch to useReducer instead of useState and read 'props.pageMode' in the reducer.",["2354"],"React Hook useEffect has missing dependencies: 'dispatch' and 'pageMode'. Either include them or remove the dependency array.",["2355"],"React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.",["2356"],"React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array.",["2357"],["2358"],"'useHistory' is defined but never used.",["2359"],"'CompanyGroupselect' is assigned a value but never used.",["2360"],["2361"],["2362"],["2363"],["2364"],"'PropTypes' is defined but never used.","'Alert' is defined but never used.","'withRouter' is defined but never used.","'AvForm' is defined but never used.","'AvField' is defined but never used.","'loginUser' is defined but never used.","'loginError' is assigned a value but never used.",["2365"],["2366"],["2367"],["2368"],"'CardText' is defined but never used.",["2369"],"React Hook useEffect has missing dependencies: 'dispatch', 'hasShowModal', 'hasShowloction', 'location.editValue', 'location.pageMode', 'props.editValue', and 'props.pageMode'. Either include them or remove the dependency array. If 'setPageMode' needs the current value of 'props.pageMode', you can also switch to useReducer instead of useState and read 'props.pageMode' in the reducer.",["2370"],["2371"],"React Hook useEffect has missing dependencies: 'dispatch' and 'tog_center'. Either include them or remove the dependency array.",["2372"],["2373"],"no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Input' is defined but never used.","'editDataGatingFromList' is assigned a value but never used.","'pageModeProps' is assigned a value but never used.","'RoleDropDown' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'isCPassword' and 'password'. Either include them or remove the dependency array.",["2374"],["2375"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["2376"],"React Hook useEffect has missing dependencies: 'PostAPIResponse.Message', 'PostAPIResponse.StatusCode', 'dispatch', and 'pageMode'. Either include them or remove the dependency array.",["2377"],"'RoleDropdownHandler' is defined but never used.",["2378"],["2379"],["2380"],["2381"],["2382"],"'RoleEmployeeTypes' is assigned a value but never used.",["2383"],"React Hook useEffect has missing dependencies: 'dispatch', 'pageMode', 'postMsg.Message', and 'postMsg.StatusCode'. Either include them or remove the dependency array.",["2384"],["2385"],["2386"],"'useState' is defined but never used.",["2387"],"'Button' is defined but never used.","'Table' is defined but never used.","'Link' is defined but never used.","'postPartyData' is defined but never used.","React Hook useEffect has missing dependencies: 'editDataGatingFromList', 'history.location.pathname', and 'props.relatatedPage'. Either include them or remove the dependency array.",["2388"],"React Hook useEffect has missing dependencies: 'dispatch', 'pageModeProps', and 'userPageAccessState'. Either include them or remove the dependency array.",["2389"],["2390"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["2391","2392"],"react/jsx-pascal-case","Imported JSX component AddressDetails_Tab must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","'view' is assigned a value but never used.","'onchange' is assigned a value but never used.","'SearchBar' is assigned a value but never used.","'searchProps' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","Expected '!==' and instead saw '!='.","'countries' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'onChange2' is defined but never used.","'input' is defined but never used.","'onChange' is defined but never used.","'Router' is defined but never used.","'Thead' is defined but never used.","React Hook useEffect has a missing dependency: 'history.location.pathname'. Either include it or remove the dependency array.",["2393"],["2394"],["2395"],"'defaultSorted' is assigned a value but never used.","'useRef' is defined but never used.","'AlertState' is defined but never used.","'PostMethod_ForCopyRoleAccessFor_Role_Success' is defined but never used.","'userPageAccessState' is assigned a value but never used.","'setUserPageAccessState' is assigned a value but never used.","'showTableOnUI' is assigned a value but never used.","'setShowTableOnUI' is assigned a value but never used.","'setPageMode' is assigned a value but never used.",["2396"],"React Hook useEffect has a missing dependency: 'editDataGatingFromList'. Either include it or remove the dependency array.",["2397"],"'get_Category_By_CategoryType_ForDropDown' is defined but never used.","'get_Category_By_CategoryType_ForDropDown_Success' is defined but never used.","'get_Sub_Category_By_CategoryType_ForDropDown' is defined but never used.","'get_Sub_Category_By_CategoryType_ForDropDown_Success' is defined but never used.","'CategoryTab' is defined but never used.","'DivisionTab' is defined but never used.","'setInValidDrop' is assigned a value but never used.","'Division_Tab_TableData' is assigned a value but never used.","'setDivision_Tab_TableData' is assigned a value but never used.","'Category_Tab_TableData' is assigned a value but never used.",["2398"],["2399"],["2400"],"Imported JSX component Margin_Tab must be in PascalCase or SCREAMING_SNAKE_CASE",["2401"],["2402"],["2403"],["2404"],["2405"],["2406"],["2407"],"'AvGroup' is defined but never used.","'editPartyIDSuccess' is defined but never used.","'getDistrictOnState' is defined but never used.","'getDistrictOnStateSuccess' is defined but never used.","'getDivisionTypesID' is defined but never used.","'postPartyDataSuccess' is defined but never used.","'updatePartyID' is defined but never used.","'GetHpageListData' is defined but never used.","'getH_Modules' is defined but never used.","'GetRoleListForRoleAccessListPage' is defined but never used.","'PageMasterForRoleAccessLit' is defined but never used.","'roleAceessAction' is defined but never used.","'useLocation' is defined but never used.","'useParams' is defined but never used.","'CommonGetRoleAccessFunction' is defined but never used.","'formRef' is assigned a value but never used.","'companyid' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'history.location.pathname', and 'history.location.state'. Either include them or remove the dependency array.",["2408"],["2409"],"React Hook useEffect has a missing dependency: 'tableListData'. Either include it or remove the dependency array.",["2410"],"Assignments to the 'RoleAccessListColoums' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression",["2411"],"Block is redundant.","redundantBlock","'Select' is defined but never used.","'formValChange' is defined but never used.","'modalCss' is assigned a value but never used.","'PartyTypes' is assigned a value but never used.",["2412"],["2413"],["2414"],["2415"],["2416"],["2417"],["2418"],["2419"],["2420"],["2421"],["2422"],["2423"],["2424"],"'Get_CompanyName_By_EmployeeTypeID_Success' is defined but never used.","'designation_DropdownSelect' is assigned a value but never used.","'employeeType_DropdownSelect' is assigned a value but never used.","'State_DropdownSelect' is assigned a value but never used.","'district_DropdownSelect' is assigned a value but never used.","'company_DropdownSelect' is assigned a value but never used.","'party_DropdownSelect' is assigned a value but never used.","'DOB_Date_Select' is assigned a value but never used.",["2425"],"'EmployeeParties' is assigned a value but never used.",["2426"],["2427"],["2428"],["2429"],["2430"],["2431"],["2432"],["2433"],["2434"],["2435"],["2436"],"'category_dropdown_Select' is assigned a value but never used.",["2437"],"React Hook useEffect has missing dependencies: 'editDataGetingFromList', 'history.location.pathname', and 'props.relatatedPage'. Either include them or remove the dependency array.",["2438"],["2439"],["2440"],["2441"],"'handllerCategoryDropdown' is defined but never used.","'commonPageField' is defined but never used.","'commonPageFieldSuccess' is defined but never used.",["2442"],"'DRIVER_lIST' is defined but never used.",["2443"],["2444"],"'VehicleDivisions' is assigned a value but never used.",["2445"],["2446"],["2447"],["2448"],["2449"],["2450"],"'getMethodForCompanyGroupList' is defined but never used.",["2451"],["2452"],["2453"],["2454"],["2455"],["2456"],["2457"],["2458"],"'Breadcrumb_inputName' is defined but never used.","'editPriceList' is defined but never used.","'propsPageMode' is assigned a value but never used.","'priceList' is assigned a value but never used.","'setPriceList' is assigned a value but never used.",["2459"],"React Hook useEffect has missing dependencies: 'dispatch' and 'partyType_dropdown_Select.value'. Either include them or remove the dependency array.",["2460"],["2461"],"'PriceList_DropdownOptions' is assigned a value but never used.","'Search' is defined but never used.",["2462"],"React Hook useEffect has missing dependencies: 'dispatch', 'history.location.editValue', and 'history.location.pathname'. Either include them or remove the dependency array.",["2463"],["2464"],"React Hook useEffect has missing dependencies: 'GoButton_Handler' and 'dispatch'. Either include them or remove the dependency array.",["2465"],["2466"],["2467"],"React Hook useEffect has missing dependencies: 'deleteMsg.Message', 'deleteMsg.StatusCode', and 'dispatch'. Either include them or remove the dependency array.",["2468"],["2469"],["2470"],["2471"],["2472"],["2473"],["2474"],["2475"],["2476"],["2477"],["2478"],"'GroupTypes_dropdown_Select' is assigned a value but never used.",["2479"],["2480"],["2481"],["2482"],["2483"],["2484"],"'handllerDivision' is defined but never used.",["2485"],["2486"],["2487"],["2488"],["2489"],["2490"],["2491"],["2492"],["2493"],"'CommonListPage' is defined but never used.","'PARTY_SUB_PARTY' is defined but never used.","'PartySubParty' is defined but never used.","'action' is assigned a value but never used.",["2494"],"'pageField' is assigned a value but never used.","'setState' is assigned a value but never used.","'values' is assigned a value but never used.","'isError' is assigned a value but never used.","'fieldLabel' is assigned a value but never used.","'hasShowloction' is assigned a value but never used.",["2495"],["2496"],"'getItemList' is defined but never used.","'getItemListSuccess' is defined but never used.","'comAddPageFieldFunc' is defined but never used.","'formValid' is defined but never used.","'initialFiledFunc' is defined but never used.","'onChangeSelect' is defined but never used.","'onChangeText' is defined but never used.","'paginationFactory' is defined but never used.","'PaginationListStandalone' is defined but never used.","'PaginationProvider' is defined but never used.","'ToolkitProvider' is defined but never used.","'BootstrapTable' is defined but never used.","'mySearchProps' is defined but never used.","'setModalCss' is assigned a value but never used.","'isChecked' is assigned a value but never used.","'Setcheckbox' is assigned a value but never used.",["2497"],["2498"],"'Modal' is defined but never used.",["2499"],["2500"],["2501"],["2502"],["2503"],["2504"],["2505"],["2506"],["2507"],"'Email' is assigned a value but never used.","'Mobile' is assigned a value but never used.","'NotNull' is assigned a value but never used.",["2508"],["2509"],["2510"],["2511"],"no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'editOrderIdSuccess' is defined but never used.",["2512"],"'useRf' is defined but never used.",["2513"],"'termsAndCondtions' is assigned a value but never used.",["2514"],"React Hook useEffect has missing dependencies: 'dispatch', 'hasShowModal', 'hasShowloction', 'location.editValue', 'location.pageMode', 'orderAmount', 'props.editValue', and 'props.pageMode'. Either include them or remove the dependency array. If 'setPageMode' needs the current value of 'props.pageMode', you can also switch to useReducer instead of useState and read 'props.pageMode' in the reducer.",["2515"],"React Hook useEffect has missing dependencies: 'hasShowModal' and 'hasShowloction'. Either include them or remove the dependency array.",["2516"],["2517"],["2518"],"'division' is assigned a value but never used.","'date' is assigned a value but never used.",["2519"],"'setIsRedirectNewButton' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'props.IsSearchVissible'. Either include them or remove the dependency array.",["2520"],"no-redeclare","'i' is already defined.","redeclared","'Col' is defined but never used.","'userAcc' is assigned a value but never used.",["2521"],["2522"],"React Hook useEffect has a missing dependency: 'fileds'. Either include it or remove the dependency array.",["2523"],"React Hook useEffect has missing dependencies: 'dispatch', 'getList', 'tog_center', and 'updateSucc'. Either include them or remove the dependency array.",["2524"],"React Hook useEffect has missing dependencies: 'deleteSucc', 'dispatch', and 'getList'. Either include them or remove the dependency array.",["2525"],"React Hook useEffect has missing dependencies: 'dispatch', 'getList', 'postSucc', and 'tog_center'. Either include them or remove the dependency array.",["2526"],"React Hook useEffect has missing dependencies: 'history', 'masterPath', 'pageField.IsEditPopuporComponent', and 'tog_center'. Either include them or remove the dependency array.",["2527"],"'priviousSerach' is assigned a value but never used.","no-whitespace-before-property","Unexpected whitespace before property GROUP_API.","MemberExpression","unexpectedWhitespace",{"range":"2528","text":"2529"},"'Card' is defined but never used.","'CardBody' is defined but never used.","'Dropdown' is defined but never used.","'DropdownItem' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownToggle' is defined but never used.","'Row' is defined but never used.","'UncontrolledDropdown' is defined but never used.","'GET_METHOD_HANDLER_FOR_CATEGORY' is defined but never used.","'GET_METHOD_HANDLER_FOR_CATEGORY_SUCCESS' is defined but never used.","'SubCategoryMaster' is defined but never used.","'GET_PARTYNAME_BY_DIVISIONTYPES_ID' is defined but never used.","'GET_PARTYNAME_BY_DIVISIONTYPES_ID_SUCCESS' is defined but never used.","'useDispatch' is defined but never used.","'getAddressTypes' is defined but never used.","'categoryTableData' is assigned a value but never used.","'setCategoryTableData' is assigned a value but never used.","'deleteID_In_MasterPage' is defined but never used.","'deleteID_In_MasterPageSuccess' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["2530"],["2531"],["2532"],"'UPDATE_H_PAGES_SUCCESS' is defined but never used.","'EDIT_ROLEACCESS_ID' is defined but never used.","'EDIT_ROLEACCESS_ID_SUCCESS' is defined but never used.","'FORGET_PASSWORD' is defined but never used.","'FORGET_PASSWORD_SUCCESS' is defined but never used.","'FORGET_PASSWORD_ERROR' is defined but never used.","'GET_EMPLOYEE_TYPES_ID_SUCCESS' is defined but never used.","'GET_ORDER_LIST_SUCCESS' is defined but never used.","'GET_ORDER_ITEMS_FOR_ORDER_PAGE_SUCCESS' is defined but never used.","'SUBMIT_ORDER_FROM_ORDER_PAGE_SUCCESS' is defined but never used.","'GET_DIVISIONORDER_LIST_SUCCESS' is defined but never used.","'GET_ORDER_LIST_MESSAGE' is defined but never used.","'EDIT_ORDER_SUCCESS' is defined but never used.","'GET_SUPPLIER_SUCCESS' is defined but never used.","'GO_BUTTON_FOR_ORDER_PAGE' is defined but never used.","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","Expected a 'break' statement before 'case'.","case","'get_Item_List' is defined but never used.","'GSTList_Delete_API' is defined but never used.","'DeleteTermsAndCondtions_Success' is defined but never used.","'getTermAndCondition' is defined but never used.","'delete_TermsAndCondtions_API' is defined but never used.","'DELETE_METHOD_FOR_TERMSANDCONDITIONSLIST_API' is defined but never used.","'getPriceListSuccess' is defined but never used.","'GET_PRICE_LIST' is defined but never used.","'getMethod_ForCategoryAPISuccess' is defined but never used.","'get_Category_Master_API' is defined but never used.","'PostMethod_ForCopyRoleAccessFor_Role_Succes' is defined but never used.","'GetParty_For_Dropdown' is defined but never used.","'getPartySuccess' is defined but never used.","'GET_PARTY' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'GET_CATEGORY_FOR_DROPDOWN' is defined but never used.","'getComapny_For_Dropdown' is defined but never used.","'getRegion_For_Dropdown' is defined but never used.","'GET_EMPLOYEE_TYPES_ID' is defined but never used.","'get_EmployeeTypesID_Success' is defined but never used.","'Get_PartyName_By_EmployeeTypeID_Success' is defined but never used.","'GET_EMPLOYEE' is defined but never used.","'getOrderListSuccess' is defined but never used.","'getSupplierSuccess' is defined but never used.","'OrderPage_GetSupplier_API' is defined but never used.","'OrderPage_get_API' is defined but never used.","'GET_ORDER_LIST' is defined but never used.","'GET_SUPPLIER' is defined but never used.","'fetchModelsList' is defined but never used.","'fetchModelsListError' is defined but never used.","'getUserDetailsAction' is defined but never used.","'loginSuccess' is defined but never used.","'UserPartiesForUserMaster_API' is defined but never used.","'LanguageDropdown' is defined but never used.","'SearchBoxSecond' is defined but never used.","'searchFunctionHandller' is defined but never used.","'demoRolleAcess' is defined but never used.","'afterLoginUserDetails' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'RoleAccessData.length' and 'dispatch'. Either include them or remove the dependency array.",["2533"],"React Hook useEffect has a missing dependency: 'props.location.pathname'. Either include it or remove the dependency array.",["2534"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","Duplicate key 'ActualPagePath'.","no-global-assign","no-unsafe-negation",[146,176],"userPageAccess",[181,197],"history",{"desc":"2535","fix":"2536"},{"desc":"2537","fix":"2538"},{"desc":"2539","fix":"2540"},{"desc":"2541","fix":"2542"},{"desc":"2543","fix":"2544"},{"desc":"2545","fix":"2546"},{"desc":"2547","fix":"2548"},{"desc":"2549","fix":"2550"},{"desc":"2551","fix":"2552"},{"desc":"2541","fix":"2553"},{"desc":"2541","fix":"2554"},{"desc":"2543","fix":"2555"},{"desc":"2545","fix":"2556"},{"desc":"2547","fix":"2557"},{"desc":"2549","fix":"2558"},{"desc":"2551","fix":"2559"},{"desc":"2560","fix":"2561"},{"desc":"2562","fix":"2563"},{"desc":"2541","fix":"2564"},{"desc":"2541","fix":"2565"},{"desc":"2543","fix":"2566"},{"desc":"2567","fix":"2568"},{"desc":"2547","fix":"2569"},{"desc":"2570","fix":"2571"},{"desc":"2549","fix":"2572"},{"desc":"2573","fix":"2574"},{"desc":"2543","fix":"2575"},{"desc":"2567","fix":"2576"},{"desc":"2577","fix":"2578"},{"desc":"2541","fix":"2579"},{"desc":"2541","fix":"2580"},{"desc":"2541","fix":"2581"},{"desc":"2543","fix":"2582"},{"desc":"2551","fix":"2583"},{"desc":"2545","fix":"2584"},{"desc":"2585","fix":"2586"},{"desc":"2549","fix":"2587"},{"desc":"2541","fix":"2588"},{"desc":"2541","fix":"2589"},{"desc":"2590","fix":"2591"},{"desc":"2592","fix":"2593"},{"desc":"2577","fix":"2594"},{"messageId":"2595","fix":"2596","desc":"2597"},{"messageId":"2598","fix":"2599","desc":"2600"},{"desc":"2601","fix":"2602"},{"desc":"2541","fix":"2603"},{"desc":"2604","fix":"2605"},{"desc":"2541","fix":"2606"},{"desc":"2607","fix":"2608"},{"desc":"2543","fix":"2609"},{"desc":"2567","fix":"2610"},{"desc":"2611","fix":"2612"},{"desc":"2541","fix":"2613"},{"desc":"2543","fix":"2614"},{"desc":"2545","fix":"2615"},{"desc":"2547","fix":"2616"},{"desc":"2549","fix":"2617"},{"desc":"2551","fix":"2618"},{"desc":"2541","fix":"2619"},{"desc":"2620","fix":"2621"},{"desc":"2541","fix":"2622"},{"desc":"2623","fix":"2624"},{"desc":"2625","fix":"2626"},{"desc":"2541","fix":"2627"},{"desc":"2543","fix":"2628"},{"desc":"2545","fix":"2629"},{"desc":"2611","fix":"2630"},{"desc":"2551","fix":"2631"},{"desc":"2541","fix":"2632"},{"desc":"2541","fix":"2633"},{"desc":"2543","fix":"2634"},{"desc":"2545","fix":"2635"},{"desc":"2547","fix":"2636"},{"desc":"2549","fix":"2637"},{"desc":"2551","fix":"2638"},{"desc":"2541","fix":"2639"},{"desc":"2543","fix":"2640"},{"desc":"2545","fix":"2641"},{"desc":"2547","fix":"2642"},{"desc":"2549","fix":"2643"},{"desc":"2551","fix":"2644"},{"desc":"2541","fix":"2645"},{"desc":"2543","fix":"2646"},{"desc":"2545","fix":"2647"},{"desc":"2547","fix":"2648"},{"desc":"2549","fix":"2649"},{"desc":"2551","fix":"2650"},{"desc":"2541","fix":"2651"},{"desc":"2541","fix":"2652"},{"desc":"2653","fix":"2654"},{"desc":"2655","fix":"2656"},{"desc":"2611","fix":"2657"},{"desc":"2551","fix":"2658"},{"desc":"2541","fix":"2659"},{"desc":"2541","fix":"2660"},{"desc":"2543","fix":"2661"},{"desc":"2545","fix":"2662"},{"desc":"2547","fix":"2663"},{"desc":"2549","fix":"2664"},{"desc":"2551","fix":"2665"},{"desc":"2541","fix":"2666"},{"desc":"2541","fix":"2667"},{"desc":"2541","fix":"2668"},{"desc":"2543","fix":"2669"},{"desc":"2545","fix":"2670"},{"desc":"2547","fix":"2671"},{"desc":"2549","fix":"2672"},{"desc":"2551","fix":"2673"},{"desc":"2541","fix":"2674"},{"desc":"2541","fix":"2675"},{"desc":"2590","fix":"2676"},{"desc":"2677","fix":"2678"},{"desc":"2679","fix":"2680"},{"desc":"2543","fix":"2681"},{"desc":"2682","fix":"2683"},{"desc":"2547","fix":"2684"},{"desc":"2685","fix":"2686"},{"desc":"2687","fix":"2688"},{"desc":"2541","fix":"2689"},{"desc":"2690","fix":"2691"},{"desc":"2543","fix":"2692"},{"desc":"2682","fix":"2693"},{"desc":"2685","fix":"2694"},{"desc":"2611","fix":"2695"},{"desc":"2601","fix":"2696"},{"desc":"2541","fix":"2697"},{"desc":"2698","fix":"2699"},{"desc":"2590","fix":"2700"},{"desc":"2701","fix":"2702"},{"desc":"2611","fix":"2703"},{"desc":"2541","fix":"2704"},{"desc":"2543","fix":"2705"},{"desc":"2545","fix":"2706"},{"desc":"2547","fix":"2707"},{"desc":"2549","fix":"2708"},{"desc":"2551","fix":"2709"},{"desc":"2541","fix":"2710"},{"desc":"2541","fix":"2711"},{"desc":"2541","fix":"2712"},{"desc":"2541","fix":"2713"},{"desc":"2543","fix":"2714"},{"desc":"2545","fix":"2715"},{"desc":"2547","fix":"2716"},{"desc":"2549","fix":"2717"},{"desc":"2551","fix":"2718"},{"desc":"2541","fix":"2719"},{"desc":"2543","fix":"2720"},{"desc":"2547","fix":"2721"},{"desc":"2687","fix":"2722"},{"desc":"2723","fix":"2724"},{"desc":"2687","fix":"2725"},{"desc":"2541","fix":"2726"},{"desc":"2727","fix":"2728"},{"desc":"2541","fix":"2729"},{"desc":"2543","fix":"2730"},{"desc":"2545","fix":"2731"},{"desc":"2547","fix":"2732"},{"desc":"2549","fix":"2733"},{"desc":"2551","fix":"2734"},{"desc":"2543","fix":"2735"},{"desc":"2682","fix":"2736"},{"desc":"2547","fix":"2737"},{"desc":"2685","fix":"2738"},{"desc":"2541","fix":"2739"},{"desc":"2541","fix":"2740"},{"desc":"2543","fix":"2741"},{"desc":"2742","fix":"2743"},{"desc":"2744","fix":"2745"},{"desc":"2723","fix":"2746"},{"desc":"2549","fix":"2747"},{"desc":"2748","fix":"2749"},{"desc":"2750","fix":"2751"},{"desc":"2750","fix":"2752"},{"desc":"2687","fix":"2753"},{"desc":"2754","fix":"2755"},{"desc":"2756","fix":"2757"},{"desc":"2758","fix":"2759"},{"desc":"2760","fix":"2761"},{"desc":"2762","fix":"2763"},[20861,20863],".",{"desc":"2764","fix":"2765"},{"desc":"2764","fix":"2766"},{"desc":"2764","fix":"2767"},{"desc":"2768","fix":"2769"},{"desc":"2770","fix":"2771"},"Update the dependencies array to be: [layoutMode, dispatch, changelayoutMode, layoutType]",{"range":"2772","text":"2773"},"Update the dependencies array to be: [sendPasswordMsg_reducx, sendPasswordError_reducx, dispatch]",{"range":"2774","text":"2775"},"Update the dependencies array to be: [dispatch, sendOTPSuccessMsg_redux, sendOtpMegError_reducx]",{"range":"2776","text":"2777"},"Update the dependencies array to be: [dispatch]",{"range":"2778","text":"2779"},"Update the dependencies array to be: [hasShowModal, location.pathname, props.masterPath, userAccess]",{"range":"2780","text":"2781"},"Update the dependencies array to be: [dispatch, hasShowModal, hasShowloction, location.editValue, location.pageMode, props.editValue, props.pageMode, state]",{"range":"2782","text":"2783"},"Update the dependencies array to be: [dispatch, pageMode, postMsg]",{"range":"2784","text":"2785"},"Update the dependencies array to be: [updateMsg, modalCss, history, dispatch]",{"range":"2786","text":"2787"},"Update the dependencies array to be: [pageField, state]",{"range":"2788","text":"2789"},{"range":"2790","text":"2779"},{"range":"2791","text":"2779"},{"range":"2792","text":"2781"},{"range":"2793","text":"2783"},{"range":"2794","text":"2785"},{"range":"2795","text":"2787"},{"range":"2796","text":"2789"},"Update the dependencies array to be: [dispatch, history]",{"range":"2797","text":"2798"},"Update the dependencies array to be: [dispatch, divisionDropdown_redux, history]",{"range":"2799","text":"2800"},{"range":"2801","text":"2779"},{"range":"2802","text":"2779"},{"range":"2803","text":"2781"},"Update the dependencies array to be: [dispatch, hasShowModal, hasShowloction, location.editValue, location.pageMode, props.editValue, props.pageMode]",{"range":"2804","text":"2805"},{"range":"2806","text":"2785"},"Update the dependencies array to be: [dispatch, modulePostAPIResponse, tog_center]",{"range":"2807","text":"2808"},{"range":"2809","text":"2787"},"Update the dependencies array to be: [cPassword, isCPassword, password]",{"range":"2810","text":"2811"},{"range":"2812","text":"2781"},{"range":"2813","text":"2805"},"Update the dependencies array to be: [PostAPIResponse.Message, PostAPIResponse.Status, PostAPIResponse.StatusCode, dispatch, pageMode]",{"range":"2814","text":"2815"},{"range":"2816","text":"2779"},{"range":"2817","text":"2779"},{"range":"2818","text":"2779"},{"range":"2819","text":"2781"},{"range":"2820","text":"2789"},{"range":"2821","text":"2783"},"Update the dependencies array to be: [dispatch, pageMode, postMsg.Message, postMsg.Status, postMsg.StatusCode]",{"range":"2822","text":"2823"},{"range":"2824","text":"2787"},{"range":"2825","text":"2779"},{"range":"2826","text":"2779"},"Update the dependencies array to be: [RoleAccessModifiedinSingleArray, editDataGatingFromList, history.location.pathname, props.relatatedPage]",{"range":"2827","text":"2828"},"Update the dependencies array to be: [dispatch, editDataGatingFromList, pageModeProps, propsPageMode, userPageAccessState]",{"range":"2829","text":"2830"},{"range":"2831","text":"2815"},"removeEscape",{"range":"2832","text":"2833"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"2834","text":"2835"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [RoleAccessModifiedinSingleArray, history.location.pathname]",{"range":"2836","text":"2837"},{"range":"2838","text":"2779"},"Update the dependencies array to be: [PostMessage_ForCopyRoleAccess, dispatch, tog_center]",{"range":"2839","text":"2840"},{"range":"2841","text":"2779"},"Update the dependencies array to be: [editDataGatingFromList, history]",{"range":"2842","text":"2843"},{"range":"2844","text":"2781"},{"range":"2845","text":"2805"},"Update the dependencies array to be: [PostAPIResponse, dispatch, pageMode]",{"range":"2846","text":"2847"},{"range":"2848","text":"2779"},{"range":"2849","text":"2781"},{"range":"2850","text":"2783"},{"range":"2851","text":"2785"},{"range":"2852","text":"2787"},{"range":"2853","text":"2789"},{"range":"2854","text":"2779"},"Update the dependencies array to be: [RoleAccessModifiedinSingleArray, dispatch, history.location.pathname, history.location.state]",{"range":"2855","text":"2856"},{"range":"2857","text":"2779"},"Update the dependencies array to be: [AddPage_PageMasterListForRoleAccess_Redux, tableListData]",{"range":"2858","text":"2859"},"Update the dependencies array to be: [PostMessage_ForRoleAccessList, dispatch]",{"range":"2860","text":"2861"},{"range":"2862","text":"2779"},{"range":"2863","text":"2781"},{"range":"2864","text":"2783"},{"range":"2865","text":"2847"},{"range":"2866","text":"2789"},{"range":"2867","text":"2779"},{"range":"2868","text":"2779"},{"range":"2869","text":"2781"},{"range":"2870","text":"2783"},{"range":"2871","text":"2785"},{"range":"2872","text":"2787"},{"range":"2873","text":"2789"},{"range":"2874","text":"2779"},{"range":"2875","text":"2781"},{"range":"2876","text":"2783"},{"range":"2877","text":"2785"},{"range":"2878","text":"2787"},{"range":"2879","text":"2789"},{"range":"2880","text":"2779"},{"range":"2881","text":"2781"},{"range":"2882","text":"2783"},{"range":"2883","text":"2785"},{"range":"2884","text":"2787"},{"range":"2885","text":"2789"},{"range":"2886","text":"2779"},{"range":"2887","text":"2779"},"Update the dependencies array to be: [RoleAccessModifiedinSingleArray, editDataGetingFromList, history.location.pathname, props.relatatedPage]",{"range":"2888","text":"2889"},"Update the dependencies array to be: [dispatch, editDataGetingFromList, pageModeProps, userPageAccessState]",{"range":"2890","text":"2891"},{"range":"2892","text":"2847"},{"range":"2893","text":"2789"},{"range":"2894","text":"2779"},{"range":"2895","text":"2779"},{"range":"2896","text":"2781"},{"range":"2897","text":"2783"},{"range":"2898","text":"2785"},{"range":"2899","text":"2787"},{"range":"2900","text":"2789"},{"range":"2901","text":"2779"},{"range":"2902","text":"2779"},{"range":"2903","text":"2779"},{"range":"2904","text":"2781"},{"range":"2905","text":"2783"},{"range":"2906","text":"2785"},{"range":"2907","text":"2787"},{"range":"2908","text":"2789"},{"range":"2909","text":"2779"},{"range":"2910","text":"2779"},{"range":"2911","text":"2828"},"Update the dependencies array to be: [PostAPIResponse, dispatch, partyType_dropdown_Select.value]",{"range":"2912","text":"2913"},"Update the dependencies array to be: [deleteAPIResponse, dispatch, partyType_dropdown_Select.value]",{"range":"2914","text":"2915"},{"range":"2916","text":"2781"},"Update the dependencies array to be: [dispatch, history.location.editValue, history.location.pathname, userAccess]",{"range":"2917","text":"2918"},{"range":"2919","text":"2785"},"Update the dependencies array to be: [GoButton_Handler, deleteMessage, dispatch]",{"range":"2920","text":"2921"},"Update the dependencies array to be: [history.location.pathname, userAccess]",{"range":"2922","text":"2923"},{"range":"2924","text":"2779"},"Update the dependencies array to be: [deleteMsg.Message, deleteMsg.Status, deleteMsg.StatusCode, dispatch]",{"range":"2925","text":"2926"},{"range":"2927","text":"2781"},{"range":"2928","text":"2918"},{"range":"2929","text":"2921"},{"range":"2930","text":"2847"},{"range":"2931","text":"2837"},{"range":"2932","text":"2779"},"Update the dependencies array to be: [deleteMessage, dispatch]",{"range":"2933","text":"2934"},{"range":"2935","text":"2828"},"Update the dependencies array to be: [dispatch, editDataGatingFromList, pageModeProps, userPageAccessState]",{"range":"2936","text":"2937"},{"range":"2938","text":"2847"},{"range":"2939","text":"2779"},{"range":"2940","text":"2781"},{"range":"2941","text":"2783"},{"range":"2942","text":"2785"},{"range":"2943","text":"2787"},{"range":"2944","text":"2789"},{"range":"2945","text":"2779"},{"range":"2946","text":"2779"},{"range":"2947","text":"2779"},{"range":"2948","text":"2779"},{"range":"2949","text":"2781"},{"range":"2950","text":"2783"},{"range":"2951","text":"2785"},{"range":"2952","text":"2787"},{"range":"2953","text":"2789"},{"range":"2954","text":"2779"},{"range":"2955","text":"2781"},{"range":"2956","text":"2785"},{"range":"2957","text":"2923"},"Update the dependencies array to be: [dispatch, postMsg]",{"range":"2958","text":"2959"},{"range":"2960","text":"2923"},{"range":"2961","text":"2779"},"Update the dependencies array to be: [deleteMsg, dispatch]",{"range":"2962","text":"2963"},{"range":"2964","text":"2779"},{"range":"2965","text":"2781"},{"range":"2966","text":"2783"},{"range":"2967","text":"2785"},{"range":"2968","text":"2787"},{"range":"2969","text":"2789"},{"range":"2970","text":"2781"},{"range":"2971","text":"2918"},{"range":"2972","text":"2785"},{"range":"2973","text":"2921"},{"range":"2974","text":"2779"},{"range":"2975","text":"2779"},{"range":"2976","text":"2781"},"Update the dependencies array to be: [dispatch, hasShowModal, hasShowloction, location.editValue, location.pageMode, orderAmount, props.editValue, props.pageMode]",{"range":"2977","text":"2978"},"Update the dependencies array to be: [hasShowModal, hasShowloction, supplierAddress]",{"range":"2979","text":"2980"},{"range":"2981","text":"2959"},{"range":"2982","text":"2787"},"Update the dependencies array to be: [dispatch, error500, history]",{"range":"2983","text":"2984"},"Update the dependencies array to be: [dispatch, history, props.IsSearchVissible]",{"range":"2985","text":"2986"},{"range":"2987","text":"2986"},{"range":"2988","text":"2923"},"Update the dependencies array to be: [fileds, tableList]",{"range":"2989","text":"2990"},"Update the dependencies array to be: [dispatch, getList, tog_center, updateMsg, updateSucc]",{"range":"2991","text":"2992"},"Update the dependencies array to be: [deleteMsg, deleteSucc, dispatch, getList]",{"range":"2993","text":"2994"},"Update the dependencies array to be: [dispatch, getList, postMsg, postSucc, tog_center]",{"range":"2995","text":"2996"},"Update the dependencies array to be: [editData, history, masterPath, pageField.IsEditPopuporComponent, tog_center]",{"range":"2997","text":"2998"},"Update the dependencies array to be: [deleteMsg, dispatch, props]",{"range":"2999","text":"3000"},{"range":"3001","text":"3000"},{"range":"3002","text":"3000"},"Update the dependencies array to be: [RoleAccessData.length, dispatch]",{"range":"3003","text":"3004"},"Update the dependencies array to be: [pathName, activateParentDropdown, RoleAccessModifiedinSingleArray, props.location.pathname]",{"range":"3005","text":"3006"},[2491,2513],"[layoutMode, dispatch, changelayoutMode, layoutType]",[2321,2371],"[sendPasswordMsg_reducx, sendPasswordError_reducx, dispatch]",[2771,2820],"[dispatch, sendOTPSuccessMsg_redux, sendOtpMegError_reducx]",[1897,1899],"[dispatch]",[2903,2915],"[hasShowModal, location.pathname, props.masterPath, userAccess]",[4432,4434],"[dispatch, hasShowModal, hasShowloction, location.editValue, location.pageMode, props.editValue, props.pageMode, state]",[5658,5667],"[dispatch, pageMode, postMsg]",[6230,6251],"[updateMsg, modalCss, history, dispatch]",[6446,6457],"[pageField, state]",[1607,1609],[1678,1680],[3133,3145],[4580,4582],[5553,5562],[6027,6048],[6442,6453],[1316,1318],"[dispatch, history]",[1769,1793],"[dispatch, divisionDropdown_redux, history]",[1504,1506],[1646,1648],[3764,3776],[6736,6738],"[dispatch, hasShowModal, hasShowloction, location.editValue, location.pageMode, props.editValue, props.pageMode]",[7910,7919],[8598,8621],"[dispatch, modulePostAPIResponse, tog_center]",[9080,9101],[2468,2479],"[cPassword, isCPassword, password]",[3780,3792],[5452,5454],[6540,6564],"[PostAPIResponse.Message, PostAPIResponse.Status, PostAPIResponse.StatusCode, dispatch, pageMode]",[1610,1612],[1462,1464],[2639,2641],[3022,3034],[3217,3228],[4812,4814],[5728,5744],"[dispatch, pageMode, postMsg.Message, postMsg.Status, postMsg.StatusCode]",[6197,6218],[1533,1535],[1674,1676],[4159,4192],"[RoleAccessModifiedinSingleArray, editDataGatingFromList, history.location.pathname, props.relatatedPage]",[5966,6005],"[dispatch, editDataGatingFromList, pageModeProps, propsPageMode, userPageAccessState]",[7492,7516],[26435,26436],"",[26435,26435],"\\",[2451,2484],"[RoleAccessModifiedinSingleArray, history.location.pathname]",[2634,2636],[4499,4530],"[PostMessage_ForCopyRoleAccess, dispatch, tog_center]",[1756,1758],[2434,2443],"[editDataGatingFromList, history]",[4974,4986],[8685,8687],[9816,9833],"[PostAPIResponse, dispatch, pageMode]",[2389,2391],[2832,2844],[4146,4148],[5324,5333],[5908,5929],[6124,6135],[1703,1705],[4844,4877],"[RoleAccessModifiedinSingleArray, dispatch, history.location.pathname, history.location.state]",[5613,5615],[7025,7068],"[AddPage_PageMasterListForRoleAccess_Redux, tableListData]",[8363,8394],"[PostMessage_ForRoleAccessList, dispatch]",[2152,2154],[3131,3143],[4595,4597],[5855,5872],[6066,6077],[1610,1612],[1981,1983],[2942,2954],[4026,4028],[5106,5115],[5690,5711],[5910,5921],[1687,1689],[4476,4488],[7339,7341],[8498,8507],[8974,8995],[9166,9177],[2545,2547],[3157,3169],[4422,4424],[5530,5539],[6106,6127],[6322,6333],[1638,1640],[3181,3183],[3966,3999],"[RoleAccessModifiedinSingleArray, editDataGetingFromList, history.location.pathname, props.relatatedPage]",[4813,4837],"[dispatch, editDataGetingFromList, pageModeProps, userPageAccessState]",[6051,6068],[6218,6229],[1671,1673],[3509,3511],[4260,4272],[6313,6315],[7434,7443],[8012,8033],[8228,8239],[1652,1654],[1783,1785],[2561,2563],[3006,3018],[4181,4183],[5313,5322],[5905,5926],[6121,6132],[1613,1615],[1561,1563],[3606,3639],[4276,4293],"[PostAPIResponse, dispatch, partyType_dropdown_Select.value]",[4863,4882],"[deleteAPIResponse, dispatch, partyType_dropdown_Select.value]",[3062,3074],[4497,4509],"[dispatch, history.location.editValue, history.location.pathname, userAccess]",[5754,5763],[6670,6685],"[GoButton_Handler, deleteMessage, dispatch]",[1880,1892],"[history.location.pathname, userAccess]",[2023,2025],[2669,2687],"[deleteMsg.Message, deleteMsg.Status, deleteMsg.StatusCode, dispatch]",[3161,3173],[4418,4430],[5557,5572],[8779,8796],[1862,1895],[2029,2031],[2688,2703],"[deleteMessage, dispatch]",[2396,2429],[2972,2996],"[dispatch, editDataGatingFromList, pageModeProps, userPageAccessState]",[4113,4130],[2792,2794],[3404,3416],[5041,5043],[6161,6170],[6731,6752],[6979,6990],[1442,1444],[1806,1808],[1551,1553],[2243,2245],[2855,2867],[4102,4104],[5201,5210],[5779,5800],[6006,6017],[1655,1657],[3369,3381],[4590,4599],[3127,3139],[4021,4030],"[dispatch, postMsg]",[1952,1964],[2105,2107],[2899,2910],"[deleteMsg, dispatch]",[2526,2528],[2986,2998],[4373,4375],[5486,5495],[6062,6083],[6379,6390],[2677,2689],[3506,3518],[4780,4789],[5697,5712],[1617,1619],[2630,2632],[3734,3746],[5777,5779],"[dispatch, hasShowModal, hasShowloction, location.editValue, location.pageMode, orderAmount, props.editValue, props.pageMode]",[6004,6021],"[hasShowModal, hasShowloction, supplierAddress]",[6818,6827],[7392,7413],[790,800],"[dispatch, error500, history]",[2495,2504],"[dispatch, history, props.IsSearchVissible]",[2208,2217],[2335,2347],[2757,2768],"[fileds, tableList]",[3478,3489],"[dispatch, getList, tog_center, updateMsg, updateSucc]",[4086,4097],"[deleteMsg, deleteSucc, dispatch, getList]",[4720,4729],"[dispatch, getList, postMsg, postSucc, tog_center]",[5099,5109],"[editData, history, masterPath, pageField.IsEditPopuporComponent, tog_center]",[2122,2133],"[deleteMsg, dispatch, props]",[1813,1824],[1811,1822],[1632,1634],"[RoleAccessData.length, dispatch]",[4022,4089],"[pathName, activateParentDropdown, RoleAccessModifiedinSingleArray, props.location.pathname]"]
{"ast":null,"code":"import { call, put, takeEvery } from \"redux-saga/effects\";\nimport { Party_Items, GetSupplier_API, get_Item_List, get_Party_Item_List, Items_Master_Get_API } from \"../../../helpers/backend_helper\";\nimport { AlertState } from \"../../Utilites/CustomAlertRedux/actions\";\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\nimport { PostPartyItemsSuccess, getSupplierSuccess, getPartyItemListSuccess } from \"./action\";\nimport { POST_PARTYITEMS, GET_SUPPLIER, GET_PARTY_ITEM_LIST } from \"./actionType\"; // post api\n\nfunction* Post_PartyItems_GneratorFunction(_ref) {\n  let {\n    data\n  } = _ref;\n  yield put(SpinnerState(true));\n\n  try {\n    const response = yield call(Party_Items, data);\n    yield put(SpinnerState(false));\n    yield put(PostPartyItemsSuccess(response));\n  } catch (error) {\n    yield put(SpinnerState(false));\n    yield put(AlertState({\n      Type: 4,\n      Status: true,\n      Message: \"500 Error Message\"\n    }));\n  }\n}\n\n_c = Post_PartyItems_GneratorFunction;\n\nfunction* getPartyItemGenFunc(_ref2) {\n  let {\n    supplierId\n  } = _ref2;\n\n  // yield put(SpinnerState(true))\n  try {\n    const itemList = yield call(Items_Master_Get_API);\n    const partyItem = yield call(get_Party_Item_List, supplierId);\n    const response = itemList.Data.map(item => {\n      item[\"itemCheck\"] = false;\n      partyItem.Data.forEach(ele => {\n        if (item.id === ele.Item) {\n          item[\"itemCheck\"] = true;\n        }\n      });\n      return item;\n    });\n    yield put(getPartyItemListSuccess(response)); // yield put(SpinnerState(false))\n  } catch (error) {\n    // yield put(SpinnerState(false))\n    yield put(AlertState({\n      Type: 4,\n      Status: true,\n      Message: \"500 Error Message\"\n    }));\n  }\n}\n\nfunction* getSupplierGenFunc() {\n  const USER = JSON.parse(localStorage.getItem(\"roleId\"));\n\n  try {\n    const response = yield call(GetSupplier_API, USER.Party_id);\n    yield put(getSupplierSuccess(response.Data));\n  } catch (error) {\n    yield put(AlertState({\n      Type: 4,\n      Status: true,\n      Message: \"500 Error Message for getSupplier \"\n    }));\n  }\n}\n\nfunction* PartyItemsSaga() {\n  yield takeEvery(POST_PARTYITEMS, Post_PartyItems_GneratorFunction);\n  yield takeEvery(GET_SUPPLIER, getSupplierGenFunc);\n  yield takeEvery(GET_PARTY_ITEM_LIST, getPartyItemGenFunc);\n}\n\n_c2 = PartyItemsSaga;\nexport default PartyItemsSaga;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Post_PartyItems_GneratorFunction\");\n$RefreshReg$(_c2, \"PartyItemsSaga\");","map":{"version":3,"names":["call","put","takeEvery","Party_Items","GetSupplier_API","get_Item_List","get_Party_Item_List","Items_Master_Get_API","AlertState","SpinnerState","PostPartyItemsSuccess","getSupplierSuccess","getPartyItemListSuccess","POST_PARTYITEMS","GET_SUPPLIER","GET_PARTY_ITEM_LIST","Post_PartyItems_GneratorFunction","data","response","error","Type","Status","Message","getPartyItemGenFunc","supplierId","itemList","partyItem","Data","map","item","forEach","ele","id","Item","getSupplierGenFunc","USER","JSON","parse","localStorage","getItem","Party_id","PartyItemsSaga"],"sources":["D:/GitProjects/Manthan/src/store/Administrator/PartyItemsRedux/saga.js"],"sourcesContent":["import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { Party_Items, GetSupplier_API, get_Item_List, get_Party_Item_List, Items_Master_Get_API, } from \"../../../helpers/backend_helper\";\r\nimport { AlertState } from \"../../Utilites/CustomAlertRedux/actions\";\r\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\r\nimport { PostPartyItemsSuccess, getSupplierSuccess, getPartyItemListSuccess, } from \"./action\";\r\nimport { POST_PARTYITEMS, GET_SUPPLIER, GET_PARTY_ITEM_LIST, } from \"./actionType\";\r\n\r\n// post api\r\nfunction* Post_PartyItems_GneratorFunction({ data }) {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(Party_Items, data);\r\n    yield put(SpinnerState(false))\r\n    yield put(PostPartyItemsSuccess(response));\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* getPartyItemGenFunc({ supplierId }) {\r\n\r\n\r\n  // yield put(SpinnerState(true))\r\n  try {\r\n    const itemList = yield call(Items_Master_Get_API);\r\n    const partyItem = yield call(get_Party_Item_List, supplierId);\r\n    const response = itemList.Data.map((item) => {\r\n      item[\"itemCheck\"] = false\r\n      partyItem.Data.forEach((ele) => {\r\n        if (item.id ===ele.Item) { item[\"itemCheck\"] = true }\r\n      });\r\n      return item\r\n    });\r\n    yield put(getPartyItemListSuccess(response));\r\n    // yield put(SpinnerState(false))\r\n  } catch (error) {\r\n    // yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* getSupplierGenFunc() {\r\n\r\n  const USER = JSON.parse(localStorage.getItem(\"roleId\"))\r\n  try {\r\n    const response = yield call(GetSupplier_API, USER.Party_id\r\n    );\r\n    yield put(getSupplierSuccess(response.Data));\r\n  } catch (error) {\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message for getSupplier \",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* PartyItemsSaga() {\r\n  yield takeEvery(POST_PARTYITEMS, Post_PartyItems_GneratorFunction)\r\n  yield takeEvery(GET_SUPPLIER, getSupplierGenFunc)\r\n  yield takeEvery(GET_PARTY_ITEM_LIST, getPartyItemGenFunc)\r\n}\r\n\r\nexport default PartyItemsSaga;"],"mappings":"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"},"metadata":{},"sourceType":"module"}
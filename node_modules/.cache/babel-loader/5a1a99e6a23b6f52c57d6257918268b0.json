{"ast":null,"code":"import { call, put, takeEvery } from \"redux-saga/effects\";\nimport { getMethod_ForProductTypesAPISuccess, PostMethod_ForProductTypesAPISuccess } from \"./action\";\nimport { GET_METHOD_HANDLER_FOR_PRODUCT_TYPES_API, POST_METHOD_HANDLER_FOR_PRODUCT_TYPES_API, DELETE_PRODUCT_TYPES_ID, EDIT_PRODUCT_TYPES_ID, GET_PRODUCT_TYPES_LIST, UPDATE_PRODUCT_TYPES_ID } from \"./actionTypes\";\nimport { AlertState } from \"../../Utilites/CustomAlertRedux/actions\";\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\nimport { get_Product_Category_Type_Master_API, Post_Product_Types_API, detelet_Product_Types_List_Api, edit_Product_Types_List_Api, get_Product_Types_List_Api, update_Product_Types_List_Api } from \"../../../helpers/backend_helper\";\nimport { deleteProductTypesIDSuccess, editProductTypesIDSuccess, getProductTypeslistSuccess, updateProductTypesIDSuccess } from \"./action\"; // post api\n\nfunction* Post_Method_ForProductTypes_GenFun(_ref) {\n  let {\n    data\n  } = _ref;\n  yield put(SpinnerState(true));\n\n  try {\n    const response = yield call(Post_Product_Types_API, data);\n    yield put(SpinnerState(false));\n    yield put(PostMethod_ForProductTypesAPISuccess(response));\n  } catch (error) {\n    yield put(SpinnerState(false));\n    yield put(AlertState({\n      Type: 4,\n      Status: true,\n      Message: \"500 Error Message\"\n    }));\n  }\n} ///  ProductTypes dropdown list\n\n\n_c = Post_Method_ForProductTypes_GenFun;\n\nfunction* get_Method_ForProductTypes_GenFun() {\n  try {\n    const response = yield call(get_Product_Category_Type_Master_API);\n    yield put(getMethod_ForProductTypesAPISuccess(response.Data));\n    console.log(\"response\", response);\n  } catch (error) {\n    console.log(\"Product Types API page error\", error);\n  }\n} // get api\n\n\nfunction* Get_ProductTypes_List_GenratorFunction() {\n  yield put(SpinnerState(true));\n\n  try {\n    const response = yield call(get_Product_Types_List_Api);\n    yield put(getProductTypeslistSuccess(response.Data));\n    yield put(SpinnerState(false));\n  } catch (error) {\n    yield put(SpinnerState(false));\n    yield put(AlertState({\n      Type: 4,\n      Status: true,\n      Message: \"500 Error Message\"\n    }));\n  }\n} // delete api \n\n\n_c2 = Get_ProductTypes_List_GenratorFunction;\n\nfunction* Delete_ProductTypes_ID_GenratorFunction(_ref2) {\n  let {\n    id\n  } = _ref2;\n\n  try {\n    yield put(SpinnerState(true));\n    const response = yield call(detelet_Product_Types_List_Api, id);\n    yield put(SpinnerState(false));\n    yield put(deleteProductTypesIDSuccess(response));\n  } catch (error) {\n    yield put(SpinnerState(false));\n    yield put(AlertState({\n      Type: 4,\n      Status: true,\n      Message: \"500 Error Message\"\n    }));\n  }\n} // edit api\n\n\n_c3 = Delete_ProductTypes_ID_GenratorFunction;\n\nfunction* Edit_ProductTypes_ID_GenratorFunction(_ref3) {\n  let {\n    id,\n    pageMode\n  } = _ref3;\n\n  try {\n    const response = yield call(edit_Product_Types_List_Api, id);\n    response.pageMode = pageMode;\n    yield put(editProductTypesIDSuccess(response));\n    console.log(\"response in saga\", response);\n  } catch (error) {\n    yield put(AlertState({\n      Type: 4,\n      Status: true,\n      Message: \"500 Error Message\"\n    }));\n  }\n} // update api\n\n\n_c4 = Edit_ProductTypes_ID_GenratorFunction;\n\nfunction* Update_ProductTypes_ID_GenratorFunction(_ref4) {\n  let {\n    updateData,\n    ID\n  } = _ref4;\n\n  try {\n    yield put(SpinnerState(true));\n    const response = yield call(update_Product_Types_List_Api, updateData, ID);\n    yield put(SpinnerState(false));\n    yield put(updateProductTypesIDSuccess(response));\n  } catch (error) {\n    yield put(SpinnerState(false));\n    yield put(AlertState({\n      Type: 4,\n      Status: true,\n      Message: \"500 Error Message\"\n    }));\n  }\n}\n\n_c5 = Update_ProductTypes_ID_GenratorFunction;\n\nfunction* CategorySaga() {\n  yield takeEvery(POST_METHOD_HANDLER_FOR_PRODUCT_TYPES_API, Post_Method_ForProductTypes_GenFun);\n  yield takeEvery(GET_METHOD_HANDLER_FOR_PRODUCT_TYPES_API, get_Method_ForProductTypes_GenFun);\n  yield takeEvery(GET_PRODUCT_TYPES_LIST, Get_ProductTypes_List_GenratorFunction);\n  yield takeEvery(DELETE_PRODUCT_TYPES_ID, Delete_ProductTypes_ID_GenratorFunction);\n  yield takeEvery(EDIT_PRODUCT_TYPES_ID, Edit_ProductTypes_ID_GenratorFunction);\n  yield takeEvery(UPDATE_PRODUCT_TYPES_ID, Update_ProductTypes_ID_GenratorFunction);\n}\n\n_c6 = CategorySaga;\nexport default CategorySaga;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Post_Method_ForProductTypes_GenFun\");\n$RefreshReg$(_c2, \"Get_ProductTypes_List_GenratorFunction\");\n$RefreshReg$(_c3, \"Delete_ProductTypes_ID_GenratorFunction\");\n$RefreshReg$(_c4, \"Edit_ProductTypes_ID_GenratorFunction\");\n$RefreshReg$(_c5, \"Update_ProductTypes_ID_GenratorFunction\");\n$RefreshReg$(_c6, \"CategorySaga\");","map":{"version":3,"names":["call","put","takeEvery","getMethod_ForProductTypesAPISuccess","PostMethod_ForProductTypesAPISuccess","GET_METHOD_HANDLER_FOR_PRODUCT_TYPES_API","POST_METHOD_HANDLER_FOR_PRODUCT_TYPES_API","DELETE_PRODUCT_TYPES_ID","EDIT_PRODUCT_TYPES_ID","GET_PRODUCT_TYPES_LIST","UPDATE_PRODUCT_TYPES_ID","AlertState","SpinnerState","get_Product_Category_Type_Master_API","Post_Product_Types_API","detelet_Product_Types_List_Api","edit_Product_Types_List_Api","get_Product_Types_List_Api","update_Product_Types_List_Api","deleteProductTypesIDSuccess","editProductTypesIDSuccess","getProductTypeslistSuccess","updateProductTypesIDSuccess","Post_Method_ForProductTypes_GenFun","data","response","error","Type","Status","Message","get_Method_ForProductTypes_GenFun","Data","console","log","Get_ProductTypes_List_GenratorFunction","Delete_ProductTypes_ID_GenratorFunction","id","Edit_ProductTypes_ID_GenratorFunction","pageMode","Update_ProductTypes_ID_GenratorFunction","updateData","ID","CategorySaga"],"sources":["D:/GitProjects/Manthan/src/store/Administrator/CategoryRedux/saga.js"],"sourcesContent":["import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { getMethod_ForProductTypesAPISuccess, PostMethod_ForProductTypesAPISuccess} from \"./action\";\r\nimport { GET_METHOD_HANDLER_FOR_PRODUCT_TYPES_API,\r\n        POST_METHOD_HANDLER_FOR_PRODUCT_TYPES_API,\r\n        DELETE_PRODUCT_TYPES_ID,\r\n        EDIT_PRODUCT_TYPES_ID,\r\n        GET_PRODUCT_TYPES_LIST,\r\n        UPDATE_PRODUCT_TYPES_ID\r\n      } from \"./actionTypes\";\r\n\r\nimport { AlertState } from \"../../Utilites/CustomAlertRedux/actions\";\r\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\r\n\r\nimport { get_Product_Category_Type_Master_API, \r\n         Post_Product_Types_API,\r\n         detelet_Product_Types_List_Api,\r\n         edit_Product_Types_List_Api,\r\n         get_Product_Types_List_Api,\r\n         update_Product_Types_List_Api\r\n     } from \"../../../helpers/backend_helper\";\r\n  \r\nimport {\r\n  deleteProductTypesIDSuccess,\r\n  editProductTypesIDSuccess,\r\n  getProductTypeslistSuccess,\r\n  updateProductTypesIDSuccess\r\n} from \"./action\";\r\n\r\n\r\n\r\n// post api\r\nfunction*  Post_Method_ForProductTypes_GenFun({ data }) {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(Post_Product_Types_API, data);\r\n    yield put(SpinnerState(false))\r\n    yield put(PostMethod_ForProductTypesAPISuccess(response));\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n\r\n///  ProductTypes dropdown list\r\nfunction* get_Method_ForProductTypes_GenFun() {\r\n  \r\n  try {\r\n    const response = yield call(get_Product_Category_Type_Master_API);\r\n    yield put(getMethod_ForProductTypesAPISuccess(response.Data));\r\n    console.log(\"response\",response)\r\n  } catch (error) {\r\n    console.log(\"Product Types API page error\", error);\r\n  }\r\n}\r\n\r\n\r\n// get api\r\nfunction* Get_ProductTypes_List_GenratorFunction() {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    \r\n    const response = yield call(get_Product_Types_List_Api);\r\n    yield put(getProductTypeslistSuccess(response.Data));\r\n    yield put(SpinnerState(false))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// delete api \r\nfunction* Delete_ProductTypes_ID_GenratorFunction({ id }) {\r\n  try {\r\n    yield put(SpinnerState(true))\r\n    const response = yield call(detelet_Product_Types_List_Api, id);\r\n    yield put(SpinnerState(false))\r\n    yield put(deleteProductTypesIDSuccess(response))\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// edit api\r\nfunction* Edit_ProductTypes_ID_GenratorFunction({ id,pageMode }) {\r\n  try {\r\n    const response = yield call(edit_Product_Types_List_Api, id);\r\n    response.pageMode=pageMode\r\n    yield put(editProductTypesIDSuccess(response));\r\n    console.log(\"response in saga\", response)\r\n\r\n  } catch (error) {\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// update api\r\nfunction* Update_ProductTypes_ID_GenratorFunction({ updateData, ID }) {\r\n  try {\r\n    yield put(SpinnerState(true))\r\n    const response = yield call(update_Product_Types_List_Api, updateData, ID);\r\n    yield put(SpinnerState(false))\r\n    yield put(updateProductTypesIDSuccess(response))\r\n  }\r\n  catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n  function*  CategorySaga() {\r\n    yield takeEvery(POST_METHOD_HANDLER_FOR_PRODUCT_TYPES_API,Post_Method_ForProductTypes_GenFun)\r\n    yield takeEvery(GET_METHOD_HANDLER_FOR_PRODUCT_TYPES_API, get_Method_ForProductTypes_GenFun)\r\n    yield takeEvery(GET_PRODUCT_TYPES_LIST, Get_ProductTypes_List_GenratorFunction)\r\n    yield takeEvery(DELETE_PRODUCT_TYPES_ID, Delete_ProductTypes_ID_GenratorFunction)\r\n    yield takeEvery(EDIT_PRODUCT_TYPES_ID, Edit_ProductTypes_ID_GenratorFunction)\r\n    yield takeEvery(UPDATE_PRODUCT_TYPES_ID, Update_ProductTypes_ID_GenratorFunction)\r\n  }\r\n  \r\n  export default CategorySaga;"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import{POST_METHOD_FOR_DRIVER_MASTER,POST_METHOD_FOR_DRIVER_MASTER_SUCCESS,GET_METHOD_FOR_DRIVER_LIST,GET_METHOD_FOR_DRIVER_LIST_SUCCESS,DELETE_DRIVER_TYPE_ID,DELETE_DRIVER_TYPE_ID_SUCCESS,EDIT_DRIVER_TYPE_ID,EDIT_DRIVER_TYPE_ID_SUCCESS,UPDATE_DRIVER_TYPE_ID,UPDATE_DRIVER_TYPE_ID_SUCCESS}from\"./actionType\";export var PostMethodForDriverMaster=function PostMethodForDriverMaster(data){return{type:POST_METHOD_FOR_DRIVER_MASTER,data:data};};export var PostMethod_ForDriverMasterSuccess=function PostMethod_ForDriverMasterSuccess(data){return{type:POST_METHOD_FOR_DRIVER_MASTER_SUCCESS,payload:data};};// get method DriverList\nexport var getMethodForDriverList=function getMethodForDriverList(){return{type:GET_METHOD_FOR_DRIVER_LIST};};export var getMethod_ForDriverListSuccess=function getMethod_ForDriverListSuccess(data){return{type:GET_METHOD_FOR_DRIVER_LIST_SUCCESS,payload:data};};////delete api\nexport var delete_DriverType_ID=function delete_DriverType_ID(id){return{type:DELETE_DRIVER_TYPE_ID,id:id};};export var deleteDriverTypeIDSuccess=function deleteDriverTypeIDSuccess(deleteMessage){return{type:DELETE_DRIVER_TYPE_ID_SUCCESS,payload:deleteMessage};};// edit api\nexport var editDriverTypeId=function editDriverTypeId(id,pageMode){return{type:EDIT_DRIVER_TYPE_ID,id:id,pageMode:pageMode};};export var editDriverTypeSuccess=function editDriverTypeSuccess(editData){return{type:EDIT_DRIVER_TYPE_ID_SUCCESS,payload:editData};};// update api\nexport var updateDriverTypeID=function updateDriverTypeID(updateData,ID){return{type:UPDATE_DRIVER_TYPE_ID,updateData:updateData,ID:ID};};export var updateDriverTypeIDSuccess=function updateDriverTypeIDSuccess(updateMessage){return{type:UPDATE_DRIVER_TYPE_ID_SUCCESS,payload:updateMessage};};","map":{"version":3,"names":["POST_METHOD_FOR_DRIVER_MASTER","POST_METHOD_FOR_DRIVER_MASTER_SUCCESS","GET_METHOD_FOR_DRIVER_LIST","GET_METHOD_FOR_DRIVER_LIST_SUCCESS","DELETE_DRIVER_TYPE_ID","DELETE_DRIVER_TYPE_ID_SUCCESS","EDIT_DRIVER_TYPE_ID","EDIT_DRIVER_TYPE_ID_SUCCESS","UPDATE_DRIVER_TYPE_ID","UPDATE_DRIVER_TYPE_ID_SUCCESS","PostMethodForDriverMaster","data","type","PostMethod_ForDriverMasterSuccess","payload","getMethodForDriverList","getMethod_ForDriverListSuccess","delete_DriverType_ID","id","deleteDriverTypeIDSuccess","deleteMessage","editDriverTypeId","pageMode","editDriverTypeSuccess","editData","updateDriverTypeID","updateData","ID","updateDriverTypeIDSuccess","updateMessage"],"sources":["D:/GitProjects/Manthan/src/store/Administrator/DriverRedux/action.js"],"sourcesContent":["import {\r\n    POST_METHOD_FOR_DRIVER_MASTER,\r\n    POST_METHOD_FOR_DRIVER_MASTER_SUCCESS,\r\n    GET_METHOD_FOR_DRIVER_LIST,\r\n    GET_METHOD_FOR_DRIVER_LIST_SUCCESS,\r\n    DELETE_DRIVER_TYPE_ID,\r\n   DELETE_DRIVER_TYPE_ID_SUCCESS,\r\n  EDIT_DRIVER_TYPE_ID,\r\n  EDIT_DRIVER_TYPE_ID_SUCCESS,\r\n  UPDATE_DRIVER_TYPE_ID,\r\n  UPDATE_DRIVER_TYPE_ID_SUCCESS\r\n\r\n} from \"./actionType\";\r\n\r\nexport const PostMethodForDriverMaster= (data) => ({\r\n   type: POST_METHOD_FOR_DRIVER_MASTER,\r\n   data,\r\n });\r\n\r\n export const PostMethod_ForDriverMasterSuccess = (data) => ({\r\n   type: POST_METHOD_FOR_DRIVER_MASTER_SUCCESS,\r\n   payload: data,\r\n });\r\n \r\n // get method DriverList\r\n export const getMethodForDriverList = () => ({\r\n   type: GET_METHOD_FOR_DRIVER_LIST,\r\n   \r\n });\r\n \r\n export const getMethod_ForDriverListSuccess = (data) => ({\r\n   type: GET_METHOD_FOR_DRIVER_LIST_SUCCESS,\r\n   payload: data,\r\n });\r\n   \r\n\r\n ////delete api\r\nexport const delete_DriverType_ID = (id) => ({\r\n type: DELETE_DRIVER_TYPE_ID,\r\n id,\r\n\r\n});\r\nexport const deleteDriverTypeIDSuccess = (deleteMessage) => ({\r\n type: DELETE_DRIVER_TYPE_ID_SUCCESS,\r\n payload: deleteMessage\r\n});\r\n\r\n// edit api\r\nexport const editDriverTypeId = (id,pageMode) => ({\r\n type: EDIT_DRIVER_TYPE_ID,\r\n id,pageMode\r\n})\r\nexport const editDriverTypeSuccess = (editData) => ({\r\n type: EDIT_DRIVER_TYPE_ID_SUCCESS,\r\n \r\n payload: editData,\r\n})\r\n\r\n// update api\r\nexport const updateDriverTypeID = (updateData, ID) => ({\r\n type: UPDATE_DRIVER_TYPE_ID,\r\n updateData, ID,\r\n})\r\nexport const updateDriverTypeIDSuccess = (updateMessage) => ({\r\n type: UPDATE_DRIVER_TYPE_ID_SUCCESS,\r\n payload: updateMessage,\r\n})"],"mappings":"AAAA,OACIA,6BADJ,CAEIC,qCAFJ,CAGIC,0BAHJ,CAIIC,kCAJJ,CAKIC,qBALJ,CAMGC,6BANH,CAOEC,mBAPF,CAQEC,2BARF,CASEC,qBATF,CAUEC,6BAVF,KAYO,cAZP,CAcA,MAAO,IAAMC,0BAAyB,CAAE,QAA3BA,0BAA2B,CAACC,IAAD,QAAW,CAChDC,IAAI,CAAEZ,6BAD0C,CAEhDW,IAAI,CAAJA,IAFgD,CAAX,EAAjC,CAKN,MAAO,IAAME,kCAAiC,CAAG,QAApCA,kCAAoC,CAACF,IAAD,QAAW,CAC1DC,IAAI,CAAEX,qCADoD,CAE1Da,OAAO,CAAEH,IAFiD,CAAX,EAA1C,CAKP;AACA,MAAO,IAAMI,uBAAsB,CAAG,QAAzBA,uBAAyB,SAAO,CAC3CH,IAAI,CAAEV,0BADqC,CAAP,EAA/B,CAKP,MAAO,IAAMc,+BAA8B,CAAG,QAAjCA,+BAAiC,CAACL,IAAD,QAAW,CACvDC,IAAI,CAAET,kCADiD,CAEvDW,OAAO,CAAEH,IAF8C,CAAX,EAAvC,CAMP;AACD,MAAO,IAAMM,qBAAoB,CAAG,QAAvBA,qBAAuB,CAACC,EAAD,QAAS,CAC5CN,IAAI,CAAER,qBADsC,CAE5Cc,EAAE,CAAFA,EAF4C,CAAT,EAA7B,CAKP,MAAO,IAAMC,0BAAyB,CAAG,QAA5BA,0BAA4B,CAACC,aAAD,QAAoB,CAC5DR,IAAI,CAAEP,6BADsD,CAE5DS,OAAO,CAAEM,aAFmD,CAApB,EAAlC,CAKP;AACA,MAAO,IAAMC,iBAAgB,CAAG,QAAnBA,iBAAmB,CAACH,EAAD,CAAII,QAAJ,QAAkB,CACjDV,IAAI,CAAEN,mBAD2C,CAEjDY,EAAE,CAAFA,EAFiD,CAE9CI,QAAQ,CAARA,QAF8C,CAAlB,EAAzB,CAIP,MAAO,IAAMC,sBAAqB,CAAG,QAAxBA,sBAAwB,CAACC,QAAD,QAAe,CACnDZ,IAAI,CAAEL,2BAD6C,CAGnDO,OAAO,CAAEU,QAH0C,CAAf,EAA9B,CAMP;AACA,MAAO,IAAMC,mBAAkB,CAAG,QAArBA,mBAAqB,CAACC,UAAD,CAAaC,EAAb,QAAqB,CACtDf,IAAI,CAAEJ,qBADgD,CAEtDkB,UAAU,CAAVA,UAFsD,CAE1CC,EAAE,CAAFA,EAF0C,CAArB,EAA3B,CAIP,MAAO,IAAMC,0BAAyB,CAAG,QAA5BA,0BAA4B,CAACC,aAAD,QAAoB,CAC5DjB,IAAI,CAAEH,6BADsD,CAE5DK,OAAO,CAAEe,aAFmD,CAApB,EAAlC"},"metadata":{},"sourceType":"module"}
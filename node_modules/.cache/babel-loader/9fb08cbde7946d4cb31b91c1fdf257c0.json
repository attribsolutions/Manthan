{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitProjects\\\\Manthan\\\\src\\\\pages\\\\Adminisrator\\\\DriverPage\\\\driverListeditableList.js\";\n// import React, { useEffect, useState } from \"react\";\n// import Breadcrumbs from \"../../../components/Common/Breadcrumb\";\n// import { Col, Modal, Row } from \"reactstrap\";\n// import paginationFactory, {\n//   PaginationListStandalone,\n//   PaginationProvider,\n// } from \"react-bootstrap-table2-paginator\";\n// import ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\n// import BootstrapTable from \"react-bootstrap-table-next\";\n// import { useSelector, useDispatch } from \"react-redux\";\n// import \"../../../assets/scss/CustomeTable/datatables.scss\";\n// import DriverMaster from \"./DriverMaster\";\n// import { MetaTags } from \"react-meta-tags\";\n// import { useHistory } from \"react-router-dom\";\n// import {\n//   deleteDriverTypeIDSuccess,\n//   updateDriverTypeIDSuccess,\n//   getMethodForDriverList,\n//   editDriverTypeId,\n//   delete_DriverType_ID,\n//   PostMethod_ForDriverMasterSuccess,\n// } from \"../../../store/Administrator/DriverRedux/action\";\n// import { AlertState } from \"../../../store/actions\";\n// import { listPageCommonButtonFunction }\n//   from \"../../../components/Common/CmponentRelatedCommonFile/listPageCommonButtons\";\n//   import cellEditFactory, { Type } from 'react-bootstrap-table2-editor';\n// const DriverList = (props) => {\n//   const dispatch = useDispatch();\n//   const history = useHistory()\n//   const [userPageAccessState, setUserPageAccessState] = useState('');\n//   const [modal_center, setmodal_center] = useState(false);\n//   const {\n//     TableListData,\n//     editData,\n//     updateMessage,\n//     deleteMessage,\n//     PostAPIResponse,\n//     RoleAccessModifiedinSingleArray,\n//   } = useSelector(\n//     (state) => ({\n//       TableListData: state.DriverReducer.DriverList,\n//       editData: state.DriverReducer.editData,\n//       updateMessage: state.DriverReducer.updateMessage,\n//       deleteMessage: state.DriverReducer.deleteMessage,\n//       RoleAccessModifiedinSingleArray: state.Login.RoleAccessUpdateData,\n//       PostAPIResponse: state.DriverReducer.PostDataMessage,\n//     })\n//   );\n//   useEffect(() => {\n//     const locationPath = history.location.pathname\n//     let userAcc = RoleAccessModifiedinSingleArray.find((inx) => {\n//       return (`/${inx.ActualPagePath}` === locationPath)\n//     })\n//     if (!(userAcc === undefined)) {\n//       setUserPageAccessState(userAcc)\n//     }\n//   }, [RoleAccessModifiedinSingleArray])\n//   //  This UseEffect => Featch Modules List data  First Rendering\n//   useEffect(() => {\n//     dispatch(getMethodForDriverList());\n//   }, []);\n//   // This UseEffect => UpadateModal Success/Unsucces  Show and Hide Control Alert_modal\n//   useEffect(() => {\n//     if (updateMessage.Status === true && updateMessage.StatusCode === 200) {\n//       dispatch(updateDriverTypeIDSuccess({ Status: false }));\n//       dispatch(\n//         AlertState({\n//           Type: 1,\n//           Status: true,\n//           Message: updateMessage.Message,\n//           AfterResponseAction: getMethodForDriverList,\n//         })\n//       );\n//       tog_center();\n//     } else if (updateMessage.Status === true) {\n//       dispatch(updateDriverTypeIDSuccess({ Status: false }));\n//       dispatch(\n//         AlertState({\n//           Type: 3,\n//           Status: true,\n//           Message: JSON.stringify(updateMessage.Message),\n//         })\n//       );\n//     }\n//   }, [updateMessage]);\n//   useEffect(() => {\n//     if (deleteMessage.Status === true && deleteMessage.StatusCode === 200) {\n//       dispatch(deleteDriverTypeIDSuccess({ Status: false }));\n//       dispatch(\n//         AlertState({\n//           Type: 1,\n//           Status: true,\n//           Message: deleteMessage.Message,\n//           AfterResponseAction: getMethodForDriverList,\n//         })\n//       );\n//     } else if (deleteMessage.Status === true) {\n//       dispatch(deleteDriverTypeIDSuccess({ Status: false }));\n//       dispatch(\n//         AlertState({\n//           Type: 3,\n//           Status: true,\n//           Message: JSON.stringify(deleteMessage.Message),\n//         })\n//       );\n//     }\n//   }, [deleteMessage]);\n//   useEffect(() => {\n//     if ((PostAPIResponse.Status === true) && (PostAPIResponse.StatusCode === 200)) {\n//       dispatch(PostMethod_ForDriverMasterSuccess({ Status: false }))\n//       tog_center();\n//       dispatch(getMethodForDriverList());\n//       dispatch(AlertState({\n//         Type: 1,\n//         Status: true,\n//         Message: PostAPIResponse.Message,\n//       }))\n//     }\n//     else if ((PostAPIResponse.Status === true)) {\n//       dispatch(PostMethod_ForDriverMasterSuccess({ Status: false }))\n//       dispatch(AlertState({\n//         Type: 4,\n//         Status: true,\n//         Message: JSON.stringify(PostAPIResponse.Message),\n//         RedirectPath: false,\n//         AfterResponseAction: false\n//       }));\n//     }\n//   }, [PostAPIResponse.Status])\n//   // Edit Modal Show When Edit Data is true\n//   useEffect(() => {\n//     if (editData.Status === true) {\n//       tog_center();\n//     }\n//   }, [editData]);\n//   function tog_center() {\n//     setmodal_center(!modal_center);\n//   }\n//   const defaultSorted = [\n//     {\n//       dataField: \"Name\", // if dataField is not match to any column you defined, it will be ignored.\n//       order: \"asc\", // desc or asc\n//     },\n//   ];\n//   const pageOptions = {\n//     sizePerPage: 10,\n//     totalSize: TableListData.length,\n//     custom: true,\n//   };\n//   const pagesListColumns = [\n//     {\n//       text: \"Name\",\n//       dataField: \"Name\",\n//       sort: true,\n//       editor: {\n//         type: Type.SELECT,\n//         getOptions: (setOptions, { row, column }) => {\n//           console.log(`current editing row id: ${row.id}`,row);\n//           console.log(`current editing column: ${column.dataField}`,column);\n//           console.log(`setOptions editing column: ${setOptions}`,setOptions);\n//           return [{\n//             value: 'A',\n//             label: 'Avxv'\n//           }, {\n//             value: 'B',\n//             label: 'Bcvvx'\n//           }, {\n//             value: 'C',\n//             label: 'Ccvcv'\n//           }, {\n//             value: 'D',\n//             label: 'Dcvcv'\n//           }, {\n//             value: 'Ecvcv',\n//             label: 'Evcvcvc'\n//           }];\n//         }\n//       }\n//     },\n//     {\n//       text: \"Date Of Birth\",\n//       dataField: \"DOB\",\n//       sort: true,\n//     },\n//     {key: 'color',\n//                 toggle: false,\n//                 dataField:'Address',\n//                 text: 'Color',\n//                 headerStyle: {\n//                     'color' : '#0E253A',\n//                     'fontFamily' : 'Teko',\n//                     'fontSize' : '20px',\n//                     'paddingBottom': '18px',\n//                     'fontWeight' : '400'\n//                 },\n//                 events: {\n//                     onClick: (e) => {\n//                         console.log('color clicked')\n//                         this.handleShowColorPicker()\n//                     },\n//                 },\n//                 formatExtraData: {\n//                     colorCheck: this.state.displayColorPicker\n//                   },\n//                 formatter: (cell, row, rowIndex, formatExtraData) => {\n//                     if (formatExtraData['colorCheck']) { \n//                         return(\n//                     <div className={\"color-picker-container\"}>\n//                     <div\n//                       className={\"color-picker-field\"}\n//                       name={\"color-picker-field\"}\n//                       style={{ width: \"40px\", height: \"25px\", backgroundColor: this.state.changeColor}}\n//                     />\n//                     <div className={\"color-picker-palette\"}>\n//                         <div\n//                           className={\"color-picker-cover\"}\n//                           onClick={() => this.handleCloseColorPicker()}\n//                         />\n//                         <ChromePicker\n//                           color={this.state.color}\n//                           onChange={this.changeColorPicker}\n//                         />\n//                     </div>\n//                     </div>)\n//                 } else { \n//                     this.setState({displayColorPicker : false})\n//                     return(\n//                     <div className={\"color-picker-container\"}>\n//                     <div\n//                       className={\"color-picker-field\"}\n//                       name={\"color-picker-field\"}\n//                       style={{ width: \"30px\", height: \"25px\", backgroundColor: this.state.changeColor}}\n//                     />\n//                     </div> )\n//                 }\n//                 }\n//             },\n//     {\n//       text: \"Address\",\n//       dataField: \"Address\",\n//       sort: true,\n//     //   editorRenderer: (editorProps, value, row, column, rowIndex, columnIndex) => (\n//         // <QualityRanger { ...editorProps } value={ value } />\n//     //   )\n//     },\n//     {\n//       text: \"UID\",\n//       dataField: \"UID\",\n//       sort: true,\n//     },\n//     // For Edit, Delete ,and View Button Common Code function\n//     listPageCommonButtonFunction({\n//       dispatchHook: dispatch,\n//       ButtonMsgLable: \"DriverType\",\n//       deleteName: \"Name\",\n//       userPageAccessState: userPageAccessState,\n//       editActionFun: editDriverTypeId,\n//       deleteActionFun: delete_DriverType_ID\n//     })\n//   ];\n//   if (!(userPageAccessState === '')) {\n//     return (\n//       <React.Fragment>\n//         <MetaTags>\n//           <title>DriverList| FoodERP-React FrontEnd</title>\n//         </MetaTags>\n//         <div className=\"page-content\">\n//           <PaginationProvider pagination={paginationFactory(pageOptions)}>\n//             {({ paginationProps, paginationTableProps }) => (\n//               <ToolkitProvider\n//                 keyField=\"id\"\n//                 defaultSorted={defaultSorted}\n//                 data={TableListData}\n//                 columns={pagesListColumns}\n//                 search\n//               >\n//                 {(toolkitProps) => (\n//                   <React.Fragment>\n//                     <Breadcrumbs\n//                       title={\"Count :\"}\n//                       breadcrumbItem={userPageAccessState.PageHeading}\n//                       IsButtonVissible={(userPageAccessState.RoleAccess_IsSave) ? true : false}\n//                       SearchProps={toolkitProps.searchProps}\n//                       breadcrumbCount={`Product Count: ${TableListData.length}`}\n//                       IsSearchVissible={true}\n//                       RedirctPath={`/DriverMaster`}\n//                       isExcelButtonVisible={true}\n//                       ExcelData={TableListData}\n//                     />\n//                     <Row>\n//                       <Col xl=\"12\">\n//                         <div className=\"table-responsive\">\n//                           <BootstrapTable\n//                             keyField={\"id\"}\n//                             responsive\n//                             bordered={false}\n//                             striped={false}\n//                             cellEdit={ cellEditFactory({ mode: 'click', blurToSave: true }) }\n//                             classes={\"table  table-bordered\"}\n//                             {...toolkitProps.baseProps}\n//                             {...paginationTableProps}\n//                           />\n//                         </div>\n//                       </Col>\n//                     </Row>\n//                     <Row className=\"align-items-md-center mt-30\">\n//                       <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\n//                         <PaginationListStandalone {...paginationProps} />\n//                       </Col>\n//                     </Row>\n//                   </React.Fragment>\n//                 )}\n//               </ToolkitProvider>\n//             )}\n//           </PaginationProvider>\n//           <Modal\n//             isOpen={modal_center}\n//             toggle={() => {\n//               tog_center();\n//             }}\n//             size=\"xl\"\n//           >\n//             {/* <A state={editData.Data} relatatedPage={\"/DriverMaster\"} pageMode={editData.pageMode} /> */}\n//           </Modal>\n//         </div>\n//       </React.Fragment>\n//     );\n//   }\n//   else {\n//     return (\n//       <React.Fragment></React.Fragment>\n//     )\n//   }\n// }\n// export default DriverList;\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport BootstrapTable from \"react-bootstrap-table-next\"; // import \"./styles.css\";\n\nimport { ChromePicker } from \"react-color\";\nimport { Input } from \"reactstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class DriverList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleShowColorPicker = () => {\n      // this will trigger to rerender with colorPicker right here\n      this.setState({\n        displayColorPicker: true\n      });\n    };\n\n    this.handleCloseColorPicker = () => {\n      const newColor = this.state.changeColor;\n      const selectedResultsTableIndex = this.state.selectedResultsTableIndex;\n      let dataResultsTable = [...this.state.dataResultsTable];\n      const oldColor = dataResultsTable[selectedResultsTableIndex].color; // dataResultsTable[selectedResultsTableIndex].color = newColor;\n      // . This is correct way to update data immutability\n\n      const newDataResultsTable = this.state.dataResultsTable.map((row, index) => {\n        if (index === selectedResultsTableIndex) {\n          return { ...row,\n            color: newColor\n          };\n        }\n\n        return { ...row\n        };\n      });\n      this.setState({\n        dataResultsTable: newDataResultsTable\n      });\n      this.setState({\n        displayColorPicker: false\n      });\n      let dataResultsTable2 = [...this.state.dataResultsTable];\n      const newStateColor = dataResultsTable2[selectedResultsTableIndex].color;\n      console.log(`changing color from ${oldColor} to ${newStateColor}`);\n    };\n\n    this.changeColorPicker = color => {\n      this.setState({\n        color: color.rgb,\n        changeColor: color.hex\n      });\n    };\n\n    this.state = {\n      dataResultsTable: [{\n        id: 1,\n        name: \"Item 1\",\n        price: 100,\n        color: \"#0000ff\"\n      }, {\n        id: 2,\n        name: \"Item 2\",\n        price: 102,\n        color: \"#f000ff\"\n      }],\n      selectedResultsTableIndex: 0,\n      displayColorPicker: false,\n      xPosColorPicker: \"0px\",\n      yPosColorPicker: \"0px\",\n      changeColor: \"#999\",\n      color: {\n        r: \"0\",\n        g: \"9\",\n        b: \"153\",\n        a: \"1\"\n      }\n    };\n    this.columns = [{\n      dataField: \"id\",\n      text: \"Product ID\"\n    }, {\n      dataField: \"name\",\n      text: \"Product Name\"\n    }, {\n      dataField: \"price\",\n      text: \"Product Price\",\n      editable: (content, row, rowIndex, columnIndex) => {\n        debugger;\n      }\n    }, {\n      dataField: \"color\",\n      text: \"Color\",\n      formatter: (e1, column1, columnIndex1, row1, rowIndex1) => {\n        debugger;\n        return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 25\n        }, void 0);\n      },\n      events: {\n        onClick: (e, column, columnIndex, row, rowIndex) => {\n          debugger;\n\n          column.formatter = (e1, column1, columnIndex1, row1, rowIndex1) => {\n            debugger;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 37\n              }, void 0)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 434,\n              columnNumber: 33\n            }, void 0);\n          }; // column.formatter((cell)=>(\n          //     <Input></Input>\n          //   ))\n          // // get the x,y coordinates of the mouse click\n          // document.addEventListener(\"click\", getClickPosition, false);\n          // function getClickPosition(e) {\n          //   return [e.clientX, e.clientY];\n          // }\n          // const [xPosClick, yPosClick] = getClickPosition(e);\n          // this.setState({ xPosColorPicker: `${xPosClick}px` });\n          // this.setState({ yPosColorPicker: `${yPosClick}px` });\n          // // get the color of the selected row\n          // var id = rowIndex;\n          // this.setState({ selectedResultsTableIndex: id });\n          // let clickedColor = this.state.dataResultsTable[id].color;\n          // this.setState({ color: clickedColor });\n          // // Make sure that if no new color is choosen the old one stays\n          // this.setState({ changeColor: clickedColor });\n          // // show the ColorPicker\n          // this.handleShowColorPicker();\n\n        }\n      }\n    }];\n  } // color picker functions\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \"20px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"h2\",\n          children: \"Products\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(BootstrapTable, {\n          keyField: \"id\",\n          data: this.state.dataResultsTable,\n          columns: this.columns\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.displayColorPicker && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: \"fixed\",\n            top: this.state.yPosColorPicker,\n            left: this.state.xPosColorPicker\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"color-picker-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"color-picker-palette\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"color-picker-cover\",\n                onClick: () => this.handleCloseColorPicker()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 527,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ChromePicker, {\n                disableAlpha: true,\n                color: this.state.color,\n                onChange: this.changeColorPicker\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 531,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 526,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 17\n      }, this), \"Check the console log that the color in the state changed but not in the table.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","Component","ReactDOM","BootstrapTable","ChromePicker","Input","DriverList","constructor","props","handleShowColorPicker","setState","displayColorPicker","handleCloseColorPicker","newColor","state","changeColor","selectedResultsTableIndex","dataResultsTable","oldColor","color","newDataResultsTable","map","row","index","dataResultsTable2","newStateColor","console","log","changeColorPicker","rgb","hex","id","name","price","xPosColorPicker","yPosColorPicker","r","g","b","a","columns","dataField","text","editable","content","rowIndex","columnIndex","formatter","e1","column1","columnIndex1","row1","rowIndex1","events","onClick","e","column","render","padding","position","top","left"],"sources":["D:/GitProjects/Manthan/src/pages/Adminisrator/DriverPage/driverListeditableList.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\n// import { Col, Modal, Row } from \"reactstrap\";\r\n// import paginationFactory, {\r\n//   PaginationListStandalone,\r\n//   PaginationProvider,\r\n// } from \"react-bootstrap-table2-paginator\";\r\n// import ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n// import { useSelector, useDispatch } from \"react-redux\";\r\n// import \"../../../assets/scss/CustomeTable/datatables.scss\";\r\n// import DriverMaster from \"./DriverMaster\";\r\n// import { MetaTags } from \"react-meta-tags\";\r\n// import { useHistory } from \"react-router-dom\";\r\n// import {\r\n//   deleteDriverTypeIDSuccess,\r\n//   updateDriverTypeIDSuccess,\r\n//   getMethodForDriverList,\r\n//   editDriverTypeId,\r\n//   delete_DriverType_ID,\r\n//   PostMethod_ForDriverMasterSuccess,\r\n// } from \"../../../store/Administrator/DriverRedux/action\";\r\n// import { AlertState } from \"../../../store/actions\";\r\n// import { listPageCommonButtonFunction }\r\n//   from \"../../../components/Common/CmponentRelatedCommonFile/listPageCommonButtons\";\r\n\r\n//   import cellEditFactory, { Type } from 'react-bootstrap-table2-editor';\r\n\r\n\r\n// const DriverList = (props) => {\r\n\r\n//   const dispatch = useDispatch();\r\n//   const history = useHistory()\r\n\r\n//   const [userPageAccessState, setUserPageAccessState] = useState('');\r\n//   const [modal_center, setmodal_center] = useState(false);\r\n\r\n//   const {\r\n//     TableListData,\r\n//     editData,\r\n//     updateMessage,\r\n//     deleteMessage,\r\n//     PostAPIResponse,\r\n//     RoleAccessModifiedinSingleArray,\r\n//   } = useSelector(\r\n//     (state) => ({\r\n//       TableListData: state.DriverReducer.DriverList,\r\n//       editData: state.DriverReducer.editData,\r\n//       updateMessage: state.DriverReducer.updateMessage,\r\n//       deleteMessage: state.DriverReducer.deleteMessage,\r\n//       RoleAccessModifiedinSingleArray: state.Login.RoleAccessUpdateData,\r\n//       PostAPIResponse: state.DriverReducer.PostDataMessage,\r\n//     })\r\n//   );\r\n\r\n\r\n//   useEffect(() => {\r\n//     const locationPath = history.location.pathname\r\n//     let userAcc = RoleAccessModifiedinSingleArray.find((inx) => {\r\n//       return (`/${inx.ActualPagePath}` === locationPath)\r\n//     })\r\n//     if (!(userAcc === undefined)) {\r\n//       setUserPageAccessState(userAcc)\r\n//     }\r\n//   }, [RoleAccessModifiedinSingleArray])\r\n\r\n//   //  This UseEffect => Featch Modules List data  First Rendering\r\n//   useEffect(() => {\r\n//     dispatch(getMethodForDriverList());\r\n//   }, []);\r\n\r\n//   // This UseEffect => UpadateModal Success/Unsucces  Show and Hide Control Alert_modal\r\n//   useEffect(() => {\r\n\r\n//     if (updateMessage.Status === true && updateMessage.StatusCode === 200) {\r\n//       dispatch(updateDriverTypeIDSuccess({ Status: false }));\r\n//       dispatch(\r\n//         AlertState({\r\n//           Type: 1,\r\n//           Status: true,\r\n//           Message: updateMessage.Message,\r\n//           AfterResponseAction: getMethodForDriverList,\r\n//         })\r\n//       );\r\n//       tog_center();\r\n//     } else if (updateMessage.Status === true) {\r\n//       dispatch(updateDriverTypeIDSuccess({ Status: false }));\r\n//       dispatch(\r\n//         AlertState({\r\n//           Type: 3,\r\n//           Status: true,\r\n//           Message: JSON.stringify(updateMessage.Message),\r\n//         })\r\n//       );\r\n//     }\r\n//   }, [updateMessage]);\r\n\r\n//   useEffect(() => {\r\n//     if (deleteMessage.Status === true && deleteMessage.StatusCode === 200) {\r\n//       dispatch(deleteDriverTypeIDSuccess({ Status: false }));\r\n//       dispatch(\r\n//         AlertState({\r\n//           Type: 1,\r\n//           Status: true,\r\n//           Message: deleteMessage.Message,\r\n//           AfterResponseAction: getMethodForDriverList,\r\n//         })\r\n//       );\r\n//     } else if (deleteMessage.Status === true) {\r\n//       dispatch(deleteDriverTypeIDSuccess({ Status: false }));\r\n//       dispatch(\r\n//         AlertState({\r\n//           Type: 3,\r\n//           Status: true,\r\n//           Message: JSON.stringify(deleteMessage.Message),\r\n//         })\r\n//       );\r\n//     }\r\n//   }, [deleteMessage]);\r\n\r\n\r\n//   useEffect(() => {\r\n\r\n//     if ((PostAPIResponse.Status === true) && (PostAPIResponse.StatusCode === 200)) {\r\n//       dispatch(PostMethod_ForDriverMasterSuccess({ Status: false }))\r\n//       tog_center();\r\n//       dispatch(getMethodForDriverList());\r\n//       dispatch(AlertState({\r\n//         Type: 1,\r\n//         Status: true,\r\n//         Message: PostAPIResponse.Message,\r\n//       }))\r\n//     }\r\n\r\n//     else if ((PostAPIResponse.Status === true)) {\r\n//       dispatch(PostMethod_ForDriverMasterSuccess({ Status: false }))\r\n//       dispatch(AlertState({\r\n//         Type: 4,\r\n//         Status: true,\r\n//         Message: JSON.stringify(PostAPIResponse.Message),\r\n//         RedirectPath: false,\r\n//         AfterResponseAction: false\r\n//       }));\r\n//     }\r\n\r\n\r\n//   }, [PostAPIResponse.Status])\r\n//   // Edit Modal Show When Edit Data is true\r\n//   useEffect(() => {\r\n//     if (editData.Status === true) {\r\n//       tog_center();\r\n//     }\r\n//   }, [editData]);\r\n\r\n//   function tog_center() {\r\n//     setmodal_center(!modal_center);\r\n//   }\r\n\r\n//   const defaultSorted = [\r\n//     {\r\n//       dataField: \"Name\", // if dataField is not match to any column you defined, it will be ignored.\r\n//       order: \"asc\", // desc or asc\r\n//     },\r\n//   ];\r\n\r\n//   const pageOptions = {\r\n//     sizePerPage: 10,\r\n//     totalSize: TableListData.length,\r\n//     custom: true,\r\n//   };\r\n\r\n//   const pagesListColumns = [\r\n//     {\r\n//       text: \"Name\",\r\n//       dataField: \"Name\",\r\n//       sort: true,\r\n//       editor: {\r\n//         type: Type.SELECT,\r\n//         getOptions: (setOptions, { row, column }) => {\r\n//           console.log(`current editing row id: ${row.id}`,row);\r\n//           console.log(`current editing column: ${column.dataField}`,column);\r\n//           console.log(`setOptions editing column: ${setOptions}`,setOptions);\r\n//           return [{\r\n//             value: 'A',\r\n//             label: 'Avxv'\r\n//           }, {\r\n//             value: 'B',\r\n//             label: 'Bcvvx'\r\n//           }, {\r\n//             value: 'C',\r\n//             label: 'Ccvcv'\r\n//           }, {\r\n//             value: 'D',\r\n//             label: 'Dcvcv'\r\n//           }, {\r\n//             value: 'Ecvcv',\r\n//             label: 'Evcvcvc'\r\n//           }];\r\n//         }\r\n//       }\r\n//     },\r\n\r\n//     {\r\n//       text: \"Date Of Birth\",\r\n//       dataField: \"DOB\",\r\n//       sort: true,\r\n//     },\r\n//     {key: 'color',\r\n//                 toggle: false,\r\n//                 dataField:'Address',\r\n//                 text: 'Color',\r\n//                 headerStyle: {\r\n//                     'color' : '#0E253A',\r\n//                     'fontFamily' : 'Teko',\r\n//                     'fontSize' : '20px',\r\n//                     'paddingBottom': '18px',\r\n//                     'fontWeight' : '400'\r\n//                 },\r\n//                 events: {\r\n//                     onClick: (e) => {\r\n//                         console.log('color clicked')\r\n//                         this.handleShowColorPicker()\r\n//                     },\r\n//                 },\r\n//                 formatExtraData: {\r\n//                     colorCheck: this.state.displayColorPicker\r\n//                   },\r\n//                 formatter: (cell, row, rowIndex, formatExtraData) => {\r\n//                     if (formatExtraData['colorCheck']) { \r\n//                         return(\r\n//                     <div className={\"color-picker-container\"}>\r\n//                     <div\r\n//                       className={\"color-picker-field\"}\r\n//                       name={\"color-picker-field\"}\r\n//                       style={{ width: \"40px\", height: \"25px\", backgroundColor: this.state.changeColor}}\r\n//                     />\r\n//                     <div className={\"color-picker-palette\"}>\r\n//                         <div\r\n//                           className={\"color-picker-cover\"}\r\n//                           onClick={() => this.handleCloseColorPicker()}\r\n//                         />\r\n//                         <ChromePicker\r\n//                           color={this.state.color}\r\n//                           onChange={this.changeColorPicker}\r\n//                         />\r\n//                     </div>\r\n//                     </div>)\r\n//                 } else { \r\n//                     this.setState({displayColorPicker : false})\r\n//                     return(\r\n//                     <div className={\"color-picker-container\"}>\r\n//                     <div\r\n//                       className={\"color-picker-field\"}\r\n//                       name={\"color-picker-field\"}\r\n//                       style={{ width: \"30px\", height: \"25px\", backgroundColor: this.state.changeColor}}\r\n//                     />\r\n//                     </div> )\r\n//                 }\r\n//                 }\r\n//             },\r\n//     {\r\n//       text: \"Address\",\r\n//       dataField: \"Address\",\r\n//       sort: true,\r\n//     //   editorRenderer: (editorProps, value, row, column, rowIndex, columnIndex) => (\r\n\r\n//         // <QualityRanger { ...editorProps } value={ value } />\r\n//     //   )\r\n//     },\r\n//     {\r\n//       text: \"UID\",\r\n//       dataField: \"UID\",\r\n//       sort: true,\r\n//     },\r\n\r\n//     // For Edit, Delete ,and View Button Common Code function\r\n//     listPageCommonButtonFunction({\r\n//       dispatchHook: dispatch,\r\n//       ButtonMsgLable: \"DriverType\",\r\n//       deleteName: \"Name\",\r\n//       userPageAccessState: userPageAccessState,\r\n//       editActionFun: editDriverTypeId,\r\n//       deleteActionFun: delete_DriverType_ID\r\n//     })\r\n//   ];\r\n\r\n\r\n\r\n\r\n\r\n//   if (!(userPageAccessState === '')) {\r\n//     return (\r\n//       <React.Fragment>\r\n//         <MetaTags>\r\n//           <title>DriverList| FoodERP-React FrontEnd</title>\r\n//         </MetaTags>\r\n//         <div className=\"page-content\">\r\n//           <PaginationProvider pagination={paginationFactory(pageOptions)}>\r\n//             {({ paginationProps, paginationTableProps }) => (\r\n//               <ToolkitProvider\r\n//                 keyField=\"id\"\r\n//                 defaultSorted={defaultSorted}\r\n//                 data={TableListData}\r\n//                 columns={pagesListColumns}\r\n//                 search\r\n//               >\r\n//                 {(toolkitProps) => (\r\n//                   <React.Fragment>\r\n//                     <Breadcrumbs\r\n//                       title={\"Count :\"}\r\n//                       breadcrumbItem={userPageAccessState.PageHeading}\r\n//                       IsButtonVissible={(userPageAccessState.RoleAccess_IsSave) ? true : false}\r\n//                       SearchProps={toolkitProps.searchProps}\r\n//                       breadcrumbCount={`Product Count: ${TableListData.length}`}\r\n//                       IsSearchVissible={true}\r\n//                       RedirctPath={`/DriverMaster`}\r\n//                       isExcelButtonVisible={true}\r\n//                       ExcelData={TableListData}\r\n//                     />\r\n//                     <Row>\r\n//                       <Col xl=\"12\">\r\n//                         <div className=\"table-responsive\">\r\n//                           <BootstrapTable\r\n//                             keyField={\"id\"}\r\n//                             responsive\r\n//                             bordered={false}\r\n//                             striped={false}\r\n//                             cellEdit={ cellEditFactory({ mode: 'click', blurToSave: true }) }\r\n//                             classes={\"table  table-bordered\"}\r\n//                             {...toolkitProps.baseProps}\r\n//                             {...paginationTableProps}\r\n//                           />\r\n//                         </div>\r\n//                       </Col>\r\n//                     </Row>\r\n//                     <Row className=\"align-items-md-center mt-30\">\r\n//                       <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n//                         <PaginationListStandalone {...paginationProps} />\r\n//                       </Col>\r\n//                     </Row>\r\n//                   </React.Fragment>\r\n//                 )}\r\n//               </ToolkitProvider>\r\n//             )}\r\n//           </PaginationProvider>\r\n//           <Modal\r\n//             isOpen={modal_center}\r\n//             toggle={() => {\r\n//               tog_center();\r\n//             }}\r\n//             size=\"xl\"\r\n//           >\r\n\r\n//             {/* <A state={editData.Data} relatatedPage={\"/DriverMaster\"} pageMode={editData.pageMode} /> */}\r\n//           </Modal>\r\n//         </div>\r\n//       </React.Fragment>\r\n//     );\r\n//   }\r\n//   else {\r\n//     return (\r\n//       <React.Fragment></React.Fragment>\r\n//     )\r\n//   }\r\n// }\r\n\r\n// export default DriverList;\r\n\r\n\r\nimport React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\n// import \"./styles.css\";\r\nimport { ChromePicker } from \"react-color\";\r\nimport { Input } from \"reactstrap\";\r\n\r\nexport default class DriverList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dataResultsTable: [\r\n                { id: 1, name: \"Item 1\", price: 100, color: \"#0000ff\" },\r\n                { id: 2, name: \"Item 2\", price: 102, color: \"#f000ff\" }\r\n            ],\r\n            selectedResultsTableIndex: 0,\r\n            displayColorPicker: false,\r\n            xPosColorPicker: \"0px\",\r\n            yPosColorPicker: \"0px\",\r\n            changeColor: \"#999\",\r\n            color: {\r\n                r: \"0\",\r\n                g: \"9\",\r\n                b: \"153\",\r\n                a: \"1\"\r\n            }\r\n        };\r\n\r\n        this.columns = [\r\n            {\r\n                dataField: \"id\",\r\n                text: \"Product ID\"\r\n            },\r\n            {\r\n                dataField: \"name\",\r\n                text: \"Product Name\"\r\n            },\r\n            {\r\n                dataField: \"price\",\r\n                text: \"Product Price\",\r\n                editable: (content, row, rowIndex, columnIndex) => {\r\n                    debugger\r\n                }\r\n            },\r\n            {\r\n                dataField: \"color\",\r\n                text: \"Color\",\r\n                formatter: (e1, column1, columnIndex1, row1, rowIndex1) => {\r\n                    debugger\r\n                    return (\r\n                        <div\r\n                        // style={{ width: \"25px\", height: \"25px\", backgroundColor: cell }}\r\n                        >\r\n                            {/* <Input /> */}\r\n                        </div>\r\n                    )\r\n                },\r\n\r\n                events: {\r\n                    onClick: (e, column, columnIndex, row, rowIndex) => {\r\n                        debugger\r\n                        column.formatter = (e1, column1, columnIndex1, row1, rowIndex1) => {\r\n                            debugger\r\n                            return (\r\n                                <div\r\n                                // style={{ width: \"25px\", height: \"25px\", backgroundColor: cell }}\r\n                                >\r\n                                    <Input />\r\n                                </div>\r\n                            )\r\n                        }\r\n            // column.formatter((cell)=>(\r\n            //     <Input></Input>\r\n            //   ))\r\n            // // get the x,y coordinates of the mouse click\r\n            // document.addEventListener(\"click\", getClickPosition, false);\r\n            // function getClickPosition(e) {\r\n            //   return [e.clientX, e.clientY];\r\n            // }\r\n            // const [xPosClick, yPosClick] = getClickPosition(e);\r\n            // this.setState({ xPosColorPicker: `${xPosClick}px` });\r\n            // this.setState({ yPosColorPicker: `${yPosClick}px` });\r\n            // // get the color of the selected row\r\n            // var id = rowIndex;\r\n            // this.setState({ selectedResultsTableIndex: id });\r\n            // let clickedColor = this.state.dataResultsTable[id].color;\r\n            // this.setState({ color: clickedColor });\r\n            // // Make sure that if no new color is choosen the old one stays\r\n            // this.setState({ changeColor: clickedColor });\r\n            // // show the ColorPicker\r\n            // this.handleShowColorPicker();\r\n          }\r\n                }\r\n            }\r\n        ];\r\n    }\r\n\r\n    // color picker functions\r\n    handleShowColorPicker = () => {\r\n        // this will trigger to rerender with colorPicker right here\r\n        this.setState({ displayColorPicker: true });\r\n    };\r\n\r\n    handleCloseColorPicker = () => {\r\n        const newColor = this.state.changeColor;\r\n        const selectedResultsTableIndex = this.state.selectedResultsTableIndex;\r\n\r\n        let dataResultsTable = [...this.state.dataResultsTable];\r\n        const oldColor = dataResultsTable[selectedResultsTableIndex].color;\r\n        // dataResultsTable[selectedResultsTableIndex].color = newColor;\r\n\r\n        // . This is correct way to update data immutability\r\n        const newDataResultsTable = this.state.dataResultsTable.map((row, index) => {\r\n            if (index === selectedResultsTableIndex) {\r\n                return {\r\n                    ...row,\r\n                    color: newColor\r\n                };\r\n            }\r\n            return { ...row };\r\n        })\r\n\r\n        this.setState({ dataResultsTable: newDataResultsTable });\r\n\r\n        this.setState({ displayColorPicker: false });\r\n\r\n        let dataResultsTable2 = [...this.state.dataResultsTable];\r\n        const newStateColor = dataResultsTable2[selectedResultsTableIndex].color;\r\n        console.log(`changing color from ${oldColor} to ${newStateColor}`);\r\n    };\r\n\r\n    changeColorPicker = color => {\r\n        this.setState({ color: color.rgb, changeColor: color.hex });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div style={{ padding: \"20px\" }}>\r\n                    <h1 className=\"h2\">Products</h1>\r\n                    <BootstrapTable\r\n                        keyField=\"id\"\r\n                        data={this.state.dataResultsTable}\r\n                        columns={this.columns}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    {this.state.displayColorPicker && (\r\n                        <div\r\n                            style={{\r\n                                position: \"fixed\",\r\n                                top: this.state.yPosColorPicker,\r\n                                left: this.state.xPosColorPicker\r\n                            }}\r\n                        >\r\n                            <div className={\"color-picker-container\"}>\r\n                                <div className={\"color-picker-palette\"}>\r\n                                    <div\r\n                                        className={\"color-picker-cover\"}\r\n                                        onClick={() => this.handleCloseColorPicker()}\r\n                                    />\r\n                                    <ChromePicker\r\n                                        disableAlpha\r\n                                        color={this.state.color}\r\n                                        onChange={this.changeColorPicker}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                Check the console log that the color in the state changed but not in the\r\n                table.\r\n            </div>\r\n        );\r\n    }\r\n}"],"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"},"metadata":{},"sourceType":"module"}
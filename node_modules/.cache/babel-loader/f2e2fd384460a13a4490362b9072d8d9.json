{"ast":null,"code":"import { call, put, takeEvery } from \"redux-saga/effects\";\nimport { getMethod_ForProductTypesAPISuccess, PostMethod_ForProductTypesAPISuccess } from \"./action\";\nimport { GET_METHOD_HANDLER_FOR_PRODUCT_TYPES_API, POST_METHOD_HANDLER_FOR_PRODUCT_TYPES_API } from \"./actionTypes\";\nimport { AlertState } from \"../../Utilites/CustomAlertRedux/actions\";\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\nimport { get_Product_Category_Type_Master_API, Post_Product_Types_API } from \"../../../helpers/backend_helper\"; // post api\n\nfunction* Post_Method_ForProductTypes_GenFun(_ref) {\n  let {\n    data\n  } = _ref;\n  yield put(SpinnerState(true));\n\n  try {\n    const response = yield call(Post_Product_Types_API, data);\n    yield put(SpinnerState(false));\n    yield put(PostMethod_ForProductTypesAPISuccess(response));\n  } catch (error) {\n    yield put(SpinnerState(false));\n    yield put(AlertState({\n      Type: 4,\n      Status: true,\n      Message: \"500 Error Message\"\n    }));\n  }\n} ///  ProductTypes dropdown list\n\n\n_c = Post_Method_ForProductTypes_GenFun;\n\nfunction* get_Method_ForProductTypes_GenFun() {\n  debugger;\n\n  try {\n    const response = yield call(get_Product_Category_Type_Master_API);\n    yield put(getMethod_ForProductTypesAPISuccess(response.Data));\n    console.log(\"response\", response);\n  } catch (error) {\n    console.log(\"Product Types API page error\", error);\n  }\n}\n\nfunction* ProductTypesSaga() {\n  yield takeEvery(POST_METHOD_HANDLER_FOR_PRODUCT_TYPES_API, Post_Method_ForProductTypes_GenFun);\n  yield takeEvery(GET_METHOD_HANDLER_FOR_PRODUCT_TYPES_API, get_Method_ForProductTypes_GenFun);\n}\n\n_c2 = ProductTypesSaga;\nexport default ProductTypesSaga;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Post_Method_ForProductTypes_GenFun\");\n$RefreshReg$(_c2, \"ProductTypesSaga\");","map":{"version":3,"names":["call","put","takeEvery","getMethod_ForProductTypesAPISuccess","PostMethod_ForProductTypesAPISuccess","GET_METHOD_HANDLER_FOR_PRODUCT_TYPES_API","POST_METHOD_HANDLER_FOR_PRODUCT_TYPES_API","AlertState","SpinnerState","get_Product_Category_Type_Master_API","Post_Product_Types_API","Post_Method_ForProductTypes_GenFun","data","response","error","Type","Status","Message","get_Method_ForProductTypes_GenFun","Data","console","log","ProductTypesSaga"],"sources":["D:/GitProjects/Manthan/src/store/Administrator/ProductTypesRedux/saga.js"],"sourcesContent":["import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { getMethod_ForProductTypesAPISuccess, PostMethod_ForProductTypesAPISuccess} from \"./action\";\r\nimport { GET_METHOD_HANDLER_FOR_PRODUCT_TYPES_API,POST_METHOD_HANDLER_FOR_PRODUCT_TYPES_API} from \"./actionTypes\";\r\nimport { AlertState } from \"../../Utilites/CustomAlertRedux/actions\";\r\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\r\nimport { get_Product_Category_Type_Master_API, Post_Product_Types_API} from \"../../../helpers/backend_helper\";\r\n\r\n// post api\r\nfunction*  Post_Method_ForProductTypes_GenFun({ data }) {\r\n  yield put(SpinnerState(true))\r\n  try {\r\n    const response = yield call(Post_Product_Types_API, data);\r\n    yield put(SpinnerState(false))\r\n    yield put(PostMethod_ForProductTypesAPISuccess(response));\r\n  } catch (error) {\r\n    yield put(SpinnerState(false))\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n\r\n///  ProductTypes dropdown list\r\nfunction* get_Method_ForProductTypes_GenFun() {\r\n  debugger\r\n  try {\r\n    const response = yield call(get_Product_Category_Type_Master_API);\r\n    yield put(getMethod_ForProductTypesAPISuccess(response.Data));\r\n    console.log(\"response\",response)\r\n  } catch (error) {\r\n    console.log(\"Product Types API page error\", error);\r\n  }\r\n}\r\n\r\n  function*  ProductTypesSaga() {\r\n    yield takeEvery(POST_METHOD_HANDLER_FOR_PRODUCT_TYPES_API,  Post_Method_ForProductTypes_GenFun)\r\n    yield takeEvery(GET_METHOD_HANDLER_FOR_PRODUCT_TYPES_API,  get_Method_ForProductTypes_GenFun)\r\n\r\n  }\r\n  \r\n  export default ProductTypesSaga;"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,QAAqC,oBAArC;AACA,SAASC,mCAAT,EAA8CC,oCAA9C,QAAyF,UAAzF;AACA,SAASC,wCAAT,EAAkDC,yCAAlD,QAAkG,eAAlG;AACA,SAASC,UAAT,QAA2B,yCAA3B;AACA,SAASC,YAAT,QAA6B,gCAA7B;AACA,SAASC,oCAAT,EAA+CC,sBAA/C,QAA4E,iCAA5E,C,CAEA;;AACA,UAAWC,kCAAX,OAAwD;EAAA,IAAV;IAAEC;EAAF,CAAU;EACtD,MAAMX,GAAG,CAACO,YAAY,CAAC,IAAD,CAAb,CAAT;;EACA,IAAI;IACF,MAAMK,QAAQ,GAAG,MAAMb,IAAI,CAACU,sBAAD,EAAyBE,IAAzB,CAA3B;IACA,MAAMX,GAAG,CAACO,YAAY,CAAC,KAAD,CAAb,CAAT;IACA,MAAMP,GAAG,CAACG,oCAAoC,CAACS,QAAD,CAArC,CAAT;EACD,CAJD,CAIE,OAAOC,KAAP,EAAc;IACd,MAAMb,GAAG,CAACO,YAAY,CAAC,KAAD,CAAb,CAAT;IACA,MAAMP,GAAG,CAACM,UAAU,CAAC;MACnBQ,IAAI,EAAE,CADa;MAEnBC,MAAM,EAAE,IAFW;MAELC,OAAO,EAAE;IAFJ,CAAD,CAAX,CAAT;EAID;AACF,C,CAGD;;;KAhBWN,kC;;AAiBX,UAAUO,iCAAV,GAA8C;EAC5C;;EACA,IAAI;IACF,MAAML,QAAQ,GAAG,MAAMb,IAAI,CAACS,oCAAD,CAA3B;IACA,MAAMR,GAAG,CAACE,mCAAmC,CAACU,QAAQ,CAACM,IAAV,CAApC,CAAT;IACAC,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBR,QAAvB;EACD,CAJD,CAIE,OAAOC,KAAP,EAAc;IACdM,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CP,KAA5C;EACD;AACF;;AAEC,UAAWQ,gBAAX,GAA8B;EAC5B,MAAMpB,SAAS,CAACI,yCAAD,EAA6CK,kCAA7C,CAAf;EACA,MAAMT,SAAS,CAACG,wCAAD,EAA4Ca,iCAA5C,CAAf;AAED;;MAJUI,gB;AAMX,eAAeA,gBAAf"},"metadata":{},"sourceType":"module"}
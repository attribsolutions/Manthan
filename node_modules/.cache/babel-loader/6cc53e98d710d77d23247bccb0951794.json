{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitProjects\\\\Manthan\\\\src\\\\pages\\\\Adminisrator\\\\PartyPages\\\\DemoUI2.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; // import { useHistory } from \"react-router-dom\";\n\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\nimport { Modal, Col, Row, Button, Input } from \"reactstrap\"; // import { useAlert } from \"react-alert\";\n\nimport \"../../../assets/scss/CustomeTable/datatables.scss\";\nimport { AlertState } from \"../../../store/actions\";\nimport { getEmployeelist, editEmployeeeId, deleteEmployeeIDSuccess, updateEmployeeIDSuccess, delete_Employee_ID } from \"../../../store/Administrator/M_EmployeeRedux/action\";\nimport paginationFactory, { PaginationListStandalone, PaginationProvider } from \"react-bootstrap-table2-paginator\";\nimport ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { CSVLink } from 'react-csv';\nimport * as XLSX from 'xlsx';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Employee_List = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [modal_center, setmodal_center] = useState(false); // get Access redux data\n\n  const {\n    TableListData,\n    editData,\n    updateMessage,\n    deleteMessage\n  } = useSelector(state => ({\n    TableListData: state.M_EmployeesReducer.employeeList,\n    editData: state.M_EmployeesReducer.editData,\n    updateMessage: state.M_EmployeesReducer.updateMessage,\n    deleteMessage: state.M_EmployeesReducer.deleteMessage\n  }));\n  console.log(\"editData\", editData); //  This UseEffect => Featch Modules List data  First Rendering\n\n  useEffect(() => {\n    dispatch(getEmployeelist());\n  }, []); // This UseEffect => UpadateModal Success/Unsucces  Show and Hide Control Alert_modal \n\n  useEffect(() => {\n    if (updateMessage.Status === true && updateMessage.StatusCode === 200) {\n      dispatch(updateEmployeeIDSuccess({\n        Status: false\n      }));\n      dispatch(AlertState({\n        Type: 1,\n        Status: true,\n        Message: updateMessage.Message,\n        AfterResponseAction: getEmployeelist\n      }));\n      tog_center();\n    } else if (updateMessage.Status === true) {\n      dispatch(deleteEmployeeIDSuccess({\n        Status: false\n      }));\n      dispatch(AlertState({\n        Type: 3,\n        Status: true,\n        Message: deleteMessage.Message\n      }));\n    }\n  }, [updateMessage.Status, dispatch]);\n  useEffect(() => {\n    if (deleteMessage.Status === true && deleteMessage.StatusCode === 200) {\n      dispatch(deleteEmployeeIDSuccess({\n        Status: false\n      }));\n      dispatch(AlertState({\n        Type: 1,\n        Status: true,\n        Message: deleteMessage.Message,\n        AfterResponseAction: getEmployeelist\n      }));\n    } else if (deleteMessage.Status === true) {\n      dispatch(deleteEmployeeIDSuccess({\n        Status: false\n      }));\n      dispatch(AlertState({\n        Type: 3,\n        Status: true,\n        Message: \"error Message\"\n      }));\n    }\n  }, [deleteMessage.Status]); //Delete Button Handller\n\n  const deleteHandeler = (id, name) => {\n    dispatch(AlertState({\n      Type: 5,\n      Status: true,\n      Message: `Are you sure you want to delete this Employee : \"${name}\"`,\n      RedirectPath: false,\n      PermissionAction: delete_Employee_ID,\n      ID: id\n    }));\n  }; // Edit Modal Show When Edit Data is true\n\n\n  useEffect(() => {\n    if (editData.Status === true) {\n      tog_center();\n    }\n  }, [editData]); // tag_center -- Control the Edit Modal show and close\n\n  function tog_center() {\n    setmodal_center(!modal_center);\n  } // Edit Button Handler\n\n\n  const EditPageHandler = id => {\n    dispatch(editEmployeeeId(id));\n  };\n\n  const defaultSorted = [{\n    dataField: \"Name\",\n    // if dataField is not match to any column you defined, it will be ignored.\n    order: \"asc\" // desc or asc\n\n  }];\n  const pageOptions = {\n    sizePerPage: 5,\n    totalSize: TableListData.length,\n    custom: true\n  }; // Employee List component table columns \n\n  const pagesListColumns = [{\n    text: \"PageID\",\n    dataField: \"ID\",\n    sort: true,\n    hidden: true,\n    formatter: (cellContent, TableListData) => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: TableListData.ID\n    }, void 0, false)\n  }, {\n    text: \"Name\",\n    dataField: \"Name\",\n    sort: true,\n    formatter: (cellContent, TableListData) => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: TableListData.Name\n    }, void 0, false)\n  }, {\n    text: \"Is Show\",\n    dataField: \"Address\",\n    sort: true,\n    formatter: (cellContent, TableListData) => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this)\n    }, void 0, false)\n  }, {\n    text: \"Is Delete\",\n    dataField: \"Mobile\",\n    sort: true,\n    formatter: (cellContent, TableListData) => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)\n    }, void 0, false)\n  }, {\n    text: \"Is Add\",\n    dataField: \"email\",\n    sort: true,\n    formatter: (cellContent, TableListData) => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this)\n    }, void 0, false)\n  }, {\n    text: \"Actions\",\n    formatter: (cellContent, TableListData) => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex gap-3\",\n        style: {\n          display: 'flex',\n          justifyContent: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          \"data-mdb-toggle\": \"tooltip\",\n          \"data-mdb-placement\": \"top\",\n          title: \"Edit Employee\",\n          onClick: () => {\n            EditPageHandler(TableListData.id);\n          },\n          className: \"badge badge-soft-primary font-size-12 border border-light btn btn-outline-primary\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"mdi mdi-pencil font-size-18\",\n            id: \"edittooltip\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"buton\", {\n          className: \"badge badge-soft-danger font-size-12\",\n          \"data-mdb-toggle\": \"tooltip\",\n          \"data-mdb-placement\": \"top\",\n          title: \"Delete Employee\",\n          onClick: () => {\n            deleteHandeler(TableListData.id, TableListData.Name);\n          },\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"mdi mdi-delete font-size-18\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 21\n      }, this)\n    }, void 0, false)\n  }]; // const ExcelTableData = [\n  //     { label: \"Id\", key: \"id\" },\n  //     { label: \"Name\", key: \"Name\" },\n  //     { label: \"Address\", key: \"Address\" },\n  //     { label: \"Mobile\", key: \"Mobile\" },\n  //     { label: \"Email\", key: \"email\" },\n  //     { label: \" Date of Birth\", key: \"DOB\" },\n  //     { label: \"Company Name \", key: \"CompanyName\" },\n  //     // { label: \"State\", key: \"StateName\" },\n  // ];\n  //     const tableListNew = {\n  //         name: 'Batman'\n  //       };\n  //       tableListNew.hasOwnProperty('name'); \n  //    console.log(\"tableListNew\",tableListNew) \n  // const tableListNew = TableListData.Map([\n  //   ]);\n  //   console.log(tableListNew.hasOwnProperty('id'))\n  //   const obj = Object.fromEntries(tableListNew);\n  //   console.log(\"obj\",tableListNew[0])\n  //   tableListNew.hasOwnProperty('Name'); \n  //   console.log(tableListNew.hasOwnProperty('id'));\n\n  const downloadExcel = TableListData => {\n    var demoList = [\"Name\", \"Address\", \"email\", \"Mobile\"];\n    var li = [];\n    var obj = {};\n    TableListData.map(index1 => {\n      demoList.map(index2 => {\n        if (index1.hasOwnProperty(index2)) {\n          obj[index2] = index1[index2];\n        }\n      });\n      li.push(obj);\n      obj = {};\n    });\n    const worksheet = XLSX.utils.json_to_sheet(li);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\n    XLSX.writeFile(workbook, \"DataSheet.xlsx\");\n  };\n\n  useEffect(() => {}, [TableListData]);\n  console.log(TableListData);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-content\",\n      children: /*#__PURE__*/_jsxDEV(PaginationProvider, {\n        pagination: paginationFactory(pageOptions),\n        children: _ref => {\n          let {\n            paginationProps,\n            paginationTableProps\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(ToolkitProvider, {\n            keyField: \"id\",\n            data: TableListData,\n            columns: pagesListColumns,\n            search: true,\n            children: toolkitProps => /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n                title: \"Count :\",\n                breadcrumbItem: \"Employee List\",\n                IsButtonVissible: true,\n                SearchProps: toolkitProps.searchProps,\n                breadcrumbCount: `Employee Count: ${TableListData.length}`,\n                RedirctPath: \"/employeesMaster\",\n                isExcelButtonVisible: true,\n                ExcelData: TableListData\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: /*#__PURE__*/_jsxDEV(Col, {\n                  xl: \"12\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"table-responsive\",\n                    children: /*#__PURE__*/_jsxDEV(BootstrapTable, {\n                      keyField: \"id\",\n                      responsive: true,\n                      bordered: false,\n                      defaultSorted: defaultSorted,\n                      striped: false,\n                      classes: \"table  table-bordered\",\n                      ...toolkitProps.baseProps,\n                      ...paginationTableProps\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 303,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 302,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 301,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 300,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                className: \"align-items-md-center mt-30\",\n                children: /*#__PURE__*/_jsxDEV(Col, {\n                  className: \"pagination pagination-rounded justify-content-end mb-2\",\n                  children: /*#__PURE__*/_jsxDEV(PaginationListStandalone, { ...paginationProps\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 322,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 25\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Employee_List, \"JxQDqFpQ4XWyfhGFCkMO54FaLps=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Employee_List;\nexport default Employee_List;\n\nvar _c;\n\n$RefreshReg$(_c, \"Employee_List\");","map":{"version":3,"names":["React","useEffect","useState","Breadcrumbs","Modal","Col","Row","Button","Input","AlertState","getEmployeelist","editEmployeeeId","deleteEmployeeIDSuccess","updateEmployeeIDSuccess","delete_Employee_ID","paginationFactory","PaginationListStandalone","PaginationProvider","ToolkitProvider","Search","BootstrapTable","useSelector","useDispatch","CSVLink","XLSX","Employee_List","dispatch","modal_center","setmodal_center","TableListData","editData","updateMessage","deleteMessage","state","M_EmployeesReducer","employeeList","console","log","Status","StatusCode","Type","Message","AfterResponseAction","tog_center","deleteHandeler","id","name","RedirectPath","PermissionAction","ID","EditPageHandler","defaultSorted","dataField","order","pageOptions","sizePerPage","totalSize","length","custom","pagesListColumns","text","sort","hidden","formatter","cellContent","Name","display","justifyContent","downloadExcel","demoList","li","obj","map","index1","index2","hasOwnProperty","push","worksheet","utils","json_to_sheet","workbook","book_new","book_append_sheet","writeFile","paginationProps","paginationTableProps","toolkitProps","searchProps","baseProps"],"sources":["D:/GitProjects/Manthan/src/pages/Adminisrator/PartyPages/DemoUI2.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\n// import { useHistory } from \"react-router-dom\";\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\nimport { Modal, Col, Row, Button, Input, } from \"reactstrap\";\r\n// import { useAlert } from \"react-alert\";\r\nimport \"../../../assets/scss/CustomeTable/datatables.scss\"\r\nimport { AlertState } from \"../../../store/actions\";\r\n\r\nimport {\r\n    getEmployeelist, editEmployeeeId, deleteEmployeeIDSuccess, updateEmployeeIDSuccess, delete_Employee_ID\r\n} from \"../../../store/Administrator/M_EmployeeRedux/action\";\r\nimport paginationFactory, {\r\n    PaginationListStandalone,\r\n    PaginationProvider,\r\n} from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { CSVLink } from 'react-csv';\r\nimport * as XLSX from 'xlsx';\r\nconst Employee_List = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [modal_center, setmodal_center] = useState(false);\r\n\r\n    // get Access redux data\r\n    const { TableListData, editData, updateMessage, deleteMessage } = useSelector((state) => ({\r\n        TableListData: state.M_EmployeesReducer.employeeList,\r\n        editData: state.M_EmployeesReducer.editData,\r\n        updateMessage: state.M_EmployeesReducer.updateMessage,\r\n        deleteMessage: state.M_EmployeesReducer.deleteMessage,\r\n\r\n    }));\r\n    console.log(\"editData\", editData)\r\n\r\n    //  This UseEffect => Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        dispatch(getEmployeelist());\r\n    }, []);\r\n\r\n    // This UseEffect => UpadateModal Success/Unsucces  Show and Hide Control Alert_modal \r\n    useEffect(() => {\r\n        if ((updateMessage.Status === true) && (updateMessage.StatusCode === 200)) {\r\n            dispatch(updateEmployeeIDSuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 1, Status: true,\r\n                Message: updateMessage.Message,\r\n                AfterResponseAction: getEmployeelist,\r\n            }))\r\n            tog_center()\r\n        }\r\n        else if (updateMessage.Status === true) {\r\n            dispatch(deleteEmployeeIDSuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 3, Status: true,\r\n                Message: deleteMessage.Message,\r\n            }));\r\n        }\r\n    }, [updateMessage.Status, dispatch]);\r\n\r\n    useEffect(() => {\r\n        if ((deleteMessage.Status === true) && (deleteMessage.StatusCode === 200)) {\r\n            dispatch(deleteEmployeeIDSuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 1, Status: true,\r\n                Message: deleteMessage.Message,\r\n                AfterResponseAction: getEmployeelist,\r\n            }))\r\n        } else if (deleteMessage.Status === true) {\r\n            dispatch(deleteEmployeeIDSuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 3,\r\n                Status: true,\r\n                Message: \"error Message\",\r\n            }));\r\n        }\r\n    }, [deleteMessage.Status])\r\n\r\n    //Delete Button Handller\r\n    const deleteHandeler = (id, name) => {\r\n        dispatch(AlertState({\r\n            Type: 5, Status: true,\r\n            Message: `Are you sure you want to delete this Employee : \"${name}\"`,\r\n            RedirectPath: false,\r\n            PermissionAction: delete_Employee_ID,\r\n            ID: id\r\n        }));\r\n    }\r\n\r\n    // Edit Modal Show When Edit Data is true\r\n    useEffect(() => {\r\n        if (editData.Status === true) {\r\n            tog_center()\r\n        }\r\n    }, [editData]);\r\n\r\n    // tag_center -- Control the Edit Modal show and close\r\n    function tog_center() {\r\n        setmodal_center(!modal_center)\r\n    }\r\n\r\n    // Edit Button Handler\r\n    const EditPageHandler = (id) => {\r\n        dispatch(editEmployeeeId(id));\r\n    }\r\n\r\n\r\n    const defaultSorted = [\r\n        {\r\n            dataField: \"Name\", // if dataField is not match to any column you defined, it will be ignored.\r\n            order: \"asc\", // desc or asc\r\n        },\r\n    ];\r\n    const pageOptions = {\r\n        sizePerPage: 5,\r\n        totalSize: TableListData.length,\r\n        custom: true,\r\n    };\r\n\r\n    // Employee List component table columns \r\n    const pagesListColumns = [\r\n        {\r\n            text: \"PageID\",\r\n            dataField: \"ID\",\r\n            sort: true,\r\n            hidden: true,\r\n            formatter: (cellContent, TableListData) => <>{TableListData.ID}</>,\r\n        },\r\n\r\n        {\r\n            text: \"Name\",\r\n            dataField: \"Name\",\r\n            sort: true,\r\n            formatter: (cellContent, TableListData) => <>{TableListData.Name}</>,\r\n        },\r\n\r\n        {\r\n            text: \"Is Show\",\r\n            dataField: \"Address\",\r\n            sort: true,\r\n            formatter: (cellContent, TableListData) => <>\r\n                <input type=\"checkbox\"\r\n                /></>,\r\n        },\r\n\r\n        {\r\n            text: \"Is Delete\",\r\n            dataField: \"Mobile\",\r\n            sort: true,\r\n            formatter: (cellContent, TableListData) => <>\r\n                <input type=\"checkbox\"\r\n                /></>,\r\n        },\r\n        {\r\n            text: \"Is Add\",\r\n            dataField: \"email\",\r\n            sort: true,\r\n            formatter: (cellContent, TableListData) => <>\r\n                <input type=\"checkbox\"\r\n                /></>,\r\n        },\r\n\r\n        {\r\n            text: \"Actions\",\r\n\r\n            formatter: (cellContent, TableListData) => (\r\n                <>\r\n                    <div className=\"d-flex gap-3\" style={{ display: 'flex', justifyContent: 'center' }} >\r\n                        <button\r\n                            type=\"button\"\r\n                            data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Edit Employee\"\r\n                            onClick={() => {\r\n                                EditPageHandler(TableListData.id);\r\n                            }}\r\n                            className=\"badge badge-soft-primary font-size-12 border border-light btn btn-outline-primary\"\r\n                        >\r\n                            <i className=\"mdi mdi-pencil font-size-18\" id=\"edittooltip\"></i>\r\n                        </button>\r\n                        <buton\r\n                            className=\"badge badge-soft-danger font-size-12\"\r\n                            data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Delete Employee\"\r\n                            onClick={() => {\r\n                                deleteHandeler(TableListData.id, TableListData.Name);\r\n                            }}\r\n                        >\r\n                            <i className=\"mdi mdi-delete font-size-18\" ></i>\r\n                        </buton>\r\n\r\n                    </div>\r\n                </>\r\n            ),\r\n        },\r\n    ]\r\n\r\n    // const ExcelTableData = [\r\n    //     { label: \"Id\", key: \"id\" },\r\n    //     { label: \"Name\", key: \"Name\" },\r\n    //     { label: \"Address\", key: \"Address\" },\r\n    //     { label: \"Mobile\", key: \"Mobile\" },\r\n    //     { label: \"Email\", key: \"email\" },\r\n    //     { label: \" Date of Birth\", key: \"DOB\" },\r\n    //     { label: \"Company Name \", key: \"CompanyName\" },\r\n    //     // { label: \"State\", key: \"StateName\" },\r\n\r\n    // ];\r\n    //     const tableListNew = {\r\n    //         name: 'Batman'\r\n    //       };\r\n    //       tableListNew.hasOwnProperty('name'); \r\n    //    console.log(\"tableListNew\",tableListNew) \r\n    // const tableListNew = TableListData.Map([\r\n    //   ]);\r\n    //   console.log(tableListNew.hasOwnProperty('id'))\r\n    //   const obj = Object.fromEntries(tableListNew);\r\n    //   console.log(\"obj\",tableListNew[0])\r\n    //   tableListNew.hasOwnProperty('Name'); \r\n    //   console.log(tableListNew.hasOwnProperty('id'));\r\n\r\n    const downloadExcel = (TableListData) => {\r\n\r\n        var demoList = [\"Name\", \"Address\", \"email\", \"Mobile\"]\r\n\r\n        var li = []\r\n        var obj = {}\r\n\r\n        TableListData.map((index1) => {\r\n            demoList.map((index2) => {\r\n                if (index1.hasOwnProperty(index2)) {\r\n                    obj[index2] = index1[index2]\r\n                }\r\n            })\r\n            li.push(obj)\r\n            obj={}\r\n           \r\n        })\r\n        \r\n        const worksheet = XLSX.utils.json_to_sheet(li);\r\n        const workbook = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\r\n        XLSX.writeFile(workbook, \"DataSheet.xlsx\");\r\n    };\r\n\r\n\r\n\r\n    useEffect(() => {\r\n       \r\n    }, [TableListData])\r\n\r\n   \r\n    console.log(TableListData);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"page-content\">\r\n\r\n                <PaginationProvider\r\n                    pagination={paginationFactory(pageOptions)}\r\n                >\r\n                    {({ paginationProps, paginationTableProps }) => (\r\n                        <ToolkitProvider\r\n                            keyField=\"id\"\r\n                            data={TableListData}\r\n                            columns={pagesListColumns}\r\n                            search\r\n                        >\r\n                            {toolkitProps => (\r\n                                <React.Fragment>\r\n                                    <Breadcrumbs\r\n                                        title={\"Count :\"}\r\n                                        breadcrumbItem={\"Employee List\"}\r\n                                        IsButtonVissible={true}\r\n                                        SearchProps={toolkitProps.searchProps}\r\n                                        breadcrumbCount={`Employee Count: ${TableListData.length}`}\r\n                                        RedirctPath={\"/employeesMaster\"}\r\n                                        isExcelButtonVisible={true}\r\n                                        ExcelData={TableListData}\r\n                                    />\r\n                                    {/* <Row>\r\n                                        <Col className='btn sm text-end '>\r\n                                      \r\n                                            {/* <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className='export-btn text-right mb-2  align-end'\r\n                                            > */}\r\n                                    {/* <CSVLink\r\n                                                    headers={ExcelTableData}\r\n                                                    data={TableListData}\r\n                                                    filename=\"Employee Data\"\r\n                                                    style={{ \"textDecoration\": \"none\", \"color\": \"#fff\" }}\r\n                                                >\r\n                                                </CSVLink> */}\r\n\r\n                                    {/* </Button> */}\r\n                                    {/* </Col> */}\r\n                                    {/* </Row> */}\r\n                                    {/* <button onClick={() => downloadExcel(TableListData)}>\r\n                                        Download As Excel\r\n                                    </button> */}\r\n                                    <Row>\r\n                                        <Col xl=\"12\">\r\n                                            <div className=\"table-responsive\">\r\n                                                <BootstrapTable\r\n\r\n                                                    keyField={\"id\"}\r\n                                                    responsive\r\n                                                    bordered={false}\r\n                                                    defaultSorted={defaultSorted}\r\n                                                    striped={false}\r\n                                                    classes={\r\n                                                        \"table  table-bordered\"\r\n                                                    }\r\n                                                    {...toolkitProps.baseProps}\r\n                                                    {...paginationTableProps}\r\n                                                />\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    <Row className=\"align-items-md-center mt-30\">\r\n                                        <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n                                            <PaginationListStandalone\r\n                                                {...paginationProps}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                </React.Fragment>\r\n                            )}\r\n                        </ToolkitProvider>\r\n                    )}\r\n\r\n                </PaginationProvider>\r\n                {/* <CSVLink data={TableListData} filename=\"Employee Data\" className=\"btn btn-success mb-3\">Download to Excel</CSVLink> */}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\n\r\nexport default Employee_List;"],"mappings":"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"},"metadata":{},"sourceType":"module"}
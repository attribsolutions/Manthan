{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitProjects\\\\Manthan\\\\src\\\\components\\\\CommonForBoth\\\\TopbarDropdown\\\\LanguageDropdown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Dropdown, DropdownItem, DropdownMenu, DropdownToggle } from \"reactstrap\";\nimport { get, map } from \"lodash\";\nimport { withTranslation } from \"react-i18next\"; //i18n\n\nimport i18n from \"../../../i18n\";\nimport languages from \"../../../common/languages\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst LanguageDropdown = () => {\n  _s();\n\n  // Declare a new state variable, which we'll call \"menu\"\n  const [selectedLang, setSelectedLang] = useState(\"\");\n  const [menu, setMenu] = useState(false);\n  useEffect(() => {\n    const currentLanguage = localStorage.getItem(\"I18N_LANGUAGE\");\n    setSelectedLang(currentLanguage);\n  }, []);\n\n  const changeLanguageAction = lang => {\n    //set language as i18n\n    i18n.changeLanguage(lang);\n    localStorage.setItem(\"I18N_LANGUAGE\", lang);\n    setSelectedLang(lang);\n  };\n\n  const toggle = () => {\n    setMenu(!menu);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Dropdown, {\n      isOpen: menu,\n      toggle: toggle,\n      className: \"d-inline-block\",\n      children: [/*#__PURE__*/_jsxDEV(DropdownToggle, {\n        className: \"btn header-item \",\n        tag: \"button\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: get(languages, `${selectedLang}.flag`),\n          alt: \"Skote\",\n          height: \"16\",\n          className: \"me-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DropdownMenu, {\n        className: \"language-switch dropdown-menu-end\",\n        children: map(Object.keys(languages), key => /*#__PURE__*/_jsxDEV(DropdownItem, {\n          onClick: () => changeLanguageAction(key),\n          className: `notify-item ${selectedLang === key ? \"active\" : \"none\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: get(languages, `${key}.flag`),\n            alt: \"Skote\",\n            className: \"me-1\",\n            height: \"12\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"align-middle\",\n            children: get(languages, `${key}.label`)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(LanguageDropdown, \"LIsJHhbIfo5/NGM4s2dFIt+NozI=\");\n\n_c = LanguageDropdown;\nexport default withTranslation()(LanguageDropdown);\n\nvar _c;\n\n$RefreshReg$(_c, \"LanguageDropdown\");","map":{"version":3,"names":["React","useEffect","useState","Dropdown","DropdownItem","DropdownMenu","DropdownToggle","get","map","withTranslation","i18n","languages","LanguageDropdown","selectedLang","setSelectedLang","menu","setMenu","currentLanguage","localStorage","getItem","changeLanguageAction","lang","changeLanguage","setItem","toggle","Object","keys","key"],"sources":["D:/GitProjects/Manthan/src/components/CommonForBoth/TopbarDropdown/LanguageDropdown.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Dropdown,\r\n  DropdownItem,\r\n  DropdownMenu,\r\n  DropdownToggle,\r\n} from \"reactstrap\";\r\nimport { get, map } from \"lodash\";\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\n//i18n\r\nimport i18n from \"../../../i18n\";\r\nimport languages from \"../../../common/languages\";\r\n\r\nconst LanguageDropdown = () => {\r\n  // Declare a new state variable, which we'll call \"menu\"\r\n  const [selectedLang, setSelectedLang] = useState(\"\");\r\n  const [menu, setMenu] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const currentLanguage = localStorage.getItem(\"I18N_LANGUAGE\");\r\n    setSelectedLang(currentLanguage);\r\n  }, [])\r\n\r\n  const changeLanguageAction = lang => {\r\n    //set language as i18n\r\n    i18n.changeLanguage(lang);\r\n    localStorage.setItem(\"I18N_LANGUAGE\", lang);\r\n    setSelectedLang(lang);\r\n  }\r\n\r\n  const toggle = () => {\r\n    setMenu(!menu);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Dropdown isOpen={menu} toggle={toggle} className=\"d-inline-block\">\r\n        <DropdownToggle className=\"btn header-item \" tag=\"button\">\r\n          <img\r\n            src={get(languages, `${selectedLang}.flag`)}\r\n            alt=\"Skote\"\r\n            height=\"16\"\r\n            className=\"me-1\"\r\n          />\r\n        </DropdownToggle>\r\n        <DropdownMenu className=\"language-switch dropdown-menu-end\">\r\n          {map(Object.keys(languages), key => (\r\n            <DropdownItem\r\n              key={key}\r\n              onClick={() => changeLanguageAction(key)}\r\n              className={`notify-item ${selectedLang === key ? \"active\" : \"none\"\r\n                }`}\r\n            >\r\n              <img\r\n                src={get(languages, `${key}.flag`)}\r\n                alt=\"Skote\"\r\n                className=\"me-1\"\r\n                height=\"12\"\r\n              />\r\n              <span className=\"align-middle\">\r\n                {get(languages, `${key}.label`)}\r\n              </span>\r\n            </DropdownItem>\r\n          ))}\r\n        </DropdownMenu>\r\n      </Dropdown>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default withTranslation()(LanguageDropdown)\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SACEC,QADF,EAEEC,YAFF,EAGEC,YAHF,EAIEC,cAJF,QAKO,YALP;AAMA,SAASC,GAAT,EAAcC,GAAd,QAAyB,QAAzB;AACA,SAASC,eAAT,QAAgC,eAAhC,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;;;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;EAAA;;EAC7B;EACA,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,EAAD,CAAhD;EACA,MAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,KAAD,CAAhC;EAEAD,SAAS,CAAC,MAAM;IACd,MAAMgB,eAAe,GAAGC,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAxB;IACAL,eAAe,CAACG,eAAD,CAAf;EACD,CAHQ,EAGN,EAHM,CAAT;;EAKA,MAAMG,oBAAoB,GAAGC,IAAI,IAAI;IACnC;IACAX,IAAI,CAACY,cAAL,CAAoBD,IAApB;IACAH,YAAY,CAACK,OAAb,CAAqB,eAArB,EAAsCF,IAAtC;IACAP,eAAe,CAACO,IAAD,CAAf;EACD,CALD;;EAOA,MAAMG,MAAM,GAAG,MAAM;IACnBR,OAAO,CAAC,CAACD,IAAF,CAAP;EACD,CAFD;;EAIA,oBACE;IAAA,uBACE,QAAC,QAAD;MAAU,MAAM,EAAEA,IAAlB;MAAwB,MAAM,EAAES,MAAhC;MAAwC,SAAS,EAAC,gBAAlD;MAAA,wBACE,QAAC,cAAD;QAAgB,SAAS,EAAC,kBAA1B;QAA6C,GAAG,EAAC,QAAjD;QAAA,uBACE;UACE,GAAG,EAAEjB,GAAG,CAACI,SAAD,EAAa,GAAEE,YAAa,OAA5B,CADV;UAEE,GAAG,EAAC,OAFN;UAGE,MAAM,EAAC,IAHT;UAIE,SAAS,EAAC;QAJZ;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QADF,eASE,QAAC,YAAD;QAAc,SAAS,EAAC,mCAAxB;QAAA,UACGL,GAAG,CAACiB,MAAM,CAACC,IAAP,CAAYf,SAAZ,CAAD,EAAyBgB,GAAG,iBAC9B,QAAC,YAAD;UAEE,OAAO,EAAE,MAAMP,oBAAoB,CAACO,GAAD,CAFrC;UAGE,SAAS,EAAG,eAAcd,YAAY,KAAKc,GAAjB,GAAuB,QAAvB,GAAkC,MACzD,EAJL;UAAA,wBAME;YACE,GAAG,EAAEpB,GAAG,CAACI,SAAD,EAAa,GAAEgB,GAAI,OAAnB,CADV;YAEE,GAAG,EAAC,OAFN;YAGE,SAAS,EAAC,MAHZ;YAIE,MAAM,EAAC;UAJT;YAAA;YAAA;YAAA;UAAA,QANF,eAYE;YAAM,SAAS,EAAC,cAAhB;YAAA,UACGpB,GAAG,CAACI,SAAD,EAAa,GAAEgB,GAAI,QAAnB;UADN;YAAA;YAAA;YAAA;UAAA,QAZF;QAAA,GACOA,GADP;UAAA;UAAA;UAAA;QAAA,QADE;MADN;QAAA;QAAA;QAAA;MAAA,QATF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF,iBADF;AAkCD,CAvDD;;GAAMf,gB;;KAAAA,gB;AAyDN,eAAeH,eAAe,GAAGG,gBAAH,CAA9B"},"metadata":{},"sourceType":"module"}
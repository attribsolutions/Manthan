{"ast":null,"code":"import { POST_METHOD_FOR_DRIVER_MASTER, POST_METHOD_FOR_DRIVER_MASTER_SUCCESS, GET_METHOD_FOR_DRIVER_LIST, GET_METHOD_FOR_DRIVER_LIST_SUCCESS, DELETE_DRIVER_TYPE_ID, DELETE_DRIVER_TYPE_ID_SUCCESS, EDIT_DRIVER_TYPE_ID, EDIT_DRIVER_TYPE_ID_SUCCESS, UPDATE_DRIVER_TYPE_ID, UPDATE_DRIVER_TYPE_ID_SUCCESS } from \"./actionType\";\nexport const PostMethodForDriverMaster = data => ({\n  type: POST_METHOD_FOR_DRIVER_MASTER,\n  data\n});\n_c = PostMethodForDriverMaster;\nexport const PostMethod_ForDriverMasterSuccess = data => ({\n  type: POST_METHOD_FOR_DRIVER_MASTER_SUCCESS,\n  payload: data\n}); // get method DriverList\n\n_c2 = PostMethod_ForDriverMasterSuccess;\nexport const getMethodForDriverList = () => ({\n  type: GET_METHOD_FOR_DRIVER_LIST\n});\nexport const getMethod_ForDriverListSuccess = data => ({\n  type: GET_METHOD_FOR_DRIVER_LIST_SUCCESS,\n  payload: data\n}); ////delete api\n\nexport const delete_DriverType_ID = id => ({\n  type: DELETE_DRIVER_TYPE_ID,\n  id\n});\nexport const deleteDriverTypeIDSuccess = deleteMessage => ({\n  type: DELETE_DRIVER_TYPE_ID_SUCCESS,\n  payload: deleteMessage\n}); // edit api\n\nexport const editDriverTypeId = (id, pageMode) => ({\n  type: EDIT_DRIVER_TYPE_ID,\n  id,\n  pageMode\n});\nexport const editDriverTypeSuccess = editData => ({\n  type: EDIT_DRIVER_TYPE_ID_SUCCESS,\n  payload: editData\n}); // update api\n\nexport const updateDriverTypeID = (updateData, ID) => ({\n  type: UPDATE_DRIVER_TYPE_ID,\n  updateData,\n  ID\n});\nexport const updateDriverTypeIDSuccess = updateMessage => ({\n  type: UPDATE_DRIVER_TYPE_ID_SUCCESS,\n  payload: updateMessage\n});\nexport const reset = () => ({\n  type: \"RESET_ALL\"\n});\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PostMethodForDriverMaster\");\n$RefreshReg$(_c2, \"PostMethod_ForDriverMasterSuccess\");","map":{"version":3,"names":["POST_METHOD_FOR_DRIVER_MASTER","POST_METHOD_FOR_DRIVER_MASTER_SUCCESS","GET_METHOD_FOR_DRIVER_LIST","GET_METHOD_FOR_DRIVER_LIST_SUCCESS","DELETE_DRIVER_TYPE_ID","DELETE_DRIVER_TYPE_ID_SUCCESS","EDIT_DRIVER_TYPE_ID","EDIT_DRIVER_TYPE_ID_SUCCESS","UPDATE_DRIVER_TYPE_ID","UPDATE_DRIVER_TYPE_ID_SUCCESS","PostMethodForDriverMaster","data","type","PostMethod_ForDriverMasterSuccess","payload","getMethodForDriverList","getMethod_ForDriverListSuccess","delete_DriverType_ID","id","deleteDriverTypeIDSuccess","deleteMessage","editDriverTypeId","pageMode","editDriverTypeSuccess","editData","updateDriverTypeID","updateData","ID","updateDriverTypeIDSuccess","updateMessage","reset"],"sources":["D:/GitProjects/Manthan/src/store/Administrator/DriverRedux/action.js"],"sourcesContent":["import {\r\n    POST_METHOD_FOR_DRIVER_MASTER,\r\n    POST_METHOD_FOR_DRIVER_MASTER_SUCCESS,\r\n    GET_METHOD_FOR_DRIVER_LIST,\r\n    GET_METHOD_FOR_DRIVER_LIST_SUCCESS,\r\n    DELETE_DRIVER_TYPE_ID,\r\n   DELETE_DRIVER_TYPE_ID_SUCCESS,\r\n  EDIT_DRIVER_TYPE_ID,\r\n  EDIT_DRIVER_TYPE_ID_SUCCESS,\r\n  UPDATE_DRIVER_TYPE_ID,\r\n  UPDATE_DRIVER_TYPE_ID_SUCCESS\r\n\r\n} from \"./actionType\";\r\n\r\nexport const PostMethodForDriverMaster= (data) => ({\r\n   type: POST_METHOD_FOR_DRIVER_MASTER,\r\n   data,\r\n });\r\n\r\n export const PostMethod_ForDriverMasterSuccess = (data) => ({\r\n   type: POST_METHOD_FOR_DRIVER_MASTER_SUCCESS,\r\n   payload: data,\r\n });\r\n \r\n // get method DriverList\r\n export const getMethodForDriverList = () => ({\r\n   type: GET_METHOD_FOR_DRIVER_LIST,\r\n   \r\n });\r\n \r\n export const getMethod_ForDriverListSuccess = (data) => ({\r\n   type: GET_METHOD_FOR_DRIVER_LIST_SUCCESS,\r\n   payload: data,\r\n });\r\n   \r\n\r\n ////delete api\r\nexport const delete_DriverType_ID = (id) => ({\r\n type: DELETE_DRIVER_TYPE_ID,\r\n id,\r\n\r\n});\r\nexport const deleteDriverTypeIDSuccess = (deleteMessage) => ({\r\n type: DELETE_DRIVER_TYPE_ID_SUCCESS,\r\n payload: deleteMessage\r\n});\r\n\r\n// edit api\r\nexport const editDriverTypeId = (id,pageMode) => ({\r\n type: EDIT_DRIVER_TYPE_ID,\r\n id,pageMode\r\n})\r\nexport const editDriverTypeSuccess = (editData) => ({\r\n type: EDIT_DRIVER_TYPE_ID_SUCCESS,\r\n \r\n payload: editData,\r\n})\r\n\r\n// update api\r\nexport const updateDriverTypeID = (updateData, ID) => ({\r\n type: UPDATE_DRIVER_TYPE_ID,\r\n updateData, ID,\r\n})\r\nexport const updateDriverTypeIDSuccess = (updateMessage) => ({\r\n type: UPDATE_DRIVER_TYPE_ID_SUCCESS,\r\n payload: updateMessage,\r\n})\r\n\r\nexport const reset = () => ({\r\n  type: \"RESET_ALL\",\r\n })"],"mappings":"AAAA,SACIA,6BADJ,EAEIC,qCAFJ,EAGIC,0BAHJ,EAIIC,kCAJJ,EAKIC,qBALJ,EAMGC,6BANH,EAOEC,mBAPF,EAQEC,2BARF,EASEC,qBATF,EAUEC,6BAVF,QAYO,cAZP;AAcA,OAAO,MAAMC,yBAAyB,GAAGC,IAAD,KAAW;EAChDC,IAAI,EAAEZ,6BAD0C;EAEhDW;AAFgD,CAAX,CAAjC;KAAMD,yB;AAKZ,OAAO,MAAMG,iCAAiC,GAAIF,IAAD,KAAW;EAC1DC,IAAI,EAAEX,qCADoD;EAE1Da,OAAO,EAAEH;AAFiD,CAAX,CAA1C,C,CAKP;;MALaE,iC;AAMb,OAAO,MAAME,sBAAsB,GAAG,OAAO;EAC3CH,IAAI,EAAEV;AADqC,CAAP,CAA/B;AAKP,OAAO,MAAMc,8BAA8B,GAAIL,IAAD,KAAW;EACvDC,IAAI,EAAET,kCADiD;EAEvDW,OAAO,EAAEH;AAF8C,CAAX,CAAvC,C,CAMP;;AACD,OAAO,MAAMM,oBAAoB,GAAIC,EAAD,KAAS;EAC5CN,IAAI,EAAER,qBADsC;EAE5Cc;AAF4C,CAAT,CAA7B;AAKP,OAAO,MAAMC,yBAAyB,GAAIC,aAAD,KAAoB;EAC5DR,IAAI,EAAEP,6BADsD;EAE5DS,OAAO,EAAEM;AAFmD,CAApB,CAAlC,C,CAKP;;AACA,OAAO,MAAMC,gBAAgB,GAAG,CAACH,EAAD,EAAII,QAAJ,MAAkB;EACjDV,IAAI,EAAEN,mBAD2C;EAEjDY,EAFiD;EAE9CI;AAF8C,CAAlB,CAAzB;AAIP,OAAO,MAAMC,qBAAqB,GAAIC,QAAD,KAAe;EACnDZ,IAAI,EAAEL,2BAD6C;EAGnDO,OAAO,EAAEU;AAH0C,CAAf,CAA9B,C,CAMP;;AACA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,UAAD,EAAaC,EAAb,MAAqB;EACtDf,IAAI,EAAEJ,qBADgD;EAEtDkB,UAFsD;EAE1CC;AAF0C,CAArB,CAA3B;AAIP,OAAO,MAAMC,yBAAyB,GAAIC,aAAD,KAAoB;EAC5DjB,IAAI,EAAEH,6BADsD;EAE5DK,OAAO,EAAEe;AAFmD,CAApB,CAAlC;AAKP,OAAO,MAAMC,KAAK,GAAG,OAAO;EAC1BlB,IAAI,EAAE;AADoB,CAAP,CAAd"},"metadata":{},"sourceType":"module"}
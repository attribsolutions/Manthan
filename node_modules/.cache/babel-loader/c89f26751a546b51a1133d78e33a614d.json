{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import { FormGroup, Input, Label } from \"reactstrap\";\n// import {\n//   Row,\n//   Col,\n//   Card,\n//   CardBody,\n//   Container,\n// } from \"reactstrap\";\n// import { Table, Thead, Tbody, Tr, Th, Td } from \"react-super-responsive-table\";\n// import \"react-super-responsive-table/dist/SuperResponsiveTableStyle.css\";\n// // store action import\n// import {\n//   submitOrder_fromOrderPage,\n//   getOrderItems_ForOrderPage,\n//   submitOrder_fromOrderPage_Success,\n//   updateOrderID_From_OrderPage,\n//   getSupplier\n// } from \"../../store/Purchase/OrderPageRedux/actions\";\n// import { useSelector, useDispatch } from \"react-redux\";\n// import './div.css'\n// import Breadcrumbs3 from \"../../components/Common/Breadcrumb3\"\n// import { AlertState } from \"../../store/actions\";\n// import { MetaTags } from \"react-meta-tags\";\n// import \"@vtaits/react-color-picker/dist/index.css\"\n// import \"react-datepicker/dist/react-datepicker.css\"\n// //Import Flatepicker\n// import \"flatpickr/dist/themes/material_blue.css\"\n// import Flatpickr from \"react-flatpickr\"\n// import ReactSelect from \"react-select\";\n// import { getPartyListAPI } from \"../../store/Administrator/PartyRedux/action\";\n// const OrderPage = (props) => {\n//   // For table items  for-loop constatnt  \n//   let itemgroups = \"\";\n//   //*** \"isEditdata get all data from ModuleID for Binding  Form controls\n//   let editDataGatingFromList = props.state;\n//   let CheckPageMode = props.IsComponentMode;\n//   const dispatch = useDispatch();\n//   const current = new Date();\n//   const month = current.getMonth() + 1;\n//   const currentDate = `${current.getFullYear()}-${month < 10 ? `0${month}` : `${month}`\n//     }-${current.getDate()}`;\n//   //'IsEdit'--if true then update data otherwise it will perfrom save operation\n//   const [IsEdit, setIsEdit] = useState(false);\n//   const [PageMode, setPageMode] = useState(false);\n//   //SetState  Edit data Geting From Modules List component\n//   const [EditData, setEditData] = useState({ OrderItem: [] });\n//   // useState({OrderItem:[]});\n//   const [orderDate, setOrderDate] = useState(currentDate);\n//   const [itemArray, setitemArray] = useState([])\n//   const [itemCount, setItemCount] = useState(0)\n//   const [customerName_dropdownSelect, setCustomerName_dropdownSelect] = useState({})\n//   const [totalAmountCount, setTotalAmountCount] = useState(0)\n//   useEffect(() => {\n//     // document.getElementById(\"txtName\").focus();\n//     dispatch(getOrderItems_ForOrderPage());\n//     dispatch(getPartyListAPI())\n//   }, [dispatch])\n//   useEffect(() => {\n//     if (!(editDataGatingFromList === undefined)) {\n//       setEditData(editDataGatingFromList[0]);\n//       setIsEdit(true);\n//       // dispatch(editModuleIDSuccess({ Status: false }))\n//       return\n//     }\n//     if (!(CheckPageMode === undefined)) {\n//       setPageMode(true)\n//       return\n//     }\n//   }, [editDataGatingFromList, CheckPageMode])\n//   const { OrderItems, APIResponse, CustomSearchInput, customerNameList } = useSelector((state) => ({\n//     OrderItems: state.OrderPageReducer.OrderItems,\n//     APIResponse: state.OrderPageReducer.submitOrderSuccess,\n//     CustomSearchInput: state.CustomSearchReducer.CustomSearchInput,\n//     // **customerNameList ==> this is  party list data geting from party list API\n//     customerNameList: state.PartyMasterReducer.partyList\n//   }));\n//   useEffect(() => {\n//     CustomSearchHandller()\n//   }, [CustomSearchInput])\n//   // This UseEffect clear Form Data and when modules Save Successfully.\n//   useEffect(() => {\n//     if ((APIResponse.Status === true) && (APIResponse.StatusCode === 200)) {\n//       dispatch(submitOrder_fromOrderPage_Success({ Status: false }))\n//       // formRef.current.reset();\n//       if (PageMode === true) {\n//         dispatch(AlertState({\n//           Type: 1,\n//           Status: true,\n//           Message: \"Error\"\n//           // APIResponse.Message,\n//         }))\n//       }\n//       else {\n//         dispatch(AlertState({\n//           Type: 1,\n//           Status: true,\n//           Message: APIResponse.Message,\n//           RedirectPath: '/orderList',\n//         }))\n//       }\n//     } else if (APIResponse.Status === true) {\n//       dispatch(submitOrder_fromOrderPage_Success({ Status: false }))\n//       dispatch(AlertState({\n//         Type: 4,\n//         Status: true,\n//         Message: \"error Message\",\n//         RedirectPath: false,\n//         AfterResponseAction: false\n//       }));\n//     }\n//   }, [APIResponse.Status])\n//   const saveHandeller = () => {\n//     const disc = document.getElementById(\"inp-description\").value\n//     const selectedItemArray = [];\n//     // for (var i = 0; i < OrderItems.length - 1; i++) {\n//     //   let qty = document.getElementById(\"inp-txtqty\" + i).value;\n//     //   if (qty > 0) {\n//     //     var itemID = document.getElementById(\"lblItemID\" + i).value;\n//     //     var itemMRP = document.getElementById(\"lblItemMRP\" + i).value;\n//     //     var itemGST = document.getElementById(\"lblItemGST\" + i).value;\n//     //     var UnitID = document.getElementById(\"ddlUnit\" + i).value;\n//     //     var rate = document.getElementById(\"rate\" + i).value;\n//     //     var comments = document.getElementById(\"inp-comment\" + i).value;\n//     //     let arrayElement = {\n//     //       OrderId: 0,\n//     //       ItemID: itemID,\n//     //       Quantity: qty,\n//     //       UnitID: UnitID,\n//     //       MRP: itemMRP,\n//     //       BaseUnitQuantity: \"1.00\",\n//     //       Comments: comments,\n//     //       GST: itemGST,\n//     //       Rate: rate\n//     //     };\n//     //     selectedItemArray.push(arrayElement);\n//     //   }\n//     // }\n//     const requestOptions = {\n//       body: JSON.stringify({\n//         CustomerID: 2,\n//         PartyID: 2,\n//         OrderAmount: totalAmountCount,\n//         Descreption: disc,\n//         CreatedBy: 11,\n//         OrderDate: orderDate,\n//         CompanyID: 1,\n//         DivisionID: 3,\n//         ExpectedDeliveryDate: orderDate,\n//         CreatedOn: currentDate,\n//         UpdatedBy: 1,\n//         UpdatedOn: currentDate,\n//         OrderItem: itemArray,// selectedItemArray,\n//       }),\n//     };\n//     debugger\n//     if (IsEdit && itemArray.length > 0) {\n//       dispatch(updateOrderID_From_OrderPage(requestOptions.body, EditData.id));\n//     }\n//     else if (itemArray.length > 0) {\n//       dispatch(submitOrder_fromOrderPage(requestOptions.body));\n//     }\n//     else {\n//       dispatch(AlertState({\n//         Type: 4,\n//         Status: true, Message: \"Please Select At List one Item\",\n//       }))\n//     }\n//     // generate(InvoiceFakeData)\n//   };\n//   function handleKeyDown(e) {\n//     let inpTarget = e.target.id\n//     let split = inpTarget.split(\"y\");\n//     let inp_ID = parseInt(split[1])\n//     let count = inp_ID;\n//     let inp_lable = split[0] + 'y';\n//     if (e.keyCode === 40 && (OrderItems.length - 1 > count)) {\n//       let next_inpDoun = document.getElementById(inp_lable + (count + 1)).disabled;\n//       while (next_inpDoun && (OrderItems.length - 1 > count)) {\n//         count = ++count;\n//         next_inpDoun = document.getElementById(inp_lable + (count)).disabled;\n//       }\n//       if (count === inp_ID) { count = ++count; }\n//       document.getElementById(inp_lable + count).focus();\n//       return\n//     }\n//     if (e.keyCode === 38 && count > 0) {\n//       let next_inp_UP = document.getElementById(inp_lable + (count - 1)).disabled;\n//       while (next_inp_UP && count > 0) {\n//         count = count - 1;\n//         next_inp_UP = document.getElementById(inp_lable + (count)).disabled;\n//       }\n//       if (count === inp_ID) { count = count - 1; }\n//       document.getElementById(inp_lable + count).focus();\n//     }\n//   }\n//   function CustomSearchHandller() {\n//     var input, filter, table, tr, td, i, txtValue;\n//     // input = document.getElementById(\"table_search_Input\");\n//     filter = CustomSearchInput.toUpperCase();\n//     table = document.getElementById(\"myTable\");\n//     tr = table.getElementsByTagName(\"tr\");\n//     for (i = 0; i < tr.length; i++) {\n//       td = tr[i].getElementsByTagName(\"td\")[0];\n//       if (td) {\n//         txtValue = td.textContent || td.innerText;\n//         if (txtValue.toUpperCase().indexOf(filter) > -1) {\n//           tr[i].style.display = \"\";\n//         } else {\n//           tr[i].style.display = \"none\";\n//         }\n//       }\n//     }\n//   }\n//   function InputHandelar(e, itemIndex, key) {\n//     const quantity = parseFloat(e.target.value)\n//     const rate = parseFloat(itemIndex.Rate)\n//     const Gst = parseFloat(itemIndex.GSTPercentage)\n//     const basicAmount = rate * quantity;\n//     const GstAmount = basicAmount * (Gst / 100)\n//     const totalAmount = GstAmount + basicAmount\n//     let test = []\n//     let TotalAmountCount_initial = 0\n//     let ItemCount_initial = 0\n//     const find = itemArray.find((element) => {\n//       return element.ItemID === itemIndex.ID\n//     });\n//     var dataa = (index1) => {\n//       return {\n//         ItemID: itemIndex.ID,\n//         Quantity: quantity,\n//         MRP: itemIndex.MRP,\n//         Rate: rate,\n//         UnitID: 1,\n//         BaseUnitQuantity: index1 ? index1 : 1,\n//         GST: parseInt(Gst.toFixed(2)),\n//         BasicAmount: basicAmount, // change\n//         GSTAmount: parseInt(GstAmount.toFixed(2)),// change\n//         CGST: 1,\n//         SGST: 1,\n//         IGST: 1,\n//         CGSTPercentage: 1,// change\n//         SGSTPercentage: 1,// change\n//         IGSTPercentage: 1,// change\n//         Amount: parseInt(totalAmount.toFixed(2)) // change\n//       }\n//     }\n//     if (quantity > 0) {\n//       if (find === undefined) {\n//         setitemArray([...itemArray, dataa()])\n//         test = [...itemArray, dataa()]\n//       } else {\n//         test = itemArray.filter((ele) => !(ele.ItemID === itemIndex.ID))\n//         test.push(dataa(find.BaseUnitQuantity));\n//         // const isLargeNumber = (element) => element.ItemID === i.ID;\n//         // const a = itemArray.findIndex(isLargeNumber);\n//         setitemArray(test)\n//       }\n//     }\n//     else {\n//       test = itemArray.filter((ele) => !(ele.ItemID === itemIndex.ID))\n//       setitemArray(test)\n//     }\n//     test.map((count) => {\n//       TotalAmountCount_initial = TotalAmountCount_initial + count.Amount\n//       ItemCount_initial = ItemCount_initial + 1\n//     })\n//     if ((test.length > 0)) {\n//       setTotalAmountCount(TotalAmountCount_initial);\n//       setItemCount(ItemCount_initial);\n//     }\n//     else {\n//       setTotalAmountCount(0)\n//       setItemCount(0)\n//     }\n//   }\n//   //  select customer  options ==> gating data  from party master \n//   const CustomerDropdownOptions = customerNameList.map((index) => ({\n//     value: index.ID,\n//     label: index.Name\n//   }));\n//   function handllerBaseUnit(e, i) {\n//     //unittables1=<UnitTable baseUnit={baseUnit} />\n//     // setbaseUN(e);\n//     debugger\n//     const find = itemArray.find((element) => {\n//       return element.ItemID === i.ID\n//     });\n//     if (find) {\n//       itemArray.forEach(element => {\n//         if (i.ID === element.ItemID) {\n//           element.BaseUnitQuantity = e.value;\n//         }\n//       });\n//       setitemArray(itemArray);\n//     } else {\n//       alert(\"Please Enter Quantity First\")\n//     }\n//   }\n//   console.log(itemArray)\n//   return (\n//     <React.Fragment>\n//       <div className=\"page-content \">\n//         <MetaTags>\n//           <title>Order | FoodERP-React FrontEnd</title>\n//         </MetaTags>\n//         <Breadcrumbs3\n//           title={\"Count :\"}\n//           breadcrumbItem={\"Order\"}\n//           IsSearch={true}\n//           breadcrumbCount={OrderItems.length}\n//         />\n//         <Container fluid>\n//           <Card >\n//             {/* <CardHeader className=\"card-header   text-dark\" style={{ backgroundColor: \"#dddddd\" }}>\n//               <h4 className=\" text-center text-black\" >React Validation - Normal</h4>\n//               <p className=\" text-black\">Provide valuable, actionable feedback to your users with HTML5 form validation–available in all our supported browsers.</p>\n//             </CardHeader> */}\n//             <CardBody>\n//               <Row className=\"mb-1 border border-black text-black mt-n3\" style={{ backgroundColor: \"#dddddd\" }} >\n//                 <Col md=\"2\" className=\"\">\n//                   <FormGroup className=\"mb- row mt-3 \" >\n//                     <Label className=\"col-sm-5 p-2\">Order Date</Label>\n//                     <Col md=\"7\">\n//                       <Flatpickr\n//                         className=\"form-control d-block\"\n//                         value={orderDate}\n//                         placeholder=\"dd Mm,yyyy\"\n//                         options={{\n//                           altInput: true,\n//                           altFormat: \"F j, Y\",\n//                           dateFormat: \"Y-m-d\"\n//                         }}\n//                         onChange={(y, e) => {\n//                           setOrderDate(e);\n//                         }}\n//                       />\n//                     </Col>\n//                   </FormGroup>\n//                 </Col>\n//                 <Col md=\"4\">\n//                   <FormGroup className=\"mb-2 row mt-3 \" >\n//                     <Label className=\"col-sm-4 p-2\">Customer Name</Label>\n//                     <Col md=\"8\">\n//                       <ReactSelect\n//                         Value={customerName_dropdownSelect}\n//                         classNamePrefix=\"select2-Customer\"\n//                         id={\"inp-customerName\"}\n//                         options={CustomerDropdownOptions}\n//                         onchange={(e) => { setCustomerName_dropdownSelect(e) }}\n//                       />\n//                     </Col>\n//                   </FormGroup>\n//                 </Col >\n//                 <Col md=\"3\">\n//                   <FormGroup className=\"mb-2 row mt-3 \" >\n//                     <Label className=\"col-sm-4 p-2 ml-n4 \">Descreption</Label>\n//                     <Col md=\"8\">\n//                       <Input\n//                         placeholder=\"Enter Description\"\n//                         id='inp-description'\n//                       />\n//                     </Col>\n//                   </FormGroup>\n//                 </Col >\n//                 <Col md=\"1\"></Col>\n//                 <Col md=\"2\" className=\"mt-n1 \">\n//                   <Label htmlFor=\"validationCustom01\"> </Label>\n//                   <div className=\" bg-soft-info text-center text-black  external-event  col-form-label rounded-2 align-right\">\n//                     Order Amount : &nbsp;&nbsp; {totalAmountCount.toFixed(2)}&nbsp;\n//                   </div>\n//                   {/* <h5 className=\" text-left text-danger  align-left\">\n//     Order Amount:&nbsp; {totalAmountCount.toFixed(2)}\n//   </h5> */}\n//                 </Col>\n//               </Row>\n//               <Row>\n//                 <div className=\"table-rep-plugin \">\n//                   <div\n//                     className=\"table-responsive mb-0 custom_scroll_div\"\n//                     data-pattern=\"priority-columns\"\n//                   >\n//                     <Table\n//                       id=\"myTable\"\n//                       className=\"table table-bordered text-black \"\n//                     >\n//                       <Thead>\n//                         <Tr>\n//                           <Th data-priority=\"15\" className=\"col-sm-5 text-center \">\n//                             <Row className=\"justify-content-md-center\">\n//                               <Col md={3} className={'align-right '}>Item Name&nbsp;&nbsp;&nbsp;</Col>\n//                               {/* <Col md={3}></Col> */}\n//                               <Col md={3} className=\"bg-soft-warning text-center text-black external-event rounded-2 align-left}  \">\n//                                 Count : &nbsp;(&nbsp; {itemCount}&nbsp;)\n//                               </Col>\n//                               {/* <Col md={3}></Col> */}\n//                             </Row>\n//                           </Th>\n//                           <Th data-priority=\"1\" className=\"text-center\">MRP</Th>\n//                           <Th data-priority=\"1\" className=\"text-center\">Rate</Th>\n//                           <Th data-priority=\"1\" className=\"text-center\" >GST %</Th>\n//                           <Th data-priority=\"1\" className=\"col-sm-1 text-center\">Quantity\n//                           </Th>\n//                           <Th data-priority=\"1\" className=\"col-sm-2 text-center\" >UOM</Th>\n//                         </Tr>\n//                       </Thead>\n//                       <Tbody>\n//                         {OrderItems.map((mapIndex, key) => {\n//                           var com = \"\";\n//                           var qat = '';\n//                           EditData.OrderItem.map((i, k) => {\n//                             if (mapIndex.ID === i.ItemID) { com = i.Comment; qat = i.Quantity }\n//                             return ''\n//                           })\n//                           return (\n//                             <Tr>\n//                               <Td>\n//                                 {mapIndex.ItemGroupName === itemgroups ? (\n//                                   <>\n//                                     <label\n//                                       id={\"lblItemName\" + key}\n//                                       name={\"lblItemName\" + key}\n//                                     >\n//                                       {mapIndex.Name}\n//                                     </label>\n//                                     <input\n//                                       type=\"hidden\"\n//                                       id={\"lblItemID\" + key}\n//                                       name={\"lblItemID\" + key}\n//                                       value={mapIndex.ID}\n//                                     />\n//                                     <input\n//                                       type=\"hidden\"\n//                                       id={\"lblItemGST\" + key}\n//                                       name={\"lblItemGST\" + key}\n//                                       value={mapIndex.GSTPercentage}\n//                                     />\n//                                   </>\n//                                 ) : (\n//                                   <React.Fragment>\n//                                     <label className=\"btn btn-secondary btn-sm waves-effect waves-light\">\n//                                       {/* {item.ItemGroupName} */}\n//                                       {(itemgroups = mapIndex.ItemGroupName)}\n//                                     </label>\n//                                     <br></br>\n//                                     <label\n//                                       id={\"lblItemName\" + key}\n//                                       name={\"lblItemName\" + key}\n//                                     >\n//                                       {mapIndex.Name}\n//                                     </label>\n//                                     <input\n//                                       type=\"hidden\"\n//                                       id={\"lblItemID\" + key}\n//                                       name={\"lblItemID\" + key}\n//                                       value={mapIndex.ID}\n//                                     />\n//                                     <input\n//                                       type=\"hidden\"\n//                                       id={\"lblItemGST\" + key}\n//                                       name={\"lblItemGST\" + key}\n//                                       value={mapIndex.GSTPercentage}\n//                                     />\n//                                   </React.Fragment>\n//                                 )}\n//                               </Td>\n//                               <Td className=\"align-bottom text-end\">\n//                                 <input\n//                                   type=\"hidden\"\n//                                   id={\"lblItemMRP\" + key}\n//                                   name={\"lblItemMRP\" + key}\n//                                   value={mapIndex.MRP}\n//                                 />\n//                                 <label style={{ a: \"end\" }}> {mapIndex.MRP} </label>\n//                               </Td>\n//                               <Td className=\"align-bottom text-end\">\n//                                 <label > {mapIndex.Rate} </label>\n//                                 <input\n//                                   type=\"hidden\"\n//                                   value={mapIndex.Rate}\n//                                   id={\"rate\" + key}\n//                                   className=\"form-control form-control-sm\"\n//                                   autoComplete=\"false\"\n//                                 />\n//                               </Td>\n//                               <Td className=\"align-bottom text-end\">\n//                                 <label > {mapIndex.GSTPercentage} % </label>\n//                                 <input\n//                                   type=\"hidden\"\n//                                   value={mapIndex.GSTPercentage}\n//                                   id={\"rate\" + key}\n//                                   className=\"form-control form-control-sm\"\n//                                   autoComplete=\"false\"\n//                                 />\n//                               </Td>\n//                               <Td className=\"align-bottom text-end\">\n//                                 <Row style={{ marginTop: \"5px\", }}>\n//                                   <input\n//                                     type=\"text\"\n//                                     id={\"inp-txtqty\" + key}\n//                                     placeholder={\"0.0\"}\n//                                     className=\"form-control float-end text-end\"\n//                                     key={mapIndex.ID}\n//                                     disabled={mapIndex.Rate > 0 ? false : true}\n//                                     defaultValue={qat}\n//                                     onKeyDown={(event) => {\n//                                       handleKeyDown(event);\n//                                       // if (event.charCode >= 48 && event.charCode <= 57 || event.charCode >= 96 && event.charCode <= 105) {\n//                                       //   return true;\n//                                       // } else {\n//                                       //   return false;\n//                                       // }\n//                                     }}\n//                                     onChange={(event) => {\n//                                       InputHandelar(event, mapIndex, key);\n//                                     }}\n//                                     // className=\"form-control form-control-sm\"\n//                                     autoComplete=\"off\"\n//                                     ng-required=\"true\"\n//                                   />\n//                                 </Row>\n//                               </Td>\n//                               <Td className=\"align-bottom\">\n//                                 <ReactSelect\n//                                   classNamePrefix=\"select2-selection\"\n//                                   id={\"ddlUnit\" + key}\n//                                   defaultValue={{ value: 1, label: \"NO\", }}\n//                                   options={\n//                                     [\n//                                       { value: 1, label: \"NO\" },\n//                                       { value: 2, label: \"Box\" },\n//                                       { value: 3, label: \"Kg\" }\n//                                     ]\n//                                   }\n//                                   onChange={(e) => { handllerBaseUnit(e, mapIndex) }}\n//                                 >\n//                                 </ReactSelect>\n//                               </Td>\n//                               {/* <Td>\n//                 {\" \"}\n//                 <input\n//                   type=\"text\"\n//                   defaultValue={com}\n//                   id={\"inp-comment\" + key}\n//                   class=\"form-control form-control-sm\"\n//                   autoComplete=\"off\"\n//                 />\n//               </Td> */}\n//                             </Tr>\n//                           );\n//                         })}\n//                       </Tbody>\n//                     </Table>\n//                     {/* <div class=\"row table1\" style={{ paddingBottom: 'center' }}>\n//       <button type=\"button\" className=\"btn btn-success text-center\"\n//         data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Create New\"\n//         onClick={() => {\n//           saveHandeller();\n//         }}\n//       >\n//         Save\n//       </button> :\n//     </div> */}\n//                     {\n//                       IsEdit ?\n//                         (\n//                           <div className=\"row update1\" style={{ paddingBottom: 'center' }}>\n//                             <button\n//                               type=\"submit\"\n//                               data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Update Order\"\n//                               className=\"btn btn-success w-md\"\n//                               onClick={() => {\n//                                 saveHandeller();\n//                               }}\n//                             >\n//                               <i className=\"fas fa-edit me-2\"></i>Update\n//                             </button>\n//                           </div>\n//                         )\n//                         :\n//                         (\n//                           <div className=\"row save1\" style={{ paddingBottom: 'center' }}>\n//                             <button\n//                               type=\"submit\"\n//                               data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Save Order\"\n//                               className=\"btn btn-success w-md\"\n//                               onClick={() => {\n//                                 saveHandeller();\n//                               }}\n//                             > <i className=\"fas fa-save me-2\"></i> Save\n//                             </button>\n//                           </div>\n//                         )\n//                     }\n//                   </div>\n//                 </div>\n//               </Row>\n//             </CardBody>\n//           </Card>\n//         </Container>\n//       </div>\n//     </React.Fragment>\n//   );\n// };\n// export default OrderPage;","map":{"version":3,"names":[],"sources":["D:/GitProjects/Manthan/src/pages/Order/OrderPage.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import { FormGroup, Input, Label } from \"reactstrap\";\r\n// import {\r\n//   Row,\r\n//   Col,\r\n//   Card,\r\n//   CardBody,\r\n//   Container,\r\n// } from \"reactstrap\";\r\n// import { Table, Thead, Tbody, Tr, Th, Td } from \"react-super-responsive-table\";\r\n// import \"react-super-responsive-table/dist/SuperResponsiveTableStyle.css\";\r\n\r\n// // store action import\r\n// import {\r\n//   submitOrder_fromOrderPage,\r\n//   getOrderItems_ForOrderPage,\r\n//   submitOrder_fromOrderPage_Success,\r\n//   updateOrderID_From_OrderPage,\r\n//   getSupplier\r\n// } from \"../../store/Purchase/OrderPageRedux/actions\";\r\n// import { useSelector, useDispatch } from \"react-redux\";\r\n// import './div.css'\r\n\r\n// import Breadcrumbs3 from \"../../components/Common/Breadcrumb3\"\r\n// import { AlertState } from \"../../store/actions\";\r\n\r\n// import { MetaTags } from \"react-meta-tags\";\r\n// import \"@vtaits/react-color-picker/dist/index.css\"\r\n// import \"react-datepicker/dist/react-datepicker.css\"\r\n// //Import Flatepicker\r\n// import \"flatpickr/dist/themes/material_blue.css\"\r\n// import Flatpickr from \"react-flatpickr\"\r\n// import ReactSelect from \"react-select\";\r\n// import { getPartyListAPI } from \"../../store/Administrator/PartyRedux/action\";\r\n\r\n// const OrderPage = (props) => {\r\n\r\n//   // For table items  for-loop constatnt  \r\n//   let itemgroups = \"\";\r\n\r\n//   //*** \"isEditdata get all data from ModuleID for Binding  Form controls\r\n//   let editDataGatingFromList = props.state;\r\n//   let CheckPageMode = props.IsComponentMode;\r\n\r\n\r\n//   const dispatch = useDispatch();\r\n//   const current = new Date();\r\n//   const month = current.getMonth() + 1;\r\n//   const currentDate = `${current.getFullYear()}-${month < 10 ? `0${month}` : `${month}`\r\n//     }-${current.getDate()}`;\r\n\r\n\r\n//   //'IsEdit'--if true then update data otherwise it will perfrom save operation\r\n//   const [IsEdit, setIsEdit] = useState(false);\r\n//   const [PageMode, setPageMode] = useState(false);\r\n\r\n//   //SetState  Edit data Geting From Modules List component\r\n//   const [EditData, setEditData] = useState({ OrderItem: [] });\r\n//   // useState({OrderItem:[]});\r\n\r\n\r\n\r\n//   const [orderDate, setOrderDate] = useState(currentDate);\r\n//   const [itemArray, setitemArray] = useState([])\r\n//   const [itemCount, setItemCount] = useState(0)\r\n//   const [customerName_dropdownSelect, setCustomerName_dropdownSelect] = useState({})\r\n//   const [totalAmountCount, setTotalAmountCount] = useState(0)\r\n\r\n\r\n//   useEffect(() => {\r\n//     // document.getElementById(\"txtName\").focus();\r\n//     dispatch(getOrderItems_ForOrderPage());\r\n//     dispatch(getPartyListAPI())\r\n//   }, [dispatch])\r\n\r\n\r\n//   useEffect(() => {\r\n\r\n//     if (!(editDataGatingFromList === undefined)) {\r\n//       setEditData(editDataGatingFromList[0]);\r\n//       setIsEdit(true);\r\n//       // dispatch(editModuleIDSuccess({ Status: false }))\r\n//       return\r\n//     }\r\n//     if (!(CheckPageMode === undefined)) {\r\n//       setPageMode(true)\r\n//       return\r\n//     }\r\n\r\n//   }, [editDataGatingFromList, CheckPageMode])\r\n\r\n\r\n//   const { OrderItems, APIResponse, CustomSearchInput, customerNameList } = useSelector((state) => ({\r\n//     OrderItems: state.OrderPageReducer.OrderItems,\r\n//     APIResponse: state.OrderPageReducer.submitOrderSuccess,\r\n//     CustomSearchInput: state.CustomSearchReducer.CustomSearchInput,\r\n//     // **customerNameList ==> this is  party list data geting from party list API\r\n//     customerNameList: state.PartyMasterReducer.partyList\r\n//   }));\r\n\r\n//   useEffect(() => {\r\n//     CustomSearchHandller()\r\n\r\n//   }, [CustomSearchInput])\r\n\r\n\r\n//   // This UseEffect clear Form Data and when modules Save Successfully.\r\n//   useEffect(() => {\r\n\r\n//     if ((APIResponse.Status === true) && (APIResponse.StatusCode === 200)) {\r\n//       dispatch(submitOrder_fromOrderPage_Success({ Status: false }))\r\n//       // formRef.current.reset();\r\n//       if (PageMode === true) {\r\n//         dispatch(AlertState({\r\n//           Type: 1,\r\n//           Status: true,\r\n//           Message: \"Error\"\r\n//           // APIResponse.Message,\r\n//         }))\r\n//       }\r\n//       else {\r\n//         dispatch(AlertState({\r\n//           Type: 1,\r\n//           Status: true,\r\n//           Message: APIResponse.Message,\r\n//           RedirectPath: '/orderList',\r\n\r\n//         }))\r\n//       }\r\n//     } else if (APIResponse.Status === true) {\r\n//       dispatch(submitOrder_fromOrderPage_Success({ Status: false }))\r\n//       dispatch(AlertState({\r\n//         Type: 4,\r\n//         Status: true,\r\n//         Message: \"error Message\",\r\n//         RedirectPath: false,\r\n//         AfterResponseAction: false\r\n//       }));\r\n//     }\r\n//   }, [APIResponse.Status])\r\n\r\n//   const saveHandeller = () => {\r\n\r\n//     const disc = document.getElementById(\"inp-description\").value\r\n//     const selectedItemArray = [];\r\n\r\n//     // for (var i = 0; i < OrderItems.length - 1; i++) {\r\n\r\n//     //   let qty = document.getElementById(\"inp-txtqty\" + i).value;\r\n\r\n//     //   if (qty > 0) {\r\n\r\n//     //     var itemID = document.getElementById(\"lblItemID\" + i).value;\r\n//     //     var itemMRP = document.getElementById(\"lblItemMRP\" + i).value;\r\n//     //     var itemGST = document.getElementById(\"lblItemGST\" + i).value;\r\n//     //     var UnitID = document.getElementById(\"ddlUnit\" + i).value;\r\n//     //     var rate = document.getElementById(\"rate\" + i).value;\r\n//     //     var comments = document.getElementById(\"inp-comment\" + i).value;\r\n\r\n//     //     let arrayElement = {\r\n//     //       OrderId: 0,\r\n//     //       ItemID: itemID,\r\n//     //       Quantity: qty,\r\n//     //       UnitID: UnitID,\r\n//     //       MRP: itemMRP,\r\n//     //       BaseUnitQuantity: \"1.00\",\r\n//     //       Comments: comments,\r\n//     //       GST: itemGST,\r\n//     //       Rate: rate\r\n//     //     };\r\n//     //     selectedItemArray.push(arrayElement);\r\n//     //   }\r\n//     // }\r\n\r\n//     const requestOptions = {\r\n//       body: JSON.stringify({\r\n//         CustomerID: 2,\r\n//         PartyID: 2,\r\n//         OrderAmount: totalAmountCount,\r\n//         Descreption: disc,\r\n//         CreatedBy: 11,\r\n//         OrderDate: orderDate,\r\n//         CompanyID: 1,\r\n//         DivisionID: 3,\r\n//         ExpectedDeliveryDate: orderDate,\r\n//         CreatedOn: currentDate,\r\n//         UpdatedBy: 1,\r\n//         UpdatedOn: currentDate,\r\n//         OrderItem: itemArray,// selectedItemArray,\r\n//       }),\r\n//     };\r\n//     debugger\r\n//     if (IsEdit && itemArray.length > 0) {\r\n//       dispatch(updateOrderID_From_OrderPage(requestOptions.body, EditData.id));\r\n//     }\r\n//     else if (itemArray.length > 0) {\r\n//       dispatch(submitOrder_fromOrderPage(requestOptions.body));\r\n//     }\r\n//     else {\r\n//       dispatch(AlertState({\r\n//         Type: 4,\r\n//         Status: true, Message: \"Please Select At List one Item\",\r\n//       }))\r\n//     }\r\n//     // generate(InvoiceFakeData)\r\n\r\n//   };\r\n\r\n//   function handleKeyDown(e) {\r\n//     let inpTarget = e.target.id\r\n//     let split = inpTarget.split(\"y\");\r\n//     let inp_ID = parseInt(split[1])\r\n//     let count = inp_ID;\r\n//     let inp_lable = split[0] + 'y';\r\n\r\n//     if (e.keyCode === 40 && (OrderItems.length - 1 > count)) {\r\n\r\n//       let next_inpDoun = document.getElementById(inp_lable + (count + 1)).disabled;\r\n//       while (next_inpDoun && (OrderItems.length - 1 > count)) {\r\n//         count = ++count;\r\n//         next_inpDoun = document.getElementById(inp_lable + (count)).disabled;\r\n//       }\r\n//       if (count === inp_ID) { count = ++count; }\r\n//       document.getElementById(inp_lable + count).focus();\r\n//       return\r\n//     }\r\n\r\n//     if (e.keyCode === 38 && count > 0) {\r\n\r\n//       let next_inp_UP = document.getElementById(inp_lable + (count - 1)).disabled;\r\n//       while (next_inp_UP && count > 0) {\r\n//         count = count - 1;\r\n//         next_inp_UP = document.getElementById(inp_lable + (count)).disabled;\r\n//       }\r\n//       if (count === inp_ID) { count = count - 1; }\r\n//       document.getElementById(inp_lable + count).focus();\r\n//     }\r\n//   }\r\n\r\n//   function CustomSearchHandller() {\r\n\r\n//     var input, filter, table, tr, td, i, txtValue;\r\n//     // input = document.getElementById(\"table_search_Input\");\r\n//     filter = CustomSearchInput.toUpperCase();\r\n//     table = document.getElementById(\"myTable\");\r\n//     tr = table.getElementsByTagName(\"tr\");\r\n//     for (i = 0; i < tr.length; i++) {\r\n//       td = tr[i].getElementsByTagName(\"td\")[0];\r\n//       if (td) {\r\n//         txtValue = td.textContent || td.innerText;\r\n//         if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n//           tr[i].style.display = \"\";\r\n//         } else {\r\n//           tr[i].style.display = \"none\";\r\n//         }\r\n//       }\r\n//     }\r\n\r\n//   }\r\n\r\n//   function InputHandelar(e, itemIndex, key) {\r\n\r\n//     const quantity = parseFloat(e.target.value)\r\n//     const rate = parseFloat(itemIndex.Rate)\r\n//     const Gst = parseFloat(itemIndex.GSTPercentage)\r\n//     const basicAmount = rate * quantity;\r\n//     const GstAmount = basicAmount * (Gst / 100)\r\n//     const totalAmount = GstAmount + basicAmount\r\n\r\n\r\n//     let test = []\r\n//     let TotalAmountCount_initial = 0\r\n//     let ItemCount_initial = 0\r\n\r\n//     const find = itemArray.find((element) => {\r\n//       return element.ItemID === itemIndex.ID\r\n//     });\r\n\r\n\r\n//     var dataa = (index1) => {\r\n\r\n//       return {\r\n//         ItemID: itemIndex.ID,\r\n//         Quantity: quantity,\r\n//         MRP: itemIndex.MRP,\r\n//         Rate: rate,\r\n//         UnitID: 1,\r\n//         BaseUnitQuantity: index1 ? index1 : 1,\r\n//         GST: parseInt(Gst.toFixed(2)),\r\n//         BasicAmount: basicAmount, // change\r\n//         GSTAmount: parseInt(GstAmount.toFixed(2)),// change\r\n//         CGST: 1,\r\n//         SGST: 1,\r\n//         IGST: 1,\r\n//         CGSTPercentage: 1,// change\r\n//         SGSTPercentage: 1,// change\r\n//         IGSTPercentage: 1,// change\r\n//         Amount: parseInt(totalAmount.toFixed(2)) // change\r\n//       }\r\n//     }\r\n\r\n//     if (quantity > 0) {\r\n\r\n//       if (find === undefined) {\r\n//         setitemArray([...itemArray, dataa()])\r\n//         test = [...itemArray, dataa()]\r\n//       } else {\r\n\r\n//         test = itemArray.filter((ele) => !(ele.ItemID === itemIndex.ID))\r\n//         test.push(dataa(find.BaseUnitQuantity));\r\n//         // const isLargeNumber = (element) => element.ItemID === i.ID;\r\n//         // const a = itemArray.findIndex(isLargeNumber);\r\n//         setitemArray(test)\r\n//       }\r\n\r\n//     }\r\n//     else {\r\n//       test = itemArray.filter((ele) => !(ele.ItemID === itemIndex.ID))\r\n//       setitemArray(test)\r\n\r\n//     }\r\n\r\n//     test.map((count) => {\r\n//       TotalAmountCount_initial = TotalAmountCount_initial + count.Amount\r\n//       ItemCount_initial = ItemCount_initial + 1\r\n//     })\r\n//     if ((test.length > 0)) {\r\n//       setTotalAmountCount(TotalAmountCount_initial);\r\n//       setItemCount(ItemCount_initial);\r\n//     }\r\n//     else {\r\n//       setTotalAmountCount(0)\r\n//       setItemCount(0)\r\n//     }\r\n//   }\r\n\r\n//   //  select customer  options ==> gating data  from party master \r\n//   const CustomerDropdownOptions = customerNameList.map((index) => ({\r\n//     value: index.ID,\r\n//     label: index.Name\r\n//   }));\r\n\r\n\r\n//   function handllerBaseUnit(e, i) {\r\n//     //unittables1=<UnitTable baseUnit={baseUnit} />\r\n//     // setbaseUN(e);\r\n//     debugger\r\n//     const find = itemArray.find((element) => {\r\n//       return element.ItemID === i.ID\r\n//     });\r\n//     if (find) {\r\n//       itemArray.forEach(element => {\r\n//         if (i.ID === element.ItemID) {\r\n//           element.BaseUnitQuantity = e.value;\r\n//         }\r\n//       });\r\n//       setitemArray(itemArray);\r\n//     } else {\r\n//       alert(\"Please Enter Quantity First\")\r\n//     }\r\n\r\n//   }\r\n//   console.log(itemArray)\r\n//   return (\r\n//     <React.Fragment>\r\n//       <div className=\"page-content \">\r\n//         <MetaTags>\r\n//           <title>Order | FoodERP-React FrontEnd</title>\r\n//         </MetaTags>\r\n//         <Breadcrumbs3\r\n//           title={\"Count :\"}\r\n//           breadcrumbItem={\"Order\"}\r\n//           IsSearch={true}\r\n//           breadcrumbCount={OrderItems.length}\r\n//         />\r\n//         <Container fluid>\r\n//           <Card >\r\n//             {/* <CardHeader className=\"card-header   text-dark\" style={{ backgroundColor: \"#dddddd\" }}>\r\n//               <h4 className=\" text-center text-black\" >React Validation - Normal</h4>\r\n//               <p className=\" text-black\">Provide valuable, actionable feedback to your users with HTML5 form validation–available in all our supported browsers.</p>\r\n//             </CardHeader> */}\r\n//             <CardBody>\r\n//               <Row className=\"mb-1 border border-black text-black mt-n3\" style={{ backgroundColor: \"#dddddd\" }} >\r\n\r\n//                 <Col md=\"2\" className=\"\">\r\n//                   <FormGroup className=\"mb- row mt-3 \" >\r\n//                     <Label className=\"col-sm-5 p-2\">Order Date</Label>\r\n//                     <Col md=\"7\">\r\n//                       <Flatpickr\r\n//                         className=\"form-control d-block\"\r\n//                         value={orderDate}\r\n//                         placeholder=\"dd Mm,yyyy\"\r\n//                         options={{\r\n//                           altInput: true,\r\n//                           altFormat: \"F j, Y\",\r\n//                           dateFormat: \"Y-m-d\"\r\n//                         }}\r\n//                         onChange={(y, e) => {\r\n//                           setOrderDate(e);\r\n//                         }}\r\n//                       />\r\n//                     </Col>\r\n//                   </FormGroup>\r\n//                 </Col>\r\n\r\n//                 <Col md=\"4\">\r\n//                   <FormGroup className=\"mb-2 row mt-3 \" >\r\n//                     <Label className=\"col-sm-4 p-2\">Customer Name</Label>\r\n//                     <Col md=\"8\">\r\n//                       <ReactSelect\r\n//                         Value={customerName_dropdownSelect}\r\n//                         classNamePrefix=\"select2-Customer\"\r\n//                         id={\"inp-customerName\"}\r\n//                         options={CustomerDropdownOptions}\r\n//                         onchange={(e) => { setCustomerName_dropdownSelect(e) }}\r\n//                       />\r\n//                     </Col>\r\n//                   </FormGroup>\r\n//                 </Col >\r\n\r\n//                 <Col md=\"3\">\r\n\r\n//                   <FormGroup className=\"mb-2 row mt-3 \" >\r\n//                     <Label className=\"col-sm-4 p-2 ml-n4 \">Descreption</Label>\r\n//                     <Col md=\"8\">\r\n//                       <Input\r\n//                         placeholder=\"Enter Description\"\r\n//                         id='inp-description'\r\n//                       />\r\n//                     </Col>\r\n//                   </FormGroup>\r\n//                 </Col >\r\n\r\n\r\n\r\n//                 <Col md=\"1\"></Col>\r\n\r\n//                 <Col md=\"2\" className=\"mt-n1 \">\r\n//                   <Label htmlFor=\"validationCustom01\"> </Label>\r\n//                   <div className=\" bg-soft-info text-center text-black  external-event  col-form-label rounded-2 align-right\">\r\n//                     Order Amount : &nbsp;&nbsp; {totalAmountCount.toFixed(2)}&nbsp;\r\n//                   </div>\r\n//                   {/* <h5 className=\" text-left text-danger  align-left\">\r\n//     Order Amount:&nbsp; {totalAmountCount.toFixed(2)}\r\n//   </h5> */}\r\n//                 </Col>\r\n\r\n//               </Row>\r\n//               <Row>\r\n//                 <div className=\"table-rep-plugin \">\r\n//                   <div\r\n//                     className=\"table-responsive mb-0 custom_scroll_div\"\r\n//                     data-pattern=\"priority-columns\"\r\n//                   >\r\n//                     <Table\r\n//                       id=\"myTable\"\r\n//                       className=\"table table-bordered text-black \"\r\n//                     >\r\n//                       <Thead>\r\n//                         <Tr>\r\n//                           <Th data-priority=\"15\" className=\"col-sm-5 text-center \">\r\n//                             <Row className=\"justify-content-md-center\">\r\n//                               <Col md={3} className={'align-right '}>Item Name&nbsp;&nbsp;&nbsp;</Col>\r\n//                               {/* <Col md={3}></Col> */}\r\n//                               <Col md={3} className=\"bg-soft-warning text-center text-black external-event rounded-2 align-left}  \">\r\n//                                 Count : &nbsp;(&nbsp; {itemCount}&nbsp;)\r\n//                               </Col>\r\n//                               {/* <Col md={3}></Col> */}\r\n//                             </Row>\r\n//                           </Th>\r\n//                           <Th data-priority=\"1\" className=\"text-center\">MRP</Th>\r\n//                           <Th data-priority=\"1\" className=\"text-center\">Rate</Th>\r\n//                           <Th data-priority=\"1\" className=\"text-center\" >GST %</Th>\r\n//                           <Th data-priority=\"1\" className=\"col-sm-1 text-center\">Quantity\r\n//                           </Th>\r\n//                           <Th data-priority=\"1\" className=\"col-sm-2 text-center\" >UOM</Th>\r\n//                         </Tr>\r\n//                       </Thead>\r\n//                       <Tbody>\r\n//                         {OrderItems.map((mapIndex, key) => {\r\n//                           var com = \"\";\r\n//                           var qat = '';\r\n//                           EditData.OrderItem.map((i, k) => {\r\n//                             if (mapIndex.ID === i.ItemID) { com = i.Comment; qat = i.Quantity }\r\n//                             return ''\r\n//                           })\r\n//                           return (\r\n//                             <Tr>\r\n//                               <Td>\r\n//                                 {mapIndex.ItemGroupName === itemgroups ? (\r\n//                                   <>\r\n//                                     <label\r\n//                                       id={\"lblItemName\" + key}\r\n//                                       name={\"lblItemName\" + key}\r\n//                                     >\r\n//                                       {mapIndex.Name}\r\n//                                     </label>\r\n//                                     <input\r\n//                                       type=\"hidden\"\r\n//                                       id={\"lblItemID\" + key}\r\n//                                       name={\"lblItemID\" + key}\r\n//                                       value={mapIndex.ID}\r\n//                                     />\r\n//                                     <input\r\n//                                       type=\"hidden\"\r\n//                                       id={\"lblItemGST\" + key}\r\n//                                       name={\"lblItemGST\" + key}\r\n//                                       value={mapIndex.GSTPercentage}\r\n//                                     />\r\n//                                   </>\r\n\r\n//                                 ) : (\r\n//                                   <React.Fragment>\r\n//                                     <label className=\"btn btn-secondary btn-sm waves-effect waves-light\">\r\n//                                       {/* {item.ItemGroupName} */}\r\n//                                       {(itemgroups = mapIndex.ItemGroupName)}\r\n//                                     </label>\r\n//                                     <br></br>\r\n//                                     <label\r\n//                                       id={\"lblItemName\" + key}\r\n//                                       name={\"lblItemName\" + key}\r\n//                                     >\r\n//                                       {mapIndex.Name}\r\n//                                     </label>\r\n//                                     <input\r\n//                                       type=\"hidden\"\r\n//                                       id={\"lblItemID\" + key}\r\n//                                       name={\"lblItemID\" + key}\r\n//                                       value={mapIndex.ID}\r\n//                                     />\r\n//                                     <input\r\n//                                       type=\"hidden\"\r\n//                                       id={\"lblItemGST\" + key}\r\n//                                       name={\"lblItemGST\" + key}\r\n//                                       value={mapIndex.GSTPercentage}\r\n//                                     />\r\n//                                   </React.Fragment>\r\n//                                 )}\r\n//                               </Td>\r\n\r\n//                               <Td className=\"align-bottom text-end\">\r\n//                                 <input\r\n//                                   type=\"hidden\"\r\n//                                   id={\"lblItemMRP\" + key}\r\n//                                   name={\"lblItemMRP\" + key}\r\n//                                   value={mapIndex.MRP}\r\n//                                 />\r\n//                                 <label style={{ a: \"end\" }}> {mapIndex.MRP} </label>\r\n\r\n//                               </Td>\r\n//                               <Td className=\"align-bottom text-end\">\r\n//                                 <label > {mapIndex.Rate} </label>\r\n//                                 <input\r\n//                                   type=\"hidden\"\r\n//                                   value={mapIndex.Rate}\r\n//                                   id={\"rate\" + key}\r\n//                                   className=\"form-control form-control-sm\"\r\n//                                   autoComplete=\"false\"\r\n//                                 />\r\n//                               </Td>\r\n//                               <Td className=\"align-bottom text-end\">\r\n//                                 <label > {mapIndex.GSTPercentage} % </label>\r\n//                                 <input\r\n//                                   type=\"hidden\"\r\n//                                   value={mapIndex.GSTPercentage}\r\n//                                   id={\"rate\" + key}\r\n//                                   className=\"form-control form-control-sm\"\r\n//                                   autoComplete=\"false\"\r\n//                                 />\r\n//                               </Td>\r\n//                               <Td className=\"align-bottom text-end\">\r\n//                                 <Row style={{ marginTop: \"5px\", }}>\r\n\r\n//                                   <input\r\n//                                     type=\"text\"\r\n//                                     id={\"inp-txtqty\" + key}\r\n//                                     placeholder={\"0.0\"}\r\n//                                     className=\"form-control float-end text-end\"\r\n//                                     key={mapIndex.ID}\r\n//                                     disabled={mapIndex.Rate > 0 ? false : true}\r\n//                                     defaultValue={qat}\r\n//                                     onKeyDown={(event) => {\r\n//                                       handleKeyDown(event);\r\n//                                       // if (event.charCode >= 48 && event.charCode <= 57 || event.charCode >= 96 && event.charCode <= 105) {\r\n//                                       //   return true;\r\n//                                       // } else {\r\n//                                       //   return false;\r\n//                                       // }\r\n\r\n//                                     }}\r\n//                                     onChange={(event) => {\r\n//                                       InputHandelar(event, mapIndex, key);\r\n//                                     }}\r\n//                                     // className=\"form-control form-control-sm\"\r\n//                                     autoComplete=\"off\"\r\n//                                     ng-required=\"true\"\r\n//                                   />\r\n\r\n//                                 </Row>\r\n//                               </Td>\r\n//                               <Td className=\"align-bottom\">\r\n//                                 <ReactSelect\r\n//                                   classNamePrefix=\"select2-selection\"\r\n//                                   id={\"ddlUnit\" + key}\r\n//                                   defaultValue={{ value: 1, label: \"NO\", }}\r\n//                                   options={\r\n//                                     [\r\n//                                       { value: 1, label: \"NO\" },\r\n//                                       { value: 2, label: \"Box\" },\r\n//                                       { value: 3, label: \"Kg\" }\r\n//                                     ]\r\n//                                   }\r\n//                                   onChange={(e) => { handllerBaseUnit(e, mapIndex) }}\r\n//                                 >\r\n//                                 </ReactSelect>\r\n//                               </Td>\r\n//                               {/* <Td>\r\n//                 {\" \"}\r\n//                 <input\r\n//                   type=\"text\"\r\n//                   defaultValue={com}\r\n//                   id={\"inp-comment\" + key}\r\n//                   class=\"form-control form-control-sm\"\r\n//                   autoComplete=\"off\"\r\n//                 />\r\n//               </Td> */}\r\n//                             </Tr>\r\n//                           );\r\n//                         })}\r\n//                       </Tbody>\r\n//                     </Table>\r\n//                     {/* <div class=\"row table1\" style={{ paddingBottom: 'center' }}>\r\n//       <button type=\"button\" className=\"btn btn-success text-center\"\r\n//         data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Create New\"\r\n//         onClick={() => {\r\n//           saveHandeller();\r\n//         }}\r\n//       >\r\n//         Save\r\n//       </button> :\r\n//     </div> */}\r\n\r\n//                     {\r\n//                       IsEdit ?\r\n//                         (\r\n//                           <div className=\"row update1\" style={{ paddingBottom: 'center' }}>\r\n//                             <button\r\n//                               type=\"submit\"\r\n//                               data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Update Order\"\r\n//                               className=\"btn btn-success w-md\"\r\n//                               onClick={() => {\r\n//                                 saveHandeller();\r\n//                               }}\r\n//                             >\r\n//                               <i className=\"fas fa-edit me-2\"></i>Update\r\n//                             </button>\r\n//                           </div>\r\n//                         )\r\n//                         :\r\n//                         (\r\n//                           <div className=\"row save1\" style={{ paddingBottom: 'center' }}>\r\n//                             <button\r\n//                               type=\"submit\"\r\n//                               data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Save Order\"\r\n//                               className=\"btn btn-success w-md\"\r\n//                               onClick={() => {\r\n//                                 saveHandeller();\r\n//                               }}\r\n//                             > <i className=\"fas fa-save me-2\"></i> Save\r\n//                             </button>\r\n//                           </div>\r\n//                         )\r\n//                     }\r\n\r\n//                   </div>\r\n//                 </div>\r\n\r\n//               </Row>\r\n//             </CardBody>\r\n//           </Card>\r\n\r\n//         </Container>\r\n\r\n//       </div>\r\n//     </React.Fragment>\r\n//   );\r\n// };\r\n\r\n// export default OrderPage;\r\n"],"mappings},"metadata":{},"sourceType":"module"}
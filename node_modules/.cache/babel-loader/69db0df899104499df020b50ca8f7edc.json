{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitProjects\\\\Manthan\\\\src\\\\components\\\\Common\\\\CmponentRelatedCommonFile\\\\SearchBox\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport '../../../../assets/searchBox/searchBox.scss';\nimport { MySearch } from './MySearch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MainSearchBox = () => {\n  _s();\n\n  const [searchRoleData, setSearchRoleData] = useState([]); // const  RoleAccessData=demoRolleAcess\n\n  const {\n    RoleAccessData,\n    searchProps\n  } = useSelector(state => ({\n    RoleAccessData: state.Login.RoleData,\n    searchProps: state.BreadcrumbReducer.searchProps\n  }));\n  useEffect(() => {\n    let SearchRoleData_initial = [];\n    RoleAccessData.map(i => {\n      i.ModuleData.map(index => {\n        SearchRoleData_initial.push(index);\n      });\n    });\n    setSearchRoleData(SearchRoleData_initial);\n  }, [RoleAccessData]);\n  useEffect(() => {\n    function autocomplete(inp, arr) {\n      /*the autocomplete function takes two arguments,\r\n      the text field element and an array of possible autocompleted values:*/\n      var currentFocus;\n      /*execute a function when someone writes in the text field:*/\n\n      inp.addEventListener(\"input\", function (e) {\n        var a,\n            b,\n            i,\n            val = this.value;\n        /*close any already open lists of autocompleted values*/\n\n        closeAllLists();\n\n        if (!val) {\n          return false;\n        } // var a = input.value\n\n\n        if (val[0] === \"/\") {\n          val = val.substring(1);\n        } else {\n          return false;\n        }\n\n        if (!val) {\n          return false;\n        }\n\n        currentFocus = -1;\n        /*create a DIV element that will contain the items (values):*/\n\n        a = document.createElement(\"DIV\");\n        a.setAttribute(\"id\", this.id + \"autocomplete-list\");\n        a.setAttribute(\"class\", \"autocomplete-items\");\n        /*append the DIV element as a child of the autocomplete container:*/\n\n        this.parentNode.appendChild(a);\n        /*for each item in the array...*/\n\n        for (i = 0; i < arr.length; i++) {\n          /*check if the item starts with the same letters as the text field value:*/\n          if (arr[i].Name.substr(0, val.length).toUpperCase() == val.toUpperCase()) {\n            /*create a DIV element for each matching element:*/\n            b = document.createElement(\"DIV\");\n            /*make the matching letters bold:*/\n\n            b.innerHTML = \"<strong>\" + arr[i].Name.substr(0, val.length) + \"</strong>\";\n            b.innerHTML += arr[i].Name.substr(val.length);\n            /*insert a input field that will hold the current array item's value:*/\n\n            b.innerHTML += \"<input type='hidden' id='\" + i + \"' value='\" + arr[i].Name + \"'>\"; //  var ActualPagePath=arr[i].ActualPagePath\n            // alert(ActualPagePath)\n\n            /*execute a function when someone clicks on the item value (DIV element):*/\n\n            b.addEventListener(\"click\", function (e) {\n              /*insert the value for the autocomplete text field:*/\n              inp.value = this.getElementsByTagName(\"input\")[0].value;\n              var input_id = this.getElementsByTagName(\"input\")[0].id; // alert(input_id)\n\n              var ActualPagePath = arr[input_id].ActualPagePath;\n              window.location.href = ActualPagePath; // window.open(ActualPagePath)\n\n              /*close the list of autocompleted values,\r\n              (or any other open lists of autocompleted values:*/\n\n              closeAllLists();\n            });\n            a.appendChild(b);\n          }\n        }\n      });\n      /*execute a function presses a key on the keyboard:*/\n\n      inp.addEventListener(\"keydown\", function (e) {\n        // debugger\n        var x = document.getElementById(this.id + \"autocomplete-list\");\n        if (x) x = x.getElementsByTagName(\"div\");\n\n        if (e.keyCode == 40) {\n          /*If the arrow DOWN key is pressed,\r\n          increase the currentFocus variable:*/\n          currentFocus++;\n          /*and and make the current item more visible:*/\n\n          addActive(x);\n        } else if (e.keyCode == 38) {\n          //up\n\n          /*If the arrow UP key is pressed,\r\n          decrease the currentFocus variable:*/\n          currentFocus--;\n          /*and and make the current item more visible:*/\n\n          addActive(x);\n        } else if (e.keyCode == 13) {\n          /*If the ENTER key is pressed, prevent the form from being submitted,*/\n          e.preventDefault();\n\n          if (currentFocus > -1) {\n            /*and simulate a click on the \"active\" item:*/\n            if (x) x[currentFocus].click();\n          }\n        }\n      });\n\n      function addActive(x) {\n        /*a function to classify an item as \"active\":*/\n        if (!x) return false;\n        /*start by removing the \"active\" class on all items:*/\n\n        removeActive(x);\n        if (currentFocus >= x.length) currentFocus = 0;\n        if (currentFocus < 0) currentFocus = x.length - 1;\n        /*add class \"autocomplete-active\":*/\n\n        x[currentFocus].classList.add(\"autocomplete-active\");\n      }\n\n      function removeActive(x) {\n        /*a function to remove the \"active\" class from all autocomplete items:*/\n        for (var i = 0; i < x.length; i++) {\n          x[i].classList.remove(\"autocomplete-active\");\n        }\n      }\n\n      function closeAllLists(elmnt) {\n        /*close all autocomplete lists in the document,\r\n        except the one passed as an argument:*/\n        var x = document.getElementsByClassName(\"autocomplete-items\");\n\n        for (var i = 0; i < x.length; i++) {\n          if (elmnt != x[i] && elmnt != inp) {\n            x[i].parentNode.removeChild(x[i]);\n          }\n        }\n      }\n      /*execute a function when someone clicks in the document:*/\n\n\n      document.addEventListener(\"click\", function (e) {\n        closeAllLists(e.target);\n      });\n    }\n    /*initiate the autocomplete function on the \"myInput\" element, and pass along the countries array as possible autocomplete values:*/\n\n\n    autocomplete(document.getElementById(\"myInput\"), searchRoleData);\n  }, [searchRoleData]); // searchProps2 = searchProps\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MySearch, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MainSearchBox, \"vgcehxLhnSQHxU8LXpM+poXmz8E=\", false, function () {\n  return [useSelector];\n});\n\n_c = MainSearchBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainSearchBox\");","map":{"version":3,"names":["React","useEffect","useState","useSelector","MySearch","MainSearchBox","searchRoleData","setSearchRoleData","RoleAccessData","searchProps","state","Login","RoleData","BreadcrumbReducer","SearchRoleData_initial","map","i","ModuleData","index","push","autocomplete","inp","arr","currentFocus","addEventListener","e","a","b","val","value","closeAllLists","substring","document","createElement","setAttribute","id","parentNode","appendChild","length","Name","substr","toUpperCase","innerHTML","getElementsByTagName","input_id","ActualPagePath","window","location","href","x","getElementById","keyCode","addActive","preventDefault","click","removeActive","classList","add","remove","elmnt","getElementsByClassName","removeChild","target"],"sources":["D:/GitProjects/Manthan/src/components/Common/CmponentRelatedCommonFile/SearchBox/index.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport '../../../../assets/searchBox/searchBox.scss'\r\nimport { MySearch } from './MySearch';\r\n\r\nexport const MainSearchBox = () => {\r\n\r\n    const [searchRoleData, setSearchRoleData] = useState([])\r\n    // const  RoleAccessData=demoRolleAcess\r\n\r\n    const { RoleAccessData, searchProps } = useSelector((state) => ({\r\n        RoleAccessData: state.Login.RoleData,\r\n        searchProps: state.BreadcrumbReducer.searchProps,\r\n    }));\r\n\r\n    useEffect(() => {\r\n\r\n        let SearchRoleData_initial = []\r\n\r\n        RoleAccessData.map((i) => {\r\n            i.ModuleData.map((index) => {\r\n                SearchRoleData_initial.push(index)\r\n            })\r\n        })\r\n        setSearchRoleData(SearchRoleData_initial)\r\n    }, [RoleAccessData])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        function autocomplete(inp, arr) {\r\n            /*the autocomplete function takes two arguments,\r\n            the text field element and an array of possible autocompleted values:*/\r\n            var currentFocus;\r\n            /*execute a function when someone writes in the text field:*/\r\n\r\n            inp.addEventListener(\"input\", function (e) {\r\n\r\n                var a, b, i, val = this.value;\r\n                /*close any already open lists of autocompleted values*/\r\n                closeAllLists();\r\n                if (!val) { return false; }\r\n                // var a = input.value\r\n\r\n                if (val[0] === \"/\") {\r\n                    val = val.substring(1);\r\n                } else {\r\n                    return false;\r\n                }\r\n                if (!val) { return false; }\r\n                currentFocus = -1;\r\n                /*create a DIV element that will contain the items (values):*/\r\n                a = document.createElement(\"DIV\");\r\n                a.setAttribute(\"id\", this.id + \"autocomplete-list\");\r\n                a.setAttribute(\"class\", \"autocomplete-items\");\r\n                /*append the DIV element as a child of the autocomplete container:*/\r\n                this.parentNode.appendChild(a);\r\n                /*for each item in the array...*/\r\n                for (i = 0; i < arr.length; i++) {\r\n                    /*check if the item starts with the same letters as the text field value:*/\r\n                    if (arr[i].Name.substr(0, val.length).toUpperCase() == val.toUpperCase()) {\r\n                        /*create a DIV element for each matching element:*/\r\n                        b = document.createElement(\"DIV\");\r\n                        /*make the matching letters bold:*/\r\n                        b.innerHTML = \"<strong>\" + arr[i].Name.substr(0, val.length) + \"</strong>\";\r\n                        b.innerHTML += arr[i].Name.substr(val.length);\r\n                        /*insert a input field that will hold the current array item's value:*/\r\n                        b.innerHTML += \"<input type='hidden' id='\" + i + \"' value='\" + arr[i].Name + \"'>\";\r\n                        //  var ActualPagePath=arr[i].ActualPagePath\r\n                        // alert(ActualPagePath)\r\n                        /*execute a function when someone clicks on the item value (DIV element):*/\r\n                        b.addEventListener(\"click\", function (e) {\r\n                            /*insert the value for the autocomplete text field:*/\r\n                            inp.value = this.getElementsByTagName(\"input\")[0].value;\r\n                            var input_id = this.getElementsByTagName(\"input\")[0].id;\r\n\r\n                            // alert(input_id)\r\n                            var ActualPagePath = arr[input_id].ActualPagePath\r\n                            window.location.href = (ActualPagePath)\r\n                            // window.open(ActualPagePath)\r\n                            /*close the list of autocompleted values,\r\n                            (or any other open lists of autocompleted values:*/\r\n                            closeAllLists();\r\n                        });\r\n                        a.appendChild(b);\r\n                    }\r\n                }\r\n            });\r\n            /*execute a function presses a key on the keyboard:*/\r\n            inp.addEventListener(\"keydown\", function (e) {\r\n                // debugger\r\n                var x = document.getElementById(this.id + \"autocomplete-list\");\r\n                if (x) x = x.getElementsByTagName(\"div\");\r\n                if (e.keyCode == 40) {\r\n                    /*If the arrow DOWN key is pressed,\r\n                    increase the currentFocus variable:*/\r\n                    currentFocus++;\r\n                    /*and and make the current item more visible:*/\r\n                    addActive(x);\r\n                } else if (e.keyCode == 38) { //up\r\n                    /*If the arrow UP key is pressed,\r\n                    decrease the currentFocus variable:*/\r\n                    currentFocus--;\r\n                    /*and and make the current item more visible:*/\r\n                    addActive(x);\r\n                } else if (e.keyCode == 13) {\r\n                    /*If the ENTER key is pressed, prevent the form from being submitted,*/\r\n                    e.preventDefault();\r\n                    if (currentFocus > -1) {\r\n                        /*and simulate a click on the \"active\" item:*/\r\n                        if (x) x[currentFocus].click();\r\n                    }\r\n                }\r\n            });\r\n            function addActive(x) {\r\n                /*a function to classify an item as \"active\":*/\r\n                if (!x) return false;\r\n                /*start by removing the \"active\" class on all items:*/\r\n                removeActive(x);\r\n                if (currentFocus >= x.length) currentFocus = 0;\r\n                if (currentFocus < 0) currentFocus = (x.length - 1);\r\n                /*add class \"autocomplete-active\":*/\r\n                x[currentFocus].classList.add(\"autocomplete-active\");\r\n            }\r\n            function removeActive(x) {\r\n                /*a function to remove the \"active\" class from all autocomplete items:*/\r\n                for (var i = 0; i < x.length; i++) {\r\n                    x[i].classList.remove(\"autocomplete-active\");\r\n                }\r\n            }\r\n            function closeAllLists(elmnt) {\r\n                /*close all autocomplete lists in the document,\r\n                except the one passed as an argument:*/\r\n                var x = document.getElementsByClassName(\"autocomplete-items\");\r\n                for (var i = 0; i < x.length; i++) {\r\n                    if (elmnt != x[i] && elmnt != inp) {\r\n                        x[i].parentNode.removeChild(x[i]);\r\n                    }\r\n                }\r\n            }\r\n            /*execute a function when someone clicks in the document:*/\r\n            document.addEventListener(\"click\", function (e) {\r\n                closeAllLists(e.target);\r\n            });\r\n        }\r\n\r\n\r\n        /*initiate the autocomplete function on the \"myInput\" element, and pass along the countries array as possible autocomplete values:*/\r\n        autocomplete(document.getElementById(\"myInput\"), searchRoleData);\r\n\r\n    }, [searchRoleData])\r\n\r\n    // searchProps2 = searchProps\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MySearch />\r\n        </React.Fragment>\r\n\r\n\r\n    )\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
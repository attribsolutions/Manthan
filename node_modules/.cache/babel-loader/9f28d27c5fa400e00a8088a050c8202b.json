{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitProjects\\\\Manthan\\\\src\\\\pages\\\\Adminisrator\\\\Page-Pages\\\\PageList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory, { PaginationListStandalone, PaginationProvider } from \"react-bootstrap-table2-paginator\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport { MetaTags } from \"react-meta-tags\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, Col, Modal, Row } from \"reactstrap\";\nimport { deleteHpagesUsingID, deleteModuleIDSuccess, editHPagesID, GetHpageListData, saveHPagesSuccess, updateHPagesSuccess } from \"../../../store/Administrator/HPagesRedux/actions\";\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\nimport HPageMaster from \"./PageMaster\";\nimport { AlertState } from \"../../../store/actions\";\nimport { useHistory } from \"react-router-dom\";\nimport { listPageCommonButtonFunction } from \"../../../components/Common/CmponentRelatedCommonFile/listPageCommonButtons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PageList() {\n  _s();\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [userPageAccessState, setUserPageAccessState] = useState('');\n  const [modal_center, setmodal_center] = useState(false);\n  const [modal_fullscreen, setmodal_fullscreen] = useState(false);\n\n  function removeBodyCss() {\n    document.body.classList.add(\"no_padding\");\n  } // var HPageListData = [];\n\n\n  const {\n    HPageListData,\n    editData,\n    updateMessage,\n    deleteModuleID,\n    RoleAccessModifiedinSingleArray,\n    PostAPIResponse\n  } = useSelector(state => ({\n    HPageListData: state.H_Pages.HPagesListData,\n    editData: state.H_Pages.editData,\n    updateMessage: state.H_Pages.updateMessage,\n    deleteModuleID: state.H_Pages.deleteModuleID,\n    RoleAccessModifiedinSingleArray: state.Login.RoleAccessUpdateData,\n    PostAPIResponse: state.H_Pages.saveMessage\n  }));\n  useEffect(() => {\n    const locationPath = history.location.pathname;\n    let userAcc = RoleAccessModifiedinSingleArray.find(inx => {\n      return `/${inx.ActualPagePath}` === locationPath;\n    });\n\n    if (!(userAcc === undefined)) {\n      setUserPageAccessState(userAcc);\n    }\n  }, [RoleAccessModifiedinSingleArray]);\n  useEffect(() => {\n    dispatch(dispatch(GetHpageListData()));\n  }, []);\n\n  function tog_fullscreen() {\n    setmodal_fullscreen(!modal_fullscreen);\n    removeBodyCss();\n  }\n\n  useEffect(() => {\n    if (updateMessage.Status === true && updateMessage.StatusCode === 200) {\n      dispatch(updateHPagesSuccess({\n        Status: false\n      }));\n      dispatch(AlertState({\n        Type: 1,\n        Status: true,\n        Message: updateMessage.Message,\n        AfterResponseAction: GetHpageListData\n      }));\n      tog_fullscreen();\n    } else if (updateMessage.Status === true) {\n      dispatch(updateHPagesSuccess({\n        Status: false\n      }));\n      dispatch(AlertState({\n        Type: 3,\n        Status: true,\n        Message: JSON.stringify(updateMessage.Message)\n      }));\n    }\n  }, [updateMessage]);\n  useEffect(() => {\n    if (deleteModuleID.Status === true && deleteModuleID.StatusCode === 200) {\n      dispatch(deleteModuleIDSuccess({\n        Status: false\n      }));\n      dispatch(AlertState({\n        Type: 1,\n        Status: true,\n        Message: deleteModuleID.Message,\n        AfterResponseAction: GetHpageListData\n      }));\n    } else if (deleteModuleID.Status === true) {\n      dispatch(deleteModuleIDSuccess({\n        Status: false\n      }));\n      dispatch(AlertState({\n        Type: 3,\n        Status: true,\n        Message: JSON.stringify(deleteModuleID.Message)\n      }));\n    }\n  }, [deleteModuleID.Status]);\n  useEffect(() => {\n    if (PostAPIResponse.Status === true && PostAPIResponse.StatusCode === 200) {\n      dispatch(saveHPagesSuccess({\n        Status: false\n      }));\n      tog_fullscreen();\n      dispatch(GetHpageListData());\n      dispatch(AlertState({\n        Type: 1,\n        Status: true,\n        Message: PostAPIResponse.Message\n      }));\n    } else if (PostAPIResponse.Status === true) {\n      dispatch(saveHPagesSuccess({\n        Status: false\n      }));\n      dispatch(AlertState({\n        Type: 4,\n        Status: true,\n        Message: JSON.stringify(PostAPIResponse.Message),\n        RedirectPath: false,\n        AfterResponseAction: false\n      }));\n    }\n  }, [PostAPIResponse.Status]);\n  useEffect(() => {\n    if (editData.Status === true) {\n      tog_fullscreen();\n    }\n  }, [editData]);\n  debugger;\n  const pageOptions = {\n    sizePerPage: 15,\n    // totalSize: HPageListData.length, // replace later with size(users),\n    custom: true\n  };\n  const defaultSorted = [{\n    dataField: \"Name\",\n    // if dataField is not match to any column you defined, it will be ignored.\n    order: \"asc\" // desc or asc\n\n  }];\n  let myInlineStyle = {\n    marginTop: \"-10px\"\n  };\n  const HPageListColoumns = [{\n    text: \"ID\",\n    dataField: \"id\",\n    sort: true\n  }, {\n    text: \"Name\",\n    dataField: \"Name\",\n    sort: true\n  }, {\n    text: \"Page Heading\",\n    dataField: \"PageHeading\",\n    sort: true\n  }, {\n    text: \"Module Name\",\n    dataField: \"ModuleName\",\n    sort: true\n  }, {\n    text: \"Display Index\",\n    dataField: \"DisplayIndex\",\n    sort: true\n  }, {\n    text: \"Icon\",\n    dataField: \"Icon\",\n    sort: true\n  }, {\n    text: \"Page Path\",\n    dataField: \"ActualPagePath\",\n    sort: true\n  }, {\n    text: \"Active\",\n    dataField: \"isActive\",\n    sort: true\n  }, // For Edit, Delete ,and View Button Common Code function\n  listPageCommonButtonFunction({\n    dispatchHook: dispatch,\n    ButtonMsgLable: \"Page \",\n    deleteName: \"Name\",\n    userPageAccessState: userPageAccessState,\n    editActionFun: editHPagesID,\n    deleteActionFun: deleteHpagesUsingID\n  })];\n\n  if (!(userPageAccessState === '')) {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        children: [/*#__PURE__*/_jsxDEV(MetaTags, {\n          children: /*#__PURE__*/_jsxDEV(\"title\", {\n            children: \"Page List| FoodERP-React FrontEnd\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PaginationProvider, {\n          pagination: paginationFactory(pageOptions),\n          children: _ref => {\n            let {\n              paginationProps,\n              paginationTableProps\n            } = _ref;\n            return /*#__PURE__*/_jsxDEV(ToolkitProvider, {\n              keyField: \"id\",\n              data: HPageListData,\n              columns: HPageListColoumns,\n              search: true,\n              children: toolkitProps => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n                  title: \"Count :\",\n                  breadcrumbItem: \"Page List\",\n                  IsButtonVissible: true,\n                  SearchProps: toolkitProps.searchProps,\n                  IsSearchVissible: true,\n                  breadcrumbCount: `Page Count: ${HPageListData.length}` // RedirctPath={ `/${btoa(\"PageMaster\")}`}\n                  ,\n                  RedirctPath: `/PageMaster`,\n                  isExcelButtonVisible: true,\n                  ExcelData: HPageListData\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Row, {\n                  children: /*#__PURE__*/_jsxDEV(Col, {\n                    xl: \"12\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"table-responsive\",\n                      children: /*#__PURE__*/_jsxDEV(BootstrapTable, {\n                        keyField: \"id\",\n                        responsive: true,\n                        bordered: false,\n                        striped: false,\n                        defaultSorted: defaultSorted // selectRow={selectRow}\n                        ,\n                        classes: \"table  table-bordered\",\n                        ...toolkitProps.baseProps,\n                        ...paginationTableProps\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 249,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 248,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 247,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 246,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Row, {\n                  className: \"align-items-md-center mt-30\",\n                  children: /*#__PURE__*/_jsxDEV(Col, {\n                    className: \"pagination pagination-rounded justify-content-end mb-2\",\n                    children: /*#__PURE__*/_jsxDEV(PaginationListStandalone, { ...paginationProps\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 265,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 264,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 263,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 15\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: modal_fullscreen,\n        toggle: () => {\n          tog_fullscreen();\n        },\n        size: \"fullscreen\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-body\",\n          children: /*#__PURE__*/_jsxDEV(HPageMaster, {\n            state: editData.Data,\n            relatatedPage: \"/PageMaster\",\n            pageMode: editData.pageMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-footer\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => {\n              tog_fullscreen();\n            },\n            className: \"btn btn-secondary \",\n            \"data-dismiss\": \"modal\",\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(PageList, \"z894jcu5namNHxPFzHc0GbPlo5M=\", false, function () {\n  return [useDispatch, useHistory, useSelector];\n});\n\n_c = PageList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageList\");","map":{"version":3,"names":["React","useEffect","useRef","useState","BootstrapTable","paginationFactory","PaginationListStandalone","PaginationProvider","ToolkitProvider","MetaTags","useDispatch","useSelector","Button","Col","Modal","Row","deleteHpagesUsingID","deleteModuleIDSuccess","editHPagesID","GetHpageListData","saveHPagesSuccess","updateHPagesSuccess","Breadcrumbs","HPageMaster","AlertState","useHistory","listPageCommonButtonFunction","PageList","dispatch","history","userPageAccessState","setUserPageAccessState","modal_center","setmodal_center","modal_fullscreen","setmodal_fullscreen","removeBodyCss","document","body","classList","add","HPageListData","editData","updateMessage","deleteModuleID","RoleAccessModifiedinSingleArray","PostAPIResponse","state","H_Pages","HPagesListData","Login","RoleAccessUpdateData","saveMessage","locationPath","location","pathname","userAcc","find","inx","ActualPagePath","undefined","tog_fullscreen","Status","StatusCode","Type","Message","AfterResponseAction","JSON","stringify","RedirectPath","pageOptions","sizePerPage","custom","defaultSorted","dataField","order","myInlineStyle","marginTop","HPageListColoumns","text","sort","dispatchHook","ButtonMsgLable","deleteName","editActionFun","deleteActionFun","paginationProps","paginationTableProps","toolkitProps","searchProps","length","baseProps","Data","pageMode"],"sources":["D:/GitProjects/Manthan/src/pages/Adminisrator/Page-Pages/PageList.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory, {\r\n  PaginationListStandalone,\r\n  PaginationProvider,\r\n} from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button, Col, Modal, Row } from \"reactstrap\";\r\nimport {\r\n  deleteHpagesUsingID,\r\n  deleteModuleIDSuccess,\r\n  editHPagesID,\r\n  GetHpageListData,\r\n  saveHPagesSuccess,\r\n  updateHPagesSuccess,\r\n} from \"../../../store/Administrator/HPagesRedux/actions\";\r\nimport Breadcrumbs from \"../../../components/Common/Breadcrumb\";\r\nimport HPageMaster from \"./PageMaster\";\r\nimport { AlertState } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { listPageCommonButtonFunction } from \"../../../components/Common/CmponentRelatedCommonFile/listPageCommonButtons\";\r\n\r\nexport default function PageList() {\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory()\r\n\r\n  const [userPageAccessState, setUserPageAccessState] = useState('');\r\n  const [modal_center, setmodal_center] = useState(false);\r\n  const [modal_fullscreen, setmodal_fullscreen] = useState(false);\r\n\r\n  function removeBodyCss() {\r\n    document.body.classList.add(\"no_padding\");\r\n  }\r\n  // var HPageListData = [];\r\n  const { HPageListData, editData, updateMessage, deleteModuleID, RoleAccessModifiedinSingleArray, PostAPIResponse } =\r\n    useSelector((state) => ({\r\n      HPageListData: state.H_Pages.HPagesListData,\r\n      editData: state.H_Pages.editData,\r\n      updateMessage: state.H_Pages.updateMessage,\r\n      deleteModuleID: state.H_Pages.deleteModuleID,\r\n      RoleAccessModifiedinSingleArray: state.Login.RoleAccessUpdateData,\r\n      PostAPIResponse: state.H_Pages.saveMessage,\r\n    }));\r\n\r\n  useEffect(() => {\r\n    const locationPath = history.location.pathname\r\n    let userAcc = RoleAccessModifiedinSingleArray.find((inx) => {\r\n      return (`/${inx.ActualPagePath}` === locationPath)\r\n    })\r\n    if (!(userAcc === undefined)) {\r\n      setUserPageAccessState(userAcc)\r\n    }\r\n  }, [RoleAccessModifiedinSingleArray])\r\n\r\n  useEffect(() => {\r\n    dispatch(dispatch(GetHpageListData()));\r\n  }, []);\r\n\r\n  function tog_fullscreen() {\r\n    setmodal_fullscreen(!modal_fullscreen);\r\n    removeBodyCss();\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (updateMessage.Status === true && updateMessage.StatusCode === 200) {\r\n      dispatch(updateHPagesSuccess({ Status: false }));\r\n      dispatch(\r\n        AlertState({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: updateMessage.Message,\r\n          AfterResponseAction: GetHpageListData,\r\n        })\r\n      );\r\n      tog_fullscreen();\r\n    } else if (updateMessage.Status === true) {\r\n      dispatch(updateHPagesSuccess({ Status: false }));\r\n      dispatch(\r\n        AlertState({\r\n          Type: 3,\r\n          Status: true,\r\n          Message: JSON.stringify(updateMessage.Message),\r\n\r\n        })\r\n      );\r\n    }\r\n  }, [updateMessage]);\r\n\r\n  useEffect(() => {\r\n    if (deleteModuleID.Status === true && deleteModuleID.StatusCode === 200) {\r\n      dispatch(deleteModuleIDSuccess({ Status: false }));\r\n      dispatch(\r\n        AlertState({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: deleteModuleID.Message,\r\n          AfterResponseAction: GetHpageListData,\r\n        })\r\n      );\r\n    } else if (deleteModuleID.Status === true) {\r\n      dispatch(deleteModuleIDSuccess({ Status: false }));\r\n      dispatch(\r\n        AlertState({\r\n          Type: 3,\r\n          Status: true,\r\n          Message: JSON.stringify(deleteModuleID.Message),\r\n        })\r\n      );\r\n    }\r\n  }, [deleteModuleID.Status]);\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    if ((PostAPIResponse.Status === true) && (PostAPIResponse.StatusCode === 200)) {\r\n      dispatch(saveHPagesSuccess({ Status: false }))\r\n      tog_fullscreen();\r\n      dispatch(GetHpageListData());\r\n      dispatch(AlertState({\r\n        Type: 1,\r\n        Status: true,\r\n        Message: PostAPIResponse.Message,\r\n      }))\r\n    }\r\n\r\n    else if ((PostAPIResponse.Status === true)) {\r\n      dispatch(saveHPagesSuccess({ Status: false }))\r\n      dispatch(AlertState({\r\n        Type: 4,\r\n        Status: true,\r\n        Message: JSON.stringify(PostAPIResponse.Message),\r\n        RedirectPath: false,\r\n        AfterResponseAction: false\r\n      }));\r\n    }\r\n  }, [PostAPIResponse.Status])\r\n\r\n  useEffect(() => {\r\n    if (editData.Status === true) {\r\n      tog_fullscreen();\r\n    }\r\n  }, [editData]);\r\n\r\ndebugger\r\n  const pageOptions = {\r\n    sizePerPage: 15,\r\n    // totalSize: HPageListData.length, // replace later with size(users),\r\n    custom: true,\r\n  };\r\n\r\n  const defaultSorted = [\r\n    {\r\n      dataField: \"Name\", // if dataField is not match to any column you defined, it will be ignored.\r\n      order: \"asc\", // desc or asc\r\n    },\r\n  ];\r\n\r\n  let myInlineStyle = {\r\n    marginTop: \"-10px\",\r\n  };\r\n\r\n  const HPageListColoumns = [\r\n    {\r\n      text: \"ID\",\r\n      dataField: \"id\",\r\n      sort: true,\r\n    }, {\r\n      text: \"Name\",\r\n      dataField: \"Name\",\r\n      sort: true,\r\n    },\r\n    {\r\n      text: \"Page Heading\",\r\n      dataField: \"PageHeading\",\r\n      sort: true,\r\n    },\r\n    {\r\n      text: \"Module Name\",\r\n      dataField: \"ModuleName\",\r\n      sort: true,\r\n    },\r\n    {\r\n      text: \"Display Index\",\r\n      dataField: \"DisplayIndex\",\r\n      sort: true,\r\n    },\r\n    {\r\n      text: \"Icon\",\r\n      dataField: \"Icon\",\r\n      sort: true,\r\n    },\r\n    {\r\n      text: \"Page Path\",\r\n      dataField: \"ActualPagePath\",\r\n      sort: true,\r\n    },\r\n    {\r\n      text: \"Active\",\r\n      dataField: \"isActive\",\r\n      sort: true,\r\n    },\r\n    // For Edit, Delete ,and View Button Common Code function\r\n    listPageCommonButtonFunction({\r\n      dispatchHook: dispatch,\r\n      ButtonMsgLable: \"Page \",\r\n      deleteName: \"Name\",\r\n      userPageAccessState: userPageAccessState,\r\n      editActionFun: editHPagesID,\r\n      deleteActionFun: deleteHpagesUsingID\r\n    })\r\n\r\n  ];\r\n\r\n  if (!(userPageAccessState === '')) {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"page-content\">\r\n          <MetaTags>\r\n            <title>Page List| FoodERP-React FrontEnd</title>\r\n          </MetaTags>\r\n          <PaginationProvider pagination={paginationFactory(pageOptions)}>\r\n            {({ paginationProps, paginationTableProps }) => (\r\n              <ToolkitProvider\r\n                keyField=\"id\"\r\n                data={HPageListData}\r\n                columns={HPageListColoumns}\r\n                search\r\n              >\r\n                {(toolkitProps) => (\r\n                  <React.Fragment>\r\n                    <Breadcrumbs\r\n                      title={\"Count :\"}\r\n                      breadcrumbItem={\"Page List\"}\r\n                      IsButtonVissible={true}\r\n                      SearchProps={toolkitProps.searchProps}\r\n                      IsSearchVissible={true}\r\n                      breadcrumbCount={`Page Count: ${HPageListData.length}`}\r\n                      // RedirctPath={ `/${btoa(\"PageMaster\")}`}\r\n                      RedirctPath={`/PageMaster`}\r\n                      isExcelButtonVisible={true}\r\n                      ExcelData={HPageListData}\r\n                    />\r\n                    <Row>\r\n                      <Col xl=\"12\">\r\n                        <div className=\"table-responsive\">\r\n                          <BootstrapTable\r\n                            keyField={\"id\"}\r\n                            responsive\r\n                            bordered={false}\r\n                            striped={false}\r\n                            defaultSorted={defaultSorted}\r\n                            // selectRow={selectRow}\r\n                            classes={\"table  table-bordered\"}\r\n                            {...toolkitProps.baseProps}\r\n                            {...paginationTableProps}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row className=\"align-items-md-center mt-30\">\r\n                      <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n                        <PaginationListStandalone {...paginationProps} />\r\n                      </Col>\r\n                    </Row>\r\n                  </React.Fragment>\r\n                )}\r\n              </ToolkitProvider>\r\n            )}\r\n          </PaginationProvider>\r\n        </div>\r\n\r\n        <Modal\r\n          isOpen={modal_fullscreen}\r\n          toggle={() => {\r\n            tog_fullscreen();\r\n          }}\r\n          size=\"fullscreen\"\r\n        >\r\n          <div className=\"modal-body\">\r\n            <HPageMaster state={editData.Data} relatatedPage={\"/PageMaster\"} pageMode={editData.pageMode} />\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                tog_fullscreen();\r\n              }}\r\n              className=\"btn btn-secondary \"\r\n              data-dismiss=\"modal\"\r\n            >\r\n              Close\r\n            </button>\r\n          </div>\r\n\r\n\r\n        </Modal>\r\n\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <React.Fragment></React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitProjects\\\\Manthan\\\\src\\\\pages\\\\Adminisrator\\\\PartyPages\\\\Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Card, CardBody, CardHeader, Col, Dropdown, DropdownItem, DropdownMenu, DropdownToggle, Input, Label, Modal, Row, UncontrolledDropdown } from 'reactstrap'; // Declare a new state variable, which we'll call \"menu\"\n// export default function TreeInput({ data = [] }) {\n//     const [menu, setMenu] = useState(false);\n//     const [dropOpen, setDropOpen] = useState(false);\n//     const [currentPrice, setCurrentPrice] = useState({ Name: '' });\n//     const dropOpen_ONClickHandler = price => {\n//         setCurrentPrice(price)\n//         setDropOpen(true)\n//     }\n//     const delete_PriceList = price => {\n//     }\n//     function sub_Price_Add_Handler() {\n//         var price = document.getElementById(\"txtsubprice\")\n//         if (price.value === \"\") {\n//             alert(\"please enter value\")\n//         } else {\n//         }\n//     }\n//     const toggle = () => {\n//         setMenu('');\n//     }\n//     function fun1(data1) {\n//         return (\n//             <div>\n//                 {\n//                     data1.map(tree => fun2(tree))\n//                 }\n//             </div>\n//         )\n//     }\n//     function fun2(data2) {\n//         // debugger\n//         return (\n//             // <li >\n//             <div style={{ paddingLeft: \"20px\" }} className={\"\"} >\n//                 <div className='row justify-content-center mt-n4 '>\n//                     <div className=' col-10'>\n//                         <Input type=\"text\" defaultValue={data2.Name} ></Input>\n//                     </div>\n//                     <div className=' col-1 al-end'> <input type=\"checkBox\" ></input></div>\n//                     <div className=' col-1 '>\n//                         <i className=\"mdi mdi-pencil font-size-12\"\n//                             onClick={e => setMenu(data2.id)}\n//                         ></i>\n//                         <Dropdown isOpen={menu === data2.id} toggle={toggle} className=\"d-inline-block\">\n//                             <DropdownToggle className=\"btn header-item \" tag=\"button\">\n//                             </DropdownToggle>\n//                             <DropdownMenu className=\"language-switch dropdown-menu-end\">\n//                                 <DropdownItem\n//                                     key={data2.id}\n//                                     onClick={(e) => { dropOpen_ONClickHandler(data2) }}\n//                                 // // className={`notify-item ${selectedLang === key ? \"active\" : \"none\"\n//                                 //     }`}\n//                                 >\n//                                     <span className=\"align-middle text-black\"\n//                                     >\n//                                         {\"Add Sub-Rate\"}\n//                                     </span>\n//                                 </DropdownItem>\n//                                 <DropdownItem\n//                                     key={data2.id}\n//                                     onClick={() => delete_PriceList(data2.id)}\n//                                 // // className={`notify-item ${selectedLang === key ? \"active\" : \"none\"\n//                                 //     }`}\n//                                 >\n//                                     <span className=\"align-middle text-danger\">\n//                                         {\"Delete\"}\n//                                     </span>\n//                                 </DropdownItem>\n//                             </DropdownMenu>\n//                         </Dropdown>\n//                     </div>\n//                     {data2.childern ? fun1(data2.childern) : null}\n//                 </div>\n//             </div>\n//         )\n//     }\n//     return (\n//         <div className={\"mt-3\"}>\n//             <Modal\n//                 isOpen={dropOpen}\n//                 toggle={() => { setDropOpen(!dropOpen) }}\n//                 size=\"sm\"\n//                 centered={true}\n//                 backdrop={'static'}\n//             >\n//                 <div className=\"modal-header\">\n//                     <h5 className=\"modal-title mt-0\">Add sub-Price </h5>\n//                     <button\n//                         type=\"button\"\n//                         onClick={() => {\n//                             setDropOpen(!dropOpen)\n//                         }}\n//                         className=\"close\"\n//                         data-dismiss=\"modal\"\n//                         aria-label=\"Close\"\n//                     >\n//                         <span aria-hidden=\"true\">&times;</span>\n//                     </button>\n//                 </div>\n//                 <div className=\"modal-body\">\n//                     <Row className=\"justify-content-md-left\">\n//                         <span >{currentPrice.Name}</span>\n//                         <Label htmlFor=\"horizontal-firstname-input\" className=\"col-4 col-form-label\" >IsDivision </Label>\n//                         <Col style={{ marginTop: '9px' }} >\n//                             <Input type=\"text\" id='txtsubprice' />\n//                         </Col>\n//                     </Row>\n//                 </div>\n//                 <div className=\"modal-footer\">\n//                     <button type=\"button\" className=\"btn btn-light\" onClick={() => {\n//                         setDropOpen(!dropOpen)\n//                     }}>Close</button>\n//                     <button type=\"button\" className=\"btn btn-primary\" onClick={() => { sub_Price_Add_Handler() }} >Add</button>\n//                 </div>\n//             </Modal>\n//             {fun1(data)}\n//         </div>\n//     )\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Tree(_ref) {\n  let {\n    data = []\n  } = _ref;\n  debugger;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-group\",\n        children: data.map(tree => /*#__PURE__*/_jsxDEV(TreeNode, {\n          node: tree\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 9\n  }, this);\n}\n_c = Tree;\n\nconst TreeNode = _ref2 => {\n  _s();\n\n  let {\n    node\n  } = _ref2;\n  const [childVisible, setchildVisible] = useState(false);\n  const haschild = node.children ? true : false;\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      //  className='d-flex'\n      className: \"list-group-item\" //  onClick={e => {\n      //     // setTreeValue(node.Name)\n      //     setchildVisible(v => !v)}}\n      ,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col d-tree-head\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this), node.label]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: /*#__PURE__*/_jsxDEV(Tree, {\n          data: node.children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TreeNode, \"sGl4Q1aVfOx0u6grJzUK6BfUPGQ=\");\n\n_c2 = TreeNode;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tree\");\n$RefreshReg$(_c2, \"TreeNode\");","map":{"version":3,"names":["React","useEffect","useState","Card","CardBody","CardHeader","Col","Dropdown","DropdownItem","DropdownMenu","DropdownToggle","Input","Label","Modal","Row","UncontrolledDropdown","Tree","data","map","tree","TreeNode","node","childVisible","setchildVisible","haschild","children","label"],"sources":["D:/GitProjects/Manthan/src/pages/Adminisrator/PartyPages/Tree.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Card, CardBody, CardHeader, Col, Dropdown, DropdownItem, DropdownMenu, DropdownToggle, Input, Label, Modal, Row, UncontrolledDropdown } from 'reactstrap';\r\n\r\n// Declare a new state variable, which we'll call \"menu\"\r\n\r\n// export default function TreeInput({ data = [] }) {\r\n\r\n//     const [menu, setMenu] = useState(false);\r\n//     const [dropOpen, setDropOpen] = useState(false);\r\n//     const [currentPrice, setCurrentPrice] = useState({ Name: '' });\r\n\r\n//     const dropOpen_ONClickHandler = price => {\r\n//         setCurrentPrice(price)\r\n//         setDropOpen(true)\r\n//     }\r\n//     const delete_PriceList = price => {\r\n\r\n//     }\r\n//     function sub_Price_Add_Handler() {\r\n//         var price = document.getElementById(\"txtsubprice\")\r\n//         if (price.value === \"\") {\r\n//             alert(\"please enter value\")\r\n//         } else {\r\n\r\n//         }\r\n//     }\r\n//     const toggle = () => {\r\n//         setMenu('');\r\n//     }\r\n\r\n//     function fun1(data1) {\r\n//         return (\r\n//             <div>\r\n//                 {\r\n//                     data1.map(tree => fun2(tree))\r\n//                 }\r\n//             </div>\r\n//         )\r\n//     }\r\n\r\n//     function fun2(data2) {\r\n//         // debugger\r\n//         return (\r\n//             // <li >\r\n//             <div style={{ paddingLeft: \"20px\" }} className={\"\"} >\r\n//                 <div className='row justify-content-center mt-n4 '>\r\n//                     <div className=' col-10'>\r\n//                         <Input type=\"text\" defaultValue={data2.Name} ></Input>\r\n\r\n//                     </div>\r\n//                     <div className=' col-1 al-end'> <input type=\"checkBox\" ></input></div>\r\n//                     <div className=' col-1 '>\r\n//                         <i className=\"mdi mdi-pencil font-size-12\"\r\n//                             onClick={e => setMenu(data2.id)}\r\n//                         ></i>\r\n//                         <Dropdown isOpen={menu === data2.id} toggle={toggle} className=\"d-inline-block\">\r\n//                             <DropdownToggle className=\"btn header-item \" tag=\"button\">\r\n\r\n//                             </DropdownToggle>\r\n//                             <DropdownMenu className=\"language-switch dropdown-menu-end\">\r\n\r\n//                                 <DropdownItem\r\n//                                     key={data2.id}\r\n//                                     onClick={(e) => { dropOpen_ONClickHandler(data2) }}\r\n//                                 // // className={`notify-item ${selectedLang === key ? \"active\" : \"none\"\r\n//                                 //     }`}\r\n//                                 >\r\n//                                     <span className=\"align-middle text-black\"\r\n//                                     >\r\n//                                         {\"Add Sub-Rate\"}\r\n//                                     </span>\r\n//                                 </DropdownItem>\r\n\r\n//                                 <DropdownItem\r\n//                                     key={data2.id}\r\n//                                     onClick={() => delete_PriceList(data2.id)}\r\n//                                 // // className={`notify-item ${selectedLang === key ? \"active\" : \"none\"\r\n//                                 //     }`}\r\n//                                 >\r\n//                                     <span className=\"align-middle text-danger\">\r\n//                                         {\"Delete\"}\r\n//                                     </span>\r\n//                                 </DropdownItem>\r\n\r\n//                             </DropdownMenu>\r\n\r\n//                         </Dropdown>\r\n//                     </div>\r\n\r\n//                     {data2.childern ? fun1(data2.childern) : null}\r\n//                 </div>\r\n//             </div>\r\n\r\n//         )\r\n\r\n//     }\r\n\r\n\r\n\r\n//     return (\r\n\r\n//         <div className={\"mt-3\"}>\r\n//             <Modal\r\n//                 isOpen={dropOpen}\r\n//                 toggle={() => { setDropOpen(!dropOpen) }}\r\n//                 size=\"sm\"\r\n//                 centered={true}\r\n//                 backdrop={'static'}\r\n//             >\r\n//                 <div className=\"modal-header\">\r\n//                     <h5 className=\"modal-title mt-0\">Add sub-Price </h5>\r\n//                     <button\r\n//                         type=\"button\"\r\n//                         onClick={() => {\r\n//                             setDropOpen(!dropOpen)\r\n//                         }}\r\n//                         className=\"close\"\r\n//                         data-dismiss=\"modal\"\r\n//                         aria-label=\"Close\"\r\n//                     >\r\n//                         <span aria-hidden=\"true\">&times;</span>\r\n//                     </button>\r\n//                 </div>\r\n//                 <div className=\"modal-body\">\r\n//                     <Row className=\"justify-content-md-left\">\r\n\r\n//                         <span >{currentPrice.Name}</span>\r\n\r\n//                         <Label htmlFor=\"horizontal-firstname-input\" className=\"col-4 col-form-label\" >IsDivision </Label>\r\n//                         <Col style={{ marginTop: '9px' }} >\r\n//                             <Input type=\"text\" id='txtsubprice' />\r\n//                         </Col>\r\n//                     </Row>\r\n//                 </div>\r\n//                 <div className=\"modal-footer\">\r\n//                     <button type=\"button\" className=\"btn btn-light\" onClick={() => {\r\n//                         setDropOpen(!dropOpen)\r\n//                     }}>Close</button>\r\n//                     <button type=\"button\" className=\"btn btn-primary\" onClick={() => { sub_Price_Add_Handler() }} >Add</button>\r\n//                 </div>\r\n\r\n//             </Modal>\r\n//             {fun1(data)}\r\n\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nexport default function Tree({ data = [] }) {\r\n    debugger\r\n    return (\r\n\r\n        <div>\r\n\r\n            <div >\r\n\r\n                <ul   className='list-group'>\r\n                    {data.map((tree) => (\r\n                        <TreeNode node={tree} />\r\n                    ))}\r\n\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst TreeNode = ({ node }) => {\r\n    const [childVisible, setchildVisible] = useState(false);\r\n    const haschild = node.children ? true : false;\r\n    return (\r\n        <li >\r\n            <div\r\n            //  className='d-flex'\r\n            className  =\"list-group-item\"\r\n            //  onClick={e => {\r\n            //     // setTreeValue(node.Name)\r\n            //     setchildVisible(v => !v)}}\r\n                >\r\n                {/* {haschild && (\r\n                    <div className={`d-inline d-tree-toggler ${childVisible ? \"active\" : ''}`}>\r\n                        <i class=\" fa-edit me-2\"></i>\r\n                    </div>\r\n                )} */}\r\n                <div className='col d-tree-head'>\r\n                    {/* <i className={`mr-1${\"fa fa-file\"}`}/> */}\r\n                </div>\r\n                    {node.label}\r\n            </div>\r\n            {/* {\r\n                haschild && childVisible && \r\n\r\n            } */}\r\n            <div >\r\n                    <ul >\r\n                        <Tree data={node.children} />\r\n                    </ul>\r\n                </div>\r\n        </li>\r\n    )\r\n\r\n}"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,UAAzB,EAAqCC,GAArC,EAA0CC,QAA1C,EAAoDC,YAApD,EAAkEC,YAAlE,EAAgFC,cAAhF,EAAgGC,KAAhG,EAAuGC,KAAvG,EAA8GC,KAA9G,EAAqHC,GAArH,EAA0HC,oBAA1H,QAAsJ,YAAteAAe,SAASC,IAAT,OAA6B;EAAA,IAAf;IAAEC,IAAI,GAAG;EAAT,CAAe;EACxC;EACA,oBAEI;IAAA,uBAEI;MAAA,uBAEI;QAAM,SAAS,EAAC,YAAhB;QAAA,UACKA,IAAI,CAACC,GAAL,CAAUC,IAAD,iBACN,QAAC,QAAD;UAAU,IAAI,EAAEA;QAAhB;UAAA;UAAA;UAAA;QAAA,QADH;MADL;QAAA;QAAA;QAAA;MAAA;IAFJ;MAAA;MAAA;MAAA;IAAA;EAFJ;IAAA;IAAA;IAAA;EAAA,QAFJ;AAeH;KAjBuBH,I;;AAmBxB,MAAMI,QAAQ,GAAG,SAAc;EAAA;;EAAA,IAAb;IAAEC;EAAF,CAAa;EAC3B,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCrB,QAAQ,CAAC,KAAD,CAAhD;EACA,MAAMsB,QAAQ,GAAGH,IAAI,CAACI,QAAL,GAAgB,IAAhB,GAAuB,KAAxC;EACA,oBACI;IAAA,wBACI;MACA;MACA,SAAS,EAAG,iBAFZ,CAGA;MACA;MACA;MALA;MAAA,wBAYI;QAAK,SAAS,EAAC;MAAf;QAAA;QAAA;QAAA;MAAA,QAZJ,EAeSJ,IAAI,CAACK,KAfd;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAsBI;MAAA,uBACQ;QAAA,uBACI,QAAC,IAAD;UAAM,IAAI,EAAEL,IAAI,CAACI;QAAjB;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA;IADR;MAAA;MAAA;MAAA;IAAA,QAtBJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AA+BH,CAlCD;;GAAML,Q;;MAAAA,Q"},"metadata":{},"sourceType":"module"}
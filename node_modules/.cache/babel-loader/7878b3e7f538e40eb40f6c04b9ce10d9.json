{"ast":null,"code":"import i18n from \"i18next\";\nimport detector from \"i18next-browser-languagedetector\";\nimport { initReactI18next } from \"react-i18next\";\nimport translationGr from \"./locales/gr/translation.json\";\nimport translationIT from \"./locales/it/translation.json\";\nimport translationRS from \"./locales/rs/translation.json\";\nimport translationSP from \"./locales/sp/translation.json\";\nimport translationENG from \"./locales/eng/translation.json\"; // the translations\n\nconst resources = {\n  gr: {\n    translation: translationGr\n  },\n  it: {\n    translation: translationIT\n  },\n  rs: {\n    translation: translationRS\n  },\n  sp: {\n    translation: translationSP\n  },\n  eng: {\n    translation: translationENG\n  }\n};\nconst language = localStorage.getItem(\"I18N_LANGUAGE\");\n\nif (!language) {\n  localStorage.setItem(\"I18N_LANGUAGE\", \"en\");\n}\n\ni18n.use(detector).use(initReactI18next) // passes i18n down to react-i18next\n.init({\n  resources,\n  lng: localStorage.getItem(\"I18N_LANGUAGE\") || \"en\",\n  fallbackLng: \"en\",\n  // use en if detected lng is not available\n  keySeparator: false,\n  // we do not use keys in form messages.welcome\n  interpolation: {\n    escapeValue: false // react already safes from xss\n\n  }\n});\nexport default i18n;","map":{"version":3,"names":["i18n","detector","initReactI18next","translationGr","translationIT","translationRS","translationSP","translationENG","resources","gr","translation","it","rs","sp","eng","language","localStorage","getItem","setItem","use","init","lng","fallbackLng","keySeparator","interpolation","escapeValue"],"sources":["D:/GitProjects/Manthan/src/i18n.js"],"sourcesContent":["import i18n from \"i18next\"\r\nimport detector from \"i18next-browser-languagedetector\"\r\nimport { initReactI18next } from \"react-i18next\"\r\n\r\nimport translationGr from \"./locales/gr/translation.json\"\r\nimport translationIT from \"./locales/it/translation.json\"\r\nimport translationRS from \"./locales/rs/translation.json\"\r\nimport translationSP from \"./locales/sp/translation.json\"\r\nimport translationENG from \"./locales/eng/translation.json\"\r\n\r\n// the translations\r\nconst resources = {\r\n  gr: {\r\n    translation: translationGr,\r\n  },\r\n  it: {\r\n    translation: translationIT,\r\n  },\r\n  rs: {\r\n    translation: translationRS,\r\n  },\r\n  sp: {\r\n    translation: translationSP,\r\n  },\r\n  eng: {\r\n    translation: translationENG,\r\n  },\r\n}\r\n\r\nconst language = localStorage.getItem(\"I18N_LANGUAGE\")\r\nif (!language) {\r\n  localStorage.setItem(\"I18N_LANGUAGE\", \"en\")\r\n}\r\n\r\ni18n\r\n  .use(detector)\r\n  .use(initReactI18next) // passes i18n down to react-i18next\r\n  .init({\r\n    resources,\r\n    lng: localStorage.getItem(\"I18N_LANGUAGE\") || \"en\",\r\n    fallbackLng: \"en\", // use en if detected lng is not available\r\n\r\n    keySeparator: false, // we do not use keys in form messages.welcome\r\n\r\n    interpolation: {\r\n      escapeValue: false, // react already safes from xss\r\n    },\r\n  })\r\n\r\nexport default i18n\r\n"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAOC,QAAP,MAAqB,kCAArB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AAEA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,cAAP,MAA2B,gCAA3B,C,CAEA;;AACA,MAAMC,SAAS,GAAG;EAChBC,EAAE,EAAE;IACFC,WAAW,EAAEP;EADX,CADY;EAIhBQ,EAAE,EAAE;IACFD,WAAW,EAAEN;EADX,CAJY;EAOhBQ,EAAE,EAAE;IACFF,WAAW,EAAEL;EADX,CAPY;EAUhBQ,EAAE,EAAE;IACFH,WAAW,EAAEJ;EADX,CAVY;EAahBQ,GAAG,EAAE;IACHJ,WAAW,EAAEH;EADV;AAbW,CAAlB;AAkBA,MAAMQ,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAjB;;AACA,IAAI,CAACF,QAAL,EAAe;EACbC,YAAY,CAACE,OAAb,CAAqB,eAArB,EAAsC,IAAtC;AACD;;AAEDlB,IAAI,CACDmB,GADH,CACOlB,QADP,EAEGkB,GAFH,CAEOjB,gBAFP,EAEyB;AAFzB,CAGGkB,IAHH,CAGQ;EACJZ,SADI;EAEJa,GAAG,EAAEL,YAAY,CAACC,OAAb,CAAqB,eAArB,KAAyC,IAF1C;EAGJK,WAAW,EAAE,IAHT;EAGe;EAEnBC,YAAY,EAAE,KALV;EAKiB;EAErBC,aAAa,EAAE;IACbC,WAAW,EAAE,KADA,CACO;;EADP;AAPX,CAHR;AAeA,eAAezB,IAAf"},"metadata":{},"sourceType":"module"}
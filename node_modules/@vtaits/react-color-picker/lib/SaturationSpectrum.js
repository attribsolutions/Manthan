"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _color = require("./utils/color");

var _common = _interopRequireWildcard(require("./utils/common"));

var _defaultColor = _interopRequireDefault(require("./defaultColor"));

var _validate = _interopRequireDefault(require("./utils/validate"));

var _toColorValue = _interopRequireDefault(require("./utils/toColorValue"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var getSaturationForPoint = function getSaturationForPoint(point) {
  return point.x / point.width;
};

var getColorValueForPoint = function getColorValueForPoint(point) {
  return (point.height - point.y) / point.height;
};

var prepareBackgroundColor = function prepareBackgroundColor(color) {
  var hsv = color;
  var col = (0, _color.fromRatio)({
    h: hsv.h % 360 / 360,
    s: 1,
    v: 1
  });
  return col.toRgbString();
};

var SaturationSpectrum = /*#__PURE__*/function (_BaseComponent) {
  (0, _inherits2.default)(SaturationSpectrum, _BaseComponent);

  var _super = _createSuper(SaturationSpectrum);

  function SaturationSpectrum() {
    var _this;

    (0, _classCallCheck2.default)(this, SaturationSpectrum);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", _objectSpread(_objectSpread({}, _common.baseInitialState), {}, {
      pointerTop: null,
      pointerLeft: null
    }));
    return _this;
  }

  (0, _createClass2.default)(SaturationSpectrum, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.mounted = true;
      this.updateDragPositionIf();
    }
  }, {
    key: "isComponentMounted",
    value: function isComponentMounted() {
      return this.mounted;
    }
  }, {
    key: "updateDragPositionIf",
    value: function updateDragPositionIf() {
      if (!this.props.height || !this.props.width) {
        this.setState({});
      }
    }
  }, {
    key: "getDragPosition",
    value: function getDragPosition() {
      var _this$props = this.props,
          value = _this$props.value,
          pointerSize = _this$props.pointerSize;
      var _this$props2 = this.props,
          width = _this$props2.width,
          height = _this$props2.height;
      var mouseDown = this.state.mouseDown;
      var sizeDefined = width && height;

      if (!sizeDefined && !this.isComponentMounted()) {
        return null;
      }

      var region;

      if (!sizeDefined) {
        region = this.getDOMRegion();
        height = height || region.getHeight();
        width = width || region.getWidth();
      }

      var x = this.hsv.s * width;
      var y = height - this.hsv.v * height;
      var size = pointerSize;
      var diff = Math.floor(size / 2);

      if (value && mouseDown && !Number.isNaN(mouseDown.x)) {
        x = mouseDown.x;
      }

      return {
        left: x - diff,
        top: y - diff
      };
    }
  }, {
    key: "prepareProps",
    value: function prepareProps(thisProps) {
      var props = _objectSpread({}, thisProps);

      var color = props.value || props.defaultColor;
      props.color = color;
      this.hsv = (0, _toColorValue.default)(color);
      props.style = this.prepareStyle(props);
      props.className = (0, _classnames.default)(thisProps.className, 'react-color-picker__saturation-spectrum');
      return props;
    }
  }, {
    key: "prepareStyle",
    value: function prepareStyle(props) {
      var style = _objectSpread({}, props.style);

      if (props.height) {
        style.height = props.height;
      }

      if (props.width) {
        style.width = props.width;
      }

      style.backgroundColor = prepareBackgroundColor(this.hsv);
      return style;
    }
  }, {
    key: "render",
    value: function render() {
      var pointerSize = this.props.pointerSize;
      var props = this.prepareProps(this.props);
      var dragStyle = {
        width: pointerSize,
        height: pointerSize
      };
      var dragPos = this.getDragPosition();

      if (dragPos) {
        dragStyle.top = dragPos.top;
        dragStyle.left = dragPos.left;
        dragStyle.display = 'block';
      }

      return /*#__PURE__*/_react.default.createElement("div", {
        className: props.className,
        style: props.style,
        onMouseDown: this.onMouseDown,
        role: "button",
        ref: this.rootRef,
        tabIndex: 0
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "react-color-picker__saturation-white"
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "react-color-picker__saturation-black"
      })), /*#__PURE__*/_react.default.createElement("div", {
        className: "react-color-picker__saturation-drag",
        style: dragStyle
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "react-color-picker__saturation-inner"
      })));
    }
  }, {
    key: "updateColor",
    value: function updateColor(point) {
      var newPoint = (0, _validate.default)(point);
      this.hsv.s = getSaturationForPoint(newPoint);
      this.hsv.v = getColorValueForPoint(newPoint);

      var newHsv = _objectSpread({}, this.hsv);

      this.hsv = newHsv;
      return newHsv;
    }
  }]);
  return SaturationSpectrum;
}(_common.default);

(0, _defineProperty2.default)(SaturationSpectrum, "propTypes", _objectSpread(_objectSpread({}, _common.basePropTypes), {}, {
  value: _propTypes.default.any,
  height: _propTypes.default.number,
  width: _propTypes.default.number,
  pointerSize: _propTypes.default.number,
  defaultColor: _propTypes.default.any,
  isSaturationSpectrum: _propTypes.default.bool
}));
(0, _defineProperty2.default)(SaturationSpectrum, "defaultProps", _objectSpread(_objectSpread({}, _common.baseDefaultProps), {}, {
  value: null,
  height: 300,
  width: 300,
  pointerSize: 7,
  defaultColor: _defaultColor.default,
  isSaturationSpectrum: true
}));
var _default = SaturationSpectrum;
exports.default = _default;
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import PropTypes from 'prop-types';
import BaseComponent, { baseInitialState, basePropTypes, baseDefaultProps } from './utils/common';
import DEFAULT_COLOR from './defaultColor';
import VALIDATE from './utils/validate';
import toColorValue from './utils/toColorValue';

var HueSpectrum = /*#__PURE__*/function (_BaseComponent) {
  _inherits(HueSpectrum, _BaseComponent);

  var _super = _createSuper(HueSpectrum);

  function HueSpectrum() {
    var _this;

    _classCallCheck(this, HueSpectrum);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", _objectSpread(_objectSpread({}, baseInitialState), {}, {
      h: 0
    }));

    return _this;
  }

  _createClass(HueSpectrum, [{
    key: "isComponentMounted",
    value: function isComponentMounted() {
      return this.mounted;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.mounted = true;
      this.updateDragPositionIf();
    }
  }, {
    key: "updateDragPositionIf",
    value: function updateDragPositionIf() {
      if (!this.props.height) {
        this.setState({});
      }
    }
  }, {
    key: "getDragPosition",
    value: function getDragPosition() {
      var _this$props = this.props,
          height = _this$props.height,
          pointerSize = _this$props.pointerSize;

      if (!height && !this.isComponentMounted()) {
        return null;
      }

      var computedHeight = height || this.getDOMRegion().getHeight();
      var size = pointerSize;
      var pos = Math.round(this.hsv.h * computedHeight / 360);
      var diff = Math.round(size / 2);
      return pos - diff;
    }
  }, {
    key: "updateColor",
    value: function updateColor(point) {
      var newPoint = VALIDATE(point);
      this.hsv.h = newPoint.y * 360 / newPoint.height;

      var newHsv = _objectSpread({}, this.hsv);

      var newH;

      if (this.hsv.h !== 0) {
        newH = this.hsv.h;
      }

      newH = this.hsv.h !== 0 ? this.hsv.h : 0;
      this.setState({
        h: newH
      });
      this.hsv = newHsv;
      return newHsv;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          style = _this$props2.style,
          value = _this$props2.value,
          defaultColor = _this$props2.defaultColor,
          pointerSize = _this$props2.pointerSize,
          height = _this$props2.height,
          width = _this$props2.width;
      var h = this.state.h;
      this.hsv = toColorValue(value || defaultColor);

      if (h === 360 && !this.hsv.h) {
        // in order to show bottom red as well on drag
        this.hsv.h = 360;
      }

      var rootStyle = _objectSpread({}, style);

      if (height) {
        rootStyle.height = height;
      }

      if (width) {
        rootStyle.width = width;
      }

      var dragStyle = {
        height: pointerSize
      };
      var dragPos = this.getDragPosition();

      if (dragPos !== null) {
        dragStyle.top = dragPos;
        dragStyle.display = 'block';
      }

      return /*#__PURE__*/React.createElement("div", {
        className: "react-color-picker__hue-spectrum",
        style: rootStyle,
        onMouseDown: this.onMouseDown,
        role: "button",
        ref: this.rootRef,
        tabIndex: 0
      }, /*#__PURE__*/React.createElement("div", {
        className: "react-color-picker__hue-drag",
        style: dragStyle
      }, /*#__PURE__*/React.createElement("div", {
        className: "react-color-picker__hue-inner"
      })));
    }
  }]);

  return HueSpectrum;
}(BaseComponent);

_defineProperty(HueSpectrum, "propTypes", _objectSpread(_objectSpread({}, basePropTypes), {}, {
  value: PropTypes.any,
  height: PropTypes.number,
  width: PropTypes.number,
  pointerSize: PropTypes.number,
  defaultColor: PropTypes.any,
  isHueSpectrum: PropTypes.bool
}));

_defineProperty(HueSpectrum, "defaultProps", _objectSpread(_objectSpread({}, baseDefaultProps), {}, {
  value: null,
  height: 300,
  width: 30,
  pointerSize: 3,
  defaultColor: DEFAULT_COLOR,
  isHueSpectrum: true
}));

export default HueSpectrum;
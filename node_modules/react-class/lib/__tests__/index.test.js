'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _setup = require('./setup');

var _setup2 = _interopRequireDefault(_setup);

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

var _enzyme = require('enzyme');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var emptyFn = function emptyFn() {};

var HelloWorldUnbound = function (_React$Component) {
  _inherits(HelloWorldUnbound, _React$Component);

  function HelloWorldUnbound(props) {
    _classCallCheck(this, HelloWorldUnbound);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(HelloWorldUnbound).call(this, props));

    _this.state = {
      message: 'world'
    };
    return _this;
  }

  _createClass(HelloWorldUnbound, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        'Hello ',
        this.state.message
      );
    }
  }, {
    key: 'setMessage',
    value: function setMessage(message, callback) {
      this.setState({
        message: message
      }, callback);
    }
  }]);

  return HelloWorldUnbound;
}(_react2.default.Component);

var HelloWorldBound = function (_Component) {
  _inherits(HelloWorldBound, _Component);

  function HelloWorldBound(props) {
    _classCallCheck(this, HelloWorldBound);

    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(HelloWorldBound).call(this, props));

    _this2.state = {
      message: 'world'
    };
    return _this2;
  }

  _createClass(HelloWorldBound, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        'Hello ',
        this.state.message
      );
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      return this;
    }
  }, {
    key: 'setMessage',
    value: function setMessage(message, callback) {
      this.setState({
        message: message
      }, typeof callback == 'function' ? callback : emptyFn);
    }
  }, {
    key: 'returnThis',
    value: function returnThis() {
      return this;
    }
  }]);

  return HelloWorldBound;
}(_index2.default);

_ava2.default.cb('test unbound throws', function (t) {
  var wrapper = (0, _enzyme.mount)(_react2.default.createElement(HelloWorldUnbound, null));
  var unbound = wrapper.get(0);
  var setMessage = unbound.setMessage;

  try {
    t.is(wrapper.text(), 'Hello world', 'Initial text is correct');
    unbound.setMessage('x', function () {
      t.is(wrapper.text(), 'Hello x', 'Updated text is correct');
      setMessage('a'); // this is expected to throw
      t.fail();
      t.end();
    });
  } catch (ex) {
    t.pass();
    t.end();
  }
});

_ava2.default.cb('test bound passes', function (t) {
  var wrapper = (0, _enzyme.mount)(_react2.default.createElement(HelloWorldBound, null));
  var bound = wrapper.get(0);
  var setMessage = bound.setMessage;

  try {
    t.is(wrapper.text(), 'Hello world', 'The original message is correct');

    setMessage('bound', function () {
      t.is(wrapper.text(), 'Hello bound', 'The message was changed');
      t.end();
    });
  } catch (ex) {
    t.fail();
    t.end();
  }
});

(0, _ava2.default)('Test componentWillMount is not bound!', function (t) {
  var wrapper = (0, _enzyme.mount)(_react2.default.createElement(HelloWorldBound, null));
  var bound = wrapper.get(0);
  var componentWillMount = bound.componentWillMount;
  var returnThis = bound.returnThis;

  t.false(componentWillMount() === bound, 'componentWillMount is not bound');
  t.true(returnThis() === bound, 'returnThis is properly bound');
});
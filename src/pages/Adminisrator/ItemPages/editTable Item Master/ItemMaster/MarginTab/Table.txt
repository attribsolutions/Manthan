import {
    Button,
    Card,
    CardBody,
    Col,
    FormGroup,
    Input,
    Label,
    Row,
    Table,
  } from "reactstrap";
  import Flatpickr from "react-flatpickr";
  import Select from "react-select";
  import { useDispatch, useSelector } from "react-redux";
  
  
  import React, { useEffect, useState } from "react";
  import { Tbody, Thead } from "react-super-responsive-table";
  
  import cellEditFactory, { Type } from 'react-bootstrap-table2-editor';
  import ToolkitProvider, { Search } from "react-bootstrap-table2-toolkit";
  import BootstrapTable from "react-bootstrap-table-next";
  import paginationFactory, { PaginationListStandalone, PaginationProvider } from "react-bootstrap-table2-paginator";
  
  function MarginTable(props) {
  
  
  
    const { Party, PriceList } = useSelector((state) => ({
        PriceList: state.ItemMastersReducer.PriceList,
      Party: state.ItemMastersReducer.Party,
    }));
  
  
    const Party_DropdownOptions = Party.map((data) => ({
      value: data.id,
      label: data.Name,
    }));
  
    const PriceList_DropdownOptions = PriceList.map((data) => ({
        value: data.id,
        label: data.Name
    }));
  
    const ondeleteHandeler = (ele) => {
  
      var fil = props.tableData.filter((i) => {
        return !(i.id === ele.id);
      });
      props.func(fil);
  
    };
    const partyOnchange = (e, row) => {
      row["PartyName"] = e.label
      row["Party"] = e.value;
      row["ispty"] = true
    }
  
    const priceListOnchange = (e, row,editorProps, value, column, rowIndex, columnIndex) => {
    
      row["PriceListName"] = e.label
      row["PriceList"] = e.value;
      row["ispty"] = true
      row.onUpdate=true
  
    }
  
    const effectiveDateOnchange = (e, row) => {
      
      row["EffectiveDate"] = e
      row["ispty"] = true
    }
  
    const margin_onChange = (e, row, v) => {
      
      row["Margin"] = e.target.value
      row["ispty"] = true
  
    }
  
    const pagesListColumns = [
      {
        text: "PriceList",
        dataField: "PriceListName",
        sort: true,
        formatter: (value, row) => (
           <div style={{ backgroundColor: "#FFFAFA" }}>
          <span className={`${row.ispty ? "text-info" : null}`}>
            {value}
          </span>
        </div>
        ),
        editorRenderer: (editorProps, value, row, column, rowIndex, columnIndex) => (
          <>
            <Select
              defaultValue={{
                label: row.PriceListName,
                value: row.PriceList
              }}
              className="react-dropdown"
              // onChange={(v, e) => onChangeSelect({ e, v, state, setState })}
              classNamePrefix="dropdown"
              options={PriceList_DropdownOptions}
              name="Division"
              styles={{
                control: base => ({
                  ...base,
                  // border: isError.Address.length > 0 ? '1px solid red' : '',
  
                })
              }}
              onChange={(e) => priceListOnchange(e, row,editorProps, value, column, rowIndex, columnIndex)}
            />
          </>
  
  
        )
      },
      {
        text: "Party",
        dataField: "PartyName",
        sort: true,
        formatter: (value, row) => (
          <div style={{ backgroundColor: "#FFFAFA" }}>
            <span className={`${row.ispty ? "text-info" : null}`}>
              {value}
            </span>
          </div>
        ),
  
        editorRenderer: (editorProps, value, row, column, rowIndex, columnIndex) => (
          <>
            <Select
              defaultValue={{
                label: row.PartyName,
                value: row.Party
              }}
              className="react-dropdown"
              // onChange={(v, e) => onChangeSelect({ e, v, state, setState })}
              classNamePrefix="dropdown"
              options={Party_DropdownOptions}
              name="Party"
              styles={{
                control: base => ({
                  ...base,
                  // border: isError.Address.length > 0 ? '1px solid red' : '',
  
                })
              }}
              onChange={(e) => partyOnchange(e, row)}
            />
          </>
        )
      },
  
  
      {
        text: "EffectiveDate",
        dataField: "EffectiveDate",
        sort: true,
        formatter: (value, row) => (
          <div style={{ backgroundColor: "#FFFAFA" }}>
            <span className={`${row.ispty ? "text-info" : null}`}>
              {value}
            </span>
          </div>
        ),
        editorRenderer: (editorProps, value, row, column, rowIndex, columnIndex) => (
  
          <>
  
            <Flatpickr
              
              defaultValue={value}
              className="form-control d-block p-2 bg-white text-dark"
              placeholder="YYYY-MM-DD"
              autoComplete="0,''"
              options={{
                altInput: true,
                altFormat: "F j, Y",
                dateFormat: "Y-m-d",
                minDate: new Date().fp_incr("n"),
                maxDate: new Date().fp_incr('') // 14 days from now"0,''"
              }}
              // onChange={(y, v, e) => { onChangeDate({ e, v, state, setState }) }}
              onChange={(y, e) => effectiveDateOnchange(e, row)}
            />
          </>
  
  
        )
      },
  
      {
        text: "Margin",
        dataField: "Margin",
        sort: true,
        formatter: (value, row) => (
          // <div style={{ backgroundColor: "#FFFAFA" }}>
          <span >
            {value}
          </span>
          // </div>
        ),
        editorRenderer: (editorProps, value, row, column, rowIndex, columnIndex) => (
  
          <Input type="text" defaultValue={value} onChange={(e) => margin_onChange(e, row, editorProps)} />
        ),
        style: (row, rowIndex) => {
          const backgroundColor = rowIndex > 1 ? '#00BFFF' : '#00FFFF';
          return { backgroundColor }
        }
      },
      {
        text: "Action",
        dataField: "",
        editable: false,
        formatter: (value, row) => (
          <div style={{ backgroundColor: "#FFFAFA" }}>
  
            <Button
              className="badge badge-soft-danger font-size-12 btn btn-danger 
            waves-effect waves-light w-xxs border border-light"
              data-mdb-toggle="tooltip"
              data-mdb-placement="top"
              title="Delete Party Type"
              onClick={(e) => ondeleteHandeler(row)}
            >
              <i className="mdi mdi-delete font-size-16"></i>
              {/* <i className="fas fa-remove me-2"></i> */}
            </Button>
            {/* <Button
              className="badge badge-soft-success font-size-12 btn btn-success waves-effect waves-light w-xxs border border-light"
              // className="btn btn-primary w-md"
              data-mdb-toggle="tooltip"
              data-mdb-placement="top"
              title="Delete Party Type"
              onClick={(e) => ondeleteHandeler(row)}
            >
              <i className="fas fa-save me-1 font-size-16"></i>
            </Button> */}
          </div>
        ),
  
      },
  
    ];
  
    const selectRow = {
      // mode: 'checkbox',
      // clickToSelect: true,
      // style: (row, rowIndex) => {
      //   const backgroundColor = rowIndex > 1 ? '#00BFFF' : '#00FFFF';
      //   return { backgroundColor };
      // }
    };
  
    const defaultSorted = [
      {
        dataField: "PriceList", // if dataField is not match to any column you defined, it will be ignored.
        order: "asc", // desc or asc
      },
    ];
  
    const pageOptions = {
      sizePerPage: 10,
      // totalSize: props.tableData.length,
      custom: true,
    };
  
    return (
      <PaginationProvider pagination={paginationFactory(pageOptions)}>
        {({ paginationProps, paginationTableProps }) => (
          <ToolkitProvider
            keyField="id"
            defaultSorted={defaultSorted}
            data={props.tableData}
            columns={pagesListColumns}
            search
          >
            {(toolkitProps) => (
              <React.Fragment>
  
                <Row>
                  <Col xl="12">
                    <div className="table">
                      <BootstrapTable
                        keyField={"id"}
                        responsive
                        bordered={false}
                        striped={true}
                        cellEdit={cellEditFactory({ mode: 'dbclick', blurToSave: true })}
  
                        classes={"table  table-bordered"}
                        // options = {
                        //  { noDataText: (<i className="fa fa-circle-o-notch fa-spin" style={{'fontSize': '24px'}}></i>)
                        // }}
                        noDataIndication={ <div className="text-danger 
                        ">"Please Add One Row In Table"</div>}
                        {...toolkitProps.baseProps}
                        {...paginationTableProps}
                      />
                    </div>
                  </Col>
                </Row>
                <Row className="align-items-md-center mt-30">
                  <Col className="pagination pagination-rounded justify-content-end mb-2">
                    <PaginationListStandalone {...paginationProps} />
                  </Col>
                </Row>
              </React.Fragment>
            )}
          </ToolkitProvider>
        )}
  
      </PaginationProvider>
    )
  }
  export default MarginTable
  
  // className={`${row.ispty ? "text-info" : null}`}